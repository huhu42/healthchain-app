"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@coinbase";
exports.ids = ["vendor-chunks/@coinbase"];
exports.modules = {

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js":
/*!****************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/client/api.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Coinbase Platform API\n * This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.\n *\n * The version of the OpenAPI document: 0.0.1-alpha\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OnchainIdentityApiAxiosParamCreator = exports.NetworksApi = exports.NetworksApiFactory = exports.NetworksApiFp = exports.NetworksApiAxiosParamCreator = exports.FundApi = exports.FundApiFactory = exports.FundApiFp = exports.FundApiAxiosParamCreator = exports.ExternalAddressesApi = exports.ExternalAddressesApiFactory = exports.ExternalAddressesApiFp = exports.ExternalAddressesApiAxiosParamCreator = exports.ContractInvocationsApi = exports.ContractInvocationsApiFactory = exports.ContractInvocationsApiFp = exports.ContractInvocationsApiAxiosParamCreator = exports.ContractEventsApi = exports.ContractEventsApiFactory = exports.ContractEventsApiFp = exports.ContractEventsApiAxiosParamCreator = exports.BalanceHistoryApi = exports.BalanceHistoryApiFactory = exports.BalanceHistoryApiFp = exports.BalanceHistoryApiAxiosParamCreator = exports.AssetsApi = exports.AssetsApiFactory = exports.AssetsApiFp = exports.AssetsApiAxiosParamCreator = exports.AddressesApi = exports.AddressesApiFactory = exports.AddressesApiFp = exports.AddressesApiAxiosParamCreator = exports.WebhookEventType = exports.WalletServerSignerStatusEnum = exports.ValidatorStatus = exports.TransferStatusEnum = exports.TransactionType = exports.TransactionStatusEnum = exports.TokenTransferType = exports.StakingRewardFormat = exports.StakingRewardStateEnum = exports.StakingOperationStatusEnum = exports.SponsoredSendStatusEnum = exports.SolidityValueTypeEnum = exports.SmartContractType = exports.PayloadSignatureStatusEnum = exports.NetworkIdentifier = exports.NetworkProtocolFamilyEnum = exports.FundOperationStatusEnum = void 0;\nexports.WebhooksApi = exports.WebhooksApiFactory = exports.WebhooksApiFp = exports.WebhooksApiAxiosParamCreator = exports.WalletsApi = exports.WalletsApiFactory = exports.WalletsApiFp = exports.WalletsApiAxiosParamCreator = exports.WalletStakeApi = exports.WalletStakeApiFactory = exports.WalletStakeApiFp = exports.WalletStakeApiAxiosParamCreator = exports.ValidatorsApi = exports.ValidatorsApiFactory = exports.ValidatorsApiFp = exports.ValidatorsApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TransfersApi = exports.TransfersApiFactory = exports.TransfersApiFp = exports.TransfersApiAxiosParamCreator = exports.TransactionHistoryApi = exports.TransactionHistoryApiFactory = exports.TransactionHistoryApiFp = exports.TransactionHistoryApiAxiosParamCreator = exports.TradesApi = exports.TradesApiFactory = exports.TradesApiFp = exports.TradesApiAxiosParamCreator = exports.StakeApi = exports.StakeApiFactory = exports.StakeApiFp = exports.StakeApiAxiosParamCreator = exports.SmartContractsApi = exports.SmartContractsApiFactory = exports.SmartContractsApiFp = exports.SmartContractsApiAxiosParamCreator = exports.ServerSignersApi = exports.ServerSignersApiFactory = exports.ServerSignersApiFp = exports.ServerSignersApiAxiosParamCreator = exports.ResolveIdentityByAddressRolesEnum = exports.OnchainIdentityApi = exports.OnchainIdentityApiFactory = exports.OnchainIdentityApiFp = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/base.js\");\nexports.FundOperationStatusEnum = {\n    Pending: 'pending',\n    Complete: 'complete',\n    Failed: 'failed'\n};\nexports.NetworkProtocolFamilyEnum = {\n    Evm: 'evm',\n    Solana: 'solana'\n};\n/**\n * The ID of the blockchain network. This is unique across all networks, and takes the form of `<blockchain>-<network>`.\n * @export\n * @enum {string}\n */\nexports.NetworkIdentifier = {\n    BaseSepolia: 'base-sepolia',\n    BaseMainnet: 'base-mainnet',\n    EthereumHolesky: 'ethereum-holesky',\n    EthereumMainnet: 'ethereum-mainnet',\n    PolygonMainnet: 'polygon-mainnet',\n    SolanaDevnet: 'solana-devnet',\n    SolanaMainnet: 'solana-mainnet',\n    ArbitrumMainnet: 'arbitrum-mainnet'\n};\nexports.PayloadSignatureStatusEnum = {\n    Pending: 'pending',\n    Signed: 'signed',\n    Failed: 'failed'\n};\n/**\n * The type of the smart contract.\n * @export\n * @enum {string}\n */\nexports.SmartContractType = {\n    Erc20: 'erc20',\n    Erc721: 'erc721',\n    Erc1155: 'erc1155'\n};\nexports.SolidityValueTypeEnum = {\n    Uint8: 'uint8',\n    Uint16: 'uint16',\n    Uint32: 'uint32',\n    Uint64: 'uint64',\n    Uint128: 'uint128',\n    Uint256: 'uint256',\n    Int8: 'int8',\n    Int16: 'int16',\n    Int32: 'int32',\n    Int64: 'int64',\n    Int128: 'int128',\n    Int256: 'int256',\n    Address: 'address',\n    Bool: 'bool',\n    String: 'string',\n    Bytes: 'bytes',\n    Bytes1: 'bytes1',\n    Bytes2: 'bytes2',\n    Bytes3: 'bytes3',\n    Bytes4: 'bytes4',\n    Bytes5: 'bytes5',\n    Bytes6: 'bytes6',\n    Bytes7: 'bytes7',\n    Bytes8: 'bytes8',\n    Bytes9: 'bytes9',\n    Bytes10: 'bytes10',\n    Bytes11: 'bytes11',\n    Bytes12: 'bytes12',\n    Bytes13: 'bytes13',\n    Bytes14: 'bytes14',\n    Bytes15: 'bytes15',\n    Bytes16: 'bytes16',\n    Bytes17: 'bytes17',\n    Bytes18: 'bytes18',\n    Bytes19: 'bytes19',\n    Bytes20: 'bytes20',\n    Bytes21: 'bytes21',\n    Bytes22: 'bytes22',\n    Bytes23: 'bytes23',\n    Bytes24: 'bytes24',\n    Bytes25: 'bytes25',\n    Bytes26: 'bytes26',\n    Bytes27: 'bytes27',\n    Bytes28: 'bytes28',\n    Bytes29: 'bytes29',\n    Bytes30: 'bytes30',\n    Bytes31: 'bytes31',\n    Bytes32: 'bytes32',\n    Array: 'array',\n    Tuple: 'tuple'\n};\nexports.SponsoredSendStatusEnum = {\n    Pending: 'pending',\n    Signed: 'signed',\n    Submitted: 'submitted',\n    Complete: 'complete',\n    Failed: 'failed'\n};\nexports.StakingOperationStatusEnum = {\n    Initialized: 'initialized',\n    Complete: 'complete',\n    Failed: 'failed',\n    Unspecified: 'unspecified'\n};\nexports.StakingRewardStateEnum = {\n    Pending: 'pending',\n    Distributed: 'distributed'\n};\n/**\n * The format in which the rewards are to be fetched i.e native or in equivalent USD\n * @export\n * @enum {string}\n */\nexports.StakingRewardFormat = {\n    Usd: 'usd',\n    Native: 'native'\n};\n/**\n * The type of the token transfer.\n * @export\n * @enum {string}\n */\nexports.TokenTransferType = {\n    Erc20: 'erc20',\n    Erc721: 'erc721',\n    Erc1155: 'erc1155',\n    Unknown: 'unknown'\n};\nexports.TransactionStatusEnum = {\n    Pending: 'pending',\n    Signed: 'signed',\n    Broadcast: 'broadcast',\n    Complete: 'complete',\n    Failed: 'failed',\n    Unspecified: 'unspecified'\n};\n/**\n *\n * @export\n * @enum {string}\n */\nexports.TransactionType = {\n    Transfer: 'transfer'\n};\nexports.TransferStatusEnum = {\n    Pending: 'pending',\n    Broadcast: 'broadcast',\n    Complete: 'complete',\n    Failed: 'failed'\n};\n/**\n * The status of the validator.\n * @export\n * @enum {string}\n */\nexports.ValidatorStatus = {\n    Unknown: 'unknown',\n    Provisioning: 'provisioning',\n    Provisioned: 'provisioned',\n    Deposited: 'deposited',\n    PendingActivation: 'pending_activation',\n    Active: 'active',\n    Exiting: 'exiting',\n    Exited: 'exited',\n    WithdrawalAvailable: 'withdrawal_available',\n    WithdrawalComplete: 'withdrawal_complete',\n    ActiveSlashed: 'active_slashed',\n    ExitedSlashed: 'exited_slashed',\n    Reaped: 'reaped'\n};\nexports.WalletServerSignerStatusEnum = {\n    PendingSeedCreation: 'pending_seed_creation',\n    ActiveSeed: 'active_seed'\n};\n/**\n *\n * @export\n * @enum {string}\n */\nexports.WebhookEventType = {\n    Unspecified: 'unspecified',\n    Erc20Transfer: 'erc20_transfer',\n    Erc721Transfer: 'erc721_transfer',\n    WalletActivity: 'wallet_activity'\n};\n/**\n * AddressesApi - axios parameter creator\n * @export\n */\nconst AddressesApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new address scoped to the wallet.\n         * @summary Create a new address\n         * @param {string} walletId The ID of the wallet to create the address in.\n         * @param {CreateAddressRequest} [createAddressRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAddress: async (walletId, createAddressRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createAddress', 'walletId', walletId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createAddressRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new payload signature with an address.\n         * @summary Create a new payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to sign the payload with.\n         * @param {CreatePayloadSignatureRequest} [createPayloadSignatureRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPayloadSignature: async (walletId, addressId, createPayloadSignatureRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createPayloadSignature', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createPayloadSignature', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/payload_signatures`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createPayloadSignatureRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get address\n         * @summary Get address by onchain address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAddress: async (walletId, addressId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddress', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddress', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get address balance\n         * @summary Get address balance for asset\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAddressBalance: async (walletId, addressId, assetId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddressBalance', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddressBalance', 'addressId', addressId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('getAddressBalance', 'assetId', assetId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/balances/{asset_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get payload signature.\n         * @summary Get payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that signed the payload.\n         * @param {string} payloadSignatureId The ID of the payload signature to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPayloadSignature: async (walletId, addressId, payloadSignatureId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getPayloadSignature', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getPayloadSignature', 'addressId', addressId);\n            // verify required parameter 'payloadSignatureId' is not null or undefined\n            (0, common_1.assertParamExists)('getPayloadSignature', 'payloadSignatureId', payloadSignatureId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/payload_signatures/{payload_signature_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"payload_signature_id\"}}`, encodeURIComponent(String(payloadSignatureId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get address balances\n         * @summary Get all balances for address\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressBalances: async (walletId, addressId, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressBalances', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressBalances', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/balances`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List addresses in the wallet.\n         * @summary List addresses in a wallet.\n         * @param {string} walletId The ID of the wallet whose addresses to fetch\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddresses: async (walletId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddresses', 'walletId', walletId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List payload signatures for an address.\n         * @summary List payload signatures for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address whose payload signatures to fetch.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPayloadSignatures: async (walletId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listPayloadSignatures', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listPayloadSignatures', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/payload_signatures`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Request faucet funds to be sent to onchain address.\n         * @summary Request faucet funds for onchain address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        requestFaucetFunds: async (walletId, addressId, assetId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('requestFaucetFunds', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('requestFaucetFunds', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/faucet`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (assetId !== undefined) {\n                localVarQueryParameter['asset_id'] = assetId;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.AddressesApiAxiosParamCreator = AddressesApiAxiosParamCreator;\n/**\n * AddressesApi - functional programming interface\n * @export\n */\nconst AddressesApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.AddressesApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Create a new address scoped to the wallet.\n         * @summary Create a new address\n         * @param {string} walletId The ID of the wallet to create the address in.\n         * @param {CreateAddressRequest} [createAddressRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createAddress(walletId, createAddressRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createAddress(walletId, createAddressRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.createAddress']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new payload signature with an address.\n         * @summary Create a new payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to sign the payload with.\n         * @param {CreatePayloadSignatureRequest} [createPayloadSignatureRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.createPayloadSignature']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get address\n         * @summary Get address by onchain address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAddress(walletId, addressId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddress(walletId, addressId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.getAddress']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get address balance\n         * @summary Get address balance for asset\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAddressBalance(walletId, addressId, assetId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressBalance(walletId, addressId, assetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.getAddressBalance']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get payload signature.\n         * @summary Get payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that signed the payload.\n         * @param {string} payloadSignatureId The ID of the payload signature to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPayloadSignature(walletId, addressId, payloadSignatureId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayloadSignature(walletId, addressId, payloadSignatureId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.getPayloadSignature']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get address balances\n         * @summary Get all balances for address\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAddressBalances(walletId, addressId, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAddressBalances(walletId, addressId, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.listAddressBalances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List addresses in the wallet.\n         * @summary List addresses in a wallet.\n         * @param {string} walletId The ID of the wallet whose addresses to fetch\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAddresses(walletId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAddresses(walletId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.listAddresses']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List payload signatures for an address.\n         * @summary List payload signatures for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address whose payload signatures to fetch.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listPayloadSignatures(walletId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listPayloadSignatures(walletId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.listPayloadSignatures']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Request faucet funds to be sent to onchain address.\n         * @summary Request faucet funds for onchain address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        async requestFaucetFunds(walletId, addressId, assetId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.requestFaucetFunds(walletId, addressId, assetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AddressesApi.requestFaucetFunds']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.AddressesApiFp = AddressesApiFp;\n/**\n * AddressesApi - factory interface\n * @export\n */\nconst AddressesApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.AddressesApiFp)(configuration);\n    return {\n        /**\n         * Create a new address scoped to the wallet.\n         * @summary Create a new address\n         * @param {string} walletId The ID of the wallet to create the address in.\n         * @param {CreateAddressRequest} [createAddressRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAddress(walletId, createAddressRequest, options) {\n            return localVarFp.createAddress(walletId, createAddressRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new payload signature with an address.\n         * @summary Create a new payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to sign the payload with.\n         * @param {CreatePayloadSignatureRequest} [createPayloadSignatureRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options) {\n            return localVarFp.createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get address\n         * @summary Get address by onchain address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAddress(walletId, addressId, options) {\n            return localVarFp.getAddress(walletId, addressId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get address balance\n         * @summary Get address balance for asset\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAddressBalance(walletId, addressId, assetId, options) {\n            return localVarFp.getAddressBalance(walletId, addressId, assetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get payload signature.\n         * @summary Get payload signature.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that signed the payload.\n         * @param {string} payloadSignatureId The ID of the payload signature to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPayloadSignature(walletId, addressId, payloadSignatureId, options) {\n            return localVarFp.getPayloadSignature(walletId, addressId, payloadSignatureId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get address balances\n         * @summary Get all balances for address\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressBalances(walletId, addressId, page, options) {\n            return localVarFp.listAddressBalances(walletId, addressId, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List addresses in the wallet.\n         * @summary List addresses in a wallet.\n         * @param {string} walletId The ID of the wallet whose addresses to fetch\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddresses(walletId, limit, page, options) {\n            return localVarFp.listAddresses(walletId, limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List payload signatures for an address.\n         * @summary List payload signatures for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address whose payload signatures to fetch.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPayloadSignatures(walletId, addressId, limit, page, options) {\n            return localVarFp.listPayloadSignatures(walletId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Request faucet funds to be sent to onchain address.\n         * @summary Request faucet funds for onchain address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        requestFaucetFunds(walletId, addressId, assetId, options) {\n            return localVarFp.requestFaucetFunds(walletId, addressId, assetId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.AddressesApiFactory = AddressesApiFactory;\n/**\n * AddressesApi - object-oriented interface\n * @export\n * @class AddressesApi\n * @extends {BaseAPI}\n */\nclass AddressesApi extends base_1.BaseAPI {\n    /**\n     * Create a new address scoped to the wallet.\n     * @summary Create a new address\n     * @param {string} walletId The ID of the wallet to create the address in.\n     * @param {CreateAddressRequest} [createAddressRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    createAddress(walletId, createAddressRequest, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).createAddress(walletId, createAddressRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new payload signature with an address.\n     * @summary Create a new payload signature.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address to sign the payload with.\n     * @param {CreatePayloadSignatureRequest} [createPayloadSignatureRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).createPayloadSignature(walletId, addressId, createPayloadSignatureRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get address\n     * @summary Get address by onchain address\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address that is being fetched.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    getAddress(walletId, addressId, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).getAddress(walletId, addressId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get address balance\n     * @summary Get address balance for asset\n     * @param {string} walletId The ID of the wallet to fetch the balance for\n     * @param {string} addressId The onchain address of the address that is being fetched.\n     * @param {string} assetId The symbol of the asset to fetch the balance for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    getAddressBalance(walletId, addressId, assetId, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).getAddressBalance(walletId, addressId, assetId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get payload signature.\n     * @summary Get payload signature.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address that signed the payload.\n     * @param {string} payloadSignatureId The ID of the payload signature to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    getPayloadSignature(walletId, addressId, payloadSignatureId, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).getPayloadSignature(walletId, addressId, payloadSignatureId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get address balances\n     * @summary Get all balances for address\n     * @param {string} walletId The ID of the wallet to fetch the balances for\n     * @param {string} addressId The onchain address of the address that is being fetched.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    listAddressBalances(walletId, addressId, page, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).listAddressBalances(walletId, addressId, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List addresses in the wallet.\n     * @summary List addresses in a wallet.\n     * @param {string} walletId The ID of the wallet whose addresses to fetch\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    listAddresses(walletId, limit, page, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).listAddresses(walletId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List payload signatures for an address.\n     * @summary List payload signatures for an address.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address whose payload signatures to fetch.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    listPayloadSignatures(walletId, addressId, limit, page, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).listPayloadSignatures(walletId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Request faucet funds to be sent to onchain address.\n     * @summary Request faucet funds for onchain address.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address that is being fetched.\n     * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof AddressesApi\n     */\n    requestFaucetFunds(walletId, addressId, assetId, options) {\n        return (0, exports.AddressesApiFp)(this.configuration).requestFaucetFunds(walletId, addressId, assetId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.AddressesApi = AddressesApi;\n/**\n * AssetsApi - axios parameter creator\n * @export\n */\nconst AssetsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get the asset for the specified asset ID.\n         * @summary Get the asset for the specified asset ID.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} assetId The ID of the asset to fetch. This could be a symbol or an ERC20 contract address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAsset: async (networkId, assetId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getAsset', 'networkId', networkId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('getAsset', 'assetId', assetId);\n            const localVarPath = `/v1/networks/{network_id}/assets/{asset_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.AssetsApiAxiosParamCreator = AssetsApiAxiosParamCreator;\n/**\n * AssetsApi - functional programming interface\n * @export\n */\nconst AssetsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.AssetsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Get the asset for the specified asset ID.\n         * @summary Get the asset for the specified asset ID.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} assetId The ID of the asset to fetch. This could be a symbol or an ERC20 contract address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAsset(networkId, assetId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAsset(networkId, assetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['AssetsApi.getAsset']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.AssetsApiFp = AssetsApiFp;\n/**\n * AssetsApi - factory interface\n * @export\n */\nconst AssetsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.AssetsApiFp)(configuration);\n    return {\n        /**\n         * Get the asset for the specified asset ID.\n         * @summary Get the asset for the specified asset ID.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} assetId The ID of the asset to fetch. This could be a symbol or an ERC20 contract address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAsset(networkId, assetId, options) {\n            return localVarFp.getAsset(networkId, assetId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.AssetsApiFactory = AssetsApiFactory;\n/**\n * AssetsApi - object-oriented interface\n * @export\n * @class AssetsApi\n * @extends {BaseAPI}\n */\nclass AssetsApi extends base_1.BaseAPI {\n    /**\n     * Get the asset for the specified asset ID.\n     * @summary Get the asset for the specified asset ID.\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} assetId The ID of the asset to fetch. This could be a symbol or an ERC20 contract address.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AssetsApi\n     */\n    getAsset(networkId, assetId, options) {\n        return (0, exports.AssetsApiFp)(this.configuration).getAsset(networkId, assetId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.AssetsApi = AssetsApi;\n/**\n * BalanceHistoryApi - axios parameter creator\n * @export\n */\nconst BalanceHistoryApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * List the historical balance of an asset in a specific address.\n         * @summary Get address balance history for asset\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the historical balance for.\n         * @param {string} assetId The symbol of the asset to fetch the historical balance for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressHistoricalBalance: async (networkId, addressId, assetId, limit, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressHistoricalBalance', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressHistoricalBalance', 'addressId', addressId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressHistoricalBalance', 'assetId', assetId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/balance_history/{asset_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.BalanceHistoryApiAxiosParamCreator = BalanceHistoryApiAxiosParamCreator;\n/**\n * BalanceHistoryApi - functional programming interface\n * @export\n */\nconst BalanceHistoryApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.BalanceHistoryApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * List the historical balance of an asset in a specific address.\n         * @summary Get address balance history for asset\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the historical balance for.\n         * @param {string} assetId The symbol of the asset to fetch the historical balance for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['BalanceHistoryApi.listAddressHistoricalBalance']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.BalanceHistoryApiFp = BalanceHistoryApiFp;\n/**\n * BalanceHistoryApi - factory interface\n * @export\n */\nconst BalanceHistoryApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.BalanceHistoryApiFp)(configuration);\n    return {\n        /**\n         * List the historical balance of an asset in a specific address.\n         * @summary Get address balance history for asset\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the historical balance for.\n         * @param {string} assetId The symbol of the asset to fetch the historical balance for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options) {\n            return localVarFp.listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.BalanceHistoryApiFactory = BalanceHistoryApiFactory;\n/**\n * BalanceHistoryApi - object-oriented interface\n * @export\n * @class BalanceHistoryApi\n * @extends {BaseAPI}\n */\nclass BalanceHistoryApi extends base_1.BaseAPI {\n    /**\n     * List the historical balance of an asset in a specific address.\n     * @summary Get address balance history for asset\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the historical balance for.\n     * @param {string} assetId The symbol of the asset to fetch the historical balance for.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BalanceHistoryApi\n     */\n    listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options) {\n        return (0, exports.BalanceHistoryApiFp)(this.configuration).listAddressHistoricalBalance(networkId, addressId, assetId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.BalanceHistoryApi = BalanceHistoryApi;\n/**\n * ContractEventsApi - axios parameter creator\n * @export\n */\nconst ContractEventsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Retrieve events for a specific contract\n         * @summary List contract events\n         * @param {string} networkId Unique identifier for the blockchain network\n         * @param {string} protocolName Case-sensitive name of the blockchain protocol\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {string} contractName Case-sensitive name of the specific contract within the project\n         * @param {string} eventName Case-sensitive name of the event to filter for in the contract\\&#39;s logs\n         * @param {number} fromBlockHeight Lower bound of the block range to query (inclusive)\n         * @param {number} toBlockHeight Upper bound of the block range to query (inclusive)\n         * @param {string} [nextPage] Pagination token for retrieving the next set of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listContractEvents: async (networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'networkId', networkId);\n            // verify required parameter 'protocolName' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'protocolName', protocolName);\n            // verify required parameter 'contractAddress' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'contractAddress', contractAddress);\n            // verify required parameter 'contractName' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'contractName', contractName);\n            // verify required parameter 'eventName' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'eventName', eventName);\n            // verify required parameter 'fromBlockHeight' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'fromBlockHeight', fromBlockHeight);\n            // verify required parameter 'toBlockHeight' is not null or undefined\n            (0, common_1.assertParamExists)('listContractEvents', 'toBlockHeight', toBlockHeight);\n            const localVarPath = `/v1/networks/{network_id}/smart_contracts/{contract_address}/events`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"contract_address\"}}`, encodeURIComponent(String(contractAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (protocolName !== undefined) {\n                localVarQueryParameter['protocol_name'] = protocolName;\n            }\n            if (contractName !== undefined) {\n                localVarQueryParameter['contract_name'] = contractName;\n            }\n            if (eventName !== undefined) {\n                localVarQueryParameter['event_name'] = eventName;\n            }\n            if (fromBlockHeight !== undefined) {\n                localVarQueryParameter['from_block_height'] = fromBlockHeight;\n            }\n            if (toBlockHeight !== undefined) {\n                localVarQueryParameter['to_block_height'] = toBlockHeight;\n            }\n            if (nextPage !== undefined) {\n                localVarQueryParameter['next_page'] = nextPage;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.ContractEventsApiAxiosParamCreator = ContractEventsApiAxiosParamCreator;\n/**\n * ContractEventsApi - functional programming interface\n * @export\n */\nconst ContractEventsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.ContractEventsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Retrieve events for a specific contract\n         * @summary List contract events\n         * @param {string} networkId Unique identifier for the blockchain network\n         * @param {string} protocolName Case-sensitive name of the blockchain protocol\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {string} contractName Case-sensitive name of the specific contract within the project\n         * @param {string} eventName Case-sensitive name of the event to filter for in the contract\\&#39;s logs\n         * @param {number} fromBlockHeight Lower bound of the block range to query (inclusive)\n         * @param {number} toBlockHeight Upper bound of the block range to query (inclusive)\n         * @param {string} [nextPage] Pagination token for retrieving the next set of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ContractEventsApi.listContractEvents']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.ContractEventsApiFp = ContractEventsApiFp;\n/**\n * ContractEventsApi - factory interface\n * @export\n */\nconst ContractEventsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.ContractEventsApiFp)(configuration);\n    return {\n        /**\n         * Retrieve events for a specific contract\n         * @summary List contract events\n         * @param {string} networkId Unique identifier for the blockchain network\n         * @param {string} protocolName Case-sensitive name of the blockchain protocol\n         * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n         * @param {string} contractName Case-sensitive name of the specific contract within the project\n         * @param {string} eventName Case-sensitive name of the event to filter for in the contract\\&#39;s logs\n         * @param {number} fromBlockHeight Lower bound of the block range to query (inclusive)\n         * @param {number} toBlockHeight Upper bound of the block range to query (inclusive)\n         * @param {string} [nextPage] Pagination token for retrieving the next set of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options) {\n            return localVarFp.listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ContractEventsApiFactory = ContractEventsApiFactory;\n/**\n * ContractEventsApi - object-oriented interface\n * @export\n * @class ContractEventsApi\n * @extends {BaseAPI}\n */\nclass ContractEventsApi extends base_1.BaseAPI {\n    /**\n     * Retrieve events for a specific contract\n     * @summary List contract events\n     * @param {string} networkId Unique identifier for the blockchain network\n     * @param {string} protocolName Case-sensitive name of the blockchain protocol\n     * @param {string} contractAddress EVM address of the smart contract (42 characters, including \\&#39;0x\\&#39;, in lowercase)\n     * @param {string} contractName Case-sensitive name of the specific contract within the project\n     * @param {string} eventName Case-sensitive name of the event to filter for in the contract\\&#39;s logs\n     * @param {number} fromBlockHeight Lower bound of the block range to query (inclusive)\n     * @param {number} toBlockHeight Upper bound of the block range to query (inclusive)\n     * @param {string} [nextPage] Pagination token for retrieving the next set of results\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ContractEventsApi\n     */\n    listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options) {\n        return (0, exports.ContractEventsApiFp)(this.configuration).listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, nextPage, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ContractEventsApi = ContractEventsApi;\n/**\n * ContractInvocationsApi - axios parameter creator\n * @export\n */\nconst ContractInvocationsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Broadcast a contract invocation.\n         * @summary Broadcast a contract invocation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to broadcast.\n         * @param {BroadcastContractInvocationRequest} broadcastContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastContractInvocation: async (walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastContractInvocation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastContractInvocation', 'addressId', addressId);\n            // verify required parameter 'contractInvocationId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastContractInvocation', 'contractInvocationId', contractInvocationId);\n            // verify required parameter 'broadcastContractInvocationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastContractInvocation', 'broadcastContractInvocationRequest', broadcastContractInvocationRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations/{contract_invocation_id}/broadcast`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"contract_invocation_id\"}}`, encodeURIComponent(String(contractInvocationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(broadcastContractInvocationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new contract invocation.\n         * @summary Create a new contract invocation for an address.\n         * @param {string} walletId The ID of the wallet the source address belongs to.\n         * @param {string} addressId The ID of the address to invoke the contract from.\n         * @param {CreateContractInvocationRequest} createContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createContractInvocation: async (walletId, addressId, createContractInvocationRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createContractInvocation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createContractInvocation', 'addressId', addressId);\n            // verify required parameter 'createContractInvocationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createContractInvocation', 'createContractInvocationRequest', createContractInvocationRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createContractInvocationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a contract invocation by ID.\n         * @summary Get a contract invocation by ID.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getContractInvocation: async (walletId, addressId, contractInvocationId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getContractInvocation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getContractInvocation', 'addressId', addressId);\n            // verify required parameter 'contractInvocationId' is not null or undefined\n            (0, common_1.assertParamExists)('getContractInvocation', 'contractInvocationId', contractInvocationId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations/{contract_invocation_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"contract_invocation_id\"}}`, encodeURIComponent(String(contractInvocationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List contract invocations for an address.\n         * @summary List contract invocations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to list contract invocations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listContractInvocations: async (walletId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listContractInvocations', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listContractInvocations', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.ContractInvocationsApiAxiosParamCreator = ContractInvocationsApiAxiosParamCreator;\n/**\n * ContractInvocationsApi - functional programming interface\n * @export\n */\nconst ContractInvocationsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.ContractInvocationsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Broadcast a contract invocation.\n         * @summary Broadcast a contract invocation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to broadcast.\n         * @param {BroadcastContractInvocationRequest} broadcastContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ContractInvocationsApi.broadcastContractInvocation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new contract invocation.\n         * @summary Create a new contract invocation for an address.\n         * @param {string} walletId The ID of the wallet the source address belongs to.\n         * @param {string} addressId The ID of the address to invoke the contract from.\n         * @param {CreateContractInvocationRequest} createContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createContractInvocation(walletId, addressId, createContractInvocationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createContractInvocation(walletId, addressId, createContractInvocationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ContractInvocationsApi.createContractInvocation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a contract invocation by ID.\n         * @summary Get a contract invocation by ID.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getContractInvocation(walletId, addressId, contractInvocationId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractInvocation(walletId, addressId, contractInvocationId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ContractInvocationsApi.getContractInvocation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List contract invocations for an address.\n         * @summary List contract invocations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to list contract invocations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listContractInvocations(walletId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listContractInvocations(walletId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ContractInvocationsApi.listContractInvocations']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.ContractInvocationsApiFp = ContractInvocationsApiFp;\n/**\n * ContractInvocationsApi - factory interface\n * @export\n */\nconst ContractInvocationsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.ContractInvocationsApiFp)(configuration);\n    return {\n        /**\n         * Broadcast a contract invocation.\n         * @summary Broadcast a contract invocation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to broadcast.\n         * @param {BroadcastContractInvocationRequest} broadcastContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options) {\n            return localVarFp.broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new contract invocation.\n         * @summary Create a new contract invocation for an address.\n         * @param {string} walletId The ID of the wallet the source address belongs to.\n         * @param {string} addressId The ID of the address to invoke the contract from.\n         * @param {CreateContractInvocationRequest} createContractInvocationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createContractInvocation(walletId, addressId, createContractInvocationRequest, options) {\n            return localVarFp.createContractInvocation(walletId, addressId, createContractInvocationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a contract invocation by ID.\n         * @summary Get a contract invocation by ID.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the contract invocation belongs to.\n         * @param {string} contractInvocationId The ID of the contract invocation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getContractInvocation(walletId, addressId, contractInvocationId, options) {\n            return localVarFp.getContractInvocation(walletId, addressId, contractInvocationId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List contract invocations for an address.\n         * @summary List contract invocations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to list contract invocations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listContractInvocations(walletId, addressId, limit, page, options) {\n            return localVarFp.listContractInvocations(walletId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ContractInvocationsApiFactory = ContractInvocationsApiFactory;\n/**\n * ContractInvocationsApi - object-oriented interface\n * @export\n * @class ContractInvocationsApi\n * @extends {BaseAPI}\n */\nclass ContractInvocationsApi extends base_1.BaseAPI {\n    /**\n     * Broadcast a contract invocation.\n     * @summary Broadcast a contract invocation.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address the contract invocation belongs to.\n     * @param {string} contractInvocationId The ID of the contract invocation to broadcast.\n     * @param {BroadcastContractInvocationRequest} broadcastContractInvocationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ContractInvocationsApi\n     */\n    broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options) {\n        return (0, exports.ContractInvocationsApiFp)(this.configuration).broadcastContractInvocation(walletId, addressId, contractInvocationId, broadcastContractInvocationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new contract invocation.\n     * @summary Create a new contract invocation for an address.\n     * @param {string} walletId The ID of the wallet the source address belongs to.\n     * @param {string} addressId The ID of the address to invoke the contract from.\n     * @param {CreateContractInvocationRequest} createContractInvocationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ContractInvocationsApi\n     */\n    createContractInvocation(walletId, addressId, createContractInvocationRequest, options) {\n        return (0, exports.ContractInvocationsApiFp)(this.configuration).createContractInvocation(walletId, addressId, createContractInvocationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get a contract invocation by ID.\n     * @summary Get a contract invocation by ID.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address the contract invocation belongs to.\n     * @param {string} contractInvocationId The ID of the contract invocation to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ContractInvocationsApi\n     */\n    getContractInvocation(walletId, addressId, contractInvocationId, options) {\n        return (0, exports.ContractInvocationsApiFp)(this.configuration).getContractInvocation(walletId, addressId, contractInvocationId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List contract invocations for an address.\n     * @summary List contract invocations for an address.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address to list contract invocations for.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ContractInvocationsApi\n     */\n    listContractInvocations(walletId, addressId, limit, page, options) {\n        return (0, exports.ContractInvocationsApiFp)(this.configuration).listContractInvocations(walletId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ContractInvocationsApi = ContractInvocationsApi;\n/**\n * ExternalAddressesApi - axios parameter creator\n * @export\n */\nconst ExternalAddressesApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get the balance of an asset in an external address\n         * @summary Get the balance of an asset in an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} assetId The ID of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getExternalAddressBalance: async (networkId, addressId, assetId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalAddressBalance', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalAddressBalance', 'addressId', addressId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalAddressBalance', 'assetId', assetId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/balances/{asset_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the status of a faucet transaction\n         * @summary Get the status of a faucet transaction\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the faucet transaction for\n         * @param {string} txHash The hash of the faucet transaction\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFaucetTransaction: async (networkId, addressId, txHash, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getFaucetTransaction', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getFaucetTransaction', 'addressId', addressId);\n            // verify required parameter 'txHash' is not null or undefined\n            (0, common_1.assertParamExists)('getFaucetTransaction', 'txHash', txHash);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/faucet/{tx_hash}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"tx_hash\"}}`, encodeURIComponent(String(txHash)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List all of the balances of an external address\n         * @summary Get the balances of an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listExternalAddressBalances: async (networkId, addressId, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('listExternalAddressBalances', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listExternalAddressBalances', 'addressId', addressId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/balances`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Request faucet funds to be sent to external address.\n         * @summary Request faucet funds for external address.\n         * @param {string} networkId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {boolean} [skipWait] Whether to skip waiting for the transaction to be mined. This will become the default behavior in the future.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        requestExternalFaucetFunds: async (networkId, addressId, assetId, skipWait, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('requestExternalFaucetFunds', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('requestExternalFaucetFunds', 'addressId', addressId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/faucet`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (assetId !== undefined) {\n                localVarQueryParameter['asset_id'] = assetId;\n            }\n            if (skipWait !== undefined) {\n                localVarQueryParameter['skip_wait'] = skipWait;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.ExternalAddressesApiAxiosParamCreator = ExternalAddressesApiAxiosParamCreator;\n/**\n * ExternalAddressesApi - functional programming interface\n * @export\n */\nconst ExternalAddressesApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.ExternalAddressesApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Get the balance of an asset in an external address\n         * @summary Get the balance of an asset in an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} assetId The ID of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getExternalAddressBalance(networkId, addressId, assetId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalAddressBalance(networkId, addressId, assetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.getExternalAddressBalance']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the status of a faucet transaction\n         * @summary Get the status of a faucet transaction\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the faucet transaction for\n         * @param {string} txHash The hash of the faucet transaction\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFaucetTransaction(networkId, addressId, txHash, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaucetTransaction(networkId, addressId, txHash, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.getFaucetTransaction']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List all of the balances of an external address\n         * @summary Get the balances of an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listExternalAddressBalances(networkId, addressId, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listExternalAddressBalances(networkId, addressId, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.listExternalAddressBalances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Request faucet funds to be sent to external address.\n         * @summary Request faucet funds for external address.\n         * @param {string} networkId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {boolean} [skipWait] Whether to skip waiting for the transaction to be mined. This will become the default behavior in the future.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ExternalAddressesApi.requestExternalFaucetFunds']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.ExternalAddressesApiFp = ExternalAddressesApiFp;\n/**\n * ExternalAddressesApi - factory interface\n * @export\n */\nconst ExternalAddressesApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.ExternalAddressesApiFp)(configuration);\n    return {\n        /**\n         * Get the balance of an asset in an external address\n         * @summary Get the balance of an asset in an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} assetId The ID of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getExternalAddressBalance(networkId, addressId, assetId, options) {\n            return localVarFp.getExternalAddressBalance(networkId, addressId, assetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the status of a faucet transaction\n         * @summary Get the status of a faucet transaction\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the faucet transaction for\n         * @param {string} txHash The hash of the faucet transaction\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFaucetTransaction(networkId, addressId, txHash, options) {\n            return localVarFp.getFaucetTransaction(networkId, addressId, txHash, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List all of the balances of an external address\n         * @summary Get the balances of an external address\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the balance for\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listExternalAddressBalances(networkId, addressId, page, options) {\n            return localVarFp.listExternalAddressBalances(networkId, addressId, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Request faucet funds to be sent to external address.\n         * @summary Request faucet funds for external address.\n         * @param {string} networkId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that is being fetched.\n         * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n         * @param {boolean} [skipWait] Whether to skip waiting for the transaction to be mined. This will become the default behavior in the future.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options) {\n            return localVarFp.requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ExternalAddressesApiFactory = ExternalAddressesApiFactory;\n/**\n * ExternalAddressesApi - object-oriented interface\n * @export\n * @class ExternalAddressesApi\n * @extends {BaseAPI}\n */\nclass ExternalAddressesApi extends base_1.BaseAPI {\n    /**\n     * Get the balance of an asset in an external address\n     * @summary Get the balance of an asset in an external address\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the balance for\n     * @param {string} assetId The ID of the asset to fetch the balance for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    getExternalAddressBalance(networkId, addressId, assetId, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).getExternalAddressBalance(networkId, addressId, assetId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get the status of a faucet transaction\n     * @summary Get the status of a faucet transaction\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the faucet transaction for\n     * @param {string} txHash The hash of the faucet transaction\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    getFaucetTransaction(networkId, addressId, txHash, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).getFaucetTransaction(networkId, addressId, txHash, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List all of the balances of an external address\n     * @summary Get the balances of an external address\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the balance for\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    listExternalAddressBalances(networkId, addressId, page, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).listExternalAddressBalances(networkId, addressId, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Request faucet funds to be sent to external address.\n     * @summary Request faucet funds for external address.\n     * @param {string} networkId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address that is being fetched.\n     * @param {string} [assetId] The ID of the asset to transfer from the faucet.\n     * @param {boolean} [skipWait] Whether to skip waiting for the transaction to be mined. This will become the default behavior in the future.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAddressesApi\n     */\n    requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options) {\n        return (0, exports.ExternalAddressesApiFp)(this.configuration).requestExternalFaucetFunds(networkId, addressId, assetId, skipWait, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ExternalAddressesApi = ExternalAddressesApi;\n/**\n * FundApi - axios parameter creator\n * @export\n */\nconst FundApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a new fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundOperationRequest} createFundOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFundOperation: async (walletId, addressId, createFundOperationRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createFundOperation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createFundOperation', 'addressId', addressId);\n            // verify required parameter 'createFundOperationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createFundOperation', 'createFundOperationRequest', createFundOperationRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createFundOperationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a Fund Operation quote.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundQuoteRequest} createFundQuoteRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFundQuote: async (walletId, addressId, createFundQuoteRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createFundQuote', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createFundQuote', 'addressId', addressId);\n            // verify required parameter 'createFundQuoteRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createFundQuote', 'createFundQuoteRequest', createFundQuoteRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations/quote`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createFundQuoteRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get fund operation.\n         * @summary Get fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that created the fund operation.\n         * @param {string} fundOperationId The ID of the fund operation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFundOperation: async (walletId, addressId, fundOperationId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getFundOperation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getFundOperation', 'addressId', addressId);\n            // verify required parameter 'fundOperationId' is not null or undefined\n            (0, common_1.assertParamExists)('getFundOperation', 'fundOperationId', fundOperationId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations/{fund_operation_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"fund_operation_id\"}}`, encodeURIComponent(String(fundOperationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List fund operations for an address.\n         * @summary List fund operations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to list fund operations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFundOperations: async (walletId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listFundOperations', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listFundOperations', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.FundApiAxiosParamCreator = FundApiAxiosParamCreator;\n/**\n * FundApi - functional programming interface\n * @export\n */\nconst FundApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.FundApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a new fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundOperationRequest} createFundOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createFundOperation(walletId, addressId, createFundOperationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createFundOperation(walletId, addressId, createFundOperationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['FundApi.createFundOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a Fund Operation quote.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundQuoteRequest} createFundQuoteRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createFundQuote(walletId, addressId, createFundQuoteRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createFundQuote(walletId, addressId, createFundQuoteRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['FundApi.createFundQuote']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get fund operation.\n         * @summary Get fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that created the fund operation.\n         * @param {string} fundOperationId The ID of the fund operation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFundOperation(walletId, addressId, fundOperationId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFundOperation(walletId, addressId, fundOperationId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['FundApi.getFundOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List fund operations for an address.\n         * @summary List fund operations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to list fund operations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listFundOperations(walletId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listFundOperations(walletId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['FundApi.listFundOperations']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.FundApiFp = FundApiFp;\n/**\n * FundApi - factory interface\n * @export\n */\nconst FundApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.FundApiFp)(configuration);\n    return {\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a new fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundOperationRequest} createFundOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFundOperation(walletId, addressId, createFundOperationRequest, options) {\n            return localVarFp.createFundOperation(walletId, addressId, createFundOperationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new fund operation with an address.\n         * @summary Create a Fund Operation quote.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address to be funded.\n         * @param {CreateFundQuoteRequest} createFundQuoteRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFundQuote(walletId, addressId, createFundQuoteRequest, options) {\n            return localVarFp.createFundQuote(walletId, addressId, createFundQuoteRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get fund operation.\n         * @summary Get fund operation.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address that created the fund operation.\n         * @param {string} fundOperationId The ID of the fund operation to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFundOperation(walletId, addressId, fundOperationId, options) {\n            return localVarFp.getFundOperation(walletId, addressId, fundOperationId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List fund operations for an address.\n         * @summary List fund operations for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The onchain address of the address to list fund operations for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFundOperations(walletId, addressId, limit, page, options) {\n            return localVarFp.listFundOperations(walletId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.FundApiFactory = FundApiFactory;\n/**\n * FundApi - object-oriented interface\n * @export\n * @class FundApi\n * @extends {BaseAPI}\n */\nclass FundApi extends base_1.BaseAPI {\n    /**\n     * Create a new fund operation with an address.\n     * @summary Create a new fund operation.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address to be funded.\n     * @param {CreateFundOperationRequest} createFundOperationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FundApi\n     */\n    createFundOperation(walletId, addressId, createFundOperationRequest, options) {\n        return (0, exports.FundApiFp)(this.configuration).createFundOperation(walletId, addressId, createFundOperationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new fund operation with an address.\n     * @summary Create a Fund Operation quote.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address to be funded.\n     * @param {CreateFundQuoteRequest} createFundQuoteRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FundApi\n     */\n    createFundQuote(walletId, addressId, createFundQuoteRequest, options) {\n        return (0, exports.FundApiFp)(this.configuration).createFundQuote(walletId, addressId, createFundQuoteRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get fund operation.\n     * @summary Get fund operation.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address that created the fund operation.\n     * @param {string} fundOperationId The ID of the fund operation to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FundApi\n     */\n    getFundOperation(walletId, addressId, fundOperationId, options) {\n        return (0, exports.FundApiFp)(this.configuration).getFundOperation(walletId, addressId, fundOperationId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List fund operations for an address.\n     * @summary List fund operations for an address.\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The onchain address of the address to list fund operations for.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FundApi\n     */\n    listFundOperations(walletId, addressId, limit, page, options) {\n        return (0, exports.FundApiFp)(this.configuration).listFundOperations(walletId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.FundApi = FundApi;\n/**\n * NetworksApi - axios parameter creator\n * @export\n */\nconst NetworksApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get network\n         * @summary Get network by ID\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNetwork: async (networkId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getNetwork', 'networkId', networkId);\n            const localVarPath = `/v1/networks/{network_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.NetworksApiAxiosParamCreator = NetworksApiAxiosParamCreator;\n/**\n * NetworksApi - functional programming interface\n * @export\n */\nconst NetworksApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.NetworksApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Get network\n         * @summary Get network by ID\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getNetwork(networkId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getNetwork(networkId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['NetworksApi.getNetwork']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.NetworksApiFp = NetworksApiFp;\n/**\n * NetworksApi - factory interface\n * @export\n */\nconst NetworksApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.NetworksApiFp)(configuration);\n    return {\n        /**\n         * Get network\n         * @summary Get network by ID\n         * @param {string} networkId The ID of the network to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNetwork(networkId, options) {\n            return localVarFp.getNetwork(networkId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.NetworksApiFactory = NetworksApiFactory;\n/**\n * NetworksApi - object-oriented interface\n * @export\n * @class NetworksApi\n * @extends {BaseAPI}\n */\nclass NetworksApi extends base_1.BaseAPI {\n    /**\n     * Get network\n     * @summary Get network by ID\n     * @param {string} networkId The ID of the network to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NetworksApi\n     */\n    getNetwork(networkId, options) {\n        return (0, exports.NetworksApiFp)(this.configuration).getNetwork(networkId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.NetworksApi = NetworksApi;\n/**\n * OnchainIdentityApi - axios parameter creator\n * @export\n */\nconst OnchainIdentityApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Obtains onchain identity for an address on a specific network\n         * @summary Obtains onchain identity for an address on a specific network\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the identity for\n         * @param {Array<ResolveIdentityByAddressRolesEnum>} [roles] A filter by role of the names related to this address (managed or owned)\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resolveIdentityByAddress: async (networkId, addressId, roles, limit, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('resolveIdentityByAddress', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('resolveIdentityByAddress', 'addressId', addressId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/identity`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (roles) {\n                localVarQueryParameter['roles'] = roles.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.OnchainIdentityApiAxiosParamCreator = OnchainIdentityApiAxiosParamCreator;\n/**\n * OnchainIdentityApi - functional programming interface\n * @export\n */\nconst OnchainIdentityApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.OnchainIdentityApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Obtains onchain identity for an address on a specific network\n         * @summary Obtains onchain identity for an address on a specific network\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the identity for\n         * @param {Array<ResolveIdentityByAddressRolesEnum>} [roles] A filter by role of the names related to this address (managed or owned)\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resolveIdentityByAddress(networkId, addressId, roles, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveIdentityByAddress(networkId, addressId, roles, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['OnchainIdentityApi.resolveIdentityByAddress']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.OnchainIdentityApiFp = OnchainIdentityApiFp;\n/**\n * OnchainIdentityApi - factory interface\n * @export\n */\nconst OnchainIdentityApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.OnchainIdentityApiFp)(configuration);\n    return {\n        /**\n         * Obtains onchain identity for an address on a specific network\n         * @summary Obtains onchain identity for an address on a specific network\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the identity for\n         * @param {Array<ResolveIdentityByAddressRolesEnum>} [roles] A filter by role of the names related to this address (managed or owned)\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resolveIdentityByAddress(networkId, addressId, roles, limit, page, options) {\n            return localVarFp.resolveIdentityByAddress(networkId, addressId, roles, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.OnchainIdentityApiFactory = OnchainIdentityApiFactory;\n/**\n * OnchainIdentityApi - object-oriented interface\n * @export\n * @class OnchainIdentityApi\n * @extends {BaseAPI}\n */\nclass OnchainIdentityApi extends base_1.BaseAPI {\n    /**\n     * Obtains onchain identity for an address on a specific network\n     * @summary Obtains onchain identity for an address on a specific network\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the identity for\n     * @param {Array<ResolveIdentityByAddressRolesEnum>} [roles] A filter by role of the names related to this address (managed or owned)\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OnchainIdentityApi\n     */\n    resolveIdentityByAddress(networkId, addressId, roles, limit, page, options) {\n        return (0, exports.OnchainIdentityApiFp)(this.configuration).resolveIdentityByAddress(networkId, addressId, roles, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.OnchainIdentityApi = OnchainIdentityApi;\n/**\n * @export\n */\nexports.ResolveIdentityByAddressRolesEnum = {\n    Managed: 'managed',\n    Owned: 'owned'\n};\n/**\n * ServerSignersApi - axios parameter creator\n * @export\n */\nconst ServerSignersApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new Server-Signer\n         * @summary Create a new Server-Signer\n         * @param {CreateServerSignerRequest} [createServerSignerRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServerSigner: async (createServerSignerRequest, options = {}) => {\n            const localVarPath = `/v1/server_signers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createServerSignerRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a server signer by ID\n         * @summary Get a server signer by ID\n         * @param {string} serverSignerId The ID of the server signer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServerSigner: async (serverSignerId, options = {}) => {\n            // verify required parameter 'serverSignerId' is not null or undefined\n            (0, common_1.assertParamExists)('getServerSigner', 'serverSignerId', serverSignerId);\n            const localVarPath = `/v1/server_signers/{server_signer_id}`\n                .replace(`{${\"server_signer_id\"}}`, encodeURIComponent(String(serverSignerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List events for a server signer\n         * @summary List events for a server signer\n         * @param {string} serverSignerId The ID of the server signer to fetch events for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        listServerSignerEvents: async (serverSignerId, limit, page, options = {}) => {\n            // verify required parameter 'serverSignerId' is not null or undefined\n            (0, common_1.assertParamExists)('listServerSignerEvents', 'serverSignerId', serverSignerId);\n            const localVarPath = `/v1/server_signers/{server_signer_id}/events`\n                .replace(`{${\"server_signer_id\"}}`, encodeURIComponent(String(serverSignerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List server signers for the current project\n         * @summary List server signers for the current project\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServerSigners: async (limit, page, options = {}) => {\n            const localVarPath = `/v1/server_signers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SeedCreationEventResult} [seedCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitServerSignerSeedEventResult: async (serverSignerId, seedCreationEventResult, options = {}) => {\n            // verify required parameter 'serverSignerId' is not null or undefined\n            (0, common_1.assertParamExists)('submitServerSignerSeedEventResult', 'serverSignerId', serverSignerId);\n            const localVarPath = `/v1/server_signers/{server_signer_id}/seed_event_result`\n                .replace(`{${\"server_signer_id\"}}`, encodeURIComponent(String(serverSignerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(seedCreationEventResult, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SignatureCreationEventResult} [signatureCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitServerSignerSignatureEventResult: async (serverSignerId, signatureCreationEventResult, options = {}) => {\n            // verify required parameter 'serverSignerId' is not null or undefined\n            (0, common_1.assertParamExists)('submitServerSignerSignatureEventResult', 'serverSignerId', serverSignerId);\n            const localVarPath = `/v1/server_signers/{server_signer_id}/signature_event_result`\n                .replace(`{${\"server_signer_id\"}}`, encodeURIComponent(String(serverSignerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(signatureCreationEventResult, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.ServerSignersApiAxiosParamCreator = ServerSignersApiAxiosParamCreator;\n/**\n * ServerSignersApi - functional programming interface\n * @export\n */\nconst ServerSignersApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.ServerSignersApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Create a new Server-Signer\n         * @summary Create a new Server-Signer\n         * @param {CreateServerSignerRequest} [createServerSignerRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServerSigner(createServerSignerRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createServerSigner(createServerSignerRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.createServerSigner']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a server signer by ID\n         * @summary Get a server signer by ID\n         * @param {string} serverSignerId The ID of the server signer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getServerSigner(serverSignerId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getServerSigner(serverSignerId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.getServerSigner']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List events for a server signer\n         * @summary List events for a server signer\n         * @param {string} serverSignerId The ID of the server signer to fetch events for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        async listServerSignerEvents(serverSignerId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listServerSignerEvents(serverSignerId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.listServerSignerEvents']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List server signers for the current project\n         * @summary List server signers for the current project\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServerSigners(limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listServerSigners(limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.listServerSigners']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SeedCreationEventResult} [seedCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.submitServerSignerSeedEventResult']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SignatureCreationEventResult} [signatureCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ServerSignersApi.submitServerSignerSignatureEventResult']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.ServerSignersApiFp = ServerSignersApiFp;\n/**\n * ServerSignersApi - factory interface\n * @export\n */\nconst ServerSignersApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.ServerSignersApiFp)(configuration);\n    return {\n        /**\n         * Create a new Server-Signer\n         * @summary Create a new Server-Signer\n         * @param {CreateServerSignerRequest} [createServerSignerRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServerSigner(createServerSignerRequest, options) {\n            return localVarFp.createServerSigner(createServerSignerRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a server signer by ID\n         * @summary Get a server signer by ID\n         * @param {string} serverSignerId The ID of the server signer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServerSigner(serverSignerId, options) {\n            return localVarFp.getServerSigner(serverSignerId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List events for a server signer\n         * @summary List events for a server signer\n         * @param {string} serverSignerId The ID of the server signer to fetch events for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        listServerSignerEvents(serverSignerId, limit, page, options) {\n            return localVarFp.listServerSignerEvents(serverSignerId, limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List server signers for the current project\n         * @summary List server signers for the current project\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServerSigners(limit, page, options) {\n            return localVarFp.listServerSigners(limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SeedCreationEventResult} [seedCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options) {\n            return localVarFp.submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Submit the result of a server signer event\n         * @summary Submit the result of a server signer event\n         * @param {string} serverSignerId The ID of the server signer to submit the event result for\n         * @param {SignatureCreationEventResult} [signatureCreationEventResult]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options) {\n            return localVarFp.submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ServerSignersApiFactory = ServerSignersApiFactory;\n/**\n * ServerSignersApi - object-oriented interface\n * @export\n * @class ServerSignersApi\n * @extends {BaseAPI}\n */\nclass ServerSignersApi extends base_1.BaseAPI {\n    /**\n     * Create a new Server-Signer\n     * @summary Create a new Server-Signer\n     * @param {CreateServerSignerRequest} [createServerSignerRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    createServerSigner(createServerSignerRequest, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).createServerSigner(createServerSignerRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get a server signer by ID\n     * @summary Get a server signer by ID\n     * @param {string} serverSignerId The ID of the server signer to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    getServerSigner(serverSignerId, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).getServerSigner(serverSignerId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List events for a server signer\n     * @summary List events for a server signer\n     * @param {string} serverSignerId The ID of the server signer to fetch events for\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    listServerSignerEvents(serverSignerId, limit, page, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).listServerSignerEvents(serverSignerId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List server signers for the current project\n     * @summary List server signers for the current project\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    listServerSigners(limit, page, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).listServerSigners(limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Submit the result of a server signer event\n     * @summary Submit the result of a server signer event\n     * @param {string} serverSignerId The ID of the server signer to submit the event result for\n     * @param {SeedCreationEventResult} [seedCreationEventResult]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).submitServerSignerSeedEventResult(serverSignerId, seedCreationEventResult, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Submit the result of a server signer event\n     * @summary Submit the result of a server signer event\n     * @param {string} serverSignerId The ID of the server signer to submit the event result for\n     * @param {SignatureCreationEventResult} [signatureCreationEventResult]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ServerSignersApi\n     */\n    submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options) {\n        return (0, exports.ServerSignersApiFp)(this.configuration).submitServerSignerSignatureEventResult(serverSignerId, signatureCreationEventResult, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ServerSignersApi = ServerSignersApi;\n/**\n * SmartContractsApi - axios parameter creator\n * @export\n */\nconst SmartContractsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new smart contract\n         * @summary Create a new smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to deploy the smart contract from.\n         * @param {CreateSmartContractRequest} createSmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSmartContract: async (walletId, addressId, createSmartContractRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createSmartContract', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createSmartContract', 'addressId', addressId);\n            // verify required parameter 'createSmartContractRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createSmartContract', 'createSmartContractRequest', createSmartContractRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/smart_contracts`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createSmartContractRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deploys a smart contract, by broadcasting the transaction to the network.\n         * @summary Deploy a smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to broadcast the transaction from.\n         * @param {string} smartContractId The UUID of the smart contract to broadcast the transaction to.\n         * @param {DeploySmartContractRequest} deploySmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deploySmartContract: async (walletId, addressId, smartContractId, deploySmartContractRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('deploySmartContract', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('deploySmartContract', 'addressId', addressId);\n            // verify required parameter 'smartContractId' is not null or undefined\n            (0, common_1.assertParamExists)('deploySmartContract', 'smartContractId', smartContractId);\n            // verify required parameter 'deploySmartContractRequest' is not null or undefined\n            (0, common_1.assertParamExists)('deploySmartContract', 'deploySmartContractRequest', deploySmartContractRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/smart_contracts/{smart_contract_id}/deploy`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"smart_contract_id\"}}`, encodeURIComponent(String(smartContractId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deploySmartContractRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a specific smart contract deployed by address.\n         * @summary Get a specific smart contract deployed by address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to fetch the smart contract for.\n         * @param {string} smartContractId The UUID of the smart contract to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSmartContract: async (walletId, addressId, smartContractId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getSmartContract', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getSmartContract', 'addressId', addressId);\n            // verify required parameter 'smartContractId' is not null or undefined\n            (0, common_1.assertParamExists)('getSmartContract', 'smartContractId', smartContractId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/smart_contracts/{smart_contract_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"smart_contract_id\"}}`, encodeURIComponent(String(smartContractId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List all smart contracts deployed by address.\n         * @summary List smart contracts deployed by address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to fetch the smart contracts for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSmartContracts: async (walletId, addressId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listSmartContracts', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listSmartContracts', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/smart_contracts`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Perform a read operation on a smart contract without creating a transaction\n         * @summary Read data from a smart contract\n         * @param {string} networkId\n         * @param {string} contractAddress\n         * @param {ReadContractRequest} readContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        readContract: async (networkId, contractAddress, readContractRequest, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('readContract', 'networkId', networkId);\n            // verify required parameter 'contractAddress' is not null or undefined\n            (0, common_1.assertParamExists)('readContract', 'contractAddress', contractAddress);\n            // verify required parameter 'readContractRequest' is not null or undefined\n            (0, common_1.assertParamExists)('readContract', 'readContractRequest', readContractRequest);\n            const localVarPath = `/v1/networks/{network_id}/smart_contracts/{contract_address}/read`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"contract_address\"}}`, encodeURIComponent(String(contractAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(readContractRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.SmartContractsApiAxiosParamCreator = SmartContractsApiAxiosParamCreator;\n/**\n * SmartContractsApi - functional programming interface\n * @export\n */\nconst SmartContractsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.SmartContractsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Create a new smart contract\n         * @summary Create a new smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to deploy the smart contract from.\n         * @param {CreateSmartContractRequest} createSmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSmartContract(walletId, addressId, createSmartContractRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSmartContract(walletId, addressId, createSmartContractRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.createSmartContract']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Deploys a smart contract, by broadcasting the transaction to the network.\n         * @summary Deploy a smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to broadcast the transaction from.\n         * @param {string} smartContractId The UUID of the smart contract to broadcast the transaction to.\n         * @param {DeploySmartContractRequest} deploySmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.deploySmartContract']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a specific smart contract deployed by address.\n         * @summary Get a specific smart contract deployed by address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to fetch the smart contract for.\n         * @param {string} smartContractId The UUID of the smart contract to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSmartContract(walletId, addressId, smartContractId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmartContract(walletId, addressId, smartContractId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.getSmartContract']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List all smart contracts deployed by address.\n         * @summary List smart contracts deployed by address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to fetch the smart contracts for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listSmartContracts(walletId, addressId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listSmartContracts(walletId, addressId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.listSmartContracts']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Perform a read operation on a smart contract without creating a transaction\n         * @summary Read data from a smart contract\n         * @param {string} networkId\n         * @param {string} contractAddress\n         * @param {ReadContractRequest} readContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async readContract(networkId, contractAddress, readContractRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.readContract(networkId, contractAddress, readContractRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['SmartContractsApi.readContract']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.SmartContractsApiFp = SmartContractsApiFp;\n/**\n * SmartContractsApi - factory interface\n * @export\n */\nconst SmartContractsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.SmartContractsApiFp)(configuration);\n    return {\n        /**\n         * Create a new smart contract\n         * @summary Create a new smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to deploy the smart contract from.\n         * @param {CreateSmartContractRequest} createSmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSmartContract(walletId, addressId, createSmartContractRequest, options) {\n            return localVarFp.createSmartContract(walletId, addressId, createSmartContractRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Deploys a smart contract, by broadcasting the transaction to the network.\n         * @summary Deploy a smart contract\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to broadcast the transaction from.\n         * @param {string} smartContractId The UUID of the smart contract to broadcast the transaction to.\n         * @param {DeploySmartContractRequest} deploySmartContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options) {\n            return localVarFp.deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a specific smart contract deployed by address.\n         * @summary Get a specific smart contract deployed by address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to fetch the smart contract for.\n         * @param {string} smartContractId The UUID of the smart contract to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSmartContract(walletId, addressId, smartContractId, options) {\n            return localVarFp.getSmartContract(walletId, addressId, smartContractId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List all smart contracts deployed by address.\n         * @summary List smart contracts deployed by address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to fetch the smart contracts for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSmartContracts(walletId, addressId, options) {\n            return localVarFp.listSmartContracts(walletId, addressId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Perform a read operation on a smart contract without creating a transaction\n         * @summary Read data from a smart contract\n         * @param {string} networkId\n         * @param {string} contractAddress\n         * @param {ReadContractRequest} readContractRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        readContract(networkId, contractAddress, readContractRequest, options) {\n            return localVarFp.readContract(networkId, contractAddress, readContractRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.SmartContractsApiFactory = SmartContractsApiFactory;\n/**\n * SmartContractsApi - object-oriented interface\n * @export\n * @class SmartContractsApi\n * @extends {BaseAPI}\n */\nclass SmartContractsApi extends base_1.BaseAPI {\n    /**\n     * Create a new smart contract\n     * @summary Create a new smart contract\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address to deploy the smart contract from.\n     * @param {CreateSmartContractRequest} createSmartContractRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    createSmartContract(walletId, addressId, createSmartContractRequest, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).createSmartContract(walletId, addressId, createSmartContractRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Deploys a smart contract, by broadcasting the transaction to the network.\n     * @summary Deploy a smart contract\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address to broadcast the transaction from.\n     * @param {string} smartContractId The UUID of the smart contract to broadcast the transaction to.\n     * @param {DeploySmartContractRequest} deploySmartContractRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).deploySmartContract(walletId, addressId, smartContractId, deploySmartContractRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get a specific smart contract deployed by address.\n     * @summary Get a specific smart contract deployed by address\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address to fetch the smart contract for.\n     * @param {string} smartContractId The UUID of the smart contract to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    getSmartContract(walletId, addressId, smartContractId, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).getSmartContract(walletId, addressId, smartContractId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List all smart contracts deployed by address.\n     * @summary List smart contracts deployed by address\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address to fetch the smart contracts for.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    listSmartContracts(walletId, addressId, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).listSmartContracts(walletId, addressId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Perform a read operation on a smart contract without creating a transaction\n     * @summary Read data from a smart contract\n     * @param {string} networkId\n     * @param {string} contractAddress\n     * @param {ReadContractRequest} readContractRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmartContractsApi\n     */\n    readContract(networkId, contractAddress, readContractRequest, options) {\n        return (0, exports.SmartContractsApiFp)(this.configuration).readContract(networkId, contractAddress, readContractRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.SmartContractsApi = SmartContractsApi;\n/**\n * StakeApi - axios parameter creator\n * @export\n */\nconst StakeApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Build a new staking operation\n         * @summary Build a new staking operation\n         * @param {BuildStakingOperationRequest} buildStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        buildStakingOperation: async (buildStakingOperationRequest, options = {}) => {\n            // verify required parameter 'buildStakingOperationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('buildStakingOperation', 'buildStakingOperationRequest', buildStakingOperationRequest);\n            const localVarPath = `/v1/stake/build`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(buildStakingOperationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch historical staking balances for given address.\n         * @summary Fetch historical staking balances\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The ID of the asset for which the historical staking balances are being fetched.\n         * @param {string} addressId The onchain address for which the historical staking balances are being fetched.\n         * @param {string} startTime The start time of this historical staking balance period.\n         * @param {string} endTime The end time of this historical staking balance period.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchHistoricalStakingBalances: async (networkId, assetId, addressId, startTime, endTime, limit, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('fetchHistoricalStakingBalances', 'networkId', networkId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('fetchHistoricalStakingBalances', 'assetId', assetId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('fetchHistoricalStakingBalances', 'addressId', addressId);\n            // verify required parameter 'startTime' is not null or undefined\n            (0, common_1.assertParamExists)('fetchHistoricalStakingBalances', 'startTime', startTime);\n            // verify required parameter 'endTime' is not null or undefined\n            (0, common_1.assertParamExists)('fetchHistoricalStakingBalances', 'endTime', endTime);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/stake/balances`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (assetId !== undefined) {\n                localVarQueryParameter['asset_id'] = assetId;\n            }\n            if (startTime !== undefined) {\n                localVarQueryParameter['start_time'] = (startTime instanceof Date) ?\n                    startTime.toISOString() :\n                    startTime;\n            }\n            if (endTime !== undefined) {\n                localVarQueryParameter['end_time'] = (endTime instanceof Date) ?\n                    endTime.toISOString() :\n                    endTime;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch staking rewards for a list of addresses\n         * @summary Fetch staking rewards\n         * @param {FetchStakingRewardsRequest} fetchStakingRewardsRequest\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchStakingRewards: async (fetchStakingRewardsRequest, limit, page, options = {}) => {\n            // verify required parameter 'fetchStakingRewardsRequest' is not null or undefined\n            (0, common_1.assertParamExists)('fetchStakingRewards', 'fetchStakingRewardsRequest', fetchStakingRewardsRequest);\n            const localVarPath = `/v1/stake/rewards/search`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(fetchStakingRewardsRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the latest state of a staking operation\n         * @summary Get the latest state of a staking operation\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the staking operation for\n         * @param {string} stakingOperationId The ID of the staking operation\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getExternalStakingOperation: async (networkId, addressId, stakingOperationId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalStakingOperation', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalStakingOperation', 'addressId', addressId);\n            // verify required parameter 'stakingOperationId' is not null or undefined\n            (0, common_1.assertParamExists)('getExternalStakingOperation', 'stakingOperationId', stakingOperationId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/staking_operations/{staking_operation_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"staking_operation_id\"}}`, encodeURIComponent(String(stakingOperationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get staking context for an address\n         * @summary Get staking context\n         * @param {GetStakingContextRequest} getStakingContextRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakingContext: async (getStakingContextRequest, options = {}) => {\n            // verify required parameter 'getStakingContextRequest' is not null or undefined\n            (0, common_1.assertParamExists)('getStakingContext', 'getStakingContextRequest', getStakingContextRequest);\n            const localVarPath = `/v1/stake/context`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getStakingContextRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.StakeApiAxiosParamCreator = StakeApiAxiosParamCreator;\n/**\n * StakeApi - functional programming interface\n * @export\n */\nconst StakeApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.StakeApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Build a new staking operation\n         * @summary Build a new staking operation\n         * @param {BuildStakingOperationRequest} buildStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async buildStakingOperation(buildStakingOperationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.buildStakingOperation(buildStakingOperationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.buildStakingOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch historical staking balances for given address.\n         * @summary Fetch historical staking balances\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The ID of the asset for which the historical staking balances are being fetched.\n         * @param {string} addressId The onchain address for which the historical staking balances are being fetched.\n         * @param {string} startTime The start time of this historical staking balance period.\n         * @param {string} endTime The end time of this historical staking balance period.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.fetchHistoricalStakingBalances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch staking rewards for a list of addresses\n         * @summary Fetch staking rewards\n         * @param {FetchStakingRewardsRequest} fetchStakingRewardsRequest\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.fetchStakingRewards']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the latest state of a staking operation\n         * @summary Get the latest state of a staking operation\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the staking operation for\n         * @param {string} stakingOperationId The ID of the staking operation\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getExternalStakingOperation(networkId, addressId, stakingOperationId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalStakingOperation(networkId, addressId, stakingOperationId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.getExternalStakingOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get staking context for an address\n         * @summary Get staking context\n         * @param {GetStakingContextRequest} getStakingContextRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getStakingContext(getStakingContextRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getStakingContext(getStakingContextRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['StakeApi.getStakingContext']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.StakeApiFp = StakeApiFp;\n/**\n * StakeApi - factory interface\n * @export\n */\nconst StakeApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.StakeApiFp)(configuration);\n    return {\n        /**\n         * Build a new staking operation\n         * @summary Build a new staking operation\n         * @param {BuildStakingOperationRequest} buildStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        buildStakingOperation(buildStakingOperationRequest, options) {\n            return localVarFp.buildStakingOperation(buildStakingOperationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetch historical staking balances for given address.\n         * @summary Fetch historical staking balances\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The ID of the asset for which the historical staking balances are being fetched.\n         * @param {string} addressId The onchain address for which the historical staking balances are being fetched.\n         * @param {string} startTime The start time of this historical staking balance period.\n         * @param {string} endTime The end time of this historical staking balance period.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options) {\n            return localVarFp.fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetch staking rewards for a list of addresses\n         * @summary Fetch staking rewards\n         * @param {FetchStakingRewardsRequest} fetchStakingRewardsRequest\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options) {\n            return localVarFp.fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the latest state of a staking operation\n         * @summary Get the latest state of a staking operation\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the staking operation for\n         * @param {string} stakingOperationId The ID of the staking operation\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getExternalStakingOperation(networkId, addressId, stakingOperationId, options) {\n            return localVarFp.getExternalStakingOperation(networkId, addressId, stakingOperationId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get staking context for an address\n         * @summary Get staking context\n         * @param {GetStakingContextRequest} getStakingContextRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakingContext(getStakingContextRequest, options) {\n            return localVarFp.getStakingContext(getStakingContextRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.StakeApiFactory = StakeApiFactory;\n/**\n * StakeApi - object-oriented interface\n * @export\n * @class StakeApi\n * @extends {BaseAPI}\n */\nclass StakeApi extends base_1.BaseAPI {\n    /**\n     * Build a new staking operation\n     * @summary Build a new staking operation\n     * @param {BuildStakingOperationRequest} buildStakingOperationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    buildStakingOperation(buildStakingOperationRequest, options) {\n        return (0, exports.StakeApiFp)(this.configuration).buildStakingOperation(buildStakingOperationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch historical staking balances for given address.\n     * @summary Fetch historical staking balances\n     * @param {string} networkId The ID of the blockchain network.\n     * @param {string} assetId The ID of the asset for which the historical staking balances are being fetched.\n     * @param {string} addressId The onchain address for which the historical staking balances are being fetched.\n     * @param {string} startTime The start time of this historical staking balance period.\n     * @param {string} endTime The end time of this historical staking balance period.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options) {\n        return (0, exports.StakeApiFp)(this.configuration).fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch staking rewards for a list of addresses\n     * @summary Fetch staking rewards\n     * @param {FetchStakingRewardsRequest} fetchStakingRewardsRequest\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options) {\n        return (0, exports.StakeApiFp)(this.configuration).fetchStakingRewards(fetchStakingRewardsRequest, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get the latest state of a staking operation\n     * @summary Get the latest state of a staking operation\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the staking operation for\n     * @param {string} stakingOperationId The ID of the staking operation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    getExternalStakingOperation(networkId, addressId, stakingOperationId, options) {\n        return (0, exports.StakeApiFp)(this.configuration).getExternalStakingOperation(networkId, addressId, stakingOperationId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get staking context for an address\n     * @summary Get staking context\n     * @param {GetStakingContextRequest} getStakingContextRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakeApi\n     */\n    getStakingContext(getStakingContextRequest, options) {\n        return (0, exports.StakeApiFp)(this.configuration).getStakingContext(getStakingContextRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.StakeApi = StakeApi;\n/**\n * TradesApi - axios parameter creator\n * @export\n */\nconst TradesApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Broadcast a trade\n         * @summary Broadcast a trade\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to broadcast\n         * @param {BroadcastTradeRequest} broadcastTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastTrade: async (walletId, addressId, tradeId, broadcastTradeRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTrade', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTrade', 'addressId', addressId);\n            // verify required parameter 'tradeId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTrade', 'tradeId', tradeId);\n            // verify required parameter 'broadcastTradeRequest' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTrade', 'broadcastTradeRequest', broadcastTradeRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/trades/{trade_id}/broadcast`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"trade_id\"}}`, encodeURIComponent(String(tradeId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(broadcastTradeRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new trade\n         * @summary Create a new trade for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to conduct the trade from\n         * @param {CreateTradeRequest} createTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTrade: async (walletId, addressId, createTradeRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createTrade', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createTrade', 'addressId', addressId);\n            // verify required parameter 'createTradeRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createTrade', 'createTradeRequest', createTradeRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/trades`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createTradeRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a trade by ID\n         * @summary Get a trade by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTrade: async (walletId, addressId, tradeId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getTrade', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getTrade', 'addressId', addressId);\n            // verify required parameter 'tradeId' is not null or undefined\n            (0, common_1.assertParamExists)('getTrade', 'tradeId', tradeId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/trades/{trade_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"trade_id\"}}`, encodeURIComponent(String(tradeId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List trades for an address.\n         * @summary List trades for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list trades for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTrades: async (walletId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listTrades', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listTrades', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/trades`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.TradesApiAxiosParamCreator = TradesApiAxiosParamCreator;\n/**\n * TradesApi - functional programming interface\n * @export\n */\nconst TradesApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.TradesApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Broadcast a trade\n         * @summary Broadcast a trade\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to broadcast\n         * @param {BroadcastTradeRequest} broadcastTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TradesApi.broadcastTrade']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new trade\n         * @summary Create a new trade for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to conduct the trade from\n         * @param {CreateTradeRequest} createTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTrade(walletId, addressId, createTradeRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrade(walletId, addressId, createTradeRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TradesApi.createTrade']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a trade by ID\n         * @summary Get a trade by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTrade(walletId, addressId, tradeId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrade(walletId, addressId, tradeId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TradesApi.getTrade']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List trades for an address.\n         * @summary List trades for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list trades for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listTrades(walletId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listTrades(walletId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TradesApi.listTrades']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.TradesApiFp = TradesApiFp;\n/**\n * TradesApi - factory interface\n * @export\n */\nconst TradesApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.TradesApiFp)(configuration);\n    return {\n        /**\n         * Broadcast a trade\n         * @summary Broadcast a trade\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to broadcast\n         * @param {BroadcastTradeRequest} broadcastTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options) {\n            return localVarFp.broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new trade\n         * @summary Create a new trade for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to conduct the trade from\n         * @param {CreateTradeRequest} createTradeRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTrade(walletId, addressId, createTradeRequest, options) {\n            return localVarFp.createTrade(walletId, addressId, createTradeRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a trade by ID\n         * @summary Get a trade by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the trade belongs to\n         * @param {string} tradeId The ID of the trade to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTrade(walletId, addressId, tradeId, options) {\n            return localVarFp.getTrade(walletId, addressId, tradeId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List trades for an address.\n         * @summary List trades for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list trades for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTrades(walletId, addressId, limit, page, options) {\n            return localVarFp.listTrades(walletId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.TradesApiFactory = TradesApiFactory;\n/**\n * TradesApi - object-oriented interface\n * @export\n * @class TradesApi\n * @extends {BaseAPI}\n */\nclass TradesApi extends base_1.BaseAPI {\n    /**\n     * Broadcast a trade\n     * @summary Broadcast a trade\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address the trade belongs to\n     * @param {string} tradeId The ID of the trade to broadcast\n     * @param {BroadcastTradeRequest} broadcastTradeRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TradesApi\n     */\n    broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options) {\n        return (0, exports.TradesApiFp)(this.configuration).broadcastTrade(walletId, addressId, tradeId, broadcastTradeRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new trade\n     * @summary Create a new trade for an address\n     * @param {string} walletId The ID of the wallet the source address belongs to\n     * @param {string} addressId The ID of the address to conduct the trade from\n     * @param {CreateTradeRequest} createTradeRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TradesApi\n     */\n    createTrade(walletId, addressId, createTradeRequest, options) {\n        return (0, exports.TradesApiFp)(this.configuration).createTrade(walletId, addressId, createTradeRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get a trade by ID\n     * @summary Get a trade by ID\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address the trade belongs to\n     * @param {string} tradeId The ID of the trade to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TradesApi\n     */\n    getTrade(walletId, addressId, tradeId, options) {\n        return (0, exports.TradesApiFp)(this.configuration).getTrade(walletId, addressId, tradeId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List trades for an address.\n     * @summary List trades for an address.\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address to list trades for\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TradesApi\n     */\n    listTrades(walletId, addressId, limit, page, options) {\n        return (0, exports.TradesApiFp)(this.configuration).listTrades(walletId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.TradesApi = TradesApi;\n/**\n * TransactionHistoryApi - axios parameter creator\n * @export\n */\nconst TransactionHistoryApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * List all transactions that interact with the address.\n         * @summary List transactions for an address.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the transactions for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressTransactions: async (networkId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressTransactions', 'networkId', networkId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listAddressTransactions', 'addressId', addressId);\n            const localVarPath = `/v1/networks/{network_id}/addresses/{address_id}/transactions`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.TransactionHistoryApiAxiosParamCreator = TransactionHistoryApiAxiosParamCreator;\n/**\n * TransactionHistoryApi - functional programming interface\n * @export\n */\nconst TransactionHistoryApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.TransactionHistoryApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * List all transactions that interact with the address.\n         * @summary List transactions for an address.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the transactions for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAddressTransactions(networkId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAddressTransactions(networkId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TransactionHistoryApi.listAddressTransactions']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.TransactionHistoryApiFp = TransactionHistoryApiFp;\n/**\n * TransactionHistoryApi - factory interface\n * @export\n */\nconst TransactionHistoryApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.TransactionHistoryApiFp)(configuration);\n    return {\n        /**\n         * List all transactions that interact with the address.\n         * @summary List transactions for an address.\n         * @param {string} networkId The ID of the blockchain network\n         * @param {string} addressId The ID of the address to fetch the transactions for.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAddressTransactions(networkId, addressId, limit, page, options) {\n            return localVarFp.listAddressTransactions(networkId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.TransactionHistoryApiFactory = TransactionHistoryApiFactory;\n/**\n * TransactionHistoryApi - object-oriented interface\n * @export\n * @class TransactionHistoryApi\n * @extends {BaseAPI}\n */\nclass TransactionHistoryApi extends base_1.BaseAPI {\n    /**\n     * List all transactions that interact with the address.\n     * @summary List transactions for an address.\n     * @param {string} networkId The ID of the blockchain network\n     * @param {string} addressId The ID of the address to fetch the transactions for.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransactionHistoryApi\n     */\n    listAddressTransactions(networkId, addressId, limit, page, options) {\n        return (0, exports.TransactionHistoryApiFp)(this.configuration).listAddressTransactions(networkId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.TransactionHistoryApi = TransactionHistoryApi;\n/**\n * TransfersApi - axios parameter creator\n * @export\n */\nconst TransfersApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Broadcast a transfer\n         * @summary Broadcast a transfer\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to broadcast\n         * @param {BroadcastTransferRequest} broadcastTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastTransfer: async (walletId, addressId, transferId, broadcastTransferRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTransfer', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTransfer', 'addressId', addressId);\n            // verify required parameter 'transferId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTransfer', 'transferId', transferId);\n            // verify required parameter 'broadcastTransferRequest' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastTransfer', 'broadcastTransferRequest', broadcastTransferRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/transfers/{transfer_id}/broadcast`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"transfer_id\"}}`, encodeURIComponent(String(transferId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(broadcastTransferRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new transfer\n         * @summary Create a new transfer for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to transfer from\n         * @param {CreateTransferRequest} createTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTransfer: async (walletId, addressId, createTransferRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createTransfer', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createTransfer', 'addressId', addressId);\n            // verify required parameter 'createTransferRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createTransfer', 'createTransferRequest', createTransferRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/transfers`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createTransferRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a transfer by ID\n         * @summary Get a transfer by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTransfer: async (walletId, addressId, transferId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getTransfer', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getTransfer', 'addressId', addressId);\n            // verify required parameter 'transferId' is not null or undefined\n            (0, common_1.assertParamExists)('getTransfer', 'transferId', transferId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/transfers/{transfer_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"transfer_id\"}}`, encodeURIComponent(String(transferId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List transfers for an address.\n         * @summary List transfers for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list transfers for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTransfers: async (walletId, addressId, limit, page, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listTransfers', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('listTransfers', 'addressId', addressId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/transfers`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.TransfersApiAxiosParamCreator = TransfersApiAxiosParamCreator;\n/**\n * TransfersApi - functional programming interface\n * @export\n */\nconst TransfersApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.TransfersApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Broadcast a transfer\n         * @summary Broadcast a transfer\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to broadcast\n         * @param {BroadcastTransferRequest} broadcastTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TransfersApi.broadcastTransfer']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new transfer\n         * @summary Create a new transfer for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to transfer from\n         * @param {CreateTransferRequest} createTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTransfer(walletId, addressId, createTransferRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransfer(walletId, addressId, createTransferRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TransfersApi.createTransfer']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a transfer by ID\n         * @summary Get a transfer by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTransfer(walletId, addressId, transferId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransfer(walletId, addressId, transferId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TransfersApi.getTransfer']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List transfers for an address.\n         * @summary List transfers for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list transfers for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listTransfers(walletId, addressId, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransfers(walletId, addressId, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['TransfersApi.listTransfers']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.TransfersApiFp = TransfersApiFp;\n/**\n * TransfersApi - factory interface\n * @export\n */\nconst TransfersApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.TransfersApiFp)(configuration);\n    return {\n        /**\n         * Broadcast a transfer\n         * @summary Broadcast a transfer\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to broadcast\n         * @param {BroadcastTransferRequest} broadcastTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options) {\n            return localVarFp.broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new transfer\n         * @summary Create a new transfer for an address\n         * @param {string} walletId The ID of the wallet the source address belongs to\n         * @param {string} addressId The ID of the address to transfer from\n         * @param {CreateTransferRequest} createTransferRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTransfer(walletId, addressId, createTransferRequest, options) {\n            return localVarFp.createTransfer(walletId, addressId, createTransferRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a transfer by ID\n         * @summary Get a transfer by ID\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address the transfer belongs to\n         * @param {string} transferId The ID of the transfer to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTransfer(walletId, addressId, transferId, options) {\n            return localVarFp.getTransfer(walletId, addressId, transferId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List transfers for an address.\n         * @summary List transfers for an address.\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to list transfers for\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTransfers(walletId, addressId, limit, page, options) {\n            return localVarFp.listTransfers(walletId, addressId, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.TransfersApiFactory = TransfersApiFactory;\n/**\n * TransfersApi - object-oriented interface\n * @export\n * @class TransfersApi\n * @extends {BaseAPI}\n */\nclass TransfersApi extends base_1.BaseAPI {\n    /**\n     * Broadcast a transfer\n     * @summary Broadcast a transfer\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address the transfer belongs to\n     * @param {string} transferId The ID of the transfer to broadcast\n     * @param {BroadcastTransferRequest} broadcastTransferRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransfersApi\n     */\n    broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options) {\n        return (0, exports.TransfersApiFp)(this.configuration).broadcastTransfer(walletId, addressId, transferId, broadcastTransferRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new transfer\n     * @summary Create a new transfer for an address\n     * @param {string} walletId The ID of the wallet the source address belongs to\n     * @param {string} addressId The ID of the address to transfer from\n     * @param {CreateTransferRequest} createTransferRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransfersApi\n     */\n    createTransfer(walletId, addressId, createTransferRequest, options) {\n        return (0, exports.TransfersApiFp)(this.configuration).createTransfer(walletId, addressId, createTransferRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get a transfer by ID\n     * @summary Get a transfer by ID\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address the transfer belongs to\n     * @param {string} transferId The ID of the transfer to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransfersApi\n     */\n    getTransfer(walletId, addressId, transferId, options) {\n        return (0, exports.TransfersApiFp)(this.configuration).getTransfer(walletId, addressId, transferId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List transfers for an address.\n     * @summary List transfers for an address.\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address to list transfers for\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransfersApi\n     */\n    listTransfers(walletId, addressId, limit, page, options) {\n        return (0, exports.TransfersApiFp)(this.configuration).listTransfers(walletId, addressId, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.TransfersApi = TransfersApi;\n/**\n * UsersApi - axios parameter creator\n * @export\n */\nconst UsersApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get current user\n         * @summary Get current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCurrentUser: async (options = {}) => {\n            const localVarPath = `/v1/users/me`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;\n/**\n * UsersApi - functional programming interface\n * @export\n */\nconst UsersApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.UsersApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Get current user\n         * @summary Get current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCurrentUser(options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['UsersApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.UsersApiFp = UsersApiFp;\n/**\n * UsersApi - factory interface\n * @export\n */\nconst UsersApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.UsersApiFp)(configuration);\n    return {\n        /**\n         * Get current user\n         * @summary Get current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCurrentUser(options) {\n            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.UsersApiFactory = UsersApiFactory;\n/**\n * UsersApi - object-oriented interface\n * @export\n * @class UsersApi\n * @extends {BaseAPI}\n */\nclass UsersApi extends base_1.BaseAPI {\n    /**\n     * Get current user\n     * @summary Get current user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    getCurrentUser(options) {\n        return (0, exports.UsersApiFp)(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.UsersApi = UsersApi;\n/**\n * ValidatorsApi - axios parameter creator\n * @export\n */\nconst ValidatorsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Get a validator belonging to the user for a given network, asset and id.\n         * @summary Get a validator belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validator for.\n         * @param {string} validatorId The unique id of the validator to fetch details for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getValidator: async (networkId, assetId, validatorId, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('getValidator', 'networkId', networkId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('getValidator', 'assetId', assetId);\n            // verify required parameter 'validatorId' is not null or undefined\n            (0, common_1.assertParamExists)('getValidator', 'validatorId', validatorId);\n            const localVarPath = `/v1/networks/{network_id}/assets/{asset_id}/validators/{validator_id}`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)))\n                .replace(`{${\"validator_id\"}}`, encodeURIComponent(String(validatorId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List validators belonging to the user for a given network and asset.\n         * @summary List validators belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validators for.\n         * @param {ValidatorStatus} [status] A filter to list validators based on a status.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listValidators: async (networkId, assetId, status, limit, page, options = {}) => {\n            // verify required parameter 'networkId' is not null or undefined\n            (0, common_1.assertParamExists)('listValidators', 'networkId', networkId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('listValidators', 'assetId', assetId);\n            const localVarPath = `/v1/networks/{network_id}/assets/{asset_id}/validators`\n                .replace(`{${\"network_id\"}}`, encodeURIComponent(String(networkId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (status !== undefined) {\n                localVarQueryParameter['status'] = status;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.ValidatorsApiAxiosParamCreator = ValidatorsApiAxiosParamCreator;\n/**\n * ValidatorsApi - functional programming interface\n * @export\n */\nconst ValidatorsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.ValidatorsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Get a validator belonging to the user for a given network, asset and id.\n         * @summary Get a validator belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validator for.\n         * @param {string} validatorId The unique id of the validator to fetch details for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getValidator(networkId, assetId, validatorId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidator(networkId, assetId, validatorId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ValidatorsApi.getValidator']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List validators belonging to the user for a given network and asset.\n         * @summary List validators belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validators for.\n         * @param {ValidatorStatus} [status] A filter to list validators based on a status.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listValidators(networkId, assetId, status, limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listValidators(networkId, assetId, status, limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['ValidatorsApi.listValidators']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.ValidatorsApiFp = ValidatorsApiFp;\n/**\n * ValidatorsApi - factory interface\n * @export\n */\nconst ValidatorsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.ValidatorsApiFp)(configuration);\n    return {\n        /**\n         * Get a validator belonging to the user for a given network, asset and id.\n         * @summary Get a validator belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validator for.\n         * @param {string} validatorId The unique id of the validator to fetch details for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getValidator(networkId, assetId, validatorId, options) {\n            return localVarFp.getValidator(networkId, assetId, validatorId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List validators belonging to the user for a given network and asset.\n         * @summary List validators belonging to the CDP project\n         * @param {string} networkId The ID of the blockchain network.\n         * @param {string} assetId The symbol of the asset to get the validators for.\n         * @param {ValidatorStatus} [status] A filter to list validators based on a status.\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listValidators(networkId, assetId, status, limit, page, options) {\n            return localVarFp.listValidators(networkId, assetId, status, limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ValidatorsApiFactory = ValidatorsApiFactory;\n/**\n * ValidatorsApi - object-oriented interface\n * @export\n * @class ValidatorsApi\n * @extends {BaseAPI}\n */\nclass ValidatorsApi extends base_1.BaseAPI {\n    /**\n     * Get a validator belonging to the user for a given network, asset and id.\n     * @summary Get a validator belonging to the CDP project\n     * @param {string} networkId The ID of the blockchain network.\n     * @param {string} assetId The symbol of the asset to get the validator for.\n     * @param {string} validatorId The unique id of the validator to fetch details for.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ValidatorsApi\n     */\n    getValidator(networkId, assetId, validatorId, options) {\n        return (0, exports.ValidatorsApiFp)(this.configuration).getValidator(networkId, assetId, validatorId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List validators belonging to the user for a given network and asset.\n     * @summary List validators belonging to the CDP project\n     * @param {string} networkId The ID of the blockchain network.\n     * @param {string} assetId The symbol of the asset to get the validators for.\n     * @param {ValidatorStatus} [status] A filter to list validators based on a status.\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ValidatorsApi\n     */\n    listValidators(networkId, assetId, status, limit, page, options) {\n        return (0, exports.ValidatorsApiFp)(this.configuration).listValidators(networkId, assetId, status, limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ValidatorsApi = ValidatorsApi;\n/**\n * WalletStakeApi - axios parameter creator\n * @export\n */\nconst WalletStakeApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Broadcast a staking operation.\n         * @summary Broadcast a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the staking operation belongs to.\n         * @param {string} stakingOperationId The ID of the staking operation to broadcast.\n         * @param {BroadcastStakingOperationRequest} broadcastStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastStakingOperation: async (walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastStakingOperation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastStakingOperation', 'addressId', addressId);\n            // verify required parameter 'stakingOperationId' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastStakingOperation', 'stakingOperationId', stakingOperationId);\n            // verify required parameter 'broadcastStakingOperationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('broadcastStakingOperation', 'broadcastStakingOperationRequest', broadcastStakingOperationRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/staking_operations/{staking_operation_id}/broadcast`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"staking_operation_id\"}}`, encodeURIComponent(String(stakingOperationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(broadcastStakingOperationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new staking operation.\n         * @summary Create a new staking operation for an address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to create the staking operation for.\n         * @param {CreateStakingOperationRequest} createStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStakingOperation: async (walletId, addressId, createStakingOperationRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createStakingOperation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('createStakingOperation', 'addressId', addressId);\n            // verify required parameter 'createStakingOperationRequest' is not null or undefined\n            (0, common_1.assertParamExists)('createStakingOperation', 'createStakingOperationRequest', createStakingOperationRequest);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/staking_operations`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createStakingOperationRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the latest state of a staking operation.\n         * @summary Get the latest state of a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to fetch the staking operation for.\n         * @param {string} stakingOperationId The ID of the staking operation.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakingOperation: async (walletId, addressId, stakingOperationId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getStakingOperation', 'walletId', walletId);\n            // verify required parameter 'addressId' is not null or undefined\n            (0, common_1.assertParamExists)('getStakingOperation', 'addressId', addressId);\n            // verify required parameter 'stakingOperationId' is not null or undefined\n            (0, common_1.assertParamExists)('getStakingOperation', 'stakingOperationId', stakingOperationId);\n            const localVarPath = `/v1/wallets/{wallet_id}/addresses/{address_id}/staking_operations/{staking_operation_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"address_id\"}}`, encodeURIComponent(String(addressId)))\n                .replace(`{${\"staking_operation_id\"}}`, encodeURIComponent(String(stakingOperationId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.WalletStakeApiAxiosParamCreator = WalletStakeApiAxiosParamCreator;\n/**\n * WalletStakeApi - functional programming interface\n * @export\n */\nconst WalletStakeApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.WalletStakeApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Broadcast a staking operation.\n         * @summary Broadcast a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the staking operation belongs to.\n         * @param {string} stakingOperationId The ID of the staking operation to broadcast.\n         * @param {BroadcastStakingOperationRequest} broadcastStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletStakeApi.broadcastStakingOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new staking operation.\n         * @summary Create a new staking operation for an address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to create the staking operation for.\n         * @param {CreateStakingOperationRequest} createStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createStakingOperation(walletId, addressId, createStakingOperationRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createStakingOperation(walletId, addressId, createStakingOperationRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletStakeApi.createStakingOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the latest state of a staking operation.\n         * @summary Get the latest state of a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to fetch the staking operation for.\n         * @param {string} stakingOperationId The ID of the staking operation.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getStakingOperation(walletId, addressId, stakingOperationId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getStakingOperation(walletId, addressId, stakingOperationId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletStakeApi.getStakingOperation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.WalletStakeApiFp = WalletStakeApiFp;\n/**\n * WalletStakeApi - factory interface\n * @export\n */\nconst WalletStakeApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.WalletStakeApiFp)(configuration);\n    return {\n        /**\n         * Broadcast a staking operation.\n         * @summary Broadcast a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address the staking operation belongs to.\n         * @param {string} stakingOperationId The ID of the staking operation to broadcast.\n         * @param {BroadcastStakingOperationRequest} broadcastStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options) {\n            return localVarFp.broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new staking operation.\n         * @summary Create a new staking operation for an address\n         * @param {string} walletId The ID of the wallet the address belongs to.\n         * @param {string} addressId The ID of the address to create the staking operation for.\n         * @param {CreateStakingOperationRequest} createStakingOperationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createStakingOperation(walletId, addressId, createStakingOperationRequest, options) {\n            return localVarFp.createStakingOperation(walletId, addressId, createStakingOperationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the latest state of a staking operation.\n         * @summary Get the latest state of a staking operation\n         * @param {string} walletId The ID of the wallet the address belongs to\n         * @param {string} addressId The ID of the address to fetch the staking operation for.\n         * @param {string} stakingOperationId The ID of the staking operation.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakingOperation(walletId, addressId, stakingOperationId, options) {\n            return localVarFp.getStakingOperation(walletId, addressId, stakingOperationId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.WalletStakeApiFactory = WalletStakeApiFactory;\n/**\n * WalletStakeApi - object-oriented interface\n * @export\n * @class WalletStakeApi\n * @extends {BaseAPI}\n */\nclass WalletStakeApi extends base_1.BaseAPI {\n    /**\n     * Broadcast a staking operation.\n     * @summary Broadcast a staking operation\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address the staking operation belongs to.\n     * @param {string} stakingOperationId The ID of the staking operation to broadcast.\n     * @param {BroadcastStakingOperationRequest} broadcastStakingOperationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletStakeApi\n     */\n    broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options) {\n        return (0, exports.WalletStakeApiFp)(this.configuration).broadcastStakingOperation(walletId, addressId, stakingOperationId, broadcastStakingOperationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new staking operation.\n     * @summary Create a new staking operation for an address\n     * @param {string} walletId The ID of the wallet the address belongs to.\n     * @param {string} addressId The ID of the address to create the staking operation for.\n     * @param {CreateStakingOperationRequest} createStakingOperationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletStakeApi\n     */\n    createStakingOperation(walletId, addressId, createStakingOperationRequest, options) {\n        return (0, exports.WalletStakeApiFp)(this.configuration).createStakingOperation(walletId, addressId, createStakingOperationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get the latest state of a staking operation.\n     * @summary Get the latest state of a staking operation\n     * @param {string} walletId The ID of the wallet the address belongs to\n     * @param {string} addressId The ID of the address to fetch the staking operation for.\n     * @param {string} stakingOperationId The ID of the staking operation.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletStakeApi\n     */\n    getStakingOperation(walletId, addressId, stakingOperationId, options) {\n        return (0, exports.WalletStakeApiFp)(this.configuration).getStakingOperation(walletId, addressId, stakingOperationId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.WalletStakeApi = WalletStakeApi;\n/**\n * WalletsApi - axios parameter creator\n * @export\n */\nconst WalletsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new wallet scoped to the user.\n         * @summary Create a new wallet\n         * @param {CreateWalletRequest} [createWalletRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWallet: async (createWalletRequest, options = {}) => {\n            const localVarPath = `/v1/wallets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWalletRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get wallet\n         * @summary Get wallet by ID\n         * @param {string} walletId The ID of the wallet to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWallet: async (walletId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getWallet', 'walletId', walletId);\n            const localVarPath = `/v1/wallets/{wallet_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the aggregated balance of an asset across all of the addresses in the wallet.\n         * @summary Get the balance of an asset in the wallet\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletBalance: async (walletId, assetId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('getWalletBalance', 'walletId', walletId);\n            // verify required parameter 'assetId' is not null or undefined\n            (0, common_1.assertParamExists)('getWalletBalance', 'assetId', assetId);\n            const localVarPath = `/v1/wallets/{wallet_id}/balances/{asset_id}`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)))\n                .replace(`{${\"asset_id\"}}`, encodeURIComponent(String(assetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List the balances of all of the addresses in the wallet aggregated by asset.\n         * @summary List wallet balances\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWalletBalances: async (walletId, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('listWalletBalances', 'walletId', walletId);\n            const localVarPath = `/v1/wallets/{wallet_id}/balances`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List wallets belonging to the user.\n         * @summary List wallets\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWallets: async (limit, page, options = {}) => {\n            const localVarPath = `/v1/wallets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.WalletsApiAxiosParamCreator = WalletsApiAxiosParamCreator;\n/**\n * WalletsApi - functional programming interface\n * @export\n */\nconst WalletsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.WalletsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Create a new wallet scoped to the user.\n         * @summary Create a new wallet\n         * @param {CreateWalletRequest} [createWalletRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWallet(createWalletRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWallet(createWalletRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletsApi.createWallet']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get wallet\n         * @summary Get wallet by ID\n         * @param {string} walletId The ID of the wallet to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWallet(walletId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWallet(walletId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletsApi.getWallet']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the aggregated balance of an asset across all of the addresses in the wallet.\n         * @summary Get the balance of an asset in the wallet\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWalletBalance(walletId, assetId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWalletBalance(walletId, assetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletsApi.getWalletBalance']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List the balances of all of the addresses in the wallet aggregated by asset.\n         * @summary List wallet balances\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWalletBalances(walletId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWalletBalances(walletId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletsApi.listWalletBalances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List wallets belonging to the user.\n         * @summary List wallets\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWallets(limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWallets(limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WalletsApi.listWallets']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.WalletsApiFp = WalletsApiFp;\n/**\n * WalletsApi - factory interface\n * @export\n */\nconst WalletsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.WalletsApiFp)(configuration);\n    return {\n        /**\n         * Create a new wallet scoped to the user.\n         * @summary Create a new wallet\n         * @param {CreateWalletRequest} [createWalletRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWallet(createWalletRequest, options) {\n            return localVarFp.createWallet(createWalletRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get wallet\n         * @summary Get wallet by ID\n         * @param {string} walletId The ID of the wallet to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWallet(walletId, options) {\n            return localVarFp.getWallet(walletId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the aggregated balance of an asset across all of the addresses in the wallet.\n         * @summary Get the balance of an asset in the wallet\n         * @param {string} walletId The ID of the wallet to fetch the balance for\n         * @param {string} assetId The symbol of the asset to fetch the balance for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletBalance(walletId, assetId, options) {\n            return localVarFp.getWalletBalance(walletId, assetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List the balances of all of the addresses in the wallet aggregated by asset.\n         * @summary List wallet balances\n         * @param {string} walletId The ID of the wallet to fetch the balances for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWalletBalances(walletId, options) {\n            return localVarFp.listWalletBalances(walletId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List wallets belonging to the user.\n         * @summary List wallets\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWallets(limit, page, options) {\n            return localVarFp.listWallets(limit, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.WalletsApiFactory = WalletsApiFactory;\n/**\n * WalletsApi - object-oriented interface\n * @export\n * @class WalletsApi\n * @extends {BaseAPI}\n */\nclass WalletsApi extends base_1.BaseAPI {\n    /**\n     * Create a new wallet scoped to the user.\n     * @summary Create a new wallet\n     * @param {CreateWalletRequest} [createWalletRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletsApi\n     */\n    createWallet(createWalletRequest, options) {\n        return (0, exports.WalletsApiFp)(this.configuration).createWallet(createWalletRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get wallet\n     * @summary Get wallet by ID\n     * @param {string} walletId The ID of the wallet to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletsApi\n     */\n    getWallet(walletId, options) {\n        return (0, exports.WalletsApiFp)(this.configuration).getWallet(walletId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Get the aggregated balance of an asset across all of the addresses in the wallet.\n     * @summary Get the balance of an asset in the wallet\n     * @param {string} walletId The ID of the wallet to fetch the balance for\n     * @param {string} assetId The symbol of the asset to fetch the balance for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletsApi\n     */\n    getWalletBalance(walletId, assetId, options) {\n        return (0, exports.WalletsApiFp)(this.configuration).getWalletBalance(walletId, assetId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List the balances of all of the addresses in the wallet aggregated by asset.\n     * @summary List wallet balances\n     * @param {string} walletId The ID of the wallet to fetch the balances for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletsApi\n     */\n    listWalletBalances(walletId, options) {\n        return (0, exports.WalletsApiFp)(this.configuration).listWalletBalances(walletId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List wallets belonging to the user.\n     * @summary List wallets\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WalletsApi\n     */\n    listWallets(limit, page, options) {\n        return (0, exports.WalletsApiFp)(this.configuration).listWallets(limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.WalletsApi = WalletsApi;\n/**\n * WebhooksApi - axios parameter creator\n * @export\n */\nconst WebhooksApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new webhook scoped to a wallet\n         * @summary Create a new webhook scoped to a wallet\n         * @param {string} walletId The ID of the wallet to create the webhook for.\n         * @param {CreateWalletWebhookRequest} [createWalletWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWalletWebhook: async (walletId, createWalletWebhookRequest, options = {}) => {\n            // verify required parameter 'walletId' is not null or undefined\n            (0, common_1.assertParamExists)('createWalletWebhook', 'walletId', walletId);\n            const localVarPath = `/v1/wallets/{wallet_id}/webhooks`\n                .replace(`{${\"wallet_id\"}}`, encodeURIComponent(String(walletId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWalletWebhookRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new webhook\n         * @summary Create a new webhook\n         * @param {CreateWebhookRequest} [createWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWebhook: async (createWebhookRequest, options = {}) => {\n            const localVarPath = `/v1/webhooks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWebhookRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a webhook\n         * @summary Delete a webhook\n         * @param {string} webhookId The Webhook uuid that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWebhook: async (webhookId, options = {}) => {\n            // verify required parameter 'webhookId' is not null or undefined\n            (0, common_1.assertParamExists)('deleteWebhook', 'webhookId', webhookId);\n            const localVarPath = `/v1/webhooks/{webhook_id}`\n                .replace(`{${\"webhook_id\"}}`, encodeURIComponent(String(webhookId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List webhooks, optionally filtered by event type.\n         * @summary List webhooks\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWebhooks: async (limit, page, options = {}) => {\n            const localVarPath = `/v1/webhooks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a webhook\n         * @summary Update a webhook\n         * @param {string} webhookId The Webhook id that needs to be updated\n         * @param {UpdateWebhookRequest} [updateWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWebhook: async (webhookId, updateWebhookRequest, options = {}) => {\n            // verify required parameter 'webhookId' is not null or undefined\n            (0, common_1.assertParamExists)('updateWebhook', 'webhookId', webhookId);\n            const localVarPath = `/v1/webhooks/{webhook_id}`\n                .replace(`{${\"webhook_id\"}}`, encodeURIComponent(String(webhookId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateWebhookRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\nexports.WebhooksApiAxiosParamCreator = WebhooksApiAxiosParamCreator;\n/**\n * WebhooksApi - functional programming interface\n * @export\n */\nconst WebhooksApiFp = function (configuration) {\n    const localVarAxiosParamCreator = (0, exports.WebhooksApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Create a new webhook scoped to a wallet\n         * @summary Create a new webhook scoped to a wallet\n         * @param {string} walletId The ID of the wallet to create the webhook for.\n         * @param {CreateWalletWebhookRequest} [createWalletWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWalletWebhook(walletId, createWalletWebhookRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWalletWebhook(walletId, createWalletWebhookRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.createWalletWebhook']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new webhook\n         * @summary Create a new webhook\n         * @param {CreateWebhookRequest} [createWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWebhook(createWebhookRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebhook(createWebhookRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.createWebhook']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Delete a webhook\n         * @summary Delete a webhook\n         * @param {string} webhookId The Webhook uuid that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWebhook(webhookId, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhook(webhookId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.deleteWebhook']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List webhooks, optionally filtered by event type.\n         * @summary List webhooks\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWebhooks(limit, page, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWebhooks(limit, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.listWebhooks']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update a webhook\n         * @summary Update a webhook\n         * @param {string} webhookId The Webhook id that needs to be updated\n         * @param {UpdateWebhookRequest} [updateWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWebhook(webhookId, updateWebhookRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhook(webhookId, updateWebhookRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.updateWebhook']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    };\n};\nexports.WebhooksApiFp = WebhooksApiFp;\n/**\n * WebhooksApi - factory interface\n * @export\n */\nconst WebhooksApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = (0, exports.WebhooksApiFp)(configuration);\n    return {\n        /**\n         * Create a new webhook scoped to a wallet\n         * @summary Create a new webhook scoped to a wallet\n         * @param {string} walletId The ID of the wallet to create the webhook for.\n         * @param {CreateWalletWebhookRequest} [createWalletWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWalletWebhook(walletId, createWalletWebhookRequest, options) {\n            return localVarFp.createWalletWebhook(walletId, createWalletWebhookRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new webhook\n         * @summary Create a new webhook\n         * @param {CreateWebhookRequest} [createWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWebhook(createWebhookRequest, options) {\n            return localVarFp.createWebhook(createWebhookRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a webhook\n         * @summary Delete a webhook\n         * @param {string} webhookId The Webhook uuid that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWebhook(webhookId, options) {\n            return localVarFp.deleteWebhook(webhookId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List webhooks, optionally filtered by event type.\n         * @summary List webhooks\n         * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n         * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWebhooks(limit, page, options) {\n            return localVarFp.listWebhooks(limit, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a webhook\n         * @summary Update a webhook\n         * @param {string} webhookId The Webhook id that needs to be updated\n         * @param {UpdateWebhookRequest} [updateWebhookRequest]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWebhook(webhookId, updateWebhookRequest, options) {\n            return localVarFp.updateWebhook(webhookId, updateWebhookRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.WebhooksApiFactory = WebhooksApiFactory;\n/**\n * WebhooksApi - object-oriented interface\n * @export\n * @class WebhooksApi\n * @extends {BaseAPI}\n */\nclass WebhooksApi extends base_1.BaseAPI {\n    /**\n     * Create a new webhook scoped to a wallet\n     * @summary Create a new webhook scoped to a wallet\n     * @param {string} walletId The ID of the wallet to create the webhook for.\n     * @param {CreateWalletWebhookRequest} [createWalletWebhookRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhooksApi\n     */\n    createWalletWebhook(walletId, createWalletWebhookRequest, options) {\n        return (0, exports.WebhooksApiFp)(this.configuration).createWalletWebhook(walletId, createWalletWebhookRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new webhook\n     * @summary Create a new webhook\n     * @param {CreateWebhookRequest} [createWebhookRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhooksApi\n     */\n    createWebhook(createWebhookRequest, options) {\n        return (0, exports.WebhooksApiFp)(this.configuration).createWebhook(createWebhookRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Delete a webhook\n     * @summary Delete a webhook\n     * @param {string} webhookId The Webhook uuid that needs to be deleted\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhooksApi\n     */\n    deleteWebhook(webhookId, options) {\n        return (0, exports.WebhooksApiFp)(this.configuration).deleteWebhook(webhookId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * List webhooks, optionally filtered by event type.\n     * @summary List webhooks\n     * @param {number} [limit] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n     * @param {string} [page] A cursor for pagination across multiple pages of results. Don\\&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhooksApi\n     */\n    listWebhooks(limit, page, options) {\n        return (0, exports.WebhooksApiFp)(this.configuration).listWebhooks(limit, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Update a webhook\n     * @summary Update a webhook\n     * @param {string} webhookId The Webhook id that needs to be updated\n     * @param {UpdateWebhookRequest} [updateWebhookRequest]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhooksApi\n     */\n    updateWebhook(webhookId, updateWebhookRequest, options) {\n        return (0, exports.WebhooksApiFp)(this.configuration).updateWebhook(webhookId, updateWebhookRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.WebhooksApi = WebhooksApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/base.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/client/base.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Coinbase Platform API\n * This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.\n *\n * The version of the OpenAPI document: 0.0.1-alpha\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.operationServerMap = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\"));\nexports.BASE_PATH = \"https://api.cdp.coinbase.com/platform\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nclass BaseAPI {\n    constructor(configuration, basePath = exports.BASE_PATH, axios = axios_1.default) {\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath ?? basePath;\n        }\n    }\n}\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nclass RequiredError extends Error {\n    constructor(field, msg) {\n        super(msg);\n        this.field = field;\n        this.name = \"RequiredError\";\n    }\n}\nexports.RequiredError = RequiredError;\n/**\n *\n * @export\n */\nexports.operationServerMap = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NsaWVudC9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxxQkFBcUIsR0FBRyxlQUFlLEdBQUcsMEJBQTBCLEdBQUcsaUJBQWlCO0FBQ3JILGdDQUFnQyxtQkFBTyxDQUFDLDZEQUFPO0FBQy9DLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aGNoYWluLWFwcC8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvY2xpZW50L2Jhc2UuanM/MzcwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBDb2luYmFzZSBQbGF0Zm9ybSBBUElcbiAqIFRoaXMgaXMgdGhlIE9wZW5BUEkgMy4wIHNwZWNpZmljYXRpb24gZm9yIHRoZSBDb2luYmFzZSBQbGF0Zm9ybSBBUElzLCB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIENvaW5iYXNlIFBsYXRmb3JtIFNES3MuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDAuMC4xLWFscGhhXG4gKlxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vcGVyYXRpb25TZXJ2ZXJNYXAgPSBleHBvcnRzLlJlcXVpcmVkRXJyb3IgPSBleHBvcnRzLkJhc2VBUEkgPSBleHBvcnRzLkNPTExFQ1RJT05fRk9STUFUUyA9IGV4cG9ydHMuQkFTRV9QQVRIID0gdm9pZCAwO1xuY29uc3QgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xuZXhwb3J0cy5CQVNFX1BBVEggPSBcImh0dHBzOi8vYXBpLmNkcC5jb2luYmFzZS5jb20vcGxhdGZvcm1cIi5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLkNPTExFQ1RJT05fRk9STUFUUyA9IHtcbiAgICBjc3Y6IFwiLFwiLFxuICAgIHNzdjogXCIgXCIsXG4gICAgdHN2OiBcIlxcdFwiLFxuICAgIHBpcGVzOiBcInxcIixcbn07XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgQmFzZUFQSVxuICovXG5jbGFzcyBCYXNlQVBJIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uLCBiYXNlUGF0aCA9IGV4cG9ydHMuQkFTRV9QQVRILCBheGlvcyA9IGF4aW9zXzEuZGVmYXVsdCkge1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgICAgIHRoaXMuYXhpb3MgPSBheGlvcztcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB0aGlzLmJhc2VQYXRoID0gY29uZmlndXJhdGlvbi5iYXNlUGF0aCA/PyBiYXNlUGF0aDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQmFzZUFQSSA9IEJhc2VBUEk7XG47XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgUmVxdWlyZWRFcnJvclxuICogQGV4dGVuZHMge0Vycm9yfVxuICovXG5jbGFzcyBSZXF1aXJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkLCBtc2cpIHtcbiAgICAgICAgc3VwZXIobXNnKTtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlJlcXVpcmVkRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVpcmVkRXJyb3IgPSBSZXF1aXJlZEVycm9yO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLm9wZXJhdGlvblNlcnZlck1hcCA9IHt9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/common.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/client/common.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Coinbase Platform API\n * This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.\n *\n * The version of the OpenAPI document: 0.0.1-alpha\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;\nconst base_1 = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/base.js\");\n/**\n *\n * @export\n */\nexports.DUMMY_BASE_URL = 'https://example.com';\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nconst assertParamExists = function (functionName, paramName, paramValue) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n};\nexports.assertParamExists = assertParamExists;\n/**\n *\n * @export\n */\nconst setApiKeyToObject = async function (object, keyParamName, configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n};\nexports.setApiKeyToObject = setApiKeyToObject;\n/**\n *\n * @export\n */\nconst setBasicAuthToObject = function (object, configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n};\nexports.setBasicAuthToObject = setBasicAuthToObject;\n/**\n *\n * @export\n */\nconst setBearerAuthToObject = async function (object, configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n};\nexports.setBearerAuthToObject = setBearerAuthToObject;\n/**\n *\n * @export\n */\nconst setOAuthToObject = async function (object, name, scopes, configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n};\nexports.setOAuthToObject = setOAuthToObject;\nfunction setFlattenedQueryParams(urlSearchParams, parameter, key = \"\") {\n    if (parameter == null)\n        return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            parameter.forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        }\n        else {\n            Object.keys(parameter).forEach(currentKey => setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`));\n        }\n    }\n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        }\n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n/**\n *\n * @export\n */\nconst setSearchParams = function (url, ...objects) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n};\nexports.setSearchParams = setSearchParams;\n/**\n *\n * @export\n */\nconst serializeDataIfNeeded = function (value, requestOptions, configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n};\nexports.serializeDataIfNeeded = serializeDataIfNeeded;\n/**\n *\n * @export\n */\nconst toPathString = function (url) {\n    return url.pathname + url.search + url.hash;\n};\nexports.toPathString = toPathString;\n/**\n *\n * @export\n */\nconst createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {\n    return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url };\n        return axios.request(axiosRequestArgs);\n    };\n};\nexports.createRequestFunction = createRequestFunction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/configuration.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/client/configuration.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Coinbase Platform API\n * This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.\n *\n * The version of the OpenAPI document: 0.0.1-alpha\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Configuration = void 0;\nclass Configuration {\n    constructor(param = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.serverIndex = param.serverIndex;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\nexports.Configuration = Configuration;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NsaWVudC9jb25maWd1cmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxXQUFXLHNCQUFzQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGhjaGFpbi1hcHAvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NsaWVudC9jb25maWd1cmF0aW9uLmpzPzk5YmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogQ29pbmJhc2UgUGxhdGZvcm0gQVBJXG4gKiBUaGlzIGlzIHRoZSBPcGVuQVBJIDMuMCBzcGVjaWZpY2F0aW9uIGZvciB0aGUgQ29pbmJhc2UgUGxhdGZvcm0gQVBJcywgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBDb2luYmFzZSBQbGF0Zm9ybSBTREtzLlxuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAwLjAuMS1hbHBoYVxuICpcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxuICogaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29uZmlndXJhdGlvbiA9IHZvaWQgMDtcbmNsYXNzIENvbmZpZ3VyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtID0ge30pIHtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBwYXJhbS5hcGlLZXk7XG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSBwYXJhbS51c2VybmFtZTtcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHBhcmFtLnBhc3N3b3JkO1xuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gcGFyYW0uYWNjZXNzVG9rZW47XG4gICAgICAgIHRoaXMuYmFzZVBhdGggPSBwYXJhbS5iYXNlUGF0aDtcbiAgICAgICAgdGhpcy5zZXJ2ZXJJbmRleCA9IHBhcmFtLnNlcnZlckluZGV4O1xuICAgICAgICB0aGlzLmJhc2VPcHRpb25zID0gcGFyYW0uYmFzZU9wdGlvbnM7XG4gICAgICAgIHRoaXMuZm9ybURhdGFDdG9yID0gcGFyYW0uZm9ybURhdGFDdG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gTUlNRSBpcyBhIEpTT04gTUlNRS5cbiAgICAgKiBKU09OIE1JTUUgZXhhbXBsZXM6XG4gICAgICogICBhcHBsaWNhdGlvbi9qc29uXG4gICAgICogICBhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURjhcbiAgICAgKiAgIEFQUExJQ0FUSU9OL0pTT05cbiAgICAgKiAgIGFwcGxpY2F0aW9uL3ZuZC5jb21wYW55K2pzb25cbiAgICAgKiBAcGFyYW0gbWltZSAtIE1JTUUgKE11bHRpcHVycG9zZSBJbnRlcm5ldCBNYWlsIEV4dGVuc2lvbnMpXG4gICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBnaXZlbiBNSU1FIGlzIEpTT04sIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBpc0pzb25NaW1lKG1pbWUpIHtcbiAgICAgICAgY29uc3QganNvbk1pbWUgPSBuZXcgUmVnRXhwKCdeKGFwcGxpY2F0aW9uXFwvanNvbnxbXjsvIFxcdF0rXFwvW147LyBcXHRdK1srXWpzb24pWyBcXHRdKig7LiopPyQnLCAnaScpO1xuICAgICAgICByZXR1cm4gbWltZSAhPT0gbnVsbCAmJiAoanNvbk1pbWUudGVzdChtaW1lKSB8fCBtaW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhcHBsaWNhdGlvbi9qc29uLXBhdGNoK2pzb24nKTtcbiAgICB9XG59XG5leHBvcnRzLkNvbmZpZ3VyYXRpb24gPSBDb25maWd1cmF0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/configuration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/client/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Coinbase Platform API\n * This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.\n *\n * The version of the OpenAPI document: 0.0.1-alpha\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./api */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\"), exports);\n__exportStar(__webpack_require__(/*! ./configuration */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/configuration.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NsaWVudC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw2RUFBTztBQUM1QixhQUFhLG1CQUFPLENBQUMsaUdBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jbGllbnQvaW5kZXguanM/YmFmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBDb2luYmFzZSBQbGF0Zm9ybSBBUElcbiAqIFRoaXMgaXMgdGhlIE9wZW5BUEkgMy4wIHNwZWNpZmljYXRpb24gZm9yIHRoZSBDb2luYmFzZSBQbGF0Zm9ybSBBUElzLCB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIENvaW5iYXNlIFBsYXRmb3JtIFNES3MuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDAuMC4xLWFscGhhXG4gKlxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXBpXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25maWd1cmF0aW9uXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Address = void 0;\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/decimal.js/decimal.js\"));\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst balance_1 = __webpack_require__(/*! ./balance */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\");\nconst balance_map_1 = __webpack_require__(/*! ./balance_map */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js\");\nconst faucet_transaction_1 = __webpack_require__(/*! ./faucet_transaction */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/faucet_transaction.js\");\nconst historical_balance_1 = __webpack_require__(/*! ./historical_balance */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/historical_balance.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst staking_reward_1 = __webpack_require__(/*! ./staking_reward */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_reward.js\");\nconst staking_balance_1 = __webpack_require__(/*! ./staking_balance */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_balance.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\n/**\n * A representation of a blockchain address, which is a user-controlled account on a network.\n */\nclass Address {\n    /**\n     * Initializes a new Address instance.\n     *\n     * @param networkId - The network id.\n     * @param id - The onchain address id.\n     */\n    constructor(networkId, id) {\n        this.networkId = networkId;\n        this.id = id;\n    }\n    /**\n     * Returns the network ID.\n     *\n     * @returns The network ID.\n     */\n    getNetworkId() {\n        return this.networkId;\n    }\n    /**\n     * Returns the address ID.\n     *\n     * @returns The address ID.\n     */\n    getId() {\n        return this.id;\n    }\n    /**\n     * Returns the list of balances for the address.\n     *\n     * @returns The map from asset ID to balance.\n     */\n    async listBalances() {\n        const response = await coinbase_1.Coinbase.apiClients.externalAddress.listExternalAddressBalances(this.getNetworkId(), this.getId());\n        return balance_map_1.BalanceMap.fromBalances(response.data.data);\n    }\n    /**\n     * Returns the balance of the provided asset.\n     *\n     * @param assetId - The asset ID.\n     * @returns The balance of the asset.\n     */\n    async getBalance(assetId) {\n        const response = await coinbase_1.Coinbase.apiClients.externalAddress.getExternalAddressBalance(this.getNetworkId(), this.getId(), asset_1.Asset.primaryDenomination(assetId));\n        if (!response.data) {\n            return new decimal_js_1.default(0);\n        }\n        return balance_1.Balance.fromModelAndAssetId(response.data, assetId).amount;\n    }\n    /**\n     * Returns the historical balances of the provided asset.\n     *\n     * @param assetId - The asset ID.\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Historical Balances to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Historical Balances. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of Historical Balances for the given Asset ID.\n     */\n    async listHistoricalBalances(assetId, { limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.balanceHistory.listAddressHistoricalBalance(this.getNetworkId(), this.getId(), asset_1.Asset.primaryDenomination(assetId), limit, page);\n        response.data.data.forEach(historicalBalanceModel => {\n            const historicalBalance = historical_balance_1.HistoricalBalance.fromModel(historicalBalanceModel);\n            data.push(historicalBalance);\n        });\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Returns the transactions of the address.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Transactions to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Transactions. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of Transactions.\n     */\n    async listTransactions({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.transactionHistory.listAddressTransactions(this.getNetworkId(), this.getId(), limit, page);\n        response.data.data.forEach(transactionModel => {\n            const transaction = new transaction_1.Transaction(transactionModel);\n            data.push(transaction);\n        });\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Lists the staking rewards for the address.\n     *\n     * @param assetId - The asset ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @param format - The format to return the rewards in. (usd, native). Defaults to usd.\n     * @returns The staking rewards.\n     */\n    async stakingRewards(assetId, startTime = (0, utils_1.getWeekBackDate)(new Date()), endTime = (0, utils_1.formatDate)(new Date()), format = types_1.StakingRewardFormat.USD) {\n        return staking_reward_1.StakingReward.list(coinbase_1.Coinbase.normalizeNetwork(this.getNetworkId()), assetId, [this.getId()], startTime, endTime, format);\n    }\n    /**\n     * Lists the historical staking balances for the address.\n     *\n     * @param assetId - The asset ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @returns The staking balances.\n     */\n    async historicalStakingBalances(assetId, startTime = (0, utils_1.getWeekBackDate)(new Date()), endTime = (0, utils_1.formatDate)(new Date())) {\n        return staking_balance_1.StakingBalance.list(coinbase_1.Coinbase.normalizeNetwork(this.getNetworkId()), assetId, this.getId(), startTime, endTime);\n    }\n    /**\n     * Get the stakeable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check the stakeable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the stakeable balance.\n     * @returns The stakeable balance.\n     */\n    async stakeableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        const balances = await this.getStakingBalances(asset_id, mode, options);\n        return balances.stakeableBalance;\n    }\n    /**\n     * Get the unstakeable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check the unstakeable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the unstakeable balance.\n     * A. Dedicated ETH Staking\n     *  - `validator_pub_keys` (optional): List of comma separated validator public keys to retrieve unstakeable balance for. Defaults to all validators.\n     * @returns The unstakeable balance.\n     */\n    async unstakeableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        const balances = await this.getStakingBalances(asset_id, mode, options);\n        return balances.unstakeableBalance;\n    }\n    /**\n     * Get the claimable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check claimable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the claimable balance.\n     * @returns The claimable balance.\n     */\n    async claimableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        const balances = await this.getStakingBalances(asset_id, mode, options);\n        return balances.claimableBalance;\n    }\n    /**\n     * Requests faucet funds for the address.\n     * Only supported on testnet networks.\n     *\n     * @param assetId - The ID of the asset to transfer from the faucet.\n     * @returns The faucet transaction object.\n     * @throws {Error} If the request does not return a transaction hash.\n     * @throws {Error} If the request fails.\n     */\n    async faucet(assetId) {\n        const response = await coinbase_1.Coinbase.apiClients.externalAddress.requestExternalFaucetFunds(this.getNetworkId(), this.getId(), assetId, true);\n        return new faucet_transaction_1.FaucetTransaction(response.data);\n    }\n    /**\n     * Returns a string representation of the address.\n     *\n     * @returns A string representing the address.\n     */\n    toString() {\n        return `Address { addressId: '${this.getId()}', networkId: '${this.getNetworkId()}' }`;\n    }\n    /**\n     * Validate if the operation is able to stake with the supplied input.\n     *\n     * @param amount - The amount of the asset to stake.\n     * @param assetId - The asset to stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the stake operation.\n     * @private\n     * @throws {Error} If the supplied input is not able to create a stake operation.\n     */\n    async validateCanStake(amount, assetId, mode, options) {\n        const stakeableBalance = await this.stakeableBalance(assetId, mode, options);\n        if (new decimal_js_1.default(stakeableBalance).lessThan(amount.toString())) {\n            throw new Error(`Insufficient funds ${amount} requested to stake, only ${stakeableBalance} available.`);\n        }\n    }\n    /**\n     * Validate if the operation is able to unstake with the supplied input.\n     *\n     * @param amount - The amount of the asset to unstake.\n     * @param assetId - The asset to unstake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the unstake operation.\n     * @private\n     * @throws {Error} If the supplied input is not able to create an unstake operation.\n     */\n    async validateCanUnstake(amount, assetId, mode, options) {\n        const unstakeableBalance = new decimal_js_1.default(await this.unstakeableBalance(assetId, mode, options));\n        if (unstakeableBalance.lessThan(amount.toString())) {\n            throw new Error(`Insufficient funds ${amount} requested to unstake, only ${unstakeableBalance} available.`);\n        }\n    }\n    /**\n     * Validate if the operation is able to claim stake with the supplied input.\n     *\n     * @param amount - The amount of the asset to claim stake.\n     * @param assetId - The asset to claim stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the claim stake operation.\n     * @private\n     * @throws {Error} If the supplied input is not able to create a claim stake operation.\n     */\n    async validateCanClaimStake(amount, assetId, mode, options) {\n        if (assetId === \"eth\" && mode === types_1.StakeOptionsMode.NATIVE) {\n            throw new Error(`Claiming stake for ETH is not supported in native mode.`);\n        }\n        const claimableBalance = new decimal_js_1.default(await this.claimableBalance(assetId, mode, options));\n        if (claimableBalance.lessThan(amount.toString())) {\n            throw new Error(`Insufficient funds ${amount} requested to claim stake, only ${claimableBalance} available.`);\n        }\n    }\n    /**\n     * Create a shallow copy of given options.\n     *\n     * @param options - The supplied options to be copied\n     * @private\n     * @returns A copy of the options.\n     */\n    copyOptions(options) {\n        return { ...options };\n    }\n    /**\n     * Get the different staking balance types for the supplied asset.\n     *\n     * @param assetId - The asset to lookup balances for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the balance lookup.\n     * @private\n     * @returns The different balance types.\n     */\n    async getStakingBalances(assetId, mode, options) {\n        const newOptions = this.copyOptions(options);\n        if (mode) {\n            newOptions.mode = mode;\n        }\n        const request = {\n            network_id: this.getNetworkId(),\n            asset_id: asset_1.Asset.primaryDenomination(assetId),\n            address_id: this.getId(),\n            options: newOptions,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.stake.getStakingContext(request);\n        return {\n            stakeableBalance: balance_1.Balance.fromModelAndAssetId(response.data.context.stakeable_balance, assetId).amount,\n            unstakeableBalance: balance_1.Balance.fromModelAndAssetId(response.data.context.unstakeable_balance, assetId).amount,\n            claimableBalance: balance_1.Balance.fromModelAndAssetId(response.data.context.claimable_balance, assetId).amount,\n        };\n    }\n}\nexports.Address = Address;\nAddress.MAX_HISTORICAL_BALANCE = 1000;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/external_address.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/external_address.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExternalAddress = void 0;\nconst address_1 = __webpack_require__(/*! ../address */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst coinbase_1 = __webpack_require__(/*! ../coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/decimal.js/decimal.js\"));\nconst asset_1 = __webpack_require__(/*! ../asset */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst staking_operation_1 = __webpack_require__(/*! ../staking_operation */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js\");\n/**\n * A representation of a blockchain Address, which is a user-controlled account on a Network. Addresses are used to\n * send and receive Assets. An ExternalAddress is an Address that is not controlled by the developer, but is instead\n * controlled by the user.\n */\nclass ExternalAddress extends address_1.Address {\n    /**\n     * Builds a stake operation for the supplied asset. The stake operation\n     * may take a few minutes to complete in the case when infrastructure is spun up.\n     *\n     * @param amount - The amount of the asset to stake.\n     * @param assetId - The asset to stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the stake operation:\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the stake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * B. Dedicated ETH Staking\n     *  - `funding_address` (optional): Ethereum address for funding the stake operation. Defaults to the address initiating the stake operation.\n     *  - `withdrawal_address` (optional): Ethereum address for receiving rewards and withdrawal funds. Defaults to the address initiating the stake operation.\n     *  - `fee_recipient_address` (optional): Ethereum address for receiving transaction fees. Defaults to the address initiating the stake operation.\n     *\n     * @returns The stake operation.\n     */\n    async buildStakeOperation(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        await this.validateCanStake(amount, assetId, mode, options);\n        return this.buildStakingOperation(amount, assetId, \"stake\", mode, options);\n    }\n    /**\n     * Builds an unstake operation for the supplied asset.\n     *\n     * @param amount - The amount of the asset to unstake.\n     * @param assetId - The asset to unstake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the unstake operation:\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the unstake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * B. Dedicated ETH Staking\n     *  - `immediate` (optional): Set this to \"true\" to unstake immediately i.e. leverage \"Coinbase managed unstake\" process . Defaults to \"false\" i.e. \"User managed unstake\" process.\n     *  - `validator_pub_keys` (optional): List of comma separated validator public keys to unstake. Defaults to validators being picked up on your behalf corresponding to the unstake amount.\n     *\n     * @returns The unstake operation.\n     */\n    async buildUnstakeOperation(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        await this.validateCanUnstake(amount, assetId, mode, options);\n        return this.buildStakingOperation(amount, assetId, \"unstake\", mode, options);\n    }\n    /**\n     * Builds a claim stake operation for the supplied asset.\n     *\n     * @param amount - The amount of the asset to claim stake.\n     * @param assetId - The asset to claim stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the claim stake operation.\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the claim stake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * @returns The claim stake operation.\n     */\n    async buildClaimStakeOperation(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        await this.validateCanClaimStake(amount, assetId, mode, options);\n        return this.buildStakingOperation(amount, assetId, \"claim_stake\", mode, options);\n    }\n    /**\n     * Builds the staking operation based on the supplied input.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset for the staking operation.\n     * @param action - The specific action for the staking operation. e.g. stake, unstake, claim_stake\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options to build a stake operation.\n     * @private\n     * @returns The staking operation.\n     * @throws {Error} If the supplied input cannot build a valid staking operation.\n     */\n    async buildStakingOperation(amount, assetId, action, mode, options) {\n        const stakingAmount = new decimal_js_1.default(amount.toString());\n        if (stakingAmount.lessThanOrEqualTo(0)) {\n            throw new Error(`Amount required greater than zero.`);\n        }\n        const asset = await asset_1.Asset.fetch(this.getNetworkId(), assetId);\n        const newOptions = this.copyOptions(options);\n        newOptions.mode = mode;\n        newOptions.amount = asset.toAtomicAmount(new decimal_js_1.default(amount.toString())).toString();\n        const request = {\n            network_id: this.getNetworkId(),\n            asset_id: asset_1.Asset.primaryDenomination(assetId),\n            address_id: this.getId(),\n            action: action,\n            options: newOptions,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.stake.buildStakingOperation(request);\n        return new staking_operation_1.StakingOperation(response.data);\n    }\n}\nexports.ExternalAddress = ExternalAddress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/external_address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/wallet_address.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/wallet_address.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WalletAddress = void 0;\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/decimal.js/decimal.js\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.commonjs/index.js\");\nconst client_1 = __webpack_require__(/*! ../../client */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/index.js\");\nconst address_1 = __webpack_require__(/*! ../address */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js\");\nconst asset_1 = __webpack_require__(/*! ../asset */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst coinbase_1 = __webpack_require__(/*! ../coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst trade_1 = __webpack_require__(/*! ../trade */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/trade.js\");\nconst transfer_1 = __webpack_require__(/*! ../transfer */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transfer.js\");\nconst contract_invocation_1 = __webpack_require__(/*! ../contract_invocation */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_invocation.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst wallet_1 = __webpack_require__(/*! ../wallet */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/wallet.js\");\nconst staking_operation_1 = __webpack_require__(/*! ../staking_operation */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js\");\nconst payload_signature_1 = __webpack_require__(/*! ../payload_signature */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/payload_signature.js\");\nconst smart_contract_1 = __webpack_require__(/*! ../smart_contract */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/smart_contract.js\");\n/**\n * A representation of a blockchain address, which is a wallet-controlled account on a network.\n */\nclass WalletAddress extends address_1.Address {\n    /**\n     * Initializes a new Wallet Address instance.\n     *\n     * @param model - The address model data.\n     * @param key - The ethers.js SigningKey the Address uses to sign data.\n     * @throws {Error} If the address model is empty.\n     */\n    constructor(model, key) {\n        if (!model) {\n            throw new Error(\"Address model cannot be empty\");\n        }\n        super(model.network_id, model.address_id);\n        this.model = model;\n        this.key = key;\n    }\n    /**\n     * Returns a string representation of the wallet address.\n     *\n     * @returns A string representing the wallet address.\n     */\n    toString() {\n        return `WalletAddress{ addressId: '${this.getId()}', networkId: '${this.getNetworkId()}', walletId: '${this.getWalletId()}' }`;\n    }\n    /**\n     * Returns the wallet ID.\n     *\n     * @returns The wallet ID.\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Sets the private key.\n     *\n     * @param key - The ethers.js SigningKey the Address uses to sign data.\n     * @throws {Error} If the private key is already set.\n     */\n    setKey(key) {\n        if (this.key !== undefined) {\n            throw new Error(\"Private key is already set\");\n        }\n        this.key = key;\n    }\n    /**\n     * Exports the Address's private key to a hex string.\n     *\n     * @returns The Address's private key as a hex string.\n     */\n    export() {\n        if (this.key === undefined) {\n            throw new Error(\"Private key is not set\");\n        }\n        return this.key.privateKey;\n    }\n    /**\n     * Returns whether the Address has a private key backing it to sign transactions.\n     *\n     * @returns Whether the Address has a private key backing it to sign transactions.\n     */\n    canSign() {\n        return !!this.key;\n    }\n    /**\n     * Returns all the trades associated with the address.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Trades to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Trades. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of trades.\n     */\n    async listTrades({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.trade.listTrades(this.model.wallet_id, this.model.address_id, limit, page);\n        response.data.data.forEach(tradeModel => {\n            data.push(new trade_1.Trade(tradeModel));\n        });\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Returns all the transfers associated with the address.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Transfers to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Transfers. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of transfers.\n     */\n    async listTransfers({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.transfer.listTransfers(this.model.wallet_id, this.model.address_id, limit, page);\n        response.data.data.forEach(transferModel => {\n            data.push(transfer_1.Transfer.fromModel(transferModel));\n        });\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Transfers the given amount of the given Asset to the given address.\n     * Only same-Network Transfers are supported.\n     * This returns a `Transfer` object that has been signed and broadcasted, you\n     * can wait for this to land on-chain (or fail) by calling `transfer.wait()`.\n     *\n     * @param options - The options to create the Transfer.\n     * @param options.amount - The amount of the Asset to send.\n     * @param options.assetId - The ID of the Asset to send. For Ether, Coinbase.assets.Eth, Coinbase.assets.Gwei, and Coinbase.assets.Wei supported.\n     * @param options.destination - The destination of the transfer. If a Wallet, sends to the Wallet's default address. If a String, interprets it as the address ID.\n     * @param options.gasless - Whether the Transfer should be gasless. Defaults to false.\n     * @returns The transfer object.\n     * @throws {APIError} if the API request to create a Transfer fails.\n     * @throws {APIError} if the API request to broadcast a Transfer fails.\n     */\n    async createTransfer({ amount, assetId, destination, gasless = false, }) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot transfer from address without private key loaded\");\n        }\n        const asset = await asset_1.Asset.fetch(this.getNetworkId(), assetId);\n        const [destinationAddress, destinationNetworkId] = await this.getDestinationAddressAndNetwork(destination);\n        const normalizedAmount = new decimal_js_1.Decimal(amount.toString());\n        const currentBalance = await this.getBalance(assetId);\n        if (currentBalance.lessThan(normalizedAmount)) {\n            throw new errors_1.ArgumentError(`Insufficient funds: ${normalizedAmount} requested, but only ${currentBalance} available`);\n        }\n        const createTransferRequest = {\n            amount: asset.toAtomicAmount(normalizedAmount).toString(),\n            network_id: destinationNetworkId,\n            asset_id: asset.primaryDenomination(),\n            destination: destinationAddress,\n            gasless: gasless,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.transfer.createTransfer(this.getWalletId(), this.getId(), createTransferRequest);\n        const transfer = transfer_1.Transfer.fromModel(response.data);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return transfer;\n        }\n        await transfer.sign(this.getSigner());\n        await transfer.broadcast();\n        return transfer;\n    }\n    /**\n     * Gets a signer for the private key.\n     *\n     * @returns The signer for the private key.\n     * @throws {Error} If the private key is not loaded.\n     */\n    getSigner() {\n        if (!this.key) {\n            throw new Error(\"Cannot sign without a private key\");\n        }\n        return new ethers_1.ethers.Wallet(this.key.privateKey);\n    }\n    /**\n     * Trades the given amount of the given Asset for another Asset. Only same-network Trades are supported.\n     *\n     * @param options - The options to create the Trade.\n     * @param options.amount - The amount of the From Asset to send.\n     * @param options.fromAssetId - The ID of the Asset to trade from.\n     * @param options.toAssetId - The ID of the Asset to trade to.\n     * @returns The Trade object.\n     * @throws {APIError} if the API request to create or broadcast a Trade fails.\n     * @throws {Error} if the Trade times out.\n     */\n    async createTrade({ amount, fromAssetId, toAssetId }) {\n        const fromAsset = await asset_1.Asset.fetch(this.getNetworkId(), fromAssetId);\n        const toAsset = await asset_1.Asset.fetch(this.getNetworkId(), toAssetId);\n        await this.validateCanTrade(amount, fromAssetId);\n        const trade = await this.createTradeRequest(amount, fromAsset, toAsset);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return trade;\n        }\n        await trade.sign(this.getSigner());\n        await trade.broadcast();\n        return trade;\n    }\n    /**\n     * Invokes a contract with the given data.\n     *\n     * @param options - The options to invoke the contract\n     * @param options.contractAddress - The address of the contract the method will be invoked on.\n     * @param options.method - The method to invoke on the contract.\n     * @param options.abi - The ABI of the contract.\n     * @param options.args - The arguments to pass to the contract method invocation.\n     *   The keys should be the argument names and the values should be the argument values.\n     * @param options.amount - The amount of the asset to send to a payable contract method.\n     * @param options.assetId - The ID of the asset to send to a payable contract method.\n     *   The asset must be a denomination of the native asset. (Ex. \"wei\", \"gwei\", or \"eth\").\n     * @returns The ContractInvocation object.\n     * @throws {APIError} if the API request to create a contract invocation fails.\n     * @throws {Error} if the address cannot sign.\n     * @throws {ArgumentError} if the address does not have sufficient balance.\n     */\n    async invokeContract(options) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot invoke contract from address without private key loaded\");\n        }\n        let atomicAmount;\n        if (options.assetId && options.amount) {\n            const asset = await asset_1.Asset.fetch(this.getNetworkId(), options.assetId);\n            const normalizedAmount = new decimal_js_1.Decimal(options.amount.toString());\n            const currentBalance = await this.getBalance(options.assetId);\n            if (currentBalance.lessThan(normalizedAmount)) {\n                throw new errors_1.ArgumentError(`Insufficient funds: ${normalizedAmount} requested, but only ${currentBalance} available`);\n            }\n            atomicAmount = asset.toAtomicAmount(normalizedAmount).toString();\n        }\n        const contractInvocation = await this.createContractInvocation(options.contractAddress, options.method, options.abi, options.args, atomicAmount);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return contractInvocation;\n        }\n        await contractInvocation.sign(this.getSigner());\n        await contractInvocation.broadcast();\n        return contractInvocation;\n    }\n    /**\n     * Deploys an ERC20 token contract.\n     *\n     * @param options - The options for creating the ERC20 token.\n     * @param options.name - The name of the ERC20 token.\n     * @param options.symbol - The symbol of the ERC20 token.\n     * @param options.totalSupply - The total supply of the ERC20 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {APIError} If the API request to create a smart contract fails.\n     */\n    async deployToken(options) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot deploy ERC20 without private key loaded\");\n        }\n        const smartContract = await this.createERC20(options);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return smartContract;\n        }\n        await smartContract.sign(this.getSigner());\n        await smartContract.broadcast();\n        return smartContract;\n    }\n    /**\n     * Deploys an ERC721 token contract.\n     *\n     * @param options - The options for creating the ERC721 token.\n     * @param options.name - The name of the ERC721 token.\n     * @param options.symbol - The symbol of the ERC721 token.\n     * @param options.baseURI - The base URI of the ERC721 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {APIError} If the API request to create a smart contract fails.\n     */\n    async deployNFT(options) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot deploy ERC721 without private key loaded\");\n        }\n        const smartContract = await this.createERC721(options);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return smartContract;\n        }\n        await smartContract.sign(this.getSigner());\n        await smartContract.broadcast();\n        return smartContract;\n    }\n    /**\n     * Deploys an ERC1155 multi-token contract.\n     *\n     * @param options - The options for creating the ERC1155 token.\n     * @param options.uri - The URI for all token metadata.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {APIError} If the API request to create a smart contract fails.\n     */\n    async deployMultiToken(options) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot deploy ERC1155 without private key loaded\");\n        }\n        const smartContract = await this.createERC1155(options);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return smartContract;\n        }\n        await smartContract.sign(this.getSigner());\n        await smartContract.broadcast();\n        return smartContract;\n    }\n    /**\n     * Creates an ERC20 token contract.\n     *\n     * @private\n     * @param {CreateERC20Options} options - The options for creating the ERC20 token.\n     * @param {string} options.name - The name of the ERC20 token.\n     * @param {string} options.symbol - The symbol of the ERC20 token.\n     * @param {BigNumber} options.totalSupply - The total supply of the ERC20 token.\n     * @returns {Promise<SmartContract>} A Promise that resolves to the created SmartContract.\n     * @throws {APIError} If the API request to create a smart contract fails.\n     */\n    async createERC20(options) {\n        const resp = await coinbase_1.Coinbase.apiClients.smartContract.createSmartContract(this.getWalletId(), this.getId(), {\n            type: client_1.SmartContractType.Erc20,\n            options: {\n                name: options.name,\n                symbol: options.symbol,\n                total_supply: options.totalSupply.toString(),\n            },\n        });\n        return smart_contract_1.SmartContract.fromModel(resp?.data);\n    }\n    /**\n     * Creates an ERC721 token contract.\n     *\n     * @param options - The options for creating the ERC721 token.\n     * @param options.name - The name of the ERC721 token.\n     * @param options.symbol - The symbol of the ERC721 token.\n     * @param options.baseURI - The base URI of the ERC721 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {APIError} If the private key is not loaded when not using server signer.\n     */\n    async createERC721(options) {\n        const resp = await coinbase_1.Coinbase.apiClients.smartContract.createSmartContract(this.getWalletId(), this.getId(), {\n            type: client_1.SmartContractType.Erc721,\n            options: {\n                name: options.name,\n                symbol: options.symbol,\n                base_uri: options.baseURI,\n            },\n        });\n        return smart_contract_1.SmartContract.fromModel(resp?.data);\n    }\n    /**\n     * Creates an ERC1155 multi-token contract.\n     *\n     * @private\n     * @param {CreateERC1155Options} options - The options for creating the ERC1155 token.\n     * @param {string} options.uri - The URI for all token metadata.\n     * @returns {Promise<SmartContract>} A Promise that resolves to the created SmartContract.\n     * @throws {APIError} If the API request to create a smart contract fails.\n     */\n    async createERC1155(options) {\n        const resp = await coinbase_1.Coinbase.apiClients.smartContract.createSmartContract(this.getWalletId(), this.getId(), {\n            type: client_1.SmartContractType.Erc1155,\n            options: {\n                uri: options.uri,\n            },\n        });\n        return smart_contract_1.SmartContract.fromModel(resp?.data);\n    }\n    /**\n     * Creates a contract invocation with the given data.\n     *\n     * @param contractAddress - The address of the contract the method will be invoked on.\n     * @param method - The method to invoke on the contract.\n     * @param abi - The ABI of the contract.\n     * @param args - The arguments to pass to the contract method invocation.\n     *   The keys should be the argument names and the values should be the argument values.\n     * @param atomicAmount - The atomic amount of the native asset to send to a payable contract method.\n     * @returns The ContractInvocation object.\n     * @throws {APIError} if the API request to create a contract invocation fails.\n     */\n    async createContractInvocation(contractAddress, method, abi, args, atomicAmount) {\n        const resp = await coinbase_1.Coinbase.apiClients.contractInvocation.createContractInvocation(this.getWalletId(), this.getId(), {\n            method: method,\n            abi: JSON.stringify(abi),\n            contract_address: contractAddress,\n            args: JSON.stringify(args),\n            amount: atomicAmount,\n        });\n        return contract_invocation_1.ContractInvocation.fromModel(resp?.data);\n    }\n    /**\n     * Creates a staking operation to stake.\n     *\n     * @param amount - The amount to stake.\n     * @param assetId - The asset to stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the stake operation:\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the stake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * B. Dedicated ETH Staking\n     *  - `funding_address` (optional): Ethereum address for funding the stake operation. Defaults to the address initiating the stake operation.\n     *  - `withdrawal_address` (optional): Ethereum address for receiving rewards and withdrawal funds. Defaults to the address initiating the stake operation.\n     *  - `fee_recipient_address` (optional): Ethereum address for receiving transaction fees. Defaults to the address initiating the stake operation.\n     *\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @returns The staking operation after it's completed successfully.\n     */\n    async createStake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 600, intervalSeconds = 0.2) {\n        await this.validateCanStake(amount, assetId, mode, options);\n        return this.createStakingOperation(amount, assetId, \"stake\", mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Creates a staking operation to unstake.\n     *\n     * @param amount - The amount to unstake.\n     * @param assetId - The asset to unstake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the unstake operation:\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the unstake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * B. Dedicated ETH Staking\n     *  - `immediate` (optional): Set this to \"true\" to unstake immediately i.e. leverage \"Coinbase managed unstake\" process . Defaults to \"false\" i.e. \"User managed unstake\" process.\n     *  - `validator_pub_keys` (optional): List of comma separated validator public keys to unstake. Defaults to validators being picked up on your behalf corresponding to the unstake amount.\n     *\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @returns The staking operation after it's completed successfully.\n     */\n    async createUnstake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 600, intervalSeconds = 0.2) {\n        await this.validateCanUnstake(amount, assetId, mode, options);\n        return this.createStakingOperation(amount, assetId, \"unstake\", mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Creates a staking operation to claim stake.\n     *\n     * @param amount - The amount to claim stake.\n     * @param assetId - The asset to claim stake.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for the claim stake operation.\n     *\n     * A. Shared ETH Staking\n     *  - `integrator_contract_address` (optional): The contract address to which the claim stake operation is directed to. Defaults to the integrator contract address associated with CDP account (if available) or else defaults to a shared integrator contract address for that network.\n     *\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @returns The staking operation after it's completed successfully.\n     */\n    async createClaimStake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 600, intervalSeconds = 0.2) {\n        await this.validateCanClaimStake(amount, assetId, mode, options);\n        return this.createStakingOperation(amount, assetId, \"claim_stake\", mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Creates a Payload Signature.\n     *\n     * @param unsignedPayload - The Unsigned Payload to sign.\n     * @returns A promise that resolves to the Payload Signature object.\n     * @throws {APIError} if the API request to create a Payload Signature fails.\n     * @throws {Error} if the address does not have a private key loaded or an associated Server-Signer.\n     */\n    async createPayloadSignature(unsignedPayload) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot sign payload with address without private key loaded\");\n        }\n        let signature = undefined;\n        if (!coinbase_1.Coinbase.useServerSigner) {\n            signature = this.key.signingKey.sign(unsignedPayload).serialized;\n        }\n        const createPayloadSignatureRequest = {\n            unsigned_payload: unsignedPayload,\n            signature,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.address.createPayloadSignature(this.getWalletId(), this.getId(), createPayloadSignatureRequest);\n        const payloadSignature = new payload_signature_1.PayloadSignature(response.data);\n        return payloadSignature;\n    }\n    /**\n     * Gets a Payload Signature.\n     *\n     * @param payloadSignatureId - The ID of the Payload Signature to fetch.\n     * @returns A promise that resolves to the Payload Signature object.\n     * @throws {APIError} if the API request to get the Payload Signature fails.\n     */\n    async getPayloadSignature(payloadSignatureId) {\n        const response = await coinbase_1.Coinbase.apiClients.address.getPayloadSignature(this.getWalletId(), this.getId(), payloadSignatureId);\n        const payloadSignature = new payload_signature_1.PayloadSignature(response.data);\n        return payloadSignature;\n    }\n    /**\n     * Lists all the Payload Signatures associated with the Address.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Payload Signatures to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Payload Signatures. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns A promise that resolves to the paginated list response of Payload Signatures.\n     * @throws {APIError} if the API request to list the Payload Signatures fails.\n     */\n    async listPayloadSignatures({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.address.listPayloadSignatures(this.model.wallet_id, this.model.address_id, 100, page?.length ? page : undefined);\n        response.data.data.forEach(payloadSignatureModel => {\n            data.push(new payload_signature_1.PayloadSignature(payloadSignatureModel));\n        });\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Returns the address and network ID of the given destination.\n     *\n     * @param destination - The destination to get the address and network ID of.\n     * @returns The address and network ID of the destination.\n     */\n    async getDestinationAddressAndNetwork(destination) {\n        if (typeof destination !== \"string\" && destination.getNetworkId() !== this.getNetworkId()) {\n            throw new errors_1.ArgumentError(\"Transfer must be on the same Network\");\n        }\n        if (destination instanceof wallet_1.Wallet) {\n            return [(await destination.getDefaultAddress()).getId(), destination.getNetworkId()];\n        }\n        if (destination instanceof address_1.Address) {\n            return [destination.getId(), destination.getNetworkId()];\n        }\n        return [destination, this.getNetworkId()];\n    }\n    /**\n     * Creates a trade model for the specified amount and assets.\n     *\n     * @param amount - The amount of the Asset to send.\n     * @param fromAsset - The Asset to trade from.\n     * @param toAsset - The Asset to trade to.\n     * @returns A promise that resolves to a Trade object representing the new trade.\n     */\n    async createTradeRequest(amount, fromAsset, toAsset) {\n        const tradeRequestPayload = {\n            amount: fromAsset.toAtomicAmount(new decimal_js_1.Decimal(amount.toString())).toString(),\n            from_asset_id: fromAsset.primaryDenomination(),\n            to_asset_id: toAsset.primaryDenomination(),\n        };\n        const tradeModel = await coinbase_1.Coinbase.apiClients.trade.createTrade(this.getWalletId(), this.getId(), tradeRequestPayload);\n        return new trade_1.Trade(tradeModel?.data);\n    }\n    /**\n     * Checks if trading is possible and raises an error if not.\n     *\n     * @param amount - The amount of the Asset to send.\n     * @param fromAssetId - The ID of the Asset to trade from. For Ether, eth, gwei, and wei are supported.\n     * @throws {Error} If the private key is not loaded, or if the asset IDs are unsupported, or if there are insufficient funds.\n     */\n    async validateCanTrade(amount, fromAssetId) {\n        if (!coinbase_1.Coinbase.useServerSigner && !this.key) {\n            throw new Error(\"Cannot trade from address without private key loaded\");\n        }\n        const currentBalance = await this.getBalance(fromAssetId);\n        amount = new decimal_js_1.Decimal(amount.toString());\n        if (currentBalance.lessThan(amount)) {\n            throw new Error(`Insufficient funds: ${amount} requested, but only ${currentBalance} available`);\n        }\n    }\n    /**\n     * Creates a staking operation to stake, signs it, and broadcasts it on the blockchain.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset to the staking operation.\n     * @param action - The type of staking action to perform.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options such as setting the mode for the staking action.\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @throws {APIError} if the API request to create or broadcast staking operation fails.\n     * @throws {Error} if the amount is less than zero.\n     * @returns The staking operation after it's completed fully.\n     */\n    async createStakingOperation(amount, assetId, action, mode, options, timeoutSeconds, intervalSeconds) {\n        if (new decimal_js_1.Decimal(amount.toString()).lessThanOrEqualTo(0)) {\n            throw new Error(\"Amount required greater than zero.\");\n        }\n        let stakingOperation = await this.createStakingOperationRequest(amount, assetId, action, mode, options);\n        const startTime = Date.now();\n        // Loop until the timeout is reached.\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            // Loop through any unsigned transactions that are available, sign and broadcast them.\n            for (let i = 0; i < stakingOperation.getTransactions().length; i++) {\n                const transaction = stakingOperation.getTransactions()[i];\n                if (!transaction.isSigned()) {\n                    await transaction.sign(this.key);\n                    stakingOperation = await this.broadcastStakingOperationRequest(stakingOperation.getID(), transaction.getSignedPayload().slice(2), i);\n                }\n            }\n            await stakingOperation.reload();\n            if (stakingOperation.isTerminalState()) {\n                return stakingOperation;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new Error(\"Staking Operation timed out\");\n    }\n    /**\n     * A helper function that creates the staking operation.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset for the staking operation.\n     * @param action - The type of staking action to perform.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options such as setting the mode for the staking action.\n     * @private\n     * @throws {APIError} if the API request to create staking operation fails.\n     * @returns The created staking operation.\n     */\n    async createStakingOperationRequest(amount, assetId, action, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        const asset = await asset_1.Asset.fetch(this.getNetworkId(), assetId);\n        options.amount = asset.toAtomicAmount(new decimal_js_1.Decimal(amount.toString())).toString();\n        options.mode = mode ? mode : types_1.StakeOptionsMode.DEFAULT;\n        const stakingOperationRequest = {\n            network_id: this.getNetworkId(),\n            asset_id: asset_1.Asset.primaryDenomination(assetId),\n            action: action,\n            options: options,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.walletStake.createStakingOperation(this.getWalletId(), this.getId(), stakingOperationRequest);\n        return new staking_operation_1.StakingOperation(response.data);\n    }\n    /**\n     * A helper function that broadcasts the signed payload.\n     *\n     * @param stakingOperationID - The staking operation id related to the signed payload.\n     * @param signedPayload - The payload that's being broadcasted.\n     * @param transactionIndex - The index of the transaction in the array from the staking operation.\n     * @private\n     * @returns An updated staking operation with the broadcasted transaction.\n     */\n    async broadcastStakingOperationRequest(stakingOperationID, signedPayload, transactionIndex) {\n        const broadcastStakingOperationRequest = {\n            signed_payload: signedPayload,\n            transaction_index: transactionIndex,\n        };\n        const response = await coinbase_1.Coinbase.apiClients.walletStake.broadcastStakingOperation(this.getWalletId(), this.getId(), stakingOperationID, broadcastStakingOperationRequest);\n        return new staking_operation_1.StakingOperation(response.data);\n    }\n}\nexports.WalletAddress = WalletAddress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/wallet_address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/api_error.js":
/*!************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/api_error.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NetworkFeatureUnsupportedError = exports.InvalidTransferStatusError = exports.InvalidSignedPayloadError = exports.FaucetLimitReachedError = exports.ResourceExhaustedError = exports.InvalidNetworkIDError = exports.InvalidDestinationError = exports.InvalidAssetIDError = exports.UnsupportedAssetError = exports.MalformedRequestError = exports.AlreadyExistsError = exports.InvalidLimitError = exports.InvalidPageError = exports.InvalidTransferIDError = exports.InvalidAmountError = exports.InvalidAddressError = exports.InvalidWalletError = exports.InvalidAddressIDError = exports.InvalidWalletIDError = exports.NotFoundError = exports.UnauthorizedError = exports.UnimplementedError = exports.InternalError = exports.APIError = void 0;\n/* eslint-disable jsdoc/require-jsdoc */\nconst axios_1 = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\");\n/**\n * A wrapper for API errors to provide more context.\n */\nclass APIError extends axios_1.AxiosError {\n    /**\n     * Initializes a new APIError object.\n     *\n     * @class\n     * @param {AxiosError} error - The Axios error.\n     */\n    constructor(error) {\n        super();\n        this.name = this.constructor.name;\n        this.httpCode = error.response ? error.response.status : null;\n        this.apiCode = null;\n        this.apiMessage = null;\n        this.correlationId = null;\n        if (error.response && error.response.data) {\n            const body = error.response.data;\n            this.apiCode = body.code;\n            this.apiMessage = body.message;\n            this.correlationId = body.correlation_id;\n        }\n    }\n    /**\n     * Creates a specific APIError based on the API error code.\n     *\n     * @param {AxiosError} error - The underlying error object.\n     * @returns {APIError} A specific APIError instance.\n     */\n    static fromError(error) {\n        const apiError = new APIError(error);\n        if (!error.response || !error.response.data) {\n            return apiError;\n        }\n        const body = error?.response?.data;\n        switch (body?.code) {\n            case \"unimplemented\":\n                return new UnimplementedError(error);\n            case \"unauthorized\":\n                return new UnauthorizedError(error);\n            case \"internal\":\n                return new InternalError(error);\n            case \"not_found\":\n                return new NotFoundError(error);\n            case \"invalid_wallet_id\":\n                return new InvalidWalletIDError(error);\n            case \"invalid_address_id\":\n                return new InvalidAddressIDError(error);\n            case \"invalid_wallet\":\n                return new InvalidWalletError(error);\n            case \"invalid_address\":\n                return new InvalidAddressError(error);\n            case \"invalid_amount\":\n                return new InvalidAmountError(error);\n            case \"invalid_transfer_id\":\n                return new InvalidTransferIDError(error);\n            case \"invalid_page_token\":\n                return new InvalidPageError(error);\n            case \"invalid_page_limit\":\n                return new InvalidLimitError(error);\n            case \"already_exists\":\n                return new AlreadyExistsError(error);\n            case \"malformed_request\":\n                return new MalformedRequestError(error);\n            case \"unsupported_asset\":\n                return new UnsupportedAssetError(error);\n            case \"invalid_asset_id\":\n                return new InvalidAssetIDError(error);\n            case \"invalid_destination\":\n                return new InvalidDestinationError(error);\n            case \"invalid_network_id\":\n                return new InvalidNetworkIDError(error);\n            case \"resource_exhausted\":\n                return new ResourceExhaustedError(error);\n            case \"faucet_limit_reached\":\n                return new FaucetLimitReachedError(error);\n            case \"invalid_signed_payload\":\n                return new InvalidSignedPayloadError(error);\n            case \"invalid_transfer_status\":\n                return new InvalidTransferStatusError(error);\n            case \"network_feature_unsupported\":\n                return new NetworkFeatureUnsupportedError(error);\n            default:\n                return apiError;\n        }\n    }\n    /**\n     * Returns a String representation of the APIError.\n     *\n     * @returns {string} a String representation of the APIError\n     */\n    toString() {\n        const payload = {};\n        if (this.httpCode)\n            payload.httpCode = this.httpCode;\n        if (this.apiCode)\n            payload.apiCode = this.apiCode;\n        if (this.apiMessage)\n            payload.apiMessage = this.apiMessage;\n        if (this.correlationId)\n            payload.correlationId = this.correlationId;\n        return `${this.name}{${Object.entries(payload)\n            .map(([key, value]) => `${key}: ${value}`)\n            .join(\", \")}}`;\n    }\n}\nexports.APIError = APIError;\nclass InternalError extends APIError {\n}\nexports.InternalError = InternalError;\nclass UnimplementedError extends APIError {\n}\nexports.UnimplementedError = UnimplementedError;\nclass UnauthorizedError extends APIError {\n}\nexports.UnauthorizedError = UnauthorizedError;\nclass NotFoundError extends APIError {\n}\nexports.NotFoundError = NotFoundError;\nclass InvalidWalletIDError extends APIError {\n}\nexports.InvalidWalletIDError = InvalidWalletIDError;\nclass InvalidAddressIDError extends APIError {\n}\nexports.InvalidAddressIDError = InvalidAddressIDError;\nclass InvalidWalletError extends APIError {\n}\nexports.InvalidWalletError = InvalidWalletError;\nclass InvalidAddressError extends APIError {\n}\nexports.InvalidAddressError = InvalidAddressError;\nclass InvalidAmountError extends APIError {\n}\nexports.InvalidAmountError = InvalidAmountError;\nclass InvalidTransferIDError extends APIError {\n}\nexports.InvalidTransferIDError = InvalidTransferIDError;\nclass InvalidPageError extends APIError {\n}\nexports.InvalidPageError = InvalidPageError;\nclass InvalidLimitError extends APIError {\n}\nexports.InvalidLimitError = InvalidLimitError;\nclass AlreadyExistsError extends APIError {\n}\nexports.AlreadyExistsError = AlreadyExistsError;\nclass MalformedRequestError extends APIError {\n}\nexports.MalformedRequestError = MalformedRequestError;\nclass UnsupportedAssetError extends APIError {\n}\nexports.UnsupportedAssetError = UnsupportedAssetError;\nclass InvalidAssetIDError extends APIError {\n}\nexports.InvalidAssetIDError = InvalidAssetIDError;\nclass InvalidDestinationError extends APIError {\n}\nexports.InvalidDestinationError = InvalidDestinationError;\nclass InvalidNetworkIDError extends APIError {\n}\nexports.InvalidNetworkIDError = InvalidNetworkIDError;\nclass ResourceExhaustedError extends APIError {\n}\nexports.ResourceExhaustedError = ResourceExhaustedError;\nclass FaucetLimitReachedError extends APIError {\n}\nexports.FaucetLimitReachedError = FaucetLimitReachedError;\nclass InvalidSignedPayloadError extends APIError {\n}\nexports.InvalidSignedPayloadError = InvalidSignedPayloadError;\nclass InvalidTransferStatusError extends APIError {\n}\nexports.InvalidTransferStatusError = InvalidTransferStatusError;\nclass NetworkFeatureUnsupportedError extends APIError {\n}\nexports.NetworkFeatureUnsupportedError = NetworkFeatureUnsupportedError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/api_error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js":
/*!********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Asset = void 0;\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/decimal.js/decimal.js\"));\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/constants.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\n/** A representation of an Asset. */\nclass Asset {\n    /**\n     * Private constructor for the Asset class.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @param contractAddress - The address ID.\n     * @param decimals - The number of decimals.\n     */\n    constructor(networkId, assetId, contractAddress, decimals) {\n        this.networkId = networkId;\n        this.assetId = assetId;\n        this.contractAddress = contractAddress;\n        this.decimals = decimals;\n    }\n    /**\n     * Creates an Asset from an Asset Model.\n     *\n     * @param model - The Asset Model.\n     * @param assetId - The Asset ID.\n     * @throws If the Asset Model is invalid.\n     * @returns The Asset Class.\n     */\n    static fromModel(model, assetId) {\n        if (!model) {\n            throw new Error(\"Invalid asset model\");\n        }\n        let decimals = model.decimals;\n        // TODO: Push this logic down to the backend.\n        if (assetId &&\n            model.asset_id &&\n            coinbase_1.Coinbase.toAssetId(model.asset_id) !== coinbase_1.Coinbase.toAssetId(assetId)) {\n            switch (assetId) {\n                case \"gwei\":\n                    decimals = constants_1.GWEI_DECIMALS;\n                    break;\n                case \"wei\":\n                    decimals = 0;\n                    break;\n                case \"eth\":\n                    break;\n                default:\n                    throw new errors_1.ArgumentError(`Invalid asset ID: ${assetId}`);\n            }\n        }\n        return new Asset(model.network_id, model.asset_id, model.contract_address, decimals);\n    }\n    /**\n     * Fetches the Asset with the provided Asset ID.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @throws If the Asset cannot be fetched.\n     * @returns The Asset Class.\n     */\n    static async fetch(networkId, assetId) {\n        const asset = await coinbase_1.Coinbase.apiClients.asset.getAsset(coinbase_1.Coinbase.normalizeNetwork(networkId), Asset.primaryDenomination(assetId));\n        return Asset.fromModel(asset?.data, assetId);\n    }\n    /**\n     * Returns the primary denomination for the provided Asset ID.\n     * For `gwei` and `wei` the primary denomination is `eth`.\n     * For all other assets, the primary denomination is the same asset ID.\n     *\n     * @param assetId - The Asset ID.\n     * @returns The primary denomination for the Asset ID.\n     */\n    static primaryDenomination(assetId) {\n        return [coinbase_1.Coinbase.assets.Gwei, coinbase_1.Coinbase.assets.Wei].includes(assetId)\n            ? coinbase_1.Coinbase.assets.Eth\n            : assetId;\n    }\n    /**\n     * Returns the primary denomination for the Asset.\n     *\n     * @returns The primary denomination for the Asset.\n     */\n    primaryDenomination() {\n        return Asset.primaryDenomination(this.assetId);\n    }\n    /**\n     * Converts the amount of the Asset from whole to atomic units.\n     *\n     * @param wholeAmount - The whole amount to convert to atomic units.\n     * @returns The amount in atomic units\n     */\n    toAtomicAmount(wholeAmount) {\n        const atomicAmount = wholeAmount.times(new decimal_js_1.default(10).pow(this.decimals));\n        return BigInt(atomicAmount.toFixed());\n    }\n    /**\n     * Converts the amount of the Asset from atomic to whole units.\n     *\n     * @param atomicAmount - The atomic amount to convert to whole units.\n     * @returns The amount in atomic units\n     */\n    fromAtomicAmount(atomicAmount) {\n        return atomicAmount.dividedBy(new decimal_js_1.default(10).pow(this.decimals));\n    }\n    /**\n     * Returns a string representation of the Asset.\n     *\n     * @returns a string representation of the Asset\n     */\n    toString() {\n        return `Asset{ networkId: ${this.networkId}, assetId: ${this.assetId}, contractAddress: ${this.contractAddress}, decimals: ${this.decimals} }`;\n    }\n    /**\n     * Returns the Asset ID.\n     *\n     * @returns The Asset ID.\n     */\n    getAssetId() {\n        return this.assetId;\n    }\n}\nexports.Asset = Asset;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2Fzc2V0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLHFDQUFxQyxtQkFBTyxDQUFDLDhEQUFZO0FBQ3pELG1CQUFtQixtQkFBTyxDQUFDLHlGQUFZO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLDJGQUFhO0FBQ3pDLGlCQUFpQixtQkFBTyxDQUFDLHFGQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLFFBQVE7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixhQUFhLGVBQWUsYUFBYSxhQUFhLHFCQUFxQixxQkFBcUIsY0FBYyxnQkFBZ0I7QUFDcko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9hc3NldC5qcz9kNGE2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc3NldCA9IHZvaWQgMDtcbmNvbnN0IGRlY2ltYWxfanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVjaW1hbC5qc1wiKSk7XG5jb25zdCBjb2luYmFzZV8xID0gcmVxdWlyZShcIi4vY29pbmJhc2VcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuLyoqIEEgcmVwcmVzZW50YXRpb24gb2YgYW4gQXNzZXQuICovXG5jbGFzcyBBc3NldCB7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSBjb25zdHJ1Y3RvciBmb3IgdGhlIEFzc2V0IGNsYXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5ldHdvcmtJZCAtIFRoZSBuZXR3b3JrIElELlxuICAgICAqIEBwYXJhbSBhc3NldElkIC0gVGhlIGFzc2V0IElELlxuICAgICAqIEBwYXJhbSBjb250cmFjdEFkZHJlc3MgLSBUaGUgYWRkcmVzcyBJRC5cbiAgICAgKiBAcGFyYW0gZGVjaW1hbHMgLSBUaGUgbnVtYmVyIG9mIGRlY2ltYWxzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5ldHdvcmtJZCwgYXNzZXRJZCwgY29udHJhY3RBZGRyZXNzLCBkZWNpbWFscykge1xuICAgICAgICB0aGlzLm5ldHdvcmtJZCA9IG5ldHdvcmtJZDtcbiAgICAgICAgdGhpcy5hc3NldElkID0gYXNzZXRJZDtcbiAgICAgICAgdGhpcy5jb250cmFjdEFkZHJlc3MgPSBjb250cmFjdEFkZHJlc3M7XG4gICAgICAgIHRoaXMuZGVjaW1hbHMgPSBkZWNpbWFscztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBBc3NldCBmcm9tIGFuIEFzc2V0IE1vZGVsLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZGVsIC0gVGhlIEFzc2V0IE1vZGVsLlxuICAgICAqIEBwYXJhbSBhc3NldElkIC0gVGhlIEFzc2V0IElELlxuICAgICAqIEB0aHJvd3MgSWYgdGhlIEFzc2V0IE1vZGVsIGlzIGludmFsaWQuXG4gICAgICogQHJldHVybnMgVGhlIEFzc2V0IENsYXNzLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTW9kZWwobW9kZWwsIGFzc2V0SWQpIHtcbiAgICAgICAgaWYgKCFtb2RlbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhc3NldCBtb2RlbFwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGVjaW1hbHMgPSBtb2RlbC5kZWNpbWFscztcbiAgICAgICAgLy8gVE9ETzogUHVzaCB0aGlzIGxvZ2ljIGRvd24gdG8gdGhlIGJhY2tlbmQuXG4gICAgICAgIGlmIChhc3NldElkICYmXG4gICAgICAgICAgICBtb2RlbC5hc3NldF9pZCAmJlxuICAgICAgICAgICAgY29pbmJhc2VfMS5Db2luYmFzZS50b0Fzc2V0SWQobW9kZWwuYXNzZXRfaWQpICE9PSBjb2luYmFzZV8xLkNvaW5iYXNlLnRvQXNzZXRJZChhc3NldElkKSkge1xuICAgICAgICAgICAgc3dpdGNoIChhc3NldElkKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImd3ZWlcIjpcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hbHMgPSBjb25zdGFudHNfMS5HV0VJX0RFQ0lNQUxTO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwid2VpXCI6XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYWxzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImV0aFwiOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuQXJndW1lbnRFcnJvcihgSW52YWxpZCBhc3NldCBJRDogJHthc3NldElkfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQXNzZXQobW9kZWwubmV0d29ya19pZCwgbW9kZWwuYXNzZXRfaWQsIG1vZGVsLmNvbnRyYWN0X2FkZHJlc3MsIGRlY2ltYWxzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgQXNzZXQgd2l0aCB0aGUgcHJvdmlkZWQgQXNzZXQgSUQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV0d29ya0lkIC0gVGhlIG5ldHdvcmsgSUQuXG4gICAgICogQHBhcmFtIGFzc2V0SWQgLSBUaGUgYXNzZXQgSUQuXG4gICAgICogQHRocm93cyBJZiB0aGUgQXNzZXQgY2Fubm90IGJlIGZldGNoZWQuXG4gICAgICogQHJldHVybnMgVGhlIEFzc2V0IENsYXNzLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmZXRjaChuZXR3b3JrSWQsIGFzc2V0SWQpIHtcbiAgICAgICAgY29uc3QgYXNzZXQgPSBhd2FpdCBjb2luYmFzZV8xLkNvaW5iYXNlLmFwaUNsaWVudHMuYXNzZXQuZ2V0QXNzZXQoY29pbmJhc2VfMS5Db2luYmFzZS5ub3JtYWxpemVOZXR3b3JrKG5ldHdvcmtJZCksIEFzc2V0LnByaW1hcnlEZW5vbWluYXRpb24oYXNzZXRJZCkpO1xuICAgICAgICByZXR1cm4gQXNzZXQuZnJvbU1vZGVsKGFzc2V0Py5kYXRhLCBhc3NldElkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcHJpbWFyeSBkZW5vbWluYXRpb24gZm9yIHRoZSBwcm92aWRlZCBBc3NldCBJRC5cbiAgICAgKiBGb3IgYGd3ZWlgIGFuZCBgd2VpYCB0aGUgcHJpbWFyeSBkZW5vbWluYXRpb24gaXMgYGV0aGAuXG4gICAgICogRm9yIGFsbCBvdGhlciBhc3NldHMsIHRoZSBwcmltYXJ5IGRlbm9taW5hdGlvbiBpcyB0aGUgc2FtZSBhc3NldCBJRC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhc3NldElkIC0gVGhlIEFzc2V0IElELlxuICAgICAqIEByZXR1cm5zIFRoZSBwcmltYXJ5IGRlbm9taW5hdGlvbiBmb3IgdGhlIEFzc2V0IElELlxuICAgICAqL1xuICAgIHN0YXRpYyBwcmltYXJ5RGVub21pbmF0aW9uKGFzc2V0SWQpIHtcbiAgICAgICAgcmV0dXJuIFtjb2luYmFzZV8xLkNvaW5iYXNlLmFzc2V0cy5Hd2VpLCBjb2luYmFzZV8xLkNvaW5iYXNlLmFzc2V0cy5XZWldLmluY2x1ZGVzKGFzc2V0SWQpXG4gICAgICAgICAgICA/IGNvaW5iYXNlXzEuQ29pbmJhc2UuYXNzZXRzLkV0aFxuICAgICAgICAgICAgOiBhc3NldElkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwcmltYXJ5IGRlbm9taW5hdGlvbiBmb3IgdGhlIEFzc2V0LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHByaW1hcnkgZGVub21pbmF0aW9uIGZvciB0aGUgQXNzZXQuXG4gICAgICovXG4gICAgcHJpbWFyeURlbm9taW5hdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEFzc2V0LnByaW1hcnlEZW5vbWluYXRpb24odGhpcy5hc3NldElkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGFtb3VudCBvZiB0aGUgQXNzZXQgZnJvbSB3aG9sZSB0byBhdG9taWMgdW5pdHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2hvbGVBbW91bnQgLSBUaGUgd2hvbGUgYW1vdW50IHRvIGNvbnZlcnQgdG8gYXRvbWljIHVuaXRzLlxuICAgICAqIEByZXR1cm5zIFRoZSBhbW91bnQgaW4gYXRvbWljIHVuaXRzXG4gICAgICovXG4gICAgdG9BdG9taWNBbW91bnQod2hvbGVBbW91bnQpIHtcbiAgICAgICAgY29uc3QgYXRvbWljQW1vdW50ID0gd2hvbGVBbW91bnQudGltZXMobmV3IGRlY2ltYWxfanNfMS5kZWZhdWx0KDEwKS5wb3codGhpcy5kZWNpbWFscykpO1xuICAgICAgICByZXR1cm4gQmlnSW50KGF0b21pY0Ftb3VudC50b0ZpeGVkKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgYW1vdW50IG9mIHRoZSBBc3NldCBmcm9tIGF0b21pYyB0byB3aG9sZSB1bml0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdG9taWNBbW91bnQgLSBUaGUgYXRvbWljIGFtb3VudCB0byBjb252ZXJ0IHRvIHdob2xlIHVuaXRzLlxuICAgICAqIEByZXR1cm5zIFRoZSBhbW91bnQgaW4gYXRvbWljIHVuaXRzXG4gICAgICovXG4gICAgZnJvbUF0b21pY0Ftb3VudChhdG9taWNBbW91bnQpIHtcbiAgICAgICAgcmV0dXJuIGF0b21pY0Ftb3VudC5kaXZpZGVkQnkobmV3IGRlY2ltYWxfanNfMS5kZWZhdWx0KDEwKS5wb3codGhpcy5kZWNpbWFscykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBBc3NldC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBBc3NldFxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYEFzc2V0eyBuZXR3b3JrSWQ6ICR7dGhpcy5uZXR3b3JrSWR9LCBhc3NldElkOiAke3RoaXMuYXNzZXRJZH0sIGNvbnRyYWN0QWRkcmVzczogJHt0aGlzLmNvbnRyYWN0QWRkcmVzc30sIGRlY2ltYWxzOiAke3RoaXMuZGVjaW1hbHN9IH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBBc3NldCBJRC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBBc3NldCBJRC5cbiAgICAgKi9cbiAgICBnZXRBc3NldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3NldElkO1xuICAgIH1cbn1cbmV4cG9ydHMuQXNzZXQgPSBBc3NldDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/authenticator.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/authenticator.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CoinbaseAuthenticator = void 0;\nconst node_jose_1 = __webpack_require__(/*! node-jose */ \"(ssr)/./node_modules/node-jose/lib/index.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst package_json_1 = __webpack_require__(/*! ../../package.json */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/package.json\");\nconst pemHeader = \"-----BEGIN EC PRIVATE KEY-----\";\nconst pemFooter = \"-----END EC PRIVATE KEY-----\";\n/**\n * A class that builds JWTs for authenticating with the Coinbase Platform APIs.\n */\nclass CoinbaseAuthenticator {\n    /**\n     * Initializes the Authenticator.\n     *\n     * @param {string} apiKey - The API key name.\n     * @param {string} privateKey - The private key associated with the API key.\n     */\n    constructor(apiKey, privateKey) {\n        this.apiKey = apiKey;\n        this.privateKey = privateKey;\n    }\n    /**\n     * Middleware to intercept requests and add JWT to Authorization header.\n     *\n     * @param {InternalAxiosRequestConfig} config - The request configuration.\n     * @param {boolean} debugging - Flag to enable debugging.\n     * @returns {Promise<InternalAxiosRequestConfig>} The request configuration with the Authorization header added.\n     * @throws {InvalidAPIKeyFormat} If JWT could not be built.\n     */\n    async authenticateRequest(config, debugging = false) {\n        const method = config.method?.toString().toUpperCase();\n        const token = await this.buildJWT(config.url || \"\", method);\n        if (debugging) {\n            console.log(`API REQUEST: ${method} ${config.url}`);\n        }\n        config.headers[\"Authorization\"] = `Bearer ${token}`;\n        config.headers[\"Content-Type\"] = \"application/json\";\n        config.headers[\"Correlation-Context\"] = this.getCorrelationData();\n        return config;\n    }\n    /**\n     * Builds the JWT for the given API endpoint URL.\n     *\n     * @param {string} url - URL of the API endpoint.\n     * @param {string} method - HTTP method of the request.\n     * @returns {Promise<string>} JWT token.\n     * @throws {InvalidAPIKeyFormat} If the private key is not in the correct format.\n     */\n    async buildJWT(url, method = \"GET\") {\n        const pemPrivateKey = this.extractPemKey(this.privateKey);\n        let privateKey;\n        try {\n            privateKey = await node_jose_1.JWK.asKey(pemPrivateKey, \"pem\");\n            if (privateKey.kty !== \"EC\") {\n                throw new errors_1.InvalidAPIKeyFormatError(\"Invalid key type\");\n            }\n        }\n        catch (error) {\n            throw new errors_1.InvalidAPIKeyFormatError(\"Could not parse the private key\");\n        }\n        const header = {\n            alg: \"ES256\",\n            kid: this.apiKey,\n            typ: \"JWT\",\n            nonce: this.nonce(),\n        };\n        const urlObject = new URL(url);\n        const uri = `${method} ${urlObject.host}${urlObject.pathname}`;\n        const claims = {\n            sub: this.apiKey,\n            iss: \"cdp\",\n            aud: [\"cdp_service\"],\n            nbf: Math.floor(Date.now() / 1000),\n            exp: Math.floor(Date.now() / 1000) + 60, // +1 minute\n            uris: [uri],\n        };\n        const payload = Buffer.from(JSON.stringify(claims)).toString(\"utf8\");\n        try {\n            const result = await node_jose_1.JWS.createSign({ format: \"compact\", fields: header }, privateKey)\n                .update(payload)\n                .final();\n            return result;\n        }\n        catch (err) {\n            throw new errors_1.InvalidAPIKeyFormatError(\"Could not sign the JWT\");\n        }\n    }\n    /**\n     * Extracts the PEM key from the given private key string.\n     *\n     * @param {string} privateKeyString - The private key string.\n     * @returns {string} The PEM key.\n     * @throws {InvalidAPIKeyFormat} If the private key string is not in the correct format.\n     */\n    extractPemKey(privateKeyString) {\n        privateKeyString = privateKeyString.replace(/\\n/g, \"\");\n        if (privateKeyString.startsWith(pemHeader) && privateKeyString.endsWith(pemFooter)) {\n            return privateKeyString;\n        }\n        throw new errors_1.InvalidAPIKeyFormatError(\"Invalid private key format\");\n    }\n    /**\n     * Generates a random nonce for the JWT.\n     *\n     * @returns {string} The generated nonce.\n     */\n    nonce() {\n        const range = \"0123456789\";\n        let result = \"\";\n        for (let i = 0; i < 16; i++) {\n            result += range.charAt(Math.floor(Math.random() * range.length));\n        }\n        return result;\n    }\n    /**\n     * Returns encoded correlation data including the SDK version and language.\n     *\n     * @returns {string} Encoded correlation data.\n     */\n    getCorrelationData() {\n        const data = {\n            sdk_version: package_json_1.version,\n            sdk_language: \"typescript\",\n        };\n        return Object.keys(data)\n            .map(key => `${key}=${encodeURIComponent(data[key])}`)\n            .join(\",\");\n    }\n}\nexports.CoinbaseAuthenticator = CoinbaseAuthenticator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/authenticator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Balance = void 0;\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/decimal.js/decimal.js\"));\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\n/** A representation of a balance. */\nclass Balance {\n    /**\n     * Private constructor to prevent direct instantiation outside of the factory methods.\n     *\n     * @ignore\n     * @param {Decimal} amount - The amount of the balance.\n     * @param {string} assetId - The asset ID.\n     * @hideconstructor\n     */\n    constructor(amount, assetId, asset) {\n        this.amount = amount;\n        this.assetId = assetId;\n        this.asset = asset;\n    }\n    /**\n     * Converts a BalanceModel into a Balance object.\n     *\n     * @param {BalanceModel} model - The balance model object.\n     * @returns {Balance} The Balance object.\n     */\n    static fromModel(model) {\n        const asset = asset_1.Asset.fromModel(model.asset);\n        return new Balance(asset.fromAtomicAmount(new decimal_js_1.default(model.amount)), asset.getAssetId(), asset);\n    }\n    /**\n     * Converts a BalanceModel and asset ID into a Balance object.\n     *\n     * @param {BalanceModel} model - The balance model object.\n     * @param {string} assetId - The asset ID.\n     * @returns {Balance} The Balance object.\n     */\n    static fromModelAndAssetId(model, assetId) {\n        const asset = asset_1.Asset.fromModel(model.asset, assetId);\n        return new Balance(asset.fromAtomicAmount(new decimal_js_1.default(model.amount)), asset.getAssetId(), asset);\n    }\n}\nexports.Balance = Balance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2JhbGFuY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2YscUNBQXFDLG1CQUFPLENBQUMsOERBQVk7QUFDekQsZ0JBQWdCLG1CQUFPLENBQUMsbUZBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9iYWxhbmNlLmpzPzBiNDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJhbGFuY2UgPSB2b2lkIDA7XG5jb25zdCBkZWNpbWFsX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlY2ltYWwuanNcIikpO1xuY29uc3QgYXNzZXRfMSA9IHJlcXVpcmUoXCIuL2Fzc2V0XCIpO1xuLyoqIEEgcmVwcmVzZW50YXRpb24gb2YgYSBiYWxhbmNlLiAqL1xuY2xhc3MgQmFsYW5jZSB7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSBjb25zdHJ1Y3RvciB0byBwcmV2ZW50IGRpcmVjdCBpbnN0YW50aWF0aW9uIG91dHNpZGUgb2YgdGhlIGZhY3RvcnkgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKiBAcGFyYW0ge0RlY2ltYWx9IGFtb3VudCAtIFRoZSBhbW91bnQgb2YgdGhlIGJhbGFuY2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFzc2V0SWQgLSBUaGUgYXNzZXQgSUQuXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFtb3VudCwgYXNzZXRJZCwgYXNzZXQpIHtcbiAgICAgICAgdGhpcy5hbW91bnQgPSBhbW91bnQ7XG4gICAgICAgIHRoaXMuYXNzZXRJZCA9IGFzc2V0SWQ7XG4gICAgICAgIHRoaXMuYXNzZXQgPSBhc3NldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBCYWxhbmNlTW9kZWwgaW50byBhIEJhbGFuY2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCYWxhbmNlTW9kZWx9IG1vZGVsIC0gVGhlIGJhbGFuY2UgbW9kZWwgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtCYWxhbmNlfSBUaGUgQmFsYW5jZSBvYmplY3QuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21Nb2RlbChtb2RlbCkge1xuICAgICAgICBjb25zdCBhc3NldCA9IGFzc2V0XzEuQXNzZXQuZnJvbU1vZGVsKG1vZGVsLmFzc2V0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBCYWxhbmNlKGFzc2V0LmZyb21BdG9taWNBbW91bnQobmV3IGRlY2ltYWxfanNfMS5kZWZhdWx0KG1vZGVsLmFtb3VudCkpLCBhc3NldC5nZXRBc3NldElkKCksIGFzc2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBCYWxhbmNlTW9kZWwgYW5kIGFzc2V0IElEIGludG8gYSBCYWxhbmNlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QmFsYW5jZU1vZGVsfSBtb2RlbCAtIFRoZSBiYWxhbmNlIG1vZGVsIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXNzZXRJZCAtIFRoZSBhc3NldCBJRC5cbiAgICAgKiBAcmV0dXJucyB7QmFsYW5jZX0gVGhlIEJhbGFuY2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTW9kZWxBbmRBc3NldElkKG1vZGVsLCBhc3NldElkKSB7XG4gICAgICAgIGNvbnN0IGFzc2V0ID0gYXNzZXRfMS5Bc3NldC5mcm9tTW9kZWwobW9kZWwuYXNzZXQsIGFzc2V0SWQpO1xuICAgICAgICByZXR1cm4gbmV3IEJhbGFuY2UoYXNzZXQuZnJvbUF0b21pY0Ftb3VudChuZXcgZGVjaW1hbF9qc18xLmRlZmF1bHQobW9kZWwuYW1vdW50KSksIGFzc2V0LmdldEFzc2V0SWQoKSwgYXNzZXQpO1xuICAgIH1cbn1cbmV4cG9ydHMuQmFsYW5jZSA9IEJhbGFuY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BalanceMap = void 0;\nconst balance_1 = __webpack_require__(/*! ./balance */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\");\n/**\n * A convenience class for storing and manipulating Asset balances in a human-readable format.\n */\nclass BalanceMap extends Map {\n    /**\n     * Converts a list of Balance models to a BalanceMap.\n     *\n     * @param {BalanceModel[]} balances - The list of balances fetched from the API.\n     * @returns {BalanceMap} The converted BalanceMap object.\n     */\n    static fromBalances(balances) {\n        const balanceMap = new BalanceMap();\n        balances.forEach(balanceModel => {\n            const balance = balance_1.Balance.fromModel(balanceModel);\n            balanceMap.add(balance);\n        });\n        return balanceMap;\n    }\n    /**\n     * Adds a balance to the map.\n     *\n     * @param {Balance} balance - The balance to add to the map.\n     */\n    add(balance) {\n        if (!(balance instanceof balance_1.Balance)) {\n            throw new Error(\"balance must be a Balance\");\n        }\n        this.set(balance.assetId, balance.amount);\n    }\n    /**\n     * Returns a string representation of the balance map.\n     *\n     * @returns The string representation of the balance map.\n     */\n    toString() {\n        const result = {};\n        this.forEach((value, key) => {\n            let str = value.toString();\n            if (value.isInteger()) {\n                str = value.toNumber().toString();\n            }\n            result[key] = str;\n        });\n        return `BalanceMap${JSON.stringify(result)}`;\n    }\n}\nexports.BalanceMap = BalanceMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2JhbGFuY2VfbWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixrQkFBa0IsbUJBQU8sQ0FBQyx1RkFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CLGlCQUFpQixZQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsNEJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBO0FBQ0Esa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9iYWxhbmNlX21hcC5qcz84NWQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CYWxhbmNlTWFwID0gdm9pZCAwO1xuY29uc3QgYmFsYW5jZV8xID0gcmVxdWlyZShcIi4vYmFsYW5jZVwiKTtcbi8qKlxuICogQSBjb252ZW5pZW5jZSBjbGFzcyBmb3Igc3RvcmluZyBhbmQgbWFuaXB1bGF0aW5nIEFzc2V0IGJhbGFuY2VzIGluIGEgaHVtYW4tcmVhZGFibGUgZm9ybWF0LlxuICovXG5jbGFzcyBCYWxhbmNlTWFwIGV4dGVuZHMgTWFwIHtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIGxpc3Qgb2YgQmFsYW5jZSBtb2RlbHMgdG8gYSBCYWxhbmNlTWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCYWxhbmNlTW9kZWxbXX0gYmFsYW5jZXMgLSBUaGUgbGlzdCBvZiBiYWxhbmNlcyBmZXRjaGVkIGZyb20gdGhlIEFQSS5cbiAgICAgKiBAcmV0dXJucyB7QmFsYW5jZU1hcH0gVGhlIGNvbnZlcnRlZCBCYWxhbmNlTWFwIG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUJhbGFuY2VzKGJhbGFuY2VzKSB7XG4gICAgICAgIGNvbnN0IGJhbGFuY2VNYXAgPSBuZXcgQmFsYW5jZU1hcCgpO1xuICAgICAgICBiYWxhbmNlcy5mb3JFYWNoKGJhbGFuY2VNb2RlbCA9PiB7XG4gICAgICAgICAgICBjb25zdCBiYWxhbmNlID0gYmFsYW5jZV8xLkJhbGFuY2UuZnJvbU1vZGVsKGJhbGFuY2VNb2RlbCk7XG4gICAgICAgICAgICBiYWxhbmNlTWFwLmFkZChiYWxhbmNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBiYWxhbmNlTWFwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgYmFsYW5jZSB0byB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCYWxhbmNlfSBiYWxhbmNlIC0gVGhlIGJhbGFuY2UgdG8gYWRkIHRvIHRoZSBtYXAuXG4gICAgICovXG4gICAgYWRkKGJhbGFuY2UpIHtcbiAgICAgICAgaWYgKCEoYmFsYW5jZSBpbnN0YW5jZW9mIGJhbGFuY2VfMS5CYWxhbmNlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmFsYW5jZSBtdXN0IGJlIGEgQmFsYW5jZVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldChiYWxhbmNlLmFzc2V0SWQsIGJhbGFuY2UuYW1vdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgYmFsYW5jZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBiYWxhbmNlIG1hcC5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgIHRoaXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgbGV0IHN0ciA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAodmFsdWUuaXNJbnRlZ2VyKCkpIHtcbiAgICAgICAgICAgICAgICBzdHIgPSB2YWx1ZS50b051bWJlcigpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHN0cjtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBgQmFsYW5jZU1hcCR7SlNPTi5zdHJpbmdpZnkocmVzdWx0KX1gO1xuICAgIH1cbn1cbmV4cG9ydHMuQmFsYW5jZU1hcCA9IEJhbGFuY2VNYXA7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Coinbase = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\"));\nconst axios_retry_1 = __importDefault(__webpack_require__(/*! axios-retry */ \"(ssr)/./node_modules/axios-retry/dist/cjs/index.js\"));\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst client_1 = __webpack_require__(/*! ../client */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/index.js\");\nconst base_1 = __webpack_require__(/*! ./../client/base */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/base.js\");\nconst configuration_1 = __webpack_require__(/*! ./../client/configuration */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/configuration.js\");\nconst authenticator_1 = __webpack_require__(/*! ./authenticator */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/authenticator.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst os = __importStar(__webpack_require__(/*! os */ \"os\"));\n/**\n * The Coinbase SDK.\n */\nclass Coinbase {\n    /**\n     * Initializes the Coinbase SDK.\n     *\n     * @deprecated as of v0.5.0, use `configure` or `configureFromJson` instead.\n     *\n     * @class\n     * @param options - The constructor options.\n     * @param options.apiKeyName - The API key name.\n     * @param options.privateKey - The private key associated with the API key.\n     * @param options.useServerSigner - Whether to use a Server-Signer or not.\n     * @param options.debugging - If true, logs API requests and responses to the console.\n     * @param options.basePath - The base path for the API.\n     * @param options.maxNetworkRetries - The maximum number of network retries for the API GET requests.\n     * @throws {InvalidConfigurationError} If the configuration is invalid.\n     * @throws {InvalidAPIKeyFormatError} If not able to create JWT token.\n     */\n    constructor({ apiKeyName, privateKey, useServerSigner = false, debugging = false, basePath = base_1.BASE_PATH, maxNetworkRetries = 3, }) {\n        if (apiKeyName === \"\") {\n            throw new errors_1.InvalidConfigurationError(\"Invalid configuration: apiKeyName is empty\");\n        }\n        if (privateKey === \"\") {\n            throw new errors_1.InvalidConfigurationError(\"Invalid configuration: privateKey is empty\");\n        }\n        const coinbaseAuthenticator = new authenticator_1.CoinbaseAuthenticator(apiKeyName, privateKey);\n        const config = new configuration_1.Configuration({\n            basePath: basePath,\n        });\n        const axiosInstance = axios_1.default.create();\n        (0, axios_retry_1.default)(axiosInstance, {\n            retries: maxNetworkRetries,\n            retryCondition: (error) => {\n                return (error.config?.method?.toUpperCase() === \"GET\" &&\n                    (error.response?.status || 0) in [500, 502, 503, 504]);\n            },\n        });\n        (0, utils_1.registerAxiosInterceptors)(axiosInstance, config => coinbaseAuthenticator.authenticateRequest(config, debugging), \n        /* istanbul ignore file */\n        response => (0, utils_1.logApiResponse)(response, debugging));\n        Coinbase.apiClients.wallet = (0, client_1.WalletsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.address = (0, client_1.AddressesApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.transfer = (0, client_1.TransfersApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.trade = (0, client_1.TradesApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.serverSigner = (0, client_1.ServerSignersApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.stake = (0, client_1.StakeApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.walletStake = (0, client_1.WalletStakeApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.validator = (0, client_1.ValidatorsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.asset = (0, client_1.AssetsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.webhook = (0, client_1.WebhooksApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.contractInvocation = (0, client_1.ContractInvocationsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.externalAddress = (0, client_1.ExternalAddressesApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.balanceHistory = (0, client_1.BalanceHistoryApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.contractEvent = (0, client_1.ContractEventsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.smartContract = (0, client_1.SmartContractsApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiClients.transactionHistory = (0, client_1.TransactionHistoryApiFactory)(config, basePath, axiosInstance);\n        Coinbase.apiKeyPrivateKey = privateKey;\n        Coinbase.useServerSigner = useServerSigner;\n    }\n    /**\n     * Configures the Coinbase SDK with the provided options.\n     *\n     * @param options - The configuration options.\n     * @param options.apiKeyName - The name of the API key.\n     * @param options.privateKey - The private key associated with the API key.\n     * @param options.useServerSigner - Whether to use a Server-Signer or not. Defaults to false.\n     * @param options.debugging - If true, logs API requests and responses to the console. Defaults to false.\n     * @param options.basePath - The base path for the API. Defaults to BASE_PATH.\n     * @returns A new instance of the Coinbase SDK.\n     */\n    static configure({ apiKeyName, privateKey, useServerSigner = false, debugging = false, basePath = base_1.BASE_PATH, }) {\n        return new Coinbase({\n            apiKeyName,\n            privateKey,\n            useServerSigner,\n            debugging,\n            basePath,\n        });\n    }\n    /**\n     * Reads the API key and private key from a JSON file and initializes the Coinbase SDK.\n     *\n     * @param options - The configuration options.\n     * @param options.filePath - The path to the JSON file containing the API key and private key.\n     * @param options.useServerSigner - Whether to use a Server-Signer or not.\n     * @param options.debugging - If true, logs API requests and responses to the console.\n     * @param options.basePath - The base path for the API.\n     * @returns A new instance of the Coinbase SDK.\n     * @throws {InvalidAPIKeyFormat} If the file does not exist or the configuration values are missing/invalid.\n     * @throws {InvalidConfiguration} If the configuration is invalid.\n     * @throws {InvalidAPIKeyFormat} If not able to create JWT token.\n     */\n    static configureFromJson({ filePath = \"coinbase_cloud_api_key.json\", useServerSigner = false, debugging = false, basePath = base_1.BASE_PATH, } = {}) {\n        filePath = filePath.startsWith(\"~\") ? filePath.replace(\"~\", os.homedir()) : filePath;\n        if (!fs.existsSync(filePath)) {\n            throw new errors_1.InvalidConfigurationError(`Invalid configuration: file not found at ${filePath}`);\n        }\n        try {\n            const data = fs.readFileSync(filePath, \"utf8\");\n            const config = JSON.parse(data);\n            if (!config.name || !config.privateKey) {\n                throw new errors_1.InvalidAPIKeyFormatError(\"Invalid configuration: missing configuration values\");\n            }\n            return new Coinbase({\n                apiKeyName: config.name,\n                privateKey: config.privateKey,\n                useServerSigner: useServerSigner,\n                debugging: debugging,\n                basePath: basePath,\n            });\n        }\n        catch (e) {\n            if (e instanceof SyntaxError) {\n                throw new errors_1.InvalidAPIKeyFormatError(\"Not able to parse the configuration file\");\n            }\n            else {\n                throw new errors_1.InvalidAPIKeyFormatError(`An error occurred while reading the configuration file: ${e.message}`);\n            }\n        }\n    }\n    /**\n     * Converts a network symbol to a string, replacing underscores with hyphens.\n     *\n     * @param network - The network symbol to convert\n     * @returns the converted string\n     */\n    static normalizeNetwork(network) {\n        return network.replace(/_/g, \"-\");\n    }\n    /**\n     * Converts a string to a symbol, replacing hyphens with underscores.\n     *\n     * @param asset - The string to convert\n     * @returns the converted symbol\n     */\n    static toAssetId(asset) {\n        return asset.replace(/-/g, \"_\");\n    }\n}\nexports.Coinbase = Coinbase;\n/**\n * The map of supported networks to network ID. Generated from the OpenAPI spec.\n *\n * @constant\n *\n * @example\n * ```typescript\n * Coinbase.networks.BaseMainnet\n * ```\n */\nCoinbase.networks = client_1.NetworkIdentifier;\n/**\n * The list of supported assets.\n *\n * @constant\n */\nCoinbase.assets = {\n    Eth: \"eth\",\n    Wei: \"wei\",\n    Gwei: \"gwei\",\n    Usdc: \"usdc\",\n    Weth: \"weth\",\n    Sol: \"sol\",\n    Lamport: \"lamport\",\n};\nCoinbase.apiClients = {};\n/**\n * The default page limit for list methods.\n *\n * @constant\n */\nCoinbase.defaultPageLimit = 100;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/constants.js":
/*!************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/constants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GWEI_DECIMALS = void 0;\nexports.GWEI_DECIMALS = 9;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9jb25zdGFudHMuanM/YWU0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR1dFSV9ERUNJTUFMUyA9IHZvaWQgMDtcbmV4cG9ydHMuR1dFSV9ERUNJTUFMUyA9IDk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_event.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_event.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ContractEvent = void 0;\n/**\n * A representation of a single contract event.\n */\nclass ContractEvent {\n    /**\n     * Creates the ContractEvent object.\n     *\n     * @param model - The underlying contract event object.\n     */\n    constructor(model) {\n        this.model = model;\n    }\n    /**\n     * Returns the network ID of the ContractEvent.\n     *\n     * @returns The network ID.\n     */\n    networkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the protocol name of the ContractEvent.\n     *\n     * @returns The protocol name.\n     */\n    protocolName() {\n        return this.model.protocol_name;\n    }\n    /**\n     * Returns the contract name of the ContractEvent.\n     *\n     * @returns The contract name.\n     */\n    contractName() {\n        return this.model.contract_name;\n    }\n    /**\n     * Returns the event name of the ContractEvent.\n     *\n     * @returns The event name.\n     */\n    eventName() {\n        return this.model.event_name;\n    }\n    /**\n     * Returns the signature of the ContractEvent.\n     *\n     * @returns The event signature.\n     */\n    sig() {\n        return this.model.sig;\n    }\n    /**\n     * Returns the four bytes of the Keccak hash of the event signature.\n     *\n     * @returns The four bytes of the event signature hash.\n     */\n    fourBytes() {\n        return this.model.four_bytes;\n    }\n    /**\n     * Returns the contract address of the ContractEvent.\n     *\n     * @returns The contract address.\n     */\n    contractAddress() {\n        return this.model.contract_address;\n    }\n    /**\n     * Returns the block time of the ContractEvent.\n     *\n     * @returns The block time.\n     */\n    blockTime() {\n        return new Date(this.model.block_time);\n    }\n    /**\n     * Returns the block height of the ContractEvent.\n     *\n     * @returns The block height.\n     */\n    blockHeight() {\n        return this.model.block_height;\n    }\n    /**\n     * Returns the transaction hash of the ContractEvent.\n     *\n     * @returns The transaction hash.\n     */\n    txHash() {\n        return this.model.tx_hash;\n    }\n    /**\n     * Returns the transaction index of the ContractEvent.\n     *\n     * @returns The transaction index.\n     */\n    txIndex() {\n        return this.model.tx_index;\n    }\n    /**\n     * Returns the event index of the ContractEvent.\n     *\n     * @returns The event index.\n     */\n    eventIndex() {\n        return this.model.event_index;\n    }\n    /**\n     * Returns the event data of the ContractEvent.\n     *\n     * @returns The event data.\n     */\n    data() {\n        return this.model.data;\n    }\n    /**\n     * Print the ContractEvent as a string.\n     *\n     * @returns The string representation of the ContractEvent.\n     */\n    toString() {\n        return `ContractEvent { networkId: '${this.networkId()}' protocolName: '${this.protocolName()}' contractName: '${this.contractName()}' eventName: '${this.eventName()}' contractAddress: '${this.contractAddress()}' blockHeight: ${this.blockHeight()} txHash: '${this.txHash()}' }`;\n    }\n}\nexports.ContractEvent = ContractEvent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2NvbnRyYWN0X2V2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGNBQWMsaUJBQWlCLG1CQUFtQixvQkFBb0IsbUJBQW1CLG9CQUFvQixnQkFBZ0IsaUJBQWlCLHNCQUFzQix1QkFBdUIsaUJBQWlCLG9CQUFvQixXQUFXLGNBQWMsR0FBRztBQUM1UjtBQUNBO0FBQ0EscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9jb250cmFjdF9ldmVudC5qcz9lYjUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db250cmFjdEV2ZW50ID0gdm9pZCAwO1xuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGNvbnRyYWN0IGV2ZW50LlxuICovXG5jbGFzcyBDb250cmFjdEV2ZW50IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBDb250cmFjdEV2ZW50IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtb2RlbCAtIFRoZSB1bmRlcmx5aW5nIGNvbnRyYWN0IGV2ZW50IG9iamVjdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCkge1xuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5ldHdvcmsgSUQgb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgbmV0d29yayBJRC5cbiAgICAgKi9cbiAgICBuZXR3b3JrSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLm5ldHdvcmtfaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHByb3RvY29sIG5hbWUgb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgcHJvdG9jb2wgbmFtZS5cbiAgICAgKi9cbiAgICBwcm90b2NvbE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnByb3RvY29sX25hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbnRyYWN0IG5hbWUgb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgY29udHJhY3QgbmFtZS5cbiAgICAgKi9cbiAgICBjb250cmFjdE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmNvbnRyYWN0X25hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGV2ZW50IG5hbWUgb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgZXZlbnQgbmFtZS5cbiAgICAgKi9cbiAgICBldmVudE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmV2ZW50X25hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNpZ25hdHVyZSBvZiB0aGUgQ29udHJhY3RFdmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBldmVudCBzaWduYXR1cmUuXG4gICAgICovXG4gICAgc2lnKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5zaWc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGZvdXIgYnl0ZXMgb2YgdGhlIEtlY2NhayBoYXNoIG9mIHRoZSBldmVudCBzaWduYXR1cmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgZm91ciBieXRlcyBvZiB0aGUgZXZlbnQgc2lnbmF0dXJlIGhhc2guXG4gICAgICovXG4gICAgZm91ckJ5dGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5mb3VyX2J5dGVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb250cmFjdCBhZGRyZXNzIG9mIHRoZSBDb250cmFjdEV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGNvbnRyYWN0IGFkZHJlc3MuXG4gICAgICovXG4gICAgY29udHJhY3RBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5jb250cmFjdF9hZGRyZXNzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBibG9jayB0aW1lIG9mIHRoZSBDb250cmFjdEV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGJsb2NrIHRpbWUuXG4gICAgICovXG4gICAgYmxvY2tUaW1lKCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5tb2RlbC5ibG9ja190aW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYmxvY2sgaGVpZ2h0IG9mIHRoZSBDb250cmFjdEV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGJsb2NrIGhlaWdodC5cbiAgICAgKi9cbiAgICBibG9ja0hlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYmxvY2tfaGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0cmFuc2FjdGlvbiBoYXNoIG9mIHRoZSBDb250cmFjdEV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHRyYW5zYWN0aW9uIGhhc2guXG4gICAgICovXG4gICAgdHhIYXNoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC50eF9oYXNoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0cmFuc2FjdGlvbiBpbmRleCBvZiB0aGUgQ29udHJhY3RFdmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSB0cmFuc2FjdGlvbiBpbmRleC5cbiAgICAgKi9cbiAgICB0eEluZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC50eF9pbmRleDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZXZlbnQgaW5kZXggb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgZXZlbnQgaW5kZXguXG4gICAgICovXG4gICAgZXZlbnRJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZXZlbnRfaW5kZXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGV2ZW50IGRhdGEgb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgZXZlbnQgZGF0YS5cbiAgICAgKi9cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmludCB0aGUgQ29udHJhY3RFdmVudCBhcyBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIENvbnRyYWN0RXZlbnQuXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgQ29udHJhY3RFdmVudCB7IG5ldHdvcmtJZDogJyR7dGhpcy5uZXR3b3JrSWQoKX0nIHByb3RvY29sTmFtZTogJyR7dGhpcy5wcm90b2NvbE5hbWUoKX0nIGNvbnRyYWN0TmFtZTogJyR7dGhpcy5jb250cmFjdE5hbWUoKX0nIGV2ZW50TmFtZTogJyR7dGhpcy5ldmVudE5hbWUoKX0nIGNvbnRyYWN0QWRkcmVzczogJyR7dGhpcy5jb250cmFjdEFkZHJlc3MoKX0nIGJsb2NrSGVpZ2h0OiAke3RoaXMuYmxvY2tIZWlnaHQoKX0gdHhIYXNoOiAnJHt0aGlzLnR4SGFzaCgpfScgfWA7XG4gICAgfVxufVxuZXhwb3J0cy5Db250cmFjdEV2ZW50ID0gQ29udHJhY3RFdmVudDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_event.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_invocation.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_invocation.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ContractInvocation = void 0;\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/decimal.js/decimal.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\n/**\n * A representation of a ContractInvocation, which calls a smart contract method\n * onchain. The fee is assumed to be paid in the native Asset of the Network.\n */\nclass ContractInvocation {\n    /**\n     * Private constructor to prevent direct instantiation outside of the factory methods.\n     *\n     * @ignore\n     * @param contractInvocationModel - The ContractInvocation model.\n     * @hideconstructor\n     */\n    constructor(contractInvocationModel) {\n        if (!contractInvocationModel) {\n            throw new Error(\"ContractInvocation model cannot be empty\");\n        }\n        this.model = contractInvocationModel;\n    }\n    /**\n     * Converts a ContractInvocationModel into a ContractInvocation object.\n     *\n     * @param contractInvocationModel - The ContractInvocation model object.\n     * @returns The ContractInvocation object.\n     */\n    static fromModel(contractInvocationModel) {\n        return new ContractInvocation(contractInvocationModel);\n    }\n    /**\n     * Returns the ID of the ContractInvocation.\n     *\n     * @returns The ContractInvocation ID.\n     */\n    getId() {\n        return this.model.contract_invocation_id;\n    }\n    /**\n     * Returns the Network ID of the ContractInvocation.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the Wallet ID of the ContractInvocation.\n     *\n     * @returns The Wallet ID.\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the From Address ID of the ContractInvocation.\n     *\n     * @returns The From Address ID.\n     */\n    getFromAddressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the Destination Address ID of the ContractInvocation.\n     *\n     * @returns The Destination Address ID.\n     */\n    getContractAddressId() {\n        return this.model.contract_address;\n    }\n    /**\n     * Returns the Method of the ContractInvocation.\n     *\n     * @returns The Method.\n     */\n    getMethod() {\n        return this.model.method;\n    }\n    /**\n     * Returns the Arguments of the ContractInvocation.\n     *\n     * @returns {object} The arguments object passed to the contract invocation.\n     * The key is the argument name and the value is the argument value.\n     */\n    getArgs() {\n        return JSON.parse(this.model.args);\n    }\n    /**\n     * Returns the ABI of the ContractInvocation, if specified.\n     *\n     * @returns The ABI as an object, or undefined if not available.\n     */\n    getAbi() {\n        if (!this.model.abi)\n            return undefined;\n        return JSON.parse(this.model.abi);\n    }\n    /**\n     * Returns the amount of the native asset sent to a payable contract method, if applicable.\n     *\n     * @returns The amount in atomic units of the native asset.\n     */\n    getAmount() {\n        return new decimal_js_1.Decimal(this.model.amount);\n    }\n    /**\n     * Returns the Transaction Hash of the ContractInvocation.\n     *\n     * @returns The Transaction Hash as a Hex string, or undefined if not yet available.\n     */\n    getTransactionHash() {\n        return this.getTransaction().getTransactionHash();\n    }\n    /**\n     * Returns the Transaction of the ContractInvocation.\n     *\n     * @returns The ethers.js Transaction object.\n     * @throws (InvalidUnsignedPayload) If the Unsigned Payload is invalid.\n     */\n    getRawTransaction() {\n        return this.getTransaction().rawTransaction();\n    }\n    /**\n     * Signs the ContractInvocation with the provided key and returns the hex signature\n     * required for broadcasting the ContractInvocation.\n     *\n     * @param key - The key to sign the ContractInvocation with\n     * @returns The hex-encoded signed payload\n     */\n    async sign(key) {\n        return this.getTransaction().sign(key);\n    }\n    /**\n     * Returns the Status of the ContractInvocation.\n     *\n     * @returns The Status of the ContractInvocation.\n     */\n    getStatus() {\n        return this.getTransaction().getStatus();\n    }\n    /**\n     * Returns the Transaction of the ContractInvocation.\n     *\n     * @returns The Transaction\n     */\n    getTransaction() {\n        return new transaction_1.Transaction(this.model.transaction);\n    }\n    /**\n     * Returns the link to the Transaction on the blockchain explorer.\n     *\n     * @returns The link to the Transaction on the blockchain explorer.\n     */\n    getTransactionLink() {\n        return this.getTransaction().getTransactionLink();\n    }\n    /**\n     * Broadcasts the ContractInvocation to the Network.\n     *\n     * @returns The ContractInvocation object\n     * @throws {APIError} if the API request to broadcast a ContractInvocation fails.\n     */\n    async broadcast() {\n        if (!this.getTransaction()?.isSigned())\n            throw new Error(\"Cannot broadcast unsigned ContractInvocation\");\n        const broadcastContractInvocationRequest = {\n            signed_payload: this.getTransaction().getSignature(),\n        };\n        const response = await coinbase_1.Coinbase.apiClients.contractInvocation.broadcastContractInvocation(this.getWalletId(), this.getFromAddressId(), this.getId(), broadcastContractInvocationRequest);\n        return ContractInvocation.fromModel(response.data);\n    }\n    /**\n     * Waits for the ContractInvocation to be confirmed on the Network or fail on chain.\n     * Waits until the ContractInvocation is completed or failed on-chain by polling at the given interval.\n     * Raises an error if the ContractInvocation takes longer than the given timeout.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval to check the status of the ContractInvocation.\n     * @param options.timeoutSeconds - The maximum time to wait for the ContractInvocation to be confirmed.\n     *\n     * @returns The ContractInvocation object in a terminal state.\n     * @throws {Error} if the ContractInvocation times out.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10, } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            // If the ContractInvocation is in a terminal state, return the ContractInvocation.\n            const status = this.getStatus();\n            if (status === types_1.TransactionStatus.COMPLETE || status === types_1.TransactionStatus.FAILED) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"ContractInvocation timed out\");\n    }\n    /**\n     * Reloads the ContractInvocation model with the latest data from the server.\n     *\n     * @throws {APIError} if the API request to get a ContractInvocation fails.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.contractInvocation.getContractInvocation(this.getWalletId(), this.getFromAddressId(), this.getId());\n        this.model = result?.data;\n    }\n    /**\n     * Returns a string representation of the ContractInvocation.\n     *\n     * @returns The string representation of the ContractInvocation.\n     */\n    toString() {\n        return (`ContractInvocation{contractInvocationId: '${this.getId()}', networkId: '${this.getNetworkId()}', ` +\n            `fromAddressId: '${this.getFromAddressId()}', contractAddressId: '${this.getContractAddressId()}', ` +\n            `method: '${this.getMethod()}', args: '${this.getArgs()}', transactionHash: '${this.getTransactionHash()}', ` +\n            `transactionLink: '${this.getTransactionLink()}', status: '${this.getStatus()}'}`);\n    }\n}\nexports.ContractInvocation = ContractInvocation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_invocation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AlreadySignedError = exports.NotSignedError = exports.InvalidUnsignedPayloadError = exports.InvalidConfigurationError = exports.ArgumentError = exports.TimeoutError = exports.InvalidAPIKeyFormatError = void 0;\n/**\n * InvalidAPIKeyFormatError error is thrown when the API key format is invalid.\n */\nclass InvalidAPIKeyFormatError extends Error {\n    /**\n     * Initializes a new InvalidAPIKeyFormat instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = InvalidAPIKeyFormatError.DEFAULT_MESSAGE) {\n        super(message);\n        this.name = \"InvalidAPIKeyFormatError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, InvalidAPIKeyFormatError);\n        }\n    }\n}\nexports.InvalidAPIKeyFormatError = InvalidAPIKeyFormatError;\nInvalidAPIKeyFormatError.DEFAULT_MESSAGE = \"Invalid API key format\";\n/**\n * TimeoutError is thrown when an operation times out.\n */\nclass TimeoutError extends Error {\n    /**\n     * Initializes a new TimeoutError instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = \"Timeout Error\") {\n        super(message);\n        this.name = \"TimeoutError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, TimeoutError);\n        }\n    }\n}\nexports.TimeoutError = TimeoutError;\n/**\n * ArgumentError is thrown when an argument is invalid.\n */\nclass ArgumentError extends Error {\n    /**\n     * Initializes a new ArgumentError instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = ArgumentError.DEFAULT_MESSAGE) {\n        super(message);\n        this.name = \"ArgumentError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ArgumentError);\n        }\n    }\n}\nexports.ArgumentError = ArgumentError;\nArgumentError.DEFAULT_MESSAGE = \"Argument Error\";\n/**\n * InvalidConfigurationError error is thrown when apikey/privateKey configuration is invalid.\n */\nclass InvalidConfigurationError extends Error {\n    /**\n     * Initializes a new InvalidConfiguration instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = InvalidConfigurationError.DEFAULT_MESSAGE) {\n        super(message);\n        this.name = \"InvalidConfigurationError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, InvalidConfigurationError);\n        }\n    }\n}\nexports.InvalidConfigurationError = InvalidConfigurationError;\nInvalidConfigurationError.DEFAULT_MESSAGE = \"Invalid configuration\";\n/**\n * InvalidUnsignedPayload error is thrown when the unsigned payload is invalid.\n */\nclass InvalidUnsignedPayloadError extends Error {\n    /**\n     * Initializes a new InvalidUnsignedPayload instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = InvalidUnsignedPayloadError.DEFAULT_MESSAGE) {\n        super(message);\n        this.name = \"InvalidUnsignedPayloadError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, InvalidUnsignedPayloadError);\n        }\n    }\n}\nexports.InvalidUnsignedPayloadError = InvalidUnsignedPayloadError;\nInvalidUnsignedPayloadError.DEFAULT_MESSAGE = \"Invalid unsigned payload\";\n/**\n * NotSignedError is thrown when a resource is not signed.\n */\nclass NotSignedError extends Error {\n    /**\n     * Initializes a new NotSignedError instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = \"Resource not signed\") {\n        super(message);\n        this.name = \"NotSignedError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, NotSignedError);\n        }\n    }\n}\nexports.NotSignedError = NotSignedError;\n/**\n * AlreadySignedError is thrown when a resource is already signed.\n */\nclass AlreadySignedError extends Error {\n    /**\n     * Initializes a new AlreadySignedError instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = AlreadySignedError.DEFAULT_MESSAGE) {\n        super(message);\n        this.name = \"AlreadySignedError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, AlreadySignedError);\n        }\n    }\n}\nexports.AlreadySignedError = AlreadySignedError;\nAlreadySignedError.DEFAULT_MESSAGE = \"Resource already signed\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxzQkFBc0IsR0FBRyxtQ0FBbUMsR0FBRyxpQ0FBaUMsR0FBRyxxQkFBcUIsR0FBRyxvQkFBb0IsR0FBRyxnQ0FBZ0M7QUFDL007QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9lcnJvcnMuanM/NzYzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWxyZWFkeVNpZ25lZEVycm9yID0gZXhwb3J0cy5Ob3RTaWduZWRFcnJvciA9IGV4cG9ydHMuSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yID0gZXhwb3J0cy5JbnZhbGlkQ29uZmlndXJhdGlvbkVycm9yID0gZXhwb3J0cy5Bcmd1bWVudEVycm9yID0gZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBleHBvcnRzLkludmFsaWRBUElLZXlGb3JtYXRFcnJvciA9IHZvaWQgMDtcbi8qKlxuICogSW52YWxpZEFQSUtleUZvcm1hdEVycm9yIGVycm9yIGlzIHRocm93biB3aGVuIHRoZSBBUEkga2V5IGZvcm1hdCBpcyBpbnZhbGlkLlxuICovXG5jbGFzcyBJbnZhbGlkQVBJS2V5Rm9ybWF0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgSW52YWxpZEFQSUtleUZvcm1hdCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIGVycm9yIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSA9IEludmFsaWRBUElLZXlGb3JtYXRFcnJvci5ERUZBVUxUX01FU1NBR0UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZEFQSUtleUZvcm1hdEVycm9yXCI7XG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgSW52YWxpZEFQSUtleUZvcm1hdEVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuSW52YWxpZEFQSUtleUZvcm1hdEVycm9yID0gSW52YWxpZEFQSUtleUZvcm1hdEVycm9yO1xuSW52YWxpZEFQSUtleUZvcm1hdEVycm9yLkRFRkFVTFRfTUVTU0FHRSA9IFwiSW52YWxpZCBBUEkga2V5IGZvcm1hdFwiO1xuLyoqXG4gKiBUaW1lb3V0RXJyb3IgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIHRpbWVzIG91dC5cbiAqL1xuY2xhc3MgVGltZW91dEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgbmV3IFRpbWVvdXRFcnJvciBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIGVycm9yIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSA9IFwiVGltZW91dCBFcnJvclwiKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlRpbWVvdXRFcnJvclwiO1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFRpbWVvdXRFcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlRpbWVvdXRFcnJvciA9IFRpbWVvdXRFcnJvcjtcbi8qKlxuICogQXJndW1lbnRFcnJvciBpcyB0aHJvd24gd2hlbiBhbiBhcmd1bWVudCBpcyBpbnZhbGlkLlxuICovXG5jbGFzcyBBcmd1bWVudEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgbmV3IEFyZ3VtZW50RXJyb3IgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBlcnJvciBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSBBcmd1bWVudEVycm9yLkRFRkFVTFRfTUVTU0FHRSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBcmd1bWVudEVycm9yXCI7XG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQXJndW1lbnRFcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFyZ3VtZW50RXJyb3IgPSBBcmd1bWVudEVycm9yO1xuQXJndW1lbnRFcnJvci5ERUZBVUxUX01FU1NBR0UgPSBcIkFyZ3VtZW50IEVycm9yXCI7XG4vKipcbiAqIEludmFsaWRDb25maWd1cmF0aW9uRXJyb3IgZXJyb3IgaXMgdGhyb3duIHdoZW4gYXBpa2V5L3ByaXZhdGVLZXkgY29uZmlndXJhdGlvbiBpcyBpbnZhbGlkLlxuICovXG5jbGFzcyBJbnZhbGlkQ29uZmlndXJhdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgbmV3IEludmFsaWRDb25maWd1cmF0aW9uIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlID0gSW52YWxpZENvbmZpZ3VyYXRpb25FcnJvci5ERUZBVUxUX01FU1NBR0UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZENvbmZpZ3VyYXRpb25FcnJvclwiO1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEludmFsaWRDb25maWd1cmF0aW9uRXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5JbnZhbGlkQ29uZmlndXJhdGlvbkVycm9yID0gSW52YWxpZENvbmZpZ3VyYXRpb25FcnJvcjtcbkludmFsaWRDb25maWd1cmF0aW9uRXJyb3IuREVGQVVMVF9NRVNTQUdFID0gXCJJbnZhbGlkIGNvbmZpZ3VyYXRpb25cIjtcbi8qKlxuICogSW52YWxpZFVuc2lnbmVkUGF5bG9hZCBlcnJvciBpcyB0aHJvd24gd2hlbiB0aGUgdW5zaWduZWQgcGF5bG9hZCBpcyBpbnZhbGlkLlxuICovXG5jbGFzcyBJbnZhbGlkVW5zaWduZWRQYXlsb2FkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgSW52YWxpZFVuc2lnbmVkUGF5bG9hZCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIGVycm9yIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSA9IEludmFsaWRVbnNpZ25lZFBheWxvYWRFcnJvci5ERUZBVUxUX01FU1NBR0UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yXCI7XG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yID0gSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yO1xuSW52YWxpZFVuc2lnbmVkUGF5bG9hZEVycm9yLkRFRkFVTFRfTUVTU0FHRSA9IFwiSW52YWxpZCB1bnNpZ25lZCBwYXlsb2FkXCI7XG4vKipcbiAqIE5vdFNpZ25lZEVycm9yIGlzIHRocm93biB3aGVuIGEgcmVzb3VyY2UgaXMgbm90IHNpZ25lZC5cbiAqL1xuY2xhc3MgTm90U2lnbmVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgTm90U2lnbmVkRXJyb3IgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBlcnJvciBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSBcIlJlc291cmNlIG5vdCBzaWduZWRcIikge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJOb3RTaWduZWRFcnJvclwiO1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIE5vdFNpZ25lZEVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuTm90U2lnbmVkRXJyb3IgPSBOb3RTaWduZWRFcnJvcjtcbi8qKlxuICogQWxyZWFkeVNpZ25lZEVycm9yIGlzIHRocm93biB3aGVuIGEgcmVzb3VyY2UgaXMgYWxyZWFkeSBzaWduZWQuXG4gKi9cbmNsYXNzIEFscmVhZHlTaWduZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhIG5ldyBBbHJlYWR5U2lnbmVkRXJyb3IgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBlcnJvciBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSBBbHJlYWR5U2lnbmVkRXJyb3IuREVGQVVMVF9NRVNTQUdFKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkFscmVhZHlTaWduZWRFcnJvclwiO1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEFscmVhZHlTaWduZWRFcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFscmVhZHlTaWduZWRFcnJvciA9IEFscmVhZHlTaWduZWRFcnJvcjtcbkFscmVhZHlTaWduZWRFcnJvci5ERUZBVUxUX01FU1NBR0UgPSBcIlJlc291cmNlIGFscmVhZHkgc2lnbmVkXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/faucet_transaction.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/faucet_transaction.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FaucetTransaction = void 0;\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\n/**\n * Represents a transaction from a faucet.\n */\nclass FaucetTransaction {\n    /**\n     * Creates a new FaucetTransaction instance.\n     * Do not use this method directly - instead, use Address.faucet().\n     *\n     * @class\n     * @param {FaucetTransactionModel} model - The FaucetTransaction model.\n     * @throws {Error} If the model does not exist.\n     */\n    constructor(model) {\n        if (!model?.transaction) {\n            throw new Error(\"FaucetTransaction model cannot be empty\");\n        }\n        this.model = model;\n        this._transaction = new transaction_1.Transaction(this.model.transaction);\n    }\n    /**\n     * Returns the Transaction of the FaucetTransaction.\n     *\n     * @returns The Faucet Transaction\n     */\n    get transaction() {\n        return this._transaction;\n    }\n    /**\n     * Returns the transaction hash.\n     *\n     * @returns {string} The transaction hash.\n     */\n    getTransactionHash() {\n        return this.transaction.getTransactionHash();\n    }\n    /**\n     * Returns the link to the transaction on the blockchain explorer.\n     *\n     * @returns {string} The link to the transaction on the blockchain explorer\n     */\n    getTransactionLink() {\n        return this.transaction.getTransactionLink();\n    }\n    /**\n     * Returns the Status of the FaucetTransaction.\n     *\n     * @returns The Status of the FaucetTransaction.\n     */\n    getStatus() {\n        return this.transaction.getStatus();\n    }\n    /**\n     * Returns the network ID of the FaucetTransaction.\n     *\n     * @returns {string} The network ID.\n     */\n    getNetworkId() {\n        return this.transaction.getNetworkId();\n    }\n    /**\n     * Returns the address that is being funded by the faucet.\n     *\n     * @returns {string} The address ID.\n     */\n    getAddressId() {\n        return this.transaction.toAddressId();\n    }\n    /**\n     * Waits for the FaucetTransaction to be confirmed on the Network or fail on chain.\n     * Waits until the FaucetTransaction is completed or failed on-chain by polling at the given interval.\n     * Raises an error if the FaucetTransaction takes longer than the given timeout.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval to check the status of the FaucetTransaction.\n     * @param options.timeoutSeconds - The maximum time to wait for the FaucetTransaction to be confirmed.\n     *\n     * @returns The FaucetTransaction object in a terminal state.\n     * @throws {Error} if the FaucetTransaction times out.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10, } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            // If the FaucetTransaction is in a terminal state, return the FaucetTransaction.\n            if (this.transaction.isTerminalState()) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"FaucetTransaction timed out\");\n    }\n    /**\n     * Reloads the FaucetTransaction model with the latest data from the server.\n     *\n     * @returns {FaucetTransaction} The reloaded FaucetTransaction object.\n     * @throws {APIError} if the API request to get a FaucetTransaction fails.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.externalAddress.getFaucetTransaction(this.transaction.getNetworkId(), this.getAddressId(), this.getTransactionHash());\n        this.model = result?.data;\n        if (!this.model?.transaction) {\n            throw new Error(\"FaucetTransaction model cannot be empty\");\n        }\n        this._transaction = new transaction_1.Transaction(this.model.transaction);\n        return this;\n    }\n    /**\n     * Returns a string representation of the FaucetTransaction.\n     *\n     * @returns {string} A string representation of the FaucetTransaction.\n     */\n    toString() {\n        return `Coinbase::FaucetTransaction{transaction_hash: '${this.getTransactionHash()}', transaction_link: '${this.getTransactionLink()}'}`;\n    }\n}\nexports.FaucetTransaction = FaucetTransaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2ZhdWNldF90cmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsbUJBQW1CLG1CQUFPLENBQUMseUZBQVk7QUFDdkMsc0JBQXNCLG1CQUFPLENBQUMsK0ZBQWU7QUFDN0MsZ0JBQWdCLG1CQUFPLENBQUMsbUZBQVM7QUFDakMsaUJBQWlCLG1CQUFPLENBQUMscUZBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx3QkFBd0I7QUFDdkMsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0EsaUJBQWlCLDhDQUE4QyxJQUFJO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBLDRDQUE0QyxxQkFBcUIsMEJBQTBCLHdCQUF3QiwwQkFBMEIsRUFBRTtBQUMvSTtBQUNBO0FBQ0EseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9mYXVjZXRfdHJhbnNhY3Rpb24uanM/NWVhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmF1Y2V0VHJhbnNhY3Rpb24gPSB2b2lkIDA7XG5jb25zdCBjb2luYmFzZV8xID0gcmVxdWlyZShcIi4vY29pbmJhc2VcIik7XG5jb25zdCB0cmFuc2FjdGlvbl8xID0gcmVxdWlyZShcIi4vdHJhbnNhY3Rpb25cIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIHRyYW5zYWN0aW9uIGZyb20gYSBmYXVjZXQuXG4gKi9cbmNsYXNzIEZhdWNldFRyYW5zYWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEZhdWNldFRyYW5zYWN0aW9uIGluc3RhbmNlLlxuICAgICAqIERvIG5vdCB1c2UgdGhpcyBtZXRob2QgZGlyZWN0bHkgLSBpbnN0ZWFkLCB1c2UgQWRkcmVzcy5mYXVjZXQoKS5cbiAgICAgKlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBwYXJhbSB7RmF1Y2V0VHJhbnNhY3Rpb25Nb2RlbH0gbW9kZWwgLSBUaGUgRmF1Y2V0VHJhbnNhY3Rpb24gbW9kZWwuXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBtb2RlbCBkb2VzIG5vdCBleGlzdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCkge1xuICAgICAgICBpZiAoIW1vZGVsPy50cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmF1Y2V0VHJhbnNhY3Rpb24gbW9kZWwgY2Fubm90IGJlIGVtcHR5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcbiAgICAgICAgdGhpcy5fdHJhbnNhY3Rpb24gPSBuZXcgdHJhbnNhY3Rpb25fMS5UcmFuc2FjdGlvbih0aGlzLm1vZGVsLnRyYW5zYWN0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgVHJhbnNhY3Rpb24gb2YgdGhlIEZhdWNldFRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIEZhdWNldCBUcmFuc2FjdGlvblxuICAgICAqL1xuICAgIGdldCB0cmFuc2FjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zYWN0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0cmFuc2FjdGlvbiBoYXNoLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHRyYW5zYWN0aW9uIGhhc2guXG4gICAgICovXG4gICAgZ2V0VHJhbnNhY3Rpb25IYXNoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbi5nZXRUcmFuc2FjdGlvbkhhc2goKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGluayB0byB0aGUgdHJhbnNhY3Rpb24gb24gdGhlIGJsb2NrY2hhaW4gZXhwbG9yZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbGluayB0byB0aGUgdHJhbnNhY3Rpb24gb24gdGhlIGJsb2NrY2hhaW4gZXhwbG9yZXJcbiAgICAgKi9cbiAgICBnZXRUcmFuc2FjdGlvbkxpbmsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zYWN0aW9uLmdldFRyYW5zYWN0aW9uTGluaygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBTdGF0dXMgb2YgdGhlIEZhdWNldFRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFN0YXR1cyBvZiB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgZ2V0U3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbi5nZXRTdGF0dXMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmV0d29yayBJRCBvZiB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbmV0d29yayBJRC5cbiAgICAgKi9cbiAgICBnZXROZXR3b3JrSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zYWN0aW9uLmdldE5ldHdvcmtJZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIHRoYXQgaXMgYmVpbmcgZnVuZGVkIGJ5IHRoZSBmYXVjZXQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgYWRkcmVzcyBJRC5cbiAgICAgKi9cbiAgICBnZXRBZGRyZXNzSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zYWN0aW9uLnRvQWRkcmVzc0lkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdhaXRzIGZvciB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24gdG8gYmUgY29uZmlybWVkIG9uIHRoZSBOZXR3b3JrIG9yIGZhaWwgb24gY2hhaW4uXG4gICAgICogV2FpdHMgdW50aWwgdGhlIEZhdWNldFRyYW5zYWN0aW9uIGlzIGNvbXBsZXRlZCBvciBmYWlsZWQgb24tY2hhaW4gYnkgcG9sbGluZyBhdCB0aGUgZ2l2ZW4gaW50ZXJ2YWwuXG4gICAgICogUmFpc2VzIGFuIGVycm9yIGlmIHRoZSBGYXVjZXRUcmFuc2FjdGlvbiB0YWtlcyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gdGltZW91dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdG8gY29uZmlndXJlIHRoZSB3YWl0IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmludGVydmFsU2Vjb25kcyAtIFRoZSBpbnRlcnZhbCB0byBjaGVjayB0aGUgc3RhdHVzIG9mIHRoZSBGYXVjZXRUcmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy50aW1lb3V0U2Vjb25kcyAtIFRoZSBtYXhpbXVtIHRpbWUgdG8gd2FpdCBmb3IgdGhlIEZhdWNldFRyYW5zYWN0aW9uIHRvIGJlIGNvbmZpcm1lZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBGYXVjZXRUcmFuc2FjdGlvbiBvYmplY3QgaW4gYSB0ZXJtaW5hbCBzdGF0ZS5cbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIEZhdWNldFRyYW5zYWN0aW9uIHRpbWVzIG91dC5cbiAgICAgKi9cbiAgICBhc3luYyB3YWl0KHsgaW50ZXJ2YWxTZWNvbmRzID0gMC4yLCB0aW1lb3V0U2Vjb25kcyA9IDEwLCB9ID0ge30pIHtcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgd2hpbGUgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPCB0aW1lb3V0U2Vjb25kcyAqIDEwMDApIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVsb2FkKCk7XG4gICAgICAgICAgICAvLyBJZiB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24gaXMgaW4gYSB0ZXJtaW5hbCBzdGF0ZSwgcmV0dXJuIHRoZSBGYXVjZXRUcmFuc2FjdGlvbi5cbiAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zYWN0aW9uLmlzVGVybWluYWxTdGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCAoMCwgdXRpbHNfMS5kZWxheSkoaW50ZXJ2YWxTZWNvbmRzKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVGltZW91dEVycm9yKFwiRmF1Y2V0VHJhbnNhY3Rpb24gdGltZWQgb3V0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWxvYWRzIHRoZSBGYXVjZXRUcmFuc2FjdGlvbiBtb2RlbCB3aXRoIHRoZSBsYXRlc3QgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RmF1Y2V0VHJhbnNhY3Rpb259IFRoZSByZWxvYWRlZCBGYXVjZXRUcmFuc2FjdGlvbiBvYmplY3QuXG4gICAgICogQHRocm93cyB7QVBJRXJyb3J9IGlmIHRoZSBBUEkgcmVxdWVzdCB0byBnZXQgYSBGYXVjZXRUcmFuc2FjdGlvbiBmYWlscy5cbiAgICAgKi9cbiAgICBhc3luYyByZWxvYWQoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvaW5iYXNlXzEuQ29pbmJhc2UuYXBpQ2xpZW50cy5leHRlcm5hbEFkZHJlc3MuZ2V0RmF1Y2V0VHJhbnNhY3Rpb24odGhpcy50cmFuc2FjdGlvbi5nZXROZXR3b3JrSWQoKSwgdGhpcy5nZXRBZGRyZXNzSWQoKSwgdGhpcy5nZXRUcmFuc2FjdGlvbkhhc2goKSk7XG4gICAgICAgIHRoaXMubW9kZWwgPSByZXN1bHQ/LmRhdGE7XG4gICAgICAgIGlmICghdGhpcy5tb2RlbD8udHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhdWNldFRyYW5zYWN0aW9uIG1vZGVsIGNhbm5vdCBiZSBlbXB0eVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90cmFuc2FjdGlvbiA9IG5ldyB0cmFuc2FjdGlvbl8xLlRyYW5zYWN0aW9uKHRoaXMubW9kZWwudHJhbnNhY3Rpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgRmF1Y2V0VHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgQ29pbmJhc2U6OkZhdWNldFRyYW5zYWN0aW9ue3RyYW5zYWN0aW9uX2hhc2g6ICcke3RoaXMuZ2V0VHJhbnNhY3Rpb25IYXNoKCl9JywgdHJhbnNhY3Rpb25fbGluazogJyR7dGhpcy5nZXRUcmFuc2FjdGlvbkxpbmsoKX0nfWA7XG4gICAgfVxufVxuZXhwb3J0cy5GYXVjZXRUcmFuc2FjdGlvbiA9IEZhdWNldFRyYW5zYWN0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/faucet_transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/hash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/hash.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hashTypedDataMessage = exports.hashMessage = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.commonjs/index.js\");\n/**\n * Computes the EIP-191 personal-sign message digest to sign.\n *\n * @returns The EIP-191 hash of the message as a string.\n * @throws {Error} if the message cannot be hashed.\n * @param message - The message to hash.\n */\nconst hashMessage = (message) => {\n    return ethers_1.ethers.hashMessage(message);\n};\nexports.hashMessage = hashMessage;\n/**\n * Computes the hash of the EIP-712 compliant typed data message.\n *\n * @param domain - The domain parameters for the EIP-712 message, including the name, version, chainId, and verifying contract.\n * @param types - The types definitions for the EIP-712 message, represented as a record of type names to their fields.\n * @param value - The actual data object to hash, conforming to the types defined.\n *\n * @returns The EIP-712 hash of the typed data as a hex-encoded string.\n * @throws {Error} if the typed data cannot be hashed.\n */\nconst hashTypedDataMessage = (domain, types, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvalue) => {\n    return ethers_1.ethers.TypedDataEncoder.hash(domain, types, value);\n};\nexports.hashTypedDataMessage = hashTypedDataMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2hhc2guanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsbUJBQW1CO0FBQ2xELGlCQUFpQixtQkFBTyxDQUFDLGlFQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGhjaGFpbi1hcHAvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2hhc2guanM/YjJjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzaFR5cGVkRGF0YU1lc3NhZ2UgPSBleHBvcnRzLmhhc2hNZXNzYWdlID0gdm9pZCAwO1xuY29uc3QgZXRoZXJzXzEgPSByZXF1aXJlKFwiZXRoZXJzXCIpO1xuLyoqXG4gKiBDb21wdXRlcyB0aGUgRUlQLTE5MSBwZXJzb25hbC1zaWduIG1lc3NhZ2UgZGlnZXN0IHRvIHNpZ24uXG4gKlxuICogQHJldHVybnMgVGhlIEVJUC0xOTEgaGFzaCBvZiB0aGUgbWVzc2FnZSBhcyBhIHN0cmluZy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgbWVzc2FnZSBjYW5ub3QgYmUgaGFzaGVkLlxuICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuICovXG5jb25zdCBoYXNoTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgcmV0dXJuIGV0aGVyc18xLmV0aGVycy5oYXNoTWVzc2FnZShtZXNzYWdlKTtcbn07XG5leHBvcnRzLmhhc2hNZXNzYWdlID0gaGFzaE1lc3NhZ2U7XG4vKipcbiAqIENvbXB1dGVzIHRoZSBoYXNoIG9mIHRoZSBFSVAtNzEyIGNvbXBsaWFudCB0eXBlZCBkYXRhIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIGRvbWFpbiAtIFRoZSBkb21haW4gcGFyYW1ldGVycyBmb3IgdGhlIEVJUC03MTIgbWVzc2FnZSwgaW5jbHVkaW5nIHRoZSBuYW1lLCB2ZXJzaW9uLCBjaGFpbklkLCBhbmQgdmVyaWZ5aW5nIGNvbnRyYWN0LlxuICogQHBhcmFtIHR5cGVzIC0gVGhlIHR5cGVzIGRlZmluaXRpb25zIGZvciB0aGUgRUlQLTcxMiBtZXNzYWdlLCByZXByZXNlbnRlZCBhcyBhIHJlY29yZCBvZiB0eXBlIG5hbWVzIHRvIHRoZWlyIGZpZWxkcy5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBhY3R1YWwgZGF0YSBvYmplY3QgdG8gaGFzaCwgY29uZm9ybWluZyB0byB0aGUgdHlwZXMgZGVmaW5lZC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgRUlQLTcxMiBoYXNoIG9mIHRoZSB0eXBlZCBkYXRhIGFzIGEgaGV4LWVuY29kZWQgc3RyaW5nLlxuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSB0eXBlZCBkYXRhIGNhbm5vdCBiZSBoYXNoZWQuXG4gKi9cbmNvbnN0IGhhc2hUeXBlZERhdGFNZXNzYWdlID0gKGRvbWFpbiwgdHlwZXMsIFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIGV0aGVyc18xLmV0aGVycy5UeXBlZERhdGFFbmNvZGVyLmhhc2goZG9tYWluLCB0eXBlcywgdmFsdWUpO1xufTtcbmV4cG9ydHMuaGFzaFR5cGVkRGF0YU1lc3NhZ2UgPSBoYXNoVHlwZWREYXRhTWVzc2FnZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/historical_balance.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/historical_balance.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HistoricalBalance = void 0;\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/decimal.js/decimal.js\"));\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\n/** A representation of historical balance. */\nclass HistoricalBalance {\n    /**\n     * Private constructor to prevent direct instantiation outside of the factory methods.\n     *\n     * @ignore\n     * @param {Decimal} amount - The amount of the balance.\n     * @param {Decimal} blockHeight - The block height at which the balance was recorded.\n     * @param {string} blockHash - The block hash at which the balance was recorded\n     * @param {string} asset - The asset we want to fetch.\n     * @hideconstructor\n     */\n    constructor(amount, blockHeight, blockHash, asset) {\n        this.amount = amount;\n        this.blockHeight = blockHeight;\n        this.blockHash = blockHash;\n        this.asset = asset;\n    }\n    /**\n     * Converts a HistoricalBalanceModel into a HistoricalBalance object.\n     *\n     * @param {HistoricalBalanceModel} model - The historical balance model object.\n     * @returns {HistoricalBalance} The HistoricalBalance object.\n     */\n    static fromModel(model) {\n        const asset = asset_1.Asset.fromModel(model.asset);\n        return new HistoricalBalance(asset.fromAtomicAmount(new decimal_js_1.default(model.amount)), new decimal_js_1.default(model.block_height), model.block_hash, asset);\n    }\n}\nexports.HistoricalBalance = HistoricalBalance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL2hpc3RvcmljYWxfYmFsYW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixxQ0FBcUMsbUJBQU8sQ0FBQyw4REFBWTtBQUN6RCxnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0JBQXdCO0FBQ3ZDLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9oaXN0b3JpY2FsX2JhbGFuY2UuanM/MDYyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGlzdG9yaWNhbEJhbGFuY2UgPSB2b2lkIDA7XG5jb25zdCBkZWNpbWFsX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlY2ltYWwuanNcIikpO1xuY29uc3QgYXNzZXRfMSA9IHJlcXVpcmUoXCIuL2Fzc2V0XCIpO1xuLyoqIEEgcmVwcmVzZW50YXRpb24gb2YgaGlzdG9yaWNhbCBiYWxhbmNlLiAqL1xuY2xhc3MgSGlzdG9yaWNhbEJhbGFuY2Uge1xuICAgIC8qKlxuICAgICAqIFByaXZhdGUgY29uc3RydWN0b3IgdG8gcHJldmVudCBkaXJlY3QgaW5zdGFudGlhdGlvbiBvdXRzaWRlIG9mIHRoZSBmYWN0b3J5IG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBAaWdub3JlXG4gICAgICogQHBhcmFtIHtEZWNpbWFsfSBhbW91bnQgLSBUaGUgYW1vdW50IG9mIHRoZSBiYWxhbmNlLlxuICAgICAqIEBwYXJhbSB7RGVjaW1hbH0gYmxvY2tIZWlnaHQgLSBUaGUgYmxvY2sgaGVpZ2h0IGF0IHdoaWNoIHRoZSBiYWxhbmNlIHdhcyByZWNvcmRlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmxvY2tIYXNoIC0gVGhlIGJsb2NrIGhhc2ggYXQgd2hpY2ggdGhlIGJhbGFuY2Ugd2FzIHJlY29yZGVkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFzc2V0IC0gVGhlIGFzc2V0IHdlIHdhbnQgdG8gZmV0Y2guXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFtb3VudCwgYmxvY2tIZWlnaHQsIGJsb2NrSGFzaCwgYXNzZXQpIHtcbiAgICAgICAgdGhpcy5hbW91bnQgPSBhbW91bnQ7XG4gICAgICAgIHRoaXMuYmxvY2tIZWlnaHQgPSBibG9ja0hlaWdodDtcbiAgICAgICAgdGhpcy5ibG9ja0hhc2ggPSBibG9ja0hhc2g7XG4gICAgICAgIHRoaXMuYXNzZXQgPSBhc3NldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBIaXN0b3JpY2FsQmFsYW5jZU1vZGVsIGludG8gYSBIaXN0b3JpY2FsQmFsYW5jZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hpc3RvcmljYWxCYWxhbmNlTW9kZWx9IG1vZGVsIC0gVGhlIGhpc3RvcmljYWwgYmFsYW5jZSBtb2RlbCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0hpc3RvcmljYWxCYWxhbmNlfSBUaGUgSGlzdG9yaWNhbEJhbGFuY2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTW9kZWwobW9kZWwpIHtcbiAgICAgICAgY29uc3QgYXNzZXQgPSBhc3NldF8xLkFzc2V0LmZyb21Nb2RlbChtb2RlbC5hc3NldCk7XG4gICAgICAgIHJldHVybiBuZXcgSGlzdG9yaWNhbEJhbGFuY2UoYXNzZXQuZnJvbUF0b21pY0Ftb3VudChuZXcgZGVjaW1hbF9qc18xLmRlZmF1bHQobW9kZWwuYW1vdW50KSksIG5ldyBkZWNpbWFsX2pzXzEuZGVmYXVsdChtb2RlbC5ibG9ja19oZWlnaHQpLCBtb2RlbC5ibG9ja19oYXNoLCBhc3NldCk7XG4gICAgfVxufVxuZXhwb3J0cy5IaXN0b3JpY2FsQmFsYW5jZSA9IEhpc3RvcmljYWxCYWxhbmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/historical_balance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/payload_signature.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/payload_signature.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PayloadSignature = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\n/**\n * A representation of a Payload Signature.\n */\nclass PayloadSignature {\n    /**\n     * Constructs a Payload Signature.\n     *\n     * @class\n     * @param model - The underlying Payload Signature object.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Invalid model type\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns the ID of the Payload Signature.\n     *\n     * @returns The ID of the Payload Signature\n     */\n    getId() {\n        return this.model.payload_signature_id;\n    }\n    /**\n     * Returns the Wallet ID of the Payload Signature.\n     *\n     * @returns The Wallet ID\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the Address ID of the Payload Signature.\n     *\n     * @returns The Address ID\n     */\n    getAddressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the Unsigned Payload of the Payload Signature.\n     *\n     * @returns The Unsigned Payload\n     */\n    getUnsignedPayload() {\n        return this.model.unsigned_payload;\n    }\n    /**\n     * Returns the Signature of the Payload Signature.\n     *\n     * @returns The Signature\n     */\n    getSignature() {\n        return this.model.signature;\n    }\n    /**\n     * Returns the Status of the Payload Signature.\n     *\n     * @returns The Status\n     */\n    getStatus() {\n        switch (this.model.status) {\n            case types_1.PayloadSignatureStatus.PENDING:\n                return types_1.PayloadSignatureStatus.PENDING;\n            case types_1.PayloadSignatureStatus.SIGNED:\n                return types_1.PayloadSignatureStatus.SIGNED;\n            case types_1.PayloadSignatureStatus.FAILED:\n                return types_1.PayloadSignatureStatus.FAILED;\n            default:\n                return undefined;\n        }\n    }\n    /**\n     * Returns whether the Payload Signature is in a terminal State.\n     *\n     * @returns Whether the Payload Signature is in a terminal State\n     */\n    isTerminalState() {\n        const status = this.getStatus();\n        if (!status)\n            return false;\n        return [types_1.PayloadSignatureStatus.SIGNED, types_1.PayloadSignatureStatus.FAILED].includes(status);\n    }\n    /**\n     * Waits for the Payload Signature to be signed or for the signature operation to fail.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval to check the status of the Payload Signature.\n     * @param options.timeoutSeconds - The maximum time to wait for the Payload Signature to be confirmed.\n     *\n     * @returns The Payload Signature object in a terminal state.\n     * @throws {Error} if the Payload Signature times out.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10, } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            // If the Payload Signature is in a terminal state, return the Payload Signature.\n            if (this.isTerminalState()) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"Payload Signature timed out\");\n    }\n    /**\n     * Reloads the Payload Signature model with the latest data from the server.\n     *\n     * @throws {APIError} if the API request to get a Payload Signature fails.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.address.getPayloadSignature(this.getWalletId(), this.getAddressId(), this.getId());\n        this.model = result?.data;\n    }\n    /**\n     * Returns a string representation of the Payload Signature.\n     *\n     * @returns A string representation of the Payload Signature.\n     */\n    toString() {\n        return `PayloadSignature { status: '${this.getStatus()}', unsignedPayload: '${this.getUnsignedPayload()}', signature: ${this.getSignature()} }`;\n    }\n}\nexports.PayloadSignature = PayloadSignature;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3BheWxvYWRfc2lnbmF0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBUztBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBUztBQUNqQyxpQkFBaUIsbUJBQU8sQ0FBQyxxRkFBVTtBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyx5RkFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQSxpQkFBaUIsOENBQThDLElBQUk7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsV0FBVyxpQkFBaUIsdUJBQXVCLDBCQUEwQixnQkFBZ0Isc0JBQXNCO0FBQ3RKO0FBQ0E7QUFDQSx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGhjaGFpbi1hcHAvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3BheWxvYWRfc2lnbmF0dXJlLmpzP2QzNDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBheWxvYWRTaWduYXR1cmUgPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbmNvbnN0IGNvaW5iYXNlXzEgPSByZXF1aXJlKFwiLi9jb2luYmFzZVwiKTtcbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhIFBheWxvYWQgU2lnbmF0dXJlLlxuICovXG5jbGFzcyBQYXlsb2FkU2lnbmF0dXJlIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgUGF5bG9hZCBTaWduYXR1cmUuXG4gICAgICpcbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAcGFyYW0gbW9kZWwgLSBUaGUgdW5kZXJseWluZyBQYXlsb2FkIFNpZ25hdHVyZSBvYmplY3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobW9kZWwpIHtcbiAgICAgICAgaWYgKCFtb2RlbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBtb2RlbCB0eXBlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgSUQgb2YgdGhlIFBheWxvYWQgU2lnbmF0dXJlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIElEIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZVxuICAgICAqL1xuICAgIGdldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5wYXlsb2FkX3NpZ25hdHVyZV9pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgV2FsbGV0IElEIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBXYWxsZXQgSURcbiAgICAgKi9cbiAgICBnZXRXYWxsZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwud2FsbGV0X2lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBBZGRyZXNzIElEIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBBZGRyZXNzIElEXG4gICAgICovXG4gICAgZ2V0QWRkcmVzc0lkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5hZGRyZXNzX2lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBVbnNpZ25lZCBQYXlsb2FkIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBVbnNpZ25lZCBQYXlsb2FkXG4gICAgICovXG4gICAgZ2V0VW5zaWduZWRQYXlsb2FkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC51bnNpZ25lZF9wYXlsb2FkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBTaWduYXR1cmUgb2YgdGhlIFBheWxvYWQgU2lnbmF0dXJlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFNpZ25hdHVyZVxuICAgICAqL1xuICAgIGdldFNpZ25hdHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuc2lnbmF0dXJlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBTdGF0dXMgb2YgdGhlIFBheWxvYWQgU2lnbmF0dXJlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFN0YXR1c1xuICAgICAqL1xuICAgIGdldFN0YXR1cygpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLm1vZGVsLnN0YXR1cykge1xuICAgICAgICAgICAgY2FzZSB0eXBlc18xLlBheWxvYWRTaWduYXR1cmVTdGF0dXMuUEVORElORzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZXNfMS5QYXlsb2FkU2lnbmF0dXJlU3RhdHVzLlBFTkRJTkc7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuUGF5bG9hZFNpZ25hdHVyZVN0YXR1cy5TSUdORUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVzXzEuUGF5bG9hZFNpZ25hdHVyZVN0YXR1cy5TSUdORUQ7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuUGF5bG9hZFNpZ25hdHVyZVN0YXR1cy5GQUlMRUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVzXzEuUGF5bG9hZFNpZ25hdHVyZVN0YXR1cy5GQUlMRUQ7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBQYXlsb2FkIFNpZ25hdHVyZSBpcyBpbiBhIHRlcm1pbmFsIFN0YXRlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGUgUGF5bG9hZCBTaWduYXR1cmUgaXMgaW4gYSB0ZXJtaW5hbCBTdGF0ZVxuICAgICAqL1xuICAgIGlzVGVybWluYWxTdGF0ZSgpIHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gdGhpcy5nZXRTdGF0dXMoKTtcbiAgICAgICAgaWYgKCFzdGF0dXMpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBbdHlwZXNfMS5QYXlsb2FkU2lnbmF0dXJlU3RhdHVzLlNJR05FRCwgdHlwZXNfMS5QYXlsb2FkU2lnbmF0dXJlU3RhdHVzLkZBSUxFRF0uaW5jbHVkZXMoc3RhdHVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2FpdHMgZm9yIHRoZSBQYXlsb2FkIFNpZ25hdHVyZSB0byBiZSBzaWduZWQgb3IgZm9yIHRoZSBzaWduYXR1cmUgb3BlcmF0aW9uIHRvIGZhaWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgd2FpdCBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5pbnRlcnZhbFNlY29uZHMgLSBUaGUgaW50ZXJ2YWwgdG8gY2hlY2sgdGhlIHN0YXR1cyBvZiB0aGUgUGF5bG9hZCBTaWduYXR1cmUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMudGltZW91dFNlY29uZHMgLSBUaGUgbWF4aW11bSB0aW1lIHRvIHdhaXQgZm9yIHRoZSBQYXlsb2FkIFNpZ25hdHVyZSB0byBiZSBjb25maXJtZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgUGF5bG9hZCBTaWduYXR1cmUgb2JqZWN0IGluIGEgdGVybWluYWwgc3RhdGUuXG4gICAgICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBQYXlsb2FkIFNpZ25hdHVyZSB0aW1lcyBvdXQuXG4gICAgICovXG4gICAgYXN5bmMgd2FpdCh7IGludGVydmFsU2Vjb25kcyA9IDAuMiwgdGltZW91dFNlY29uZHMgPSAxMCwgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnRUaW1lIDwgdGltZW91dFNlY29uZHMgKiAxMDAwKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlbG9hZCgpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIFBheWxvYWQgU2lnbmF0dXJlIGlzIGluIGEgdGVybWluYWwgc3RhdGUsIHJldHVybiB0aGUgUGF5bG9hZCBTaWduYXR1cmUuXG4gICAgICAgICAgICBpZiAodGhpcy5pc1Rlcm1pbmFsU3RhdGUoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgKDAsIHV0aWxzXzEuZGVsYXkpKGludGVydmFsU2Vjb25kcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlRpbWVvdXRFcnJvcihcIlBheWxvYWQgU2lnbmF0dXJlIHRpbWVkIG91dFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVsb2FkcyB0aGUgUGF5bG9hZCBTaWduYXR1cmUgbW9kZWwgd2l0aCB0aGUgbGF0ZXN0IGRhdGEgZnJvbSB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICogQHRocm93cyB7QVBJRXJyb3J9IGlmIHRoZSBBUEkgcmVxdWVzdCB0byBnZXQgYSBQYXlsb2FkIFNpZ25hdHVyZSBmYWlscy5cbiAgICAgKi9cbiAgICBhc3luYyByZWxvYWQoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvaW5iYXNlXzEuQ29pbmJhc2UuYXBpQ2xpZW50cy5hZGRyZXNzLmdldFBheWxvYWRTaWduYXR1cmUodGhpcy5nZXRXYWxsZXRJZCgpLCB0aGlzLmdldEFkZHJlc3NJZCgpLCB0aGlzLmdldElkKCkpO1xuICAgICAgICB0aGlzLm1vZGVsID0gcmVzdWx0Py5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBQYXlsb2FkIFNpZ25hdHVyZS5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBQYXlsb2FkU2lnbmF0dXJlIHsgc3RhdHVzOiAnJHt0aGlzLmdldFN0YXR1cygpfScsIHVuc2lnbmVkUGF5bG9hZDogJyR7dGhpcy5nZXRVbnNpZ25lZFBheWxvYWQoKX0nLCBzaWduYXR1cmU6ICR7dGhpcy5nZXRTaWduYXR1cmUoKX0gfWA7XG4gICAgfVxufVxuZXhwb3J0cy5QYXlsb2FkU2lnbmF0dXJlID0gUGF5bG9hZFNpZ25hdHVyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/payload_signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/read_contract.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/read_contract.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.readContract = void 0;\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\n/**\n * Converts a SolidityValue to its corresponding JavaScript type.\n *\n * @param {SolidityValue} solidityValue - The Solidity value to convert.\n * @returns {unknown} The converted JavaScript value.\n */\nfunction convertSolidityValue(solidityValue) {\n    const { type, value, values } = solidityValue;\n    switch (type) {\n        case \"uint8\":\n        case \"uint16\":\n        case \"uint32\":\n        case \"int8\":\n        case \"int16\":\n        case \"int32\":\n            return Number(value);\n        case \"uint64\":\n        case \"uint128\":\n        case \"uint256\":\n        case \"int64\":\n        case \"int128\":\n        case \"int256\":\n            return BigInt(value);\n        case \"address\":\n            return value;\n        case \"bool\":\n            return value === \"true\";\n        case \"string\":\n            return value;\n        case \"bytes\":\n        case \"bytes1\":\n        case \"bytes2\":\n        case \"bytes3\":\n        case \"bytes4\":\n        case \"bytes5\":\n        case \"bytes6\":\n        case \"bytes7\":\n        case \"bytes8\":\n        case \"bytes9\":\n        case \"bytes10\":\n        case \"bytes11\":\n        case \"bytes12\":\n        case \"bytes13\":\n        case \"bytes14\":\n        case \"bytes15\":\n        case \"bytes16\":\n        case \"bytes17\":\n        case \"bytes18\":\n        case \"bytes19\":\n        case \"bytes20\":\n        case \"bytes21\":\n        case \"bytes22\":\n        case \"bytes23\":\n        case \"bytes24\":\n        case \"bytes25\":\n        case \"bytes26\":\n        case \"bytes27\":\n        case \"bytes28\":\n        case \"bytes29\":\n        case \"bytes30\":\n        case \"bytes31\":\n        case \"bytes32\":\n            return value;\n        case \"array\":\n            return values.map(convertSolidityValue);\n        case \"tuple\":\n            return values.reduce((acc, val) => {\n                if (!val.name) {\n                    throw new Error(\"Tuple field missing name\");\n                }\n                acc[val.name] = convertSolidityValue(val);\n                return acc;\n            }, {});\n        default:\n            throw new Error(`Unsupported Solidity type: ${type}`);\n    }\n}\n/**\n * Parses a SolidityValue to a specific type T.\n *\n * @template T\n * @param {SolidityValue} solidityValue - The Solidity value to parse.\n * @returns {T} The parsed value of type T.\n */\nfunction parseSolidityValue(solidityValue) {\n    return convertSolidityValue(solidityValue);\n}\n/**\n * Reads data from a smart contract using the Coinbase API.\n *\n * @template TAbi - The ABI type.\n * @template TFunctionName - The contract function name type.\n * @template TArgs - The function arguments type.\n * @param {object} params - The parameters for reading the contract.\n * @param {string} params.networkId - The network ID.\n * @param {string} params.contractAddress - The contract address (as a hexadecimal string).\n * @param {TFunctionName} params.method - The contract method to call.\n * @param {TArgs} params.args - The arguments for the contract method.\n * @param {TAbi} [params.abi] - The contract ABI (optional).\n * @returns {Promise<any>} The result of the contract call.\n */\nasync function readContract(params) {\n    const response = await coinbase_1.Coinbase.apiClients.smartContract.readContract(params.networkId, params.contractAddress, {\n        method: params.method,\n        args: JSON.stringify(params.args || {}),\n        abi: params.abi ? JSON.stringify(params.abi) : undefined,\n    });\n    return parseSolidityValue(response.data);\n}\nexports.readContract = readContract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3JlYWRfY29udHJhY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLG1CQUFtQixtQkFBTyxDQUFDLHlGQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLFlBQVksc0JBQXNCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxJQUFJO0FBQ2pCO0FBQ0EsMERBQTBELEtBQUs7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsZUFBZTtBQUMxQixXQUFXLE9BQU87QUFDbEIsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esb0JBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9yZWFkX2NvbnRyYWN0LmpzP2MwMDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlYWRDb250cmFjdCA9IHZvaWQgMDtcbmNvbnN0IGNvaW5iYXNlXzEgPSByZXF1aXJlKFwiLi9jb2luYmFzZVwiKTtcbi8qKlxuICogQ29udmVydHMgYSBTb2xpZGl0eVZhbHVlIHRvIGl0cyBjb3JyZXNwb25kaW5nIEphdmFTY3JpcHQgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1NvbGlkaXR5VmFsdWV9IHNvbGlkaXR5VmFsdWUgLSBUaGUgU29saWRpdHkgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHt1bmtub3dufSBUaGUgY29udmVydGVkIEphdmFTY3JpcHQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRTb2xpZGl0eVZhbHVlKHNvbGlkaXR5VmFsdWUpIHtcbiAgICBjb25zdCB7IHR5cGUsIHZhbHVlLCB2YWx1ZXMgfSA9IHNvbGlkaXR5VmFsdWU7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJ1aW50OFwiOlxuICAgICAgICBjYXNlIFwidWludDE2XCI6XG4gICAgICAgIGNhc2UgXCJ1aW50MzJcIjpcbiAgICAgICAgY2FzZSBcImludDhcIjpcbiAgICAgICAgY2FzZSBcImludDE2XCI6XG4gICAgICAgIGNhc2UgXCJpbnQzMlwiOlxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJ1aW50NjRcIjpcbiAgICAgICAgY2FzZSBcInVpbnQxMjhcIjpcbiAgICAgICAgY2FzZSBcInVpbnQyNTZcIjpcbiAgICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgIGNhc2UgXCJpbnQxMjhcIjpcbiAgICAgICAgY2FzZSBcImludDI1NlwiOlxuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgXCJib29sXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IFwidHJ1ZVwiO1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgXCJieXRlc1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxXCI6XG4gICAgICAgIGNhc2UgXCJieXRlczJcIjpcbiAgICAgICAgY2FzZSBcImJ5dGVzM1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXM0XCI6XG4gICAgICAgIGNhc2UgXCJieXRlczVcIjpcbiAgICAgICAgY2FzZSBcImJ5dGVzNlwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXM3XCI6XG4gICAgICAgIGNhc2UgXCJieXRlczhcIjpcbiAgICAgICAgY2FzZSBcImJ5dGVzOVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxMFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxMVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxMlwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxM1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxNFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxNVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxNlwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxN1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxOFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMxOVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyMFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyMVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyMlwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyM1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyNFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyNVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyNlwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyN1wiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyOFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMyOVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMzMFwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMzMVwiOlxuICAgICAgICBjYXNlIFwiYnl0ZXMzMlwiOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKGNvbnZlcnRTb2xpZGl0eVZhbHVlKTtcbiAgICAgICAgY2FzZSBcInR1cGxlXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzLnJlZHVjZSgoYWNjLCB2YWwpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlR1cGxlIGZpZWxkIG1pc3NpbmcgbmFtZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWNjW3ZhbC5uYW1lXSA9IGNvbnZlcnRTb2xpZGl0eVZhbHVlKHZhbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgU29saWRpdHkgdHlwZTogJHt0eXBlfWApO1xuICAgIH1cbn1cbi8qKlxuICogUGFyc2VzIGEgU29saWRpdHlWYWx1ZSB0byBhIHNwZWNpZmljIHR5cGUgVC5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtTb2xpZGl0eVZhbHVlfSBzb2xpZGl0eVZhbHVlIC0gVGhlIFNvbGlkaXR5IHZhbHVlIHRvIHBhcnNlLlxuICogQHJldHVybnMge1R9IFRoZSBwYXJzZWQgdmFsdWUgb2YgdHlwZSBULlxuICovXG5mdW5jdGlvbiBwYXJzZVNvbGlkaXR5VmFsdWUoc29saWRpdHlWYWx1ZSkge1xuICAgIHJldHVybiBjb252ZXJ0U29saWRpdHlWYWx1ZShzb2xpZGl0eVZhbHVlKTtcbn1cbi8qKlxuICogUmVhZHMgZGF0YSBmcm9tIGEgc21hcnQgY29udHJhY3QgdXNpbmcgdGhlIENvaW5iYXNlIEFQSS5cbiAqXG4gKiBAdGVtcGxhdGUgVEFiaSAtIFRoZSBBQkkgdHlwZS5cbiAqIEB0ZW1wbGF0ZSBURnVuY3Rpb25OYW1lIC0gVGhlIGNvbnRyYWN0IGZ1bmN0aW9uIG5hbWUgdHlwZS5cbiAqIEB0ZW1wbGF0ZSBUQXJncyAtIFRoZSBmdW5jdGlvbiBhcmd1bWVudHMgdHlwZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyBmb3IgcmVhZGluZyB0aGUgY29udHJhY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLm5ldHdvcmtJZCAtIFRoZSBuZXR3b3JrIElELlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5jb250cmFjdEFkZHJlc3MgLSBUaGUgY29udHJhY3QgYWRkcmVzcyAoYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmcpLlxuICogQHBhcmFtIHtURnVuY3Rpb25OYW1lfSBwYXJhbXMubWV0aG9kIC0gVGhlIGNvbnRyYWN0IG1ldGhvZCB0byBjYWxsLlxuICogQHBhcmFtIHtUQXJnc30gcGFyYW1zLmFyZ3MgLSBUaGUgYXJndW1lbnRzIGZvciB0aGUgY29udHJhY3QgbWV0aG9kLlxuICogQHBhcmFtIHtUQWJpfSBbcGFyYW1zLmFiaV0gLSBUaGUgY29udHJhY3QgQUJJIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBUaGUgcmVzdWx0IG9mIHRoZSBjb250cmFjdCBjYWxsLlxuICovXG5hc3luYyBmdW5jdGlvbiByZWFkQ29udHJhY3QocGFyYW1zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjb2luYmFzZV8xLkNvaW5iYXNlLmFwaUNsaWVudHMuc21hcnRDb250cmFjdC5yZWFkQ29udHJhY3QocGFyYW1zLm5ldHdvcmtJZCwgcGFyYW1zLmNvbnRyYWN0QWRkcmVzcywge1xuICAgICAgICBtZXRob2Q6IHBhcmFtcy5tZXRob2QsXG4gICAgICAgIGFyZ3M6IEpTT04uc3RyaW5naWZ5KHBhcmFtcy5hcmdzIHx8IHt9KSxcbiAgICAgICAgYWJpOiBwYXJhbXMuYWJpID8gSlNPTi5zdHJpbmdpZnkocGFyYW1zLmFiaSkgOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlU29saWRpdHlWYWx1ZShyZXNwb25zZS5kYXRhKTtcbn1cbmV4cG9ydHMucmVhZENvbnRyYWN0ID0gcmVhZENvbnRyYWN0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/read_contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/server_signer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/server_signer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerSigner = void 0;\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\n/**\n * A representation of a Server-Signer. Server-Signers are assigned to sign transactions for a Wallet.\n */\nclass ServerSigner {\n    /**\n     * Private constructor to prevent direct instantiation outside of factory method.\n     * Creates a new ServerSigner instance.\n     * Do not use this method directly. Instead, use ServerSigner.getDefault().\n     *\n     * @ignore\n     * @param serverSignerModel - The Server-Signer model.\n     * @hideconstructor\n     */\n    constructor(serverSignerModel) {\n        this.model = serverSignerModel;\n    }\n    /**\n     * Returns the default Server-Signer for the CDP Project.\n     *\n     * @returns The default Server-Signer.\n     * @throws {APIError} if the API request to list Server-Signers fails.\n     * @throws {Error} if there is no Server-Signer associated with the CDP Project.\n     */\n    static async getDefault() {\n        const response = await coinbase_1.Coinbase.apiClients.serverSigner.listServerSigners();\n        if (response.data.data.length === 0) {\n            throw new Error(\"No Server-Signer is associated with the project\");\n        }\n        return new ServerSigner(response.data.data[0]);\n    }\n    /**\n     * Returns the ID of the Server-Signer.\n     *\n     * @returns The Server-Signer ID.\n     */\n    getId() {\n        return this.model.server_signer_id;\n    }\n    /**\n     * Returns the IDs of the Wallet's the Server-Signer can sign for.\n     *\n     * @returns The Wallet IDs.\n     */\n    getWallets() {\n        return this.model.wallets;\n    }\n    /**\n     * Returns a String representation of the Server-Signer.\n     *\n     * @returns a String representation of the Server-Signer.\n     */\n    toString() {\n        return `ServerSigner{id: '${this.getId()}', wallets: '${this.getWallets()}'}`;\n    }\n}\nexports.ServerSigner = ServerSigner;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3NlcnZlcl9zaWduZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLG1CQUFtQixtQkFBTyxDQUFDLHlGQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsT0FBTyxhQUFhLGVBQWUsa0JBQWtCLEVBQUU7QUFDcEY7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aGNoYWluLWFwcC8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvY29pbmJhc2Uvc2VydmVyX3NpZ25lci5qcz82M2U2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXJ2ZXJTaWduZXIgPSB2b2lkIDA7XG5jb25zdCBjb2luYmFzZV8xID0gcmVxdWlyZShcIi4vY29pbmJhc2VcIik7XG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2YgYSBTZXJ2ZXItU2lnbmVyLiBTZXJ2ZXItU2lnbmVycyBhcmUgYXNzaWduZWQgdG8gc2lnbiB0cmFuc2FjdGlvbnMgZm9yIGEgV2FsbGV0LlxuICovXG5jbGFzcyBTZXJ2ZXJTaWduZXIge1xuICAgIC8qKlxuICAgICAqIFByaXZhdGUgY29uc3RydWN0b3IgdG8gcHJldmVudCBkaXJlY3QgaW5zdGFudGlhdGlvbiBvdXRzaWRlIG9mIGZhY3RvcnkgbWV0aG9kLlxuICAgICAqIENyZWF0ZXMgYSBuZXcgU2VydmVyU2lnbmVyIGluc3RhbmNlLlxuICAgICAqIERvIG5vdCB1c2UgdGhpcyBtZXRob2QgZGlyZWN0bHkuIEluc3RlYWQsIHVzZSBTZXJ2ZXJTaWduZXIuZ2V0RGVmYXVsdCgpLlxuICAgICAqXG4gICAgICogQGlnbm9yZVxuICAgICAqIEBwYXJhbSBzZXJ2ZXJTaWduZXJNb2RlbCAtIFRoZSBTZXJ2ZXItU2lnbmVyIG1vZGVsLlxuICAgICAqIEBoaWRlY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzZXJ2ZXJTaWduZXJNb2RlbCkge1xuICAgICAgICB0aGlzLm1vZGVsID0gc2VydmVyU2lnbmVyTW9kZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRlZmF1bHQgU2VydmVyLVNpZ25lciBmb3IgdGhlIENEUCBQcm9qZWN0LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGRlZmF1bHQgU2VydmVyLVNpZ25lci5cbiAgICAgKiBAdGhyb3dzIHtBUElFcnJvcn0gaWYgdGhlIEFQSSByZXF1ZXN0IHRvIGxpc3QgU2VydmVyLVNpZ25lcnMgZmFpbHMuXG4gICAgICogQHRocm93cyB7RXJyb3J9IGlmIHRoZXJlIGlzIG5vIFNlcnZlci1TaWduZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBDRFAgUHJvamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZ2V0RGVmYXVsdCgpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjb2luYmFzZV8xLkNvaW5iYXNlLmFwaUNsaWVudHMuc2VydmVyU2lnbmVyLmxpc3RTZXJ2ZXJTaWduZXJzKCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBTZXJ2ZXItU2lnbmVyIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvamVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNlcnZlclNpZ25lcihyZXNwb25zZS5kYXRhLmRhdGFbMF0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBJRCBvZiB0aGUgU2VydmVyLVNpZ25lci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBTZXJ2ZXItU2lnbmVyIElELlxuICAgICAqL1xuICAgIGdldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5zZXJ2ZXJfc2lnbmVyX2lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBJRHMgb2YgdGhlIFdhbGxldCdzIHRoZSBTZXJ2ZXItU2lnbmVyIGNhbiBzaWduIGZvci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBXYWxsZXQgSURzLlxuICAgICAqL1xuICAgIGdldFdhbGxldHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLndhbGxldHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIFNlcnZlci1TaWduZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgU2VydmVyLVNpZ25lci5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBTZXJ2ZXJTaWduZXJ7aWQ6ICcke3RoaXMuZ2V0SWQoKX0nLCB3YWxsZXRzOiAnJHt0aGlzLmdldFdhbGxldHMoKX0nfWA7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJTaWduZXIgPSBTZXJ2ZXJTaWduZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/server_signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/smart_contract.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/smart_contract.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SmartContract = void 0;\nconst api_1 = __webpack_require__(/*! ../client/api */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst contract_event_1 = __webpack_require__(/*! ./contract_event */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_event.js\");\n/**\n * A representation of a SmartContract on the blockchain.\n */\nclass SmartContract {\n    /**\n     * Creates a new SmartContract instance.\n     *\n     * @param contractModel - The SmartContract model from the API.\n     */\n    constructor(contractModel) {\n        if (!contractModel) {\n            throw new Error(\"SmartContract model cannot be empty\");\n        }\n        this.model = contractModel;\n    }\n    /**\n     * Returns a list of ContractEvents for the provided network, contract, and event details.\n     *\n     * @param networkId - The network ID.\n     * @param protocolName - The protocol name.\n     * @param contractAddress - The contract address.\n     * @param contractName - The contract name.\n     * @param eventName - The event name.\n     * @param fromBlockHeight - The start block height.\n     * @param toBlockHeight - The end block height.\n     * @returns The contract events.\n     */\n    static async listEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight) {\n        const contractEvents = [];\n        const queue = [\"\"];\n        while (queue.length > 0) {\n            const page = queue.shift();\n            const response = await coinbase_1.Coinbase.apiClients.contractEvent.listContractEvents(networkId, protocolName, contractAddress, contractName, eventName, fromBlockHeight, toBlockHeight, page?.length ? page : undefined);\n            response.data.data.forEach(contractEvent => {\n                contractEvents.push(new contract_event_1.ContractEvent(contractEvent));\n            });\n            if (response.data.has_more) {\n                if (response.data.next_page) {\n                    queue.push(response.data.next_page);\n                }\n            }\n        }\n        return contractEvents;\n    }\n    /**\n     * Converts a SmartContractModel into a SmartContract object.\n     *\n     * @param contractModel - The SmartContract model object.\n     * @returns The SmartContract object.\n     */\n    static fromModel(contractModel) {\n        return new SmartContract(contractModel);\n    }\n    /**\n     * Returns the ID of the SmartContract.\n     *\n     * @returns The SmartContract ID.\n     */\n    getId() {\n        return this.model.smart_contract_id;\n    }\n    /**\n     * Returns the Network ID of the SmartContract.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the Wallet ID that deployed the smart contract.\n     *\n     * @returns The Wallet ID.\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the Contract Address of the smart contract.\n     *\n     * @returns The Contract Address.\n     */\n    getContractAddress() {\n        return this.model.contract_address;\n    }\n    /**\n     * Returns the Deployer Address of the smart contract.\n     *\n     * @returns The Deployer Address.\n     */\n    getDeployerAddress() {\n        return this.model.deployer_address;\n    }\n    /**\n     * Returns the Type of the smart contract.\n     *\n     * @returns The Smart Contract Type.\n     */\n    getType() {\n        switch (this.model.type) {\n            case api_1.SmartContractType.Erc20:\n                return types_1.SmartContractType.ERC20;\n            case api_1.SmartContractType.Erc721:\n                return types_1.SmartContractType.ERC721;\n            case api_1.SmartContractType.Erc1155:\n                return types_1.SmartContractType.ERC1155;\n            default:\n                throw new Error(`Unknown smart contract type: ${this.model.type}`);\n        }\n    }\n    /**\n     * Returns the Options of the smart contract.\n     *\n     * @returns The Smart Contract Options.\n     */\n    getOptions() {\n        if (this.isERC20(this.getType(), this.model.options)) {\n            return {\n                name: this.model.options.name,\n                symbol: this.model.options.symbol,\n                totalSupply: this.model.options.total_supply,\n            };\n        }\n        else if (this.isERC721(this.getType(), this.model.options)) {\n            return {\n                name: this.model.options.name,\n                symbol: this.model.options.symbol,\n                baseURI: this.model.options.base_uri,\n            };\n        }\n        else {\n            return {\n                uri: this.model.options.uri,\n            };\n        }\n    }\n    /**\n     * Returns the ABI of the smart contract.\n     *\n     * @returns The ABI as a JSON-encoded string.\n     */\n    getAbi() {\n        return JSON.parse(this.model.abi);\n    }\n    /**\n     * Returns the Transaction of the smart contract deployment.\n     *\n     * @returns The Transaction.\n     */\n    getTransaction() {\n        return new transaction_1.Transaction(this.model.transaction);\n    }\n    /**\n     * Signs the SmartContract deployment with the provided key and returns the hex signature\n     * required for broadcasting the SmartContract deployment.\n     *\n     * @param key - The key to sign the SmartContract deployment with\n     * @returns The hex-encoded signed payload\n     */\n    async sign(key) {\n        return this.getTransaction().sign(key);\n    }\n    /**\n     * Broadcasts the SmartContract deployment to the Network.\n     *\n     * @returns The SmartContract object\n     * @throws {APIError} if the API request to broadcast a SmartContract deployment fails.\n     */\n    async broadcast() {\n        if (!this.getTransaction().isSigned())\n            throw new Error(\"Cannot broadcast unsigned SmartContract deployment\");\n        const deploySmartContractRequest = {\n            signed_payload: this.getTransaction().getSignature(),\n        };\n        const response = await coinbase_1.Coinbase.apiClients.smartContract.deploySmartContract(this.getWalletId(), this.getDeployerAddress(), this.getId(), deploySmartContractRequest);\n        return SmartContract.fromModel(response.data);\n    }\n    /**\n     * Waits for the SmartContract deployment to be confirmed on the Network or fail on chain.\n     * Waits until the SmartContract deployment is completed or failed on-chain by polling at the given interval.\n     * Raises an error if the SmartContract deployment takes longer than the given timeout.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval to check the status of the SmartContract deployment.\n     * @param options.timeoutSeconds - The maximum time to wait for the SmartContract deployment to be confirmed.\n     *\n     * @returns The SmartContract object in a terminal state.\n     * @throws {Error} if the SmartContract deployment times out.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10 } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            // If the SmartContract deployment is in a terminal state, return the SmartContract.\n            const status = this.getTransaction().getStatus();\n            if (status === types_1.TransactionStatus.COMPLETE || status === types_1.TransactionStatus.FAILED) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"SmartContract deployment timed out\");\n    }\n    /**\n     * Reloads the SmartContract model with the latest data from the server.\n     *\n     * @throws {APIError} if the API request to get a SmartContract fails.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.smartContract.getSmartContract(this.getWalletId(), this.getDeployerAddress(), this.getId());\n        this.model = result?.data;\n    }\n    /**\n     * Returns a string representation of the SmartContract.\n     *\n     * @returns The string representation of the SmartContract.\n     */\n    toString() {\n        return (`SmartContract{id: '${this.getId()}', networkId: '${this.getNetworkId()}', ` +\n            `contractAddress: '${this.getContractAddress()}', deployerAddress: '${this.getDeployerAddress()}', ` +\n            `type: '${this.getType()}'}`);\n    }\n    /**\n     * Type guard for checking if the smart contract is an ERC20.\n     *\n     * @param type - The type of the smart contract.\n     * @param options - The options of the smart contract.\n     * @returns True if the smart contract is an ERC20, false otherwise.\n     */\n    isERC20(type, options) {\n        return type === types_1.SmartContractType.ERC20;\n    }\n    /**\n     * Type guard for checking if the smart contract is an ERC721.\n     *\n     * @param type - The type of the smart contract.\n     * @param options - The options of the smart contract.\n     * @returns True if the smart contract is an ERC721, false otherwise.\n     */\n    isERC721(type, options) {\n        return type === types_1.SmartContractType.ERC721;\n    }\n}\nexports.SmartContract = SmartContract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/smart_contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/sponsored_send.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/sponsored_send.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SponsoredSend = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.commonjs/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\n/**\n * A representation of an onchain Sponsored Send.\n */\nclass SponsoredSend {\n    /**\n     * Sponsored Sends should be constructed via higher level abstractions like Transfer.\n     *\n     * @class\n     * @param model - The underlying Sponsored Send object.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Invalid model type\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns the Keccak256 hash of the typed data. This payload must be signed\n     * by the sender to be used as an approval in the EIP-3009 transaction.\n     *\n     * @returns The Keccak256 hash of the typed data.\n     */\n    getTypedDataHash() {\n        return this.model.typed_data_hash;\n    }\n    /**\n     * Returns the signature of the typed data.\n     *\n     * @returns The hash of the typed data signature.\n     */\n    getSignature() {\n        return this.model.signature;\n    }\n    /**\n     * Signs the Sponsored Send with the provided key and returns the hex signature.\n     *\n     * @param key - The key to sign the Sponsored Send with\n     * @returns The hex-encoded signature\n     */\n    async sign(key) {\n        ethers_1.ethers.toBeArray;\n        const signature = key.signingKey.sign(ethers_1.ethers.getBytes(this.getTypedDataHash())).serialized;\n        this.model.signature = signature;\n        return signature;\n    }\n    /**\n     * Returns whether the Sponsored Send has been signed.\n     *\n     * @returns if the Sponsored Send has been signed.\n     */\n    isSigned() {\n        return !!this.getSignature();\n    }\n    /**\n     * Returns the Status of the Sponsored Send.\n     *\n     * @returns the Status of the Sponsored Send\n     */\n    getStatus() {\n        switch (this.model.status) {\n            case types_1.SponsoredSendStatus.PENDING:\n                return types_1.SponsoredSendStatus.PENDING;\n            case types_1.SponsoredSendStatus.SIGNED:\n                return types_1.SponsoredSendStatus.SIGNED;\n            case types_1.SponsoredSendStatus.SUBMITTED:\n                return types_1.SponsoredSendStatus.SUBMITTED;\n            case types_1.SponsoredSendStatus.COMPLETE:\n                return types_1.SponsoredSendStatus.COMPLETE;\n            case types_1.SponsoredSendStatus.FAILED:\n                return types_1.SponsoredSendStatus.FAILED;\n            default:\n                undefined;\n        }\n    }\n    /**\n     * Returns whether the Sponsored Send is in a terminal State.\n     *\n     * @returns Whether the Sponsored Send is in a terminal State\n     */\n    isTerminalState() {\n        const status = this.getStatus();\n        if (!status)\n            return false;\n        return [types_1.SponsoredSendStatus.COMPLETE, types_1.SponsoredSendStatus.FAILED].includes(status);\n    }\n    /**\n     * Returns the Transaction Hash of the Sponsored Send.\n     *\n     * @returns The Transaction Hash\n     */\n    getTransactionHash() {\n        return this.model.transaction_hash;\n    }\n    /**\n     * Returns the link to the Sponsored Send on the blockchain explorer.\n     *\n     * @returns The link to the Sponsored Send on the blockchain explorer\n     */\n    getTransactionLink() {\n        return this.model.transaction_link;\n    }\n    /**\n     * Returns a string representation of the Sponsored Send.\n     *\n     * @returns A string representation of the Sponsored Send\n     */\n    toString() {\n        return `SponsoredSend { transactionHash: '${this.getTransactionHash()}', status: '${this.getStatus()}', typedDataHash: '${this.getTypedDataHash()}', signature: ${this.getSignature()}, transactionLink: ${this.getTransactionLink()} }`;\n    }\n}\nexports.SponsoredSend = SponsoredSend;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3Nwb25zb3JlZF9zZW5kLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQixpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBUTtBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLG9CQUFvQiwwQkFBMEIsY0FBYyxpQkFBaUIscUJBQXFCLHdCQUF3QixnQkFBZ0Isb0JBQW9CLHFCQUFxQiw0QkFBNEI7QUFDL087QUFDQTtBQUNBLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aGNoYWluLWFwcC8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY29pbmJhc2Utc2RrL2Rpc3QvY29pbmJhc2Uvc3BvbnNvcmVkX3NlbmQuanM/NzkzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3BvbnNvcmVkU2VuZCA9IHZvaWQgMDtcbmNvbnN0IGV0aGVyc18xID0gcmVxdWlyZShcImV0aGVyc1wiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhbiBvbmNoYWluIFNwb25zb3JlZCBTZW5kLlxuICovXG5jbGFzcyBTcG9uc29yZWRTZW5kIHtcbiAgICAvKipcbiAgICAgKiBTcG9uc29yZWQgU2VuZHMgc2hvdWxkIGJlIGNvbnN0cnVjdGVkIHZpYSBoaWdoZXIgbGV2ZWwgYWJzdHJhY3Rpb25zIGxpa2UgVHJhbnNmZXIuXG4gICAgICpcbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAcGFyYW0gbW9kZWwgLSBUaGUgdW5kZXJseWluZyBTcG9uc29yZWQgU2VuZCBvYmplY3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobW9kZWwpIHtcbiAgICAgICAgaWYgKCFtb2RlbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBtb2RlbCB0eXBlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgS2VjY2FrMjU2IGhhc2ggb2YgdGhlIHR5cGVkIGRhdGEuIFRoaXMgcGF5bG9hZCBtdXN0IGJlIHNpZ25lZFxuICAgICAqIGJ5IHRoZSBzZW5kZXIgdG8gYmUgdXNlZCBhcyBhbiBhcHByb3ZhbCBpbiB0aGUgRUlQLTMwMDkgdHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgS2VjY2FrMjU2IGhhc2ggb2YgdGhlIHR5cGVkIGRhdGEuXG4gICAgICovXG4gICAgZ2V0VHlwZWREYXRhSGFzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwudHlwZWRfZGF0YV9oYXNoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzaWduYXR1cmUgb2YgdGhlIHR5cGVkIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgaGFzaCBvZiB0aGUgdHlwZWQgZGF0YSBzaWduYXR1cmUuXG4gICAgICovXG4gICAgZ2V0U2lnbmF0dXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5zaWduYXR1cmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ25zIHRoZSBTcG9uc29yZWQgU2VuZCB3aXRoIHRoZSBwcm92aWRlZCBrZXkgYW5kIHJldHVybnMgdGhlIGhleCBzaWduYXR1cmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGtleSB0byBzaWduIHRoZSBTcG9uc29yZWQgU2VuZCB3aXRoXG4gICAgICogQHJldHVybnMgVGhlIGhleC1lbmNvZGVkIHNpZ25hdHVyZVxuICAgICAqL1xuICAgIGFzeW5jIHNpZ24oa2V5KSB7XG4gICAgICAgIGV0aGVyc18xLmV0aGVycy50b0JlQXJyYXk7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGtleS5zaWduaW5nS2V5LnNpZ24oZXRoZXJzXzEuZXRoZXJzLmdldEJ5dGVzKHRoaXMuZ2V0VHlwZWREYXRhSGFzaCgpKSkuc2VyaWFsaXplZDtcbiAgICAgICAgdGhpcy5tb2RlbC5zaWduYXR1cmUgPSBzaWduYXR1cmU7XG4gICAgICAgIHJldHVybiBzaWduYXR1cmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgU3BvbnNvcmVkIFNlbmQgaGFzIGJlZW4gc2lnbmVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgaWYgdGhlIFNwb25zb3JlZCBTZW5kIGhhcyBiZWVuIHNpZ25lZC5cbiAgICAgKi9cbiAgICBpc1NpZ25lZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5nZXRTaWduYXR1cmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgU3RhdHVzIG9mIHRoZSBTcG9uc29yZWQgU2VuZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHRoZSBTdGF0dXMgb2YgdGhlIFNwb25zb3JlZCBTZW5kXG4gICAgICovXG4gICAgZ2V0U3RhdHVzKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMubW9kZWwuc3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuU3BvbnNvcmVkU2VuZFN0YXR1cy5QRU5ESU5HOlxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlc18xLlNwb25zb3JlZFNlbmRTdGF0dXMuUEVORElORztcbiAgICAgICAgICAgIGNhc2UgdHlwZXNfMS5TcG9uc29yZWRTZW5kU3RhdHVzLlNJR05FRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZXNfMS5TcG9uc29yZWRTZW5kU3RhdHVzLlNJR05FRDtcbiAgICAgICAgICAgIGNhc2UgdHlwZXNfMS5TcG9uc29yZWRTZW5kU3RhdHVzLlNVQk1JVFRFRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZXNfMS5TcG9uc29yZWRTZW5kU3RhdHVzLlNVQk1JVFRFRDtcbiAgICAgICAgICAgIGNhc2UgdHlwZXNfMS5TcG9uc29yZWRTZW5kU3RhdHVzLkNPTVBMRVRFOlxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlc18xLlNwb25zb3JlZFNlbmRTdGF0dXMuQ09NUExFVEU7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuU3BvbnNvcmVkU2VuZFN0YXR1cy5GQUlMRUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVzXzEuU3BvbnNvcmVkU2VuZFN0YXR1cy5GQUlMRUQ7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIFNwb25zb3JlZCBTZW5kIGlzIGluIGEgdGVybWluYWwgU3RhdGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBTcG9uc29yZWQgU2VuZCBpcyBpbiBhIHRlcm1pbmFsIFN0YXRlXG4gICAgICovXG4gICAgaXNUZXJtaW5hbFN0YXRlKCkge1xuICAgICAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmdldFN0YXR1cygpO1xuICAgICAgICBpZiAoIXN0YXR1cylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIFt0eXBlc18xLlNwb25zb3JlZFNlbmRTdGF0dXMuQ09NUExFVEUsIHR5cGVzXzEuU3BvbnNvcmVkU2VuZFN0YXR1cy5GQUlMRURdLmluY2x1ZGVzKHN0YXR1cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFRyYW5zYWN0aW9uIEhhc2ggb2YgdGhlIFNwb25zb3JlZCBTZW5kLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFRyYW5zYWN0aW9uIEhhc2hcbiAgICAgKi9cbiAgICBnZXRUcmFuc2FjdGlvbkhhc2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnRyYW5zYWN0aW9uX2hhc2g7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpbmsgdG8gdGhlIFNwb25zb3JlZCBTZW5kIG9uIHRoZSBibG9ja2NoYWluIGV4cGxvcmVyLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGxpbmsgdG8gdGhlIFNwb25zb3JlZCBTZW5kIG9uIHRoZSBibG9ja2NoYWluIGV4cGxvcmVyXG4gICAgICovXG4gICAgZ2V0VHJhbnNhY3Rpb25MaW5rKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC50cmFuc2FjdGlvbl9saW5rO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBTcG9uc29yZWQgU2VuZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBTcG9uc29yZWQgU2VuZFxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYFNwb25zb3JlZFNlbmQgeyB0cmFuc2FjdGlvbkhhc2g6ICcke3RoaXMuZ2V0VHJhbnNhY3Rpb25IYXNoKCl9Jywgc3RhdHVzOiAnJHt0aGlzLmdldFN0YXR1cygpfScsIHR5cGVkRGF0YUhhc2g6ICcke3RoaXMuZ2V0VHlwZWREYXRhSGFzaCgpfScsIHNpZ25hdHVyZTogJHt0aGlzLmdldFNpZ25hdHVyZSgpfSwgdHJhbnNhY3Rpb25MaW5rOiAke3RoaXMuZ2V0VHJhbnNhY3Rpb25MaW5rKCl9IH1gO1xuICAgIH1cbn1cbmV4cG9ydHMuU3BvbnNvcmVkU2VuZCA9IFNwb25zb3JlZFNlbmQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/sponsored_send.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_balance.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_balance.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StakingBalance = void 0;\nconst balance_1 = __webpack_require__(/*! ./balance */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\n/**\n * A representation of the staking balance for a given asset on a specific date.\n */\nclass StakingBalance {\n    /**\n     * Creates the StakingBalance object.\n     *\n     * @param model - The underlying staking balance object.\n     */\n    constructor(model) {\n        this.model = model;\n    }\n    /**\n     * Returns a list of StakingBalances for the provided network, asset, and address.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @param addressId - The address ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @returns The staking balances.\n     */\n    static async list(networkId, assetId, addressId, startTime, endTime) {\n        const stakingBalances = [];\n        const queue = [\"\"];\n        while (queue.length > 0) {\n            const page = queue.shift();\n            const response = await coinbase_1.Coinbase.apiClients.stake.fetchHistoricalStakingBalances(networkId, assetId, addressId, startTime, endTime, 100, page?.length ? page : undefined);\n            response.data.data.forEach(stakingBalance => {\n                stakingBalances.push(new StakingBalance(stakingBalance));\n            });\n            if (response.data.has_more) {\n                if (response.data.next_page) {\n                    queue.push(response.data.next_page);\n                }\n            }\n        }\n        return stakingBalances;\n    }\n    /**\n     * Returns the bonded stake amount of the StakingBalance.\n     *\n     * @returns The Balance.\n     */\n    bondedStake() {\n        return balance_1.Balance.fromModel(this.model.bonded_stake);\n    }\n    /**\n     * Returns the unbonded stake amount of the StakingBalance.\n     *\n     * @returns The Balance.\n     */\n    unbondedBalance() {\n        return balance_1.Balance.fromModel(this.model.unbonded_balance);\n    }\n    /**\n     * Returns the participant type of the address.\n     *\n     * @returns The participant type.\n     */\n    participantType() {\n        return this.model.participant_type;\n    }\n    /**\n     * Returns the date of the StakingBalance.\n     *\n     * @returns The date.\n     */\n    date() {\n        return new Date(this.model.date);\n    }\n    /**\n     * Returns the onchain address of the StakingBalance.\n     *\n     * @returns The onchain address.\n     */\n    address() {\n        return this.model.address;\n    }\n    /**\n     * Print the Staking Balance as a string.\n     *\n     * @returns The string representation of the Staking Balance.\n     */\n    toString() {\n        return `StakingBalance { date: '${this.date().toISOString()}' address: '${this.address()}' bondedStake: '${this.bondedStake().amount} ${this.bondedStake().asset?.assetId?.toUpperCase()}' unbondedBalance: '${this.unbondedBalance().amount} ${this.unbondedBalance().asset?.assetId?.toUpperCase()}' participantType: '${this.participantType()}' }`;\n    }\n}\nexports.StakingBalance = StakingBalance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3N0YWtpbmdfYmFsYW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsa0JBQWtCLG1CQUFPLENBQUMsdUZBQVc7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMseUZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxTQUFTLDBCQUEwQixjQUFjLGVBQWUsa0JBQWtCLDJCQUEyQixFQUFFLGlEQUFpRCxzQkFBc0IsK0JBQStCLEVBQUUscURBQXFELHNCQUFzQix1QkFBdUIsR0FBRztBQUM3VjtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9zdGFraW5nX2JhbGFuY2UuanM/ZTIxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3Rha2luZ0JhbGFuY2UgPSB2b2lkIDA7XG5jb25zdCBiYWxhbmNlXzEgPSByZXF1aXJlKFwiLi9iYWxhbmNlXCIpO1xuY29uc3QgY29pbmJhc2VfMSA9IHJlcXVpcmUoXCIuL2NvaW5iYXNlXCIpO1xuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzdGFraW5nIGJhbGFuY2UgZm9yIGEgZ2l2ZW4gYXNzZXQgb24gYSBzcGVjaWZpYyBkYXRlLlxuICovXG5jbGFzcyBTdGFraW5nQmFsYW5jZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgU3Rha2luZ0JhbGFuY2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZGVsIC0gVGhlIHVuZGVybHlpbmcgc3Rha2luZyBiYWxhbmNlIG9iamVjdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCkge1xuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIFN0YWtpbmdCYWxhbmNlcyBmb3IgdGhlIHByb3ZpZGVkIG5ldHdvcmssIGFzc2V0LCBhbmQgYWRkcmVzcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXR3b3JrSWQgLSBUaGUgbmV0d29yayBJRC5cbiAgICAgKiBAcGFyYW0gYXNzZXRJZCAtIFRoZSBhc3NldCBJRC5cbiAgICAgKiBAcGFyYW0gYWRkcmVzc0lkIC0gVGhlIGFkZHJlc3MgSUQuXG4gICAgICogQHBhcmFtIHN0YXJ0VGltZSAtIFRoZSBzdGFydCB0aW1lLlxuICAgICAqIEBwYXJhbSBlbmRUaW1lIC0gVGhlIGVuZCB0aW1lLlxuICAgICAqIEByZXR1cm5zIFRoZSBzdGFraW5nIGJhbGFuY2VzLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBsaXN0KG5ldHdvcmtJZCwgYXNzZXRJZCwgYWRkcmVzc0lkLCBzdGFydFRpbWUsIGVuZFRpbWUpIHtcbiAgICAgICAgY29uc3Qgc3Rha2luZ0JhbGFuY2VzID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXVlID0gW1wiXCJdO1xuICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcGFnZSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNvaW5iYXNlXzEuQ29pbmJhc2UuYXBpQ2xpZW50cy5zdGFrZS5mZXRjaEhpc3RvcmljYWxTdGFraW5nQmFsYW5jZXMobmV0d29ya0lkLCBhc3NldElkLCBhZGRyZXNzSWQsIHN0YXJ0VGltZSwgZW5kVGltZSwgMTAwLCBwYWdlPy5sZW5ndGggPyBwYWdlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZGF0YS5mb3JFYWNoKHN0YWtpbmdCYWxhbmNlID0+IHtcbiAgICAgICAgICAgICAgICBzdGFraW5nQmFsYW5jZXMucHVzaChuZXcgU3Rha2luZ0JhbGFuY2Uoc3Rha2luZ0JhbGFuY2UpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuaGFzX21vcmUpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5uZXh0X3BhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaChyZXNwb25zZS5kYXRhLm5leHRfcGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFraW5nQmFsYW5jZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGJvbmRlZCBzdGFrZSBhbW91bnQgb2YgdGhlIFN0YWtpbmdCYWxhbmNlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIEJhbGFuY2UuXG4gICAgICovXG4gICAgYm9uZGVkU3Rha2UoKSB7XG4gICAgICAgIHJldHVybiBiYWxhbmNlXzEuQmFsYW5jZS5mcm9tTW9kZWwodGhpcy5tb2RlbC5ib25kZWRfc3Rha2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmJvbmRlZCBzdGFrZSBhbW91bnQgb2YgdGhlIFN0YWtpbmdCYWxhbmNlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIEJhbGFuY2UuXG4gICAgICovXG4gICAgdW5ib25kZWRCYWxhbmNlKCkge1xuICAgICAgICByZXR1cm4gYmFsYW5jZV8xLkJhbGFuY2UuZnJvbU1vZGVsKHRoaXMubW9kZWwudW5ib25kZWRfYmFsYW5jZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBhcnRpY2lwYW50IHR5cGUgb2YgdGhlIGFkZHJlc3MuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgcGFydGljaXBhbnQgdHlwZS5cbiAgICAgKi9cbiAgICBwYXJ0aWNpcGFudFR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnBhcnRpY2lwYW50X3R5cGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRhdGUgb2YgdGhlIFN0YWtpbmdCYWxhbmNlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGRhdGUuXG4gICAgICovXG4gICAgZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMubW9kZWwuZGF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG9uY2hhaW4gYWRkcmVzcyBvZiB0aGUgU3Rha2luZ0JhbGFuY2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgb25jaGFpbiBhZGRyZXNzLlxuICAgICAqL1xuICAgIGFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmFkZHJlc3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByaW50IHRoZSBTdGFraW5nIEJhbGFuY2UgYXMgYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBTdGFraW5nIEJhbGFuY2UuXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgU3Rha2luZ0JhbGFuY2UgeyBkYXRlOiAnJHt0aGlzLmRhdGUoKS50b0lTT1N0cmluZygpfScgYWRkcmVzczogJyR7dGhpcy5hZGRyZXNzKCl9JyBib25kZWRTdGFrZTogJyR7dGhpcy5ib25kZWRTdGFrZSgpLmFtb3VudH0gJHt0aGlzLmJvbmRlZFN0YWtlKCkuYXNzZXQ/LmFzc2V0SWQ/LnRvVXBwZXJDYXNlKCl9JyB1bmJvbmRlZEJhbGFuY2U6ICcke3RoaXMudW5ib25kZWRCYWxhbmNlKCkuYW1vdW50fSAke3RoaXMudW5ib25kZWRCYWxhbmNlKCkuYXNzZXQ/LmFzc2V0SWQ/LnRvVXBwZXJDYXNlKCl9JyBwYXJ0aWNpcGFudFR5cGU6ICcke3RoaXMucGFydGljaXBhbnRUeXBlKCl9JyB9YDtcbiAgICB9XG59XG5leHBvcnRzLlN0YWtpbmdCYWxhbmNlID0gU3Rha2luZ0JhbGFuY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_balance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StakingOperation = void 0;\nconst api_1 = __webpack_require__(/*! ../client/api */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\n/**\n * A representation of a staking operation (stake, unstake, claim stake, etc.). It\n * may have multiple steps with some being transactions to sign, and others to wait.\n */\nclass StakingOperation {\n    /**\n     * Creates a StakingOperation object.\n     *\n     * @class\n     * @param model - The staking operation response from the API call.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Invalid model type\");\n        }\n        this.model = model;\n        this.transactions = [];\n        this.loadTransactionsFromModel();\n    }\n    /**\n     * Get the staking operation for the given ID.\n     *\n     * @param networkId - The network ID.\n     * @param addressId - The address ID.\n     * @param id - The staking operation ID.\n     * @param walletId - The wallet ID of the staking operation.\n     * @throws {Error} If the wallet id is defined but empty.\n     *\n     * @returns The staking operation object.\n     */\n    static async fetch(networkId, addressId, id, walletId) {\n        if (walletId === undefined) {\n            const result = await coinbase_1.Coinbase.apiClients.stake.getExternalStakingOperation(networkId, addressId, id);\n            return new StakingOperation(result.data);\n        }\n        else if (walletId != undefined && walletId != \"\") {\n            const result = await coinbase_1.Coinbase.apiClients.walletStake.getStakingOperation(walletId, addressId, id);\n            return new StakingOperation(result.data);\n        }\n        else {\n            throw new Error(\"Invalid wallet ID\");\n        }\n    }\n    /**\n     * Returns the Staking Operation ID.\n     *\n     * @returns The Staking Operation ID.\n     */\n    getID() {\n        return this.model.id;\n    }\n    /**\n     * Get the status of the staking operation.\n     *\n     * @returns The status of the staking operation.\n     */\n    getStatus() {\n        return this.model.status;\n    }\n    /**\n     * Returns the Wallet ID if it exists.\n     *\n     * @returns The Wallet ID.\n     */\n    getWalletID() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the Address ID.\n     *\n     * @returns The Address ID.\n     */\n    getAddressID() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the Network ID.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkID() {\n        return this.model.network_id;\n    }\n    /**\n     * Return a human-readable string representation of the StakingOperation object.\n     *\n     * @returns The string representation of the StakingOperation object.\n     */\n    toString() {\n        return `StakingOperation { id: ${this.getID()} status: ${this.getStatus()} network_id: ${this.getNetworkID()} address_id: ${this.getAddressID()} }`;\n    }\n    /**\n     * Returns whether the Staking operation is in a terminal State.\n     *\n     * @returns Whether the Staking operation is in a terminal State\n     */\n    isTerminalState() {\n        return this.isCompleteState() || this.isFailedState();\n    }\n    /**\n     * Returns whether the Staking operation is in a failed state.\n     *\n     * @returns Whether the Staking operation is in a failed state.\n     */\n    isFailedState() {\n        return this.getStatus() === api_1.StakingOperationStatusEnum.Failed;\n    }\n    /**\n     * Returns whether the Staking operation is in a complete state.\n     *\n     * @returns Whether the Staking operation is in a complete state.\n     */\n    isCompleteState() {\n        return this.getStatus() === api_1.StakingOperationStatusEnum.Complete;\n    }\n    /**\n     * Get the transactions associated with this staking operation.\n     *\n     * @returns The array of transactions.\n     */\n    getTransactions() {\n        return this.transactions;\n    }\n    /**\n     * Get signed voluntary exit messages for native eth unstaking\n     *\n     * @returns The signed voluntary exit messages for a native eth unstaking operation.\n     */\n    getSignedVoluntaryExitMessages() {\n        const signedVoluntaryExitMessages = [];\n        if (this.model.metadata) {\n            this.model.metadata.forEach(metadata => {\n                const decodedSignedVoluntaryExitMessage = atob(metadata.signed_voluntary_exit);\n                signedVoluntaryExitMessages.push(decodedSignedVoluntaryExitMessage);\n            });\n        }\n        return signedVoluntaryExitMessages;\n    }\n    /**\n     * Reloads the StakingOperation model with the latest data from the server.\n     * If the StakingOperation object was created by an ExternalAddress then it will\n     * not have a wallet ID.\n     *\n     * @throws {APIError} if the API request to get the StakingOperation fails.\n     * @throws {Error} if this function is called on a StakingOperation without a wallet ID.\n     */\n    async reload() {\n        if (this.getWalletID() === undefined) {\n            const result = await coinbase_1.Coinbase.apiClients.stake.getExternalStakingOperation(this.getNetworkID(), this.getAddressID(), this.getID());\n            this.model = result.data;\n        }\n        else if (this.getWalletID() != undefined && this.getWalletID() != \"\") {\n            const result = await coinbase_1.Coinbase.apiClients.walletStake.getStakingOperation(this.getWalletID(), this.getAddressID(), this.getID());\n            this.model = result.data;\n        }\n        this.loadTransactionsFromModel();\n    }\n    /**\n     * Waits until the Staking Operation is completed or failed by polling its status at the given interval.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval at which to poll, in seconds\n     * @param options.timeoutSeconds - The maximum amount of time to wait for the StakingOperation to complete, in seconds\n     * @throws {Error} If the StakingOperation takes longer than the given timeout.\n     * @returns The completed StakingOperation object.\n     */\n    async wait({ intervalSeconds = 5, timeoutSeconds = 3600, } = {}) {\n        if (this.getWalletID() != undefined) {\n            throw new Error(\"cannot wait on staking operation for wallet address.\");\n        }\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            if (this.isTerminalState()) {\n                return this.model;\n            }\n            if (Date.now() - startTime > timeoutSeconds * 1000) {\n                throw new Error(\"Staking operation timed out\");\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new Error(\"Staking operation timed out\");\n    }\n    /**\n     * Sign the transactions in the StakingOperation object.\n     *\n     * @param key - The key used to sign the transactions.\n     */\n    async sign(key) {\n        for (const tx of this.transactions) {\n            if (!tx.isSigned()) {\n                await tx.sign(key);\n            }\n        }\n    }\n    /**\n     * loadTransactionsFromModel loads new unsigned transactions from the model into the transactions array.\n     * Note: For External Address model since tx signing and broadcast status happens by the end user and not our backend\n     * we need to be careful to not overwrite the transactions array with the response from the API. Ex: End user could have used\n     * stakingOperation.sign() method to sign the transactions, and we should not overwrite them with the response from the API.\n     * This however is ok to do so for the Wallet Address model since the transactions states are maintained by our backend.\n     * This method attempts to be safe for both address models, and only adds newly created unsigned transactions that are not\n     *  already in the transactions array.\n     */\n    loadTransactionsFromModel() {\n        // Only overwrite the transactions if the response is populated.\n        if (this.model.transactions && this.model.transactions.length > 0) {\n            // Create a set of existing unsigned payloads to avoid duplicates.\n            const existingUnsignedPayloads = new Set(this.transactions.map(tx => tx.getUnsignedPayload()));\n            // Add transactions that are not already in the transactions array.\n            this.model.transactions.forEach(transaction => {\n                if (!existingUnsignedPayloads.has(transaction.unsigned_payload)) {\n                    this.transactions.push(new transaction_1.Transaction(transaction));\n                }\n            });\n        }\n    }\n}\nexports.StakingOperation = StakingOperation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_reward.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_reward.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StakingReward = void 0;\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/decimal.js/decimal.js\"));\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\n/**\n * A representation of a staking reward earned on a network for a given asset.\n */\nclass StakingReward {\n    /**\n     * Creates the StakingReward object.\n     *\n     * @param model - The underlying staking reward object.\n     * @param asset - The asset for the staking reward.\n     * @param format - The format to return the rewards in. (usd, native). Defaults to usd.\n     */\n    constructor(model, asset, format) {\n        this.model = model;\n        this.asset = asset;\n        this.format = format;\n    }\n    /**\n     * Returns a list of StakingRewards for the provided network, asset, and addresses.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @param addressIds - The address ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @param format - The format to return the rewards in. (usd, native). Defaults to usd.\n     * @returns The staking rewards.\n     */\n    static async list(networkId, assetId, addressIds, startTime, endTime, format = types_1.StakingRewardFormat.USD) {\n        const stakingRewards = [];\n        const queue = [\"\"];\n        while (queue.length > 0) {\n            const page = queue.shift();\n            const request = {\n                network_id: coinbase_1.Coinbase.normalizeNetwork(networkId),\n                asset_id: assetId,\n                address_ids: addressIds,\n                start_time: startTime,\n                end_time: endTime,\n                format: format,\n            };\n            const response = await coinbase_1.Coinbase.apiClients.stake.fetchStakingRewards(request, 100, page?.length ? page : undefined);\n            const asset = await asset_1.Asset.fetch(networkId, assetId);\n            response.data.data.forEach(stakingReward => {\n                stakingRewards.push(new StakingReward(stakingReward, asset, format));\n            });\n            if (response.data.has_more) {\n                if (response.data.next_page) {\n                    queue.push(response.data.next_page);\n                }\n            }\n        }\n        return stakingRewards;\n    }\n    /**\n     * Returns the amount of the StakingReward.\n     *\n     * @returns The amount.\n     */\n    amount() {\n        if (this.model.amount == \"\")\n            return 0;\n        if (this.format == types_1.StakingRewardFormat.USD) {\n            return new decimal_js_1.default(this.model.amount).div(new decimal_js_1.default(\"100\"));\n        }\n        return this.asset.fromAtomicAmount(new decimal_js_1.default(this.model.amount)).toNumber();\n    }\n    /**\n     * Returns the date of the StakingReward.\n     *\n     * @returns The date.\n     */\n    date() {\n        return new Date(this.model.date);\n    }\n    /**\n     * Returns the onchain address of the StakingReward.\n     *\n     * @returns The onchain address.\n     */\n    addressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the USD value of the StakingReward.\n     *\n     * @returns The USD value.\n     */\n    usdValue() {\n        return new decimal_js_1.default(this.model.usd_value.amount).div(new decimal_js_1.default(\"100\"));\n    }\n    /**\n     * Returns the conversion price of the StakingReward in USD.\n     *\n     * @returns The conversion price.\n     */\n    conversionPrice() {\n        return new decimal_js_1.default(this.model.usd_value.conversion_price);\n    }\n    /**\n     * Returns the time of calculating the conversion price.\n     *\n     * @returns The conversion time.\n     */\n    conversionTime() {\n        return new Date(this.model.usd_value.conversion_time);\n    }\n    /**\n     * Print the Staking Reward as a string.\n     *\n     * @returns The string representation of the Staking Reward.\n     */\n    toString() {\n        return `StakingReward { date: '${this.date().toISOString()}' address: '${this.addressId()}' amount: '${this.amount().toString()}' usd_value: '${this.usdValue().toString()}' conversion_price: '${this.conversionPrice().toString()}' conversion_time: '${this.conversionTime().toISOString()}' }`;\n    }\n}\nexports.StakingReward = StakingReward;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3N0YWtpbmdfcmV3YXJkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCLHFDQUFxQyxtQkFBTyxDQUFDLDhEQUFZO0FBQ3pELG1CQUFtQixtQkFBTyxDQUFDLHlGQUFZO0FBQ3ZDLGdCQUFnQixtQkFBTyxDQUFDLG1GQUFTO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLG1GQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsU0FBUywwQkFBMEIsY0FBYyxpQkFBaUIsYUFBYSx5QkFBeUIsZ0JBQWdCLDJCQUEyQix1QkFBdUIsa0NBQWtDLHNCQUFzQixvQ0FBb0MsR0FBRztBQUN6UztBQUNBO0FBQ0EscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS9zdGFraW5nX3Jld2FyZC5qcz8yMDVmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdGFraW5nUmV3YXJkID0gdm9pZCAwO1xuY29uc3QgZGVjaW1hbF9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWNpbWFsLmpzXCIpKTtcbmNvbnN0IGNvaW5iYXNlXzEgPSByZXF1aXJlKFwiLi9jb2luYmFzZVwiKTtcbmNvbnN0IGFzc2V0XzEgPSByZXF1aXJlKFwiLi9hc3NldFwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhIHN0YWtpbmcgcmV3YXJkIGVhcm5lZCBvbiBhIG5ldHdvcmsgZm9yIGEgZ2l2ZW4gYXNzZXQuXG4gKi9cbmNsYXNzIFN0YWtpbmdSZXdhcmQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIFN0YWtpbmdSZXdhcmQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZGVsIC0gVGhlIHVuZGVybHlpbmcgc3Rha2luZyByZXdhcmQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBhc3NldCAtIFRoZSBhc3NldCBmb3IgdGhlIHN0YWtpbmcgcmV3YXJkLlxuICAgICAqIEBwYXJhbSBmb3JtYXQgLSBUaGUgZm9ybWF0IHRvIHJldHVybiB0aGUgcmV3YXJkcyBpbi4gKHVzZCwgbmF0aXZlKS4gRGVmYXVsdHMgdG8gdXNkLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1vZGVsLCBhc3NldCwgZm9ybWF0KSB7XG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcbiAgICAgICAgdGhpcy5hc3NldCA9IGFzc2V0O1xuICAgICAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgU3Rha2luZ1Jld2FyZHMgZm9yIHRoZSBwcm92aWRlZCBuZXR3b3JrLCBhc3NldCwgYW5kIGFkZHJlc3Nlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXR3b3JrSWQgLSBUaGUgbmV0d29yayBJRC5cbiAgICAgKiBAcGFyYW0gYXNzZXRJZCAtIFRoZSBhc3NldCBJRC5cbiAgICAgKiBAcGFyYW0gYWRkcmVzc0lkcyAtIFRoZSBhZGRyZXNzIElELlxuICAgICAqIEBwYXJhbSBzdGFydFRpbWUgLSBUaGUgc3RhcnQgdGltZS5cbiAgICAgKiBAcGFyYW0gZW5kVGltZSAtIFRoZSBlbmQgdGltZS5cbiAgICAgKiBAcGFyYW0gZm9ybWF0IC0gVGhlIGZvcm1hdCB0byByZXR1cm4gdGhlIHJld2FyZHMgaW4uICh1c2QsIG5hdGl2ZSkuIERlZmF1bHRzIHRvIHVzZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgc3Rha2luZyByZXdhcmRzLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBsaXN0KG5ldHdvcmtJZCwgYXNzZXRJZCwgYWRkcmVzc0lkcywgc3RhcnRUaW1lLCBlbmRUaW1lLCBmb3JtYXQgPSB0eXBlc18xLlN0YWtpbmdSZXdhcmRGb3JtYXQuVVNEKSB7XG4gICAgICAgIGNvbnN0IHN0YWtpbmdSZXdhcmRzID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXVlID0gW1wiXCJdO1xuICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcGFnZSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIG5ldHdvcmtfaWQ6IGNvaW5iYXNlXzEuQ29pbmJhc2Uubm9ybWFsaXplTmV0d29yayhuZXR3b3JrSWQpLFxuICAgICAgICAgICAgICAgIGFzc2V0X2lkOiBhc3NldElkLFxuICAgICAgICAgICAgICAgIGFkZHJlc3NfaWRzOiBhZGRyZXNzSWRzLFxuICAgICAgICAgICAgICAgIHN0YXJ0X3RpbWU6IHN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICBlbmRfdGltZTogZW5kVGltZSxcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNvaW5iYXNlXzEuQ29pbmJhc2UuYXBpQ2xpZW50cy5zdGFrZS5mZXRjaFN0YWtpbmdSZXdhcmRzKHJlcXVlc3QsIDEwMCwgcGFnZT8ubGVuZ3RoID8gcGFnZSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBjb25zdCBhc3NldCA9IGF3YWl0IGFzc2V0XzEuQXNzZXQuZmV0Y2gobmV0d29ya0lkLCBhc3NldElkKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZGF0YS5mb3JFYWNoKHN0YWtpbmdSZXdhcmQgPT4ge1xuICAgICAgICAgICAgICAgIHN0YWtpbmdSZXdhcmRzLnB1c2gobmV3IFN0YWtpbmdSZXdhcmQoc3Rha2luZ1Jld2FyZCwgYXNzZXQsIGZvcm1hdCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5oYXNfbW9yZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm5leHRfcGFnZSkge1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKHJlc3BvbnNlLmRhdGEubmV4dF9wYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YWtpbmdSZXdhcmRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhbW91bnQgb2YgdGhlIFN0YWtpbmdSZXdhcmQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgYW1vdW50LlxuICAgICAqL1xuICAgIGFtb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZWwuYW1vdW50ID09IFwiXCIpXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgaWYgKHRoaXMuZm9ybWF0ID09IHR5cGVzXzEuU3Rha2luZ1Jld2FyZEZvcm1hdC5VU0QpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZGVjaW1hbF9qc18xLmRlZmF1bHQodGhpcy5tb2RlbC5hbW91bnQpLmRpdihuZXcgZGVjaW1hbF9qc18xLmRlZmF1bHQoXCIxMDBcIikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFzc2V0LmZyb21BdG9taWNBbW91bnQobmV3IGRlY2ltYWxfanNfMS5kZWZhdWx0KHRoaXMubW9kZWwuYW1vdW50KSkudG9OdW1iZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGF0ZSBvZiB0aGUgU3Rha2luZ1Jld2FyZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBkYXRlLlxuICAgICAqL1xuICAgIGRhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLm1vZGVsLmRhdGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBvbmNoYWluIGFkZHJlc3Mgb2YgdGhlIFN0YWtpbmdSZXdhcmQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgb25jaGFpbiBhZGRyZXNzLlxuICAgICAqL1xuICAgIGFkZHJlc3NJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYWRkcmVzc19pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgVVNEIHZhbHVlIG9mIHRoZSBTdGFraW5nUmV3YXJkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFVTRCB2YWx1ZS5cbiAgICAgKi9cbiAgICB1c2RWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkZWNpbWFsX2pzXzEuZGVmYXVsdCh0aGlzLm1vZGVsLnVzZF92YWx1ZS5hbW91bnQpLmRpdihuZXcgZGVjaW1hbF9qc18xLmRlZmF1bHQoXCIxMDBcIikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb252ZXJzaW9uIHByaWNlIG9mIHRoZSBTdGFraW5nUmV3YXJkIGluIFVTRC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBjb252ZXJzaW9uIHByaWNlLlxuICAgICAqL1xuICAgIGNvbnZlcnNpb25QcmljZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkZWNpbWFsX2pzXzEuZGVmYXVsdCh0aGlzLm1vZGVsLnVzZF92YWx1ZS5jb252ZXJzaW9uX3ByaWNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdGltZSBvZiBjYWxjdWxhdGluZyB0aGUgY29udmVyc2lvbiBwcmljZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBjb252ZXJzaW9uIHRpbWUuXG4gICAgICovXG4gICAgY29udmVyc2lvblRpbWUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLm1vZGVsLnVzZF92YWx1ZS5jb252ZXJzaW9uX3RpbWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmludCB0aGUgU3Rha2luZyBSZXdhcmQgYXMgYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBTdGFraW5nIFJld2FyZC5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBTdGFraW5nUmV3YXJkIHsgZGF0ZTogJyR7dGhpcy5kYXRlKCkudG9JU09TdHJpbmcoKX0nIGFkZHJlc3M6ICcke3RoaXMuYWRkcmVzc0lkKCl9JyBhbW91bnQ6ICcke3RoaXMuYW1vdW50KCkudG9TdHJpbmcoKX0nIHVzZF92YWx1ZTogJyR7dGhpcy51c2RWYWx1ZSgpLnRvU3RyaW5nKCl9JyBjb252ZXJzaW9uX3ByaWNlOiAnJHt0aGlzLmNvbnZlcnNpb25QcmljZSgpLnRvU3RyaW5nKCl9JyBjb252ZXJzaW9uX3RpbWU6ICcke3RoaXMuY29udmVyc2lvblRpbWUoKS50b0lTT1N0cmluZygpfScgfWA7XG4gICAgfVxufVxuZXhwb3J0cy5TdGFraW5nUmV3YXJkID0gU3Rha2luZ1Jld2FyZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_reward.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/trade.js":
/*!********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/trade.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Trade = void 0;\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/decimal.js/decimal.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\n/**\n * A representation of a Trade, which trades an amount of an Asset to another Asset on a Network.\n * The fee is assumed to be paid in the native Asset of the Network.\n */\nclass Trade {\n    /**\n     * Trades should be created through Wallet.trade or Address.trade.\n     *\n     * @class\n     * @param model - The underlying Trade object.\n     * @throws {Error} - If the Trade model is empty.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Trade model cannot be empty\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns the Trade ID.\n     *\n     * @returns The Trade ID.\n     */\n    getId() {\n        return this.model.trade_id;\n    }\n    /**\n     * Returns the Network ID of the Trade.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the Wallet ID of the Trade.\n     *\n     * @returns The Wallet ID.\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the Address ID of the Trade.\n     *\n     * @returns The Address ID.\n     */\n    getAddressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the From Asset ID of the Trade.\n     *\n     * @returns The From Asset ID.\n     */\n    getFromAssetId() {\n        return this.model.from_asset.asset_id;\n    }\n    /**\n     * Returns the amount of the from asset for the Trade.\n     *\n     * @returns The amount of the from asset.\n     */\n    getFromAmount() {\n        const amount = new decimal_js_1.Decimal(this.model.from_amount);\n        return amount.div(decimal_js_1.Decimal.pow(10, this.model.from_asset.decimals));\n    }\n    /**\n     * Returns the To Asset ID of the Trade.\n     *\n     * @returns The To Asset ID.\n     */\n    getToAssetId() {\n        return this.model.to_asset.asset_id;\n    }\n    /**\n     * Returns the amount of the to asset for the Trade.\n     *\n     * @returns The amount of the to asset.\n     */\n    getToAmount() {\n        const amount = new decimal_js_1.Decimal(this.model.to_amount);\n        return amount.div(decimal_js_1.Decimal.pow(10, this.model.to_asset.decimals));\n    }\n    /**\n     * Returns the Trade transaction.\n     *\n     * @returns The Trade transaction.\n     */\n    getTransaction() {\n        this.transaction = new transaction_1.Transaction(this.model.transaction);\n        return this.transaction;\n    }\n    /**\n     * Returns the approve transaction if it exists.\n     *\n     * @returns The approve transaction.\n     */\n    getApproveTransaction() {\n        if (!this.approveTransaction && this.model.approve_transaction) {\n            this.approveTransaction = new transaction_1.Transaction(this.model.approve_transaction);\n        }\n        return this.approveTransaction;\n    }\n    /**\n     * Signs the Trade with the provided key.\n     * This signs the transfer transaction and will sign the approval transaction if present.\n     *\n     * @param key - The key to sign the Transfer with\n     */\n    async sign(key) {\n        if (this.getApproveTransaction()) {\n            await this.getApproveTransaction().sign(key);\n        }\n        await this.getTransaction().sign(key);\n    }\n    /**\n     * Broadcasts the Trade to the Network.\n     *\n     * @returns The Trade object\n     * @throws {APIError} if the API request to broadcast a Trade fails.\n     */\n    async broadcast() {\n        const tx = this.getTransaction();\n        const approveTx = this.getApproveTransaction();\n        if (!tx.isSigned()) {\n            throw new errors_1.NotSignedError(\"Cannot broadcast Trade with unsigned transaction\");\n        }\n        if (approveTx && !approveTx.isSigned()) {\n            throw new errors_1.NotSignedError(\"Cannot broadcast Trade with unsigned approve transaction\");\n        }\n        const response = await coinbase_1.Coinbase.apiClients.trade.broadcastTrade(this.getWalletId(), tx.fromAddressId(), this.getId(), {\n            signed_payload: tx.getSignature(),\n            approve_transaction_signed_payload: approveTx ? approveTx.getSignature() : undefined,\n        });\n        this.resetModel(response.data);\n        return this;\n    }\n    /**\n     * Returns the status of the Trade.\n     *\n     * @returns The status.\n     */\n    getStatus() {\n        return this.getTransaction()?.getStatus();\n    }\n    /**\n     * Waits until the Trade is completed or failed by polling the Network at the given interval.\n     * Raises an error if the Trade takes longer than the given timeout.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval at which to poll the Network, in seconds\n     * @param options.timeoutSeconds - The maximum amount of time to wait for the Trade to complete, in seconds\n     * @throws {Error} If the Trade takes longer than the given timeout.\n     * @throws {APIError} If the request fails.\n     * @returns The completed Trade object.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10 } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            if (this.getTransaction().isTerminalState()) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"Trade timed out\");\n    }\n    /**\n     * Reloads the Trade model with the latest version from the server side.\n     *\n     * @returns The most recent version of Trade from the server.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.trade.getTrade(this.getWalletId(), this.getAddressId(), this.getId());\n        return this.resetModel(result?.data);\n    }\n    /**\n     * Returns a String representation of the Trade.\n     *\n     * @returns A String representation of the Trade.\n     */\n    toString() {\n        return (`Trade { transfer_id: '${this.getId()}', network_id: '${this.getNetworkId()}', ` +\n            `address_id: '${this.getAddressId()}', from_asset_id: '${this.getFromAssetId()}', ` +\n            `to_asset_id: '${this.getToAssetId()}', from_amount: '${this.getFromAmount()}', ` +\n            `to_amount: '${this.getToAmount()}', status: '${this.getStatus()}' }`);\n    }\n    /**\n     * Resets the trade model with the specified data from the server.\n     *\n     * @param model - The Trade model\n     * @returns The updated Trade object\n     */\n    resetModel(model) {\n        this.model = model;\n        this.transaction = new transaction_1.Transaction(this.model.transaction);\n        this.approveTransaction = this.model.approve_transaction\n            ? new transaction_1.Transaction(this.model.approve_transaction)\n            : undefined;\n        return this;\n    }\n}\nexports.Trade = Trade;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/trade.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Transaction = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.commonjs/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\n/**\n * A representation of an onchain Transaction.\n */\nclass Transaction {\n    /**\n     * Transactions should be constructed via higher level abstractions like Trade or Transfer.\n     *\n     * @class\n     * @param model - The underlying Transaction object.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Invalid model type\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns the Unsigned Payload of the Transaction.\n     *\n     * @returns The Unsigned Payload\n     */\n    getUnsignedPayload() {\n        return this.model.unsigned_payload;\n    }\n    /**\n     * Returns the Signed Payload of the Transaction.\n     *\n     * @returns The Signed Payload\n     */\n    getSignedPayload() {\n        return this.model.signed_payload;\n    }\n    /**\n     * Returns the Transaction Hash of the Transaction.\n     *\n     * @returns The Transaction Hash\n     */\n    getTransactionHash() {\n        return this.model.transaction_hash;\n    }\n    /**\n     * Returns the Status of the Transaction.\n     *\n     * @returns The Status\n     */\n    getStatus() {\n        switch (this.model.status) {\n            case types_1.TransactionStatus.PENDING:\n                return types_1.TransactionStatus.PENDING;\n            case types_1.TransactionStatus.BROADCAST:\n                return types_1.TransactionStatus.BROADCAST;\n            case types_1.TransactionStatus.SIGNED:\n                return types_1.TransactionStatus.SIGNED;\n            case types_1.TransactionStatus.COMPLETE:\n                return types_1.TransactionStatus.COMPLETE;\n            case types_1.TransactionStatus.FAILED:\n                return types_1.TransactionStatus.FAILED;\n            default:\n                return types_1.TransactionStatus.UNSPECIFIED;\n        }\n    }\n    /**\n     * Returns whether the Transaction is in a terminal State.\n     *\n     * @returns Whether the Transaction is in a terminal State\n     */\n    isTerminalState() {\n        const status = this.getStatus();\n        return [types_1.TransactionStatus.COMPLETE, types_1.TransactionStatus.FAILED].includes(status);\n    }\n    /**\n     * Returns the From Address ID for the Transaction.\n     *\n     * @returns The From Address ID\n     */\n    fromAddressId() {\n        return this.model.from_address_id;\n    }\n    /**\n     * Returns the To Address ID for the Transaction if it's available.\n     *\n     * @returns The To Address ID\n     */\n    toAddressId() {\n        return this.model.to_address_id;\n    }\n    /**\n     * Returns the Block Height where the Transaction is recorded.\n     *\n     * @returns The Block Height\n     */\n    blockHeight() {\n        return this.model.block_height;\n    }\n    /**\n     * Returns the Block Hash where the Transaction is recorded.\n     *\n     * @returns The Block Hash\n     */\n    blockHash() {\n        return this.model.block_hash;\n    }\n    /**\n     * Returns the Content of the Transaction.\n     *\n     * @returns The transaction content\n     */\n    content() {\n        return this.model.content;\n    }\n    /**\n     * Returns the link to the Transaction on the blockchain explorer.\n     *\n     * @returns The link to the Transaction on the blockchain explorer\n     */\n    getTransactionLink() {\n        return this.model.transaction_link;\n    }\n    /**\n     * Returns the Network ID of the Transaction.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the underlying raw transaction.\n     *\n     * @throws {InvalidUnsignedPayload} If the Unsigned Payload is invalid.\n     * @returns The ethers.js Transaction object\n     */\n    rawTransaction() {\n        if (this.raw) {\n            return this.raw;\n        }\n        const parsedPayload = (0, utils_1.parseUnsignedPayload)(this.getUnsignedPayload());\n        const transaction = new ethers_1.ethers.Transaction();\n        transaction.chainId = BigInt(parsedPayload.chainId);\n        transaction.nonce = BigInt(parsedPayload.nonce);\n        transaction.maxPriorityFeePerGas = BigInt(parsedPayload.maxPriorityFeePerGas);\n        transaction.maxFeePerGas = BigInt(parsedPayload.maxFeePerGas);\n        // TODO: Handle multiple currencies.\n        transaction.gasLimit = BigInt(parsedPayload.gas);\n        transaction.to = parsedPayload.to;\n        transaction.value = BigInt(parsedPayload.value);\n        transaction.data = parsedPayload.input;\n        this.raw = transaction;\n        return this.raw;\n    }\n    /**\n     * Signs the Transaction with the provided key and returns the hex signing payload.\n     *\n     * @param key - The key to sign the transaction with\n     * @returns The hex-encoded signed payload\n     */\n    async sign(key) {\n        const signedPayload = await key.signTransaction(this.rawTransaction());\n        this.model.signed_payload = signedPayload;\n        // Removes the '0x' prefix as required by the API.\n        return signedPayload.slice(2);\n    }\n    /**\n     * Returns the Signed Payload of the Transaction.\n     *\n     * @returns The Signed Payload\n     */\n    getSignature() {\n        return this.getSignedPayload()?.slice(2);\n    }\n    /**\n     * Returns whether the transaction has been signed.\n     *\n     * @returns if the transaction has been signed.\n     */\n    isSigned() {\n        return !!this.getSignature();\n    }\n    /**\n     * Returns a string representation of the Transaction.\n     *\n     * @returns A string representation of the Transaction.\n     */\n    toString() {\n        return `Transaction { transactionHash: '${this.getTransactionHash()}', status: '${this.getStatus()}', unsignedPayload: '${this.getUnsignedPayload()}', signedPayload: ${this.getSignedPayload()}, transactionLink: ${this.getTransactionLink()} }`;\n    }\n}\nexports.Transaction = Transaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transfer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transfer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Transfer = void 0;\nconst decimal_js_1 = __webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/decimal.js/decimal.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\");\nconst sponsored_send_1 = __webpack_require__(/*! ./sponsored_send */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/sponsored_send.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\n/**\n * A representation of a Transfer, which moves an Amount of an Asset from\n * a user-controlled Wallet to another Address. The fee is assumed to be paid\n * in the native Asset of the Network.\n */\nclass Transfer {\n    /**\n     * Private constructor to prevent direct instantiation outside of the factory methods.\n     *\n     * @ignore\n     * @param transferModel - The Transfer model.\n     * @hideconstructor\n     */\n    constructor(transferModel) {\n        if (!transferModel) {\n            throw new Error(\"Transfer model cannot be empty\");\n        }\n        this.model = transferModel;\n    }\n    /**\n     * Converts a TransferModel into a Transfer object.\n     *\n     * @param transferModel - The Transfer model object.\n     * @returns The Transfer object.\n     */\n    static fromModel(transferModel) {\n        return new Transfer(transferModel);\n    }\n    /**\n     * Returns the ID of the Transfer.\n     *\n     * @returns The Transfer ID.\n     */\n    getId() {\n        return this.model.transfer_id;\n    }\n    /**\n     * Returns the Network ID of the Transfer.\n     *\n     * @returns The Network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the Wallet ID of the Transfer.\n     *\n     * @returns The Wallet ID.\n     */\n    getWalletId() {\n        return this.model.wallet_id;\n    }\n    /**\n     * Returns the From Address ID of the Transfer.\n     *\n     * @returns The From Address ID.\n     */\n    getFromAddressId() {\n        return this.model.address_id;\n    }\n    /**\n     * Returns the Destination Address ID of the Transfer.\n     *\n     * @returns The Destination Address ID.\n     */\n    getDestinationAddressId() {\n        return this.model.destination;\n    }\n    /**\n     * Returns the Asset ID of the Transfer.\n     *\n     * @returns The Asset ID.\n     */\n    getAssetId() {\n        return this.model.asset_id;\n    }\n    /**\n     * Returns the Amount of the Transfer.\n     *\n     * @returns The Amount of the Asset.\n     */\n    getAmount() {\n        const amount = new decimal_js_1.Decimal(this.model.amount);\n        return amount.dividedBy(new decimal_js_1.Decimal(10).pow(this.model.asset.decimals));\n    }\n    /**\n     * Returns the Transaction Hash of the Transfer.\n     *\n     * @returns The Transaction Hash as a Hex string, or undefined if not yet available.\n     */\n    getTransactionHash() {\n        return this.getSendTransactionDelegate()?.getTransactionHash();\n    }\n    /**\n     * Returns the Transaction of the Transfer.\n     *\n     * @returns The ethers.js Transaction object.\n     * @throws (InvalidUnsignedPayload) If the Unsigned Payload is invalid.\n     */\n    getRawTransaction() {\n        if (!this.getTransaction())\n            return undefined;\n        return this.getTransaction().rawTransaction();\n    }\n    /**\n     * Signs the Transfer with the provided key and returns the hex signature\n     * required for broadcasting the Transfer.\n     *\n     * @param key - The key to sign the Transfer with\n     * @returns The hex-encoded signed payload\n     */\n    async sign(key) {\n        return this.getSendTransactionDelegate().sign(key);\n    }\n    /**\n     * Returns the Status of the Transfer.\n     *\n     * @returns The Status of the Transfer.\n     */\n    getStatus() {\n        switch (this.getSendTransactionDelegate().getStatus()) {\n            case types_1.TransactionStatus.PENDING:\n                return types_1.TransferStatus.PENDING;\n            case types_1.SponsoredSendStatus.PENDING:\n                return types_1.TransferStatus.PENDING;\n            case types_1.SponsoredSendStatus.SIGNED:\n                return types_1.TransferStatus.PENDING;\n            case types_1.TransactionStatus.BROADCAST:\n                return types_1.TransferStatus.BROADCAST;\n            case types_1.SponsoredSendStatus.SUBMITTED:\n                return types_1.TransferStatus.BROADCAST;\n            case types_1.TransactionStatus.COMPLETE:\n                return types_1.TransferStatus.COMPLETE;\n            case types_1.SponsoredSendStatus.COMPLETE:\n                return types_1.TransferStatus.COMPLETE;\n            case types_1.TransactionStatus.FAILED:\n                return types_1.TransferStatus.FAILED;\n            case types_1.SponsoredSendStatus.FAILED:\n                return types_1.TransferStatus.FAILED;\n            default:\n                return undefined;\n        }\n    }\n    /**\n     * Returns the Transaction of the Transfer.\n     *\n     * @returns The Transaction\n     */\n    getTransaction() {\n        if (!this.model.transaction)\n            return undefined;\n        return new transaction_1.Transaction(this.model.transaction);\n    }\n    /**\n     * Returns the Sponsored Send of the Transfer.\n     *\n     * @returns The Sponsored Send\n     */\n    getSponsoredSend() {\n        if (!this.model.sponsored_send)\n            return undefined;\n        return new sponsored_send_1.SponsoredSend(this.model.sponsored_send);\n    }\n    /**\n     * Returns the Send Transaction Delegate of the Transfer.\n     *\n     * @returns Either the Transaction or the Sponsored Send\n     */\n    getSendTransactionDelegate() {\n        return !this.getTransaction() ? this.getSponsoredSend() : this.getTransaction();\n    }\n    /**\n     * Returns the link to the Transaction on the blockchain explorer.\n     *\n     * @returns The link to the Transaction on the blockchain explorer.\n     */\n    getTransactionLink() {\n        return this.getSendTransactionDelegate()?.getTransactionLink();\n    }\n    /**\n     * Broadcasts the Transfer to the Network.\n     *\n     * @returns The Transfer object\n     * @throws {APIError} if the API request to broadcast a Transfer fails.\n     */\n    async broadcast() {\n        if (!this.getSendTransactionDelegate()?.isSigned())\n            throw new Error(\"Cannot broadcast unsigned Transfer\");\n        const broadcastTransferRequest = {\n            signed_payload: this.getSendTransactionDelegate().getSignature(),\n        };\n        const response = await coinbase_1.Coinbase.apiClients.transfer.broadcastTransfer(this.getWalletId(), this.getFromAddressId(), this.getId(), broadcastTransferRequest);\n        return Transfer.fromModel(response.data);\n    }\n    /**\n     * Waits for the Transfer to be confirmed on the Network or fail on chain.\n     * Waits until the Transfer is completed or failed on-chain by polling at the given interval.\n     * Raises an error if the Trade takes longer than the given timeout.\n     *\n     * @param options - The options to configure the wait function.\n     * @param options.intervalSeconds - The interval to check the status of the Transfer.\n     * @param options.timeoutSeconds - The maximum time to wait for the Transfer to be confirmed.\n     *\n     * @returns The Transfer object in a terminal state.\n     * @throws {Error} if the Transfer times out.\n     */\n    async wait({ intervalSeconds = 0.2, timeoutSeconds = 10 } = {}) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            await this.reload();\n            // If the Transfer is in a terminal state, return the Transfer.\n            const status = this.getStatus();\n            if (status === types_1.TransferStatus.COMPLETE || status === types_1.TransferStatus.FAILED) {\n                return this;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new errors_1.TimeoutError(\"Transfer timed out\");\n    }\n    /**\n     * Reloads the Transfer model with the latest data from the server.\n     *\n     * @throws {APIError} if the API request to get a Transfer fails.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.transfer.getTransfer(this.getWalletId(), this.getFromAddressId(), this.getId());\n        this.model = result?.data;\n    }\n    /**\n     * Returns a string representation of the Transfer.\n     *\n     * @returns The string representation of the Transfer.\n     */\n    toString() {\n        return (`Transfer{transferId: '${this.getId()}', networkId: '${this.getNetworkId()}', ` +\n            `fromAddressId: '${this.getFromAddressId()}', destinationAddressId: '${this.getDestinationAddressId()}', ` +\n            `assetId: '${this.getAssetId()}', amount: '${this.getAmount()}', transactionHash: '${this.getTransactionHash()}', ` +\n            `transactionLink: '${this.getTransactionLink()}', status: '${this.getStatus()}'}`);\n    }\n}\nexports.Transfer = Transfer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transfer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SmartContractType = exports.StakeOptionsMode = exports.ServerSignerStatus = exports.PayloadSignatureStatus = exports.StakingRewardFormat = exports.ValidatorStatus = exports.SponsoredSendStatus = exports.TransactionStatus = exports.TransferStatus = void 0;\n/**\n * Transfer status type definition.\n */\nvar TransferStatus;\n(function (TransferStatus) {\n    TransferStatus[\"PENDING\"] = \"pending\";\n    TransferStatus[\"BROADCAST\"] = \"broadcast\";\n    TransferStatus[\"COMPLETE\"] = \"complete\";\n    TransferStatus[\"FAILED\"] = \"failed\";\n})(TransferStatus || (exports.TransferStatus = TransferStatus = {}));\n/**\n * Transaction status type definition.\n */\nvar TransactionStatus;\n(function (TransactionStatus) {\n    TransactionStatus[\"PENDING\"] = \"pending\";\n    TransactionStatus[\"SIGNED\"] = \"signed\";\n    TransactionStatus[\"BROADCAST\"] = \"broadcast\";\n    TransactionStatus[\"COMPLETE\"] = \"complete\";\n    TransactionStatus[\"FAILED\"] = \"failed\";\n    TransactionStatus[\"UNSPECIFIED\"] = \"unspecified\";\n})(TransactionStatus || (exports.TransactionStatus = TransactionStatus = {}));\n/**\n * Sponsored Send status type definition.\n */\nvar SponsoredSendStatus;\n(function (SponsoredSendStatus) {\n    SponsoredSendStatus[\"PENDING\"] = \"pending\";\n    SponsoredSendStatus[\"SIGNED\"] = \"signed\";\n    SponsoredSendStatus[\"SUBMITTED\"] = \"submitted\";\n    SponsoredSendStatus[\"COMPLETE\"] = \"complete\";\n    SponsoredSendStatus[\"FAILED\"] = \"failed\";\n})(SponsoredSendStatus || (exports.SponsoredSendStatus = SponsoredSendStatus = {}));\n/**\n * Validator status type definition.\n * Represents the various states a validator can be in.\n */\nvar ValidatorStatus;\n(function (ValidatorStatus) {\n    ValidatorStatus[\"UNKNOWN\"] = \"unknown\";\n    ValidatorStatus[\"PROVISIONING\"] = \"provisioning\";\n    ValidatorStatus[\"PROVISIONED\"] = \"provisioned\";\n    ValidatorStatus[\"DEPOSITED\"] = \"deposited\";\n    ValidatorStatus[\"PENDING_ACTIVATION\"] = \"pending_activation\";\n    ValidatorStatus[\"ACTIVE\"] = \"active\";\n    ValidatorStatus[\"EXITING\"] = \"exiting\";\n    ValidatorStatus[\"EXITED\"] = \"exited\";\n    ValidatorStatus[\"WITHDRAWAL_AVAILABLE\"] = \"withdrawal_available\";\n    ValidatorStatus[\"WITHDRAWAL_COMPLETE\"] = \"withdrawal_complete\";\n    ValidatorStatus[\"ACTIVE_SLASHED\"] = \"active_slashed\";\n    ValidatorStatus[\"EXITED_SLASHED\"] = \"exited_slashed\";\n    ValidatorStatus[\"REAPED\"] = \"reaped\";\n})(ValidatorStatus || (exports.ValidatorStatus = ValidatorStatus = {}));\n/**\n * Staking reward format type definition.\n * Represents the format in which staking rewards can be queried.\n */\nvar StakingRewardFormat;\n(function (StakingRewardFormat) {\n    StakingRewardFormat[\"USD\"] = \"usd\";\n    StakingRewardFormat[\"NATIVE\"] = \"native\";\n})(StakingRewardFormat || (exports.StakingRewardFormat = StakingRewardFormat = {}));\n/**\n * Payload Signature status type definition.\n */\nvar PayloadSignatureStatus;\n(function (PayloadSignatureStatus) {\n    PayloadSignatureStatus[\"PENDING\"] = \"pending\";\n    PayloadSignatureStatus[\"SIGNED\"] = \"signed\";\n    PayloadSignatureStatus[\"FAILED\"] = \"failed\";\n})(PayloadSignatureStatus || (exports.PayloadSignatureStatus = PayloadSignatureStatus = {}));\n/**\n * ServerSigner status type definition.\n */\nvar ServerSignerStatus;\n(function (ServerSignerStatus) {\n    ServerSignerStatus[\"PENDING\"] = \"pending_seed_creation\";\n    ServerSignerStatus[\"ACTIVE\"] = \"active_seed\";\n})(ServerSignerStatus || (exports.ServerSignerStatus = ServerSignerStatus = {}));\n/**\n * StakeOptionsMode type definition.\n */\nvar StakeOptionsMode;\n(function (StakeOptionsMode) {\n    /**\n     * Defaults to the mode specific to the asset.\n     */\n    StakeOptionsMode[\"DEFAULT\"] = \"default\";\n    /**\n     * Partial represents Partial Ethereum Staking mode.\n     */\n    StakeOptionsMode[\"PARTIAL\"] = \"partial\";\n    /**\n     * Native represents Native Ethereum Staking mode.\n     */\n    StakeOptionsMode[\"NATIVE\"] = \"native\";\n})(StakeOptionsMode || (exports.StakeOptionsMode = StakeOptionsMode = {}));\n/**\n * Smart Contract Type\n */\nvar SmartContractType;\n(function (SmartContractType) {\n    SmartContractType[\"ERC20\"] = \"erc20\";\n    SmartContractType[\"ERC721\"] = \"erc721\";\n    SmartContractType[\"ERC1155\"] = \"erc1155\";\n})(SmartContractType || (exports.SmartContractType = SmartContractType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixHQUFHLHdCQUF3QixHQUFHLDBCQUEwQixHQUFHLDhCQUE4QixHQUFHLDJCQUEyQixHQUFHLHVCQUF1QixHQUFHLDJCQUEyQixHQUFHLHlCQUF5QixHQUFHLHNCQUFzQjtBQUM3UDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHFCQUFxQixzQkFBc0Isc0JBQXNCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdCQUF3Qix5QkFBeUIseUJBQXlCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQkFBMEIsMkJBQTJCLDJCQUEyQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0JBQXNCLHVCQUF1Qix1QkFBdUI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMEJBQTBCLDJCQUEyQiwyQkFBMkI7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNkJBQTZCLDhCQUE4Qiw4QkFBOEI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHlCQUF5QiwwQkFBMEIsMEJBQTBCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHVCQUF1Qix3QkFBd0Isd0JBQXdCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdCQUF3Qix5QkFBeUIseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS90eXBlcy5qcz83ZDU4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TbWFydENvbnRyYWN0VHlwZSA9IGV4cG9ydHMuU3Rha2VPcHRpb25zTW9kZSA9IGV4cG9ydHMuU2VydmVyU2lnbmVyU3RhdHVzID0gZXhwb3J0cy5QYXlsb2FkU2lnbmF0dXJlU3RhdHVzID0gZXhwb3J0cy5TdGFraW5nUmV3YXJkRm9ybWF0ID0gZXhwb3J0cy5WYWxpZGF0b3JTdGF0dXMgPSBleHBvcnRzLlNwb25zb3JlZFNlbmRTdGF0dXMgPSBleHBvcnRzLlRyYW5zYWN0aW9uU3RhdHVzID0gZXhwb3J0cy5UcmFuc2ZlclN0YXR1cyA9IHZvaWQgMDtcbi8qKlxuICogVHJhbnNmZXIgc3RhdHVzIHR5cGUgZGVmaW5pdGlvbi5cbiAqL1xudmFyIFRyYW5zZmVyU3RhdHVzO1xuKGZ1bmN0aW9uIChUcmFuc2ZlclN0YXR1cykge1xuICAgIFRyYW5zZmVyU3RhdHVzW1wiUEVORElOR1wiXSA9IFwicGVuZGluZ1wiO1xuICAgIFRyYW5zZmVyU3RhdHVzW1wiQlJPQURDQVNUXCJdID0gXCJicm9hZGNhc3RcIjtcbiAgICBUcmFuc2ZlclN0YXR1c1tcIkNPTVBMRVRFXCJdID0gXCJjb21wbGV0ZVwiO1xuICAgIFRyYW5zZmVyU3RhdHVzW1wiRkFJTEVEXCJdID0gXCJmYWlsZWRcIjtcbn0pKFRyYW5zZmVyU3RhdHVzIHx8IChleHBvcnRzLlRyYW5zZmVyU3RhdHVzID0gVHJhbnNmZXJTdGF0dXMgPSB7fSkpO1xuLyoqXG4gKiBUcmFuc2FjdGlvbiBzdGF0dXMgdHlwZSBkZWZpbml0aW9uLlxuICovXG52YXIgVHJhbnNhY3Rpb25TdGF0dXM7XG4oZnVuY3Rpb24gKFRyYW5zYWN0aW9uU3RhdHVzKSB7XG4gICAgVHJhbnNhY3Rpb25TdGF0dXNbXCJQRU5ESU5HXCJdID0gXCJwZW5kaW5nXCI7XG4gICAgVHJhbnNhY3Rpb25TdGF0dXNbXCJTSUdORURcIl0gPSBcInNpZ25lZFwiO1xuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1wiQlJPQURDQVNUXCJdID0gXCJicm9hZGNhc3RcIjtcbiAgICBUcmFuc2FjdGlvblN0YXR1c1tcIkNPTVBMRVRFXCJdID0gXCJjb21wbGV0ZVwiO1xuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1wiRkFJTEVEXCJdID0gXCJmYWlsZWRcIjtcbiAgICBUcmFuc2FjdGlvblN0YXR1c1tcIlVOU1BFQ0lGSUVEXCJdID0gXCJ1bnNwZWNpZmllZFwiO1xufSkoVHJhbnNhY3Rpb25TdGF0dXMgfHwgKGV4cG9ydHMuVHJhbnNhY3Rpb25TdGF0dXMgPSBUcmFuc2FjdGlvblN0YXR1cyA9IHt9KSk7XG4vKipcbiAqIFNwb25zb3JlZCBTZW5kIHN0YXR1cyB0eXBlIGRlZmluaXRpb24uXG4gKi9cbnZhciBTcG9uc29yZWRTZW5kU3RhdHVzO1xuKGZ1bmN0aW9uIChTcG9uc29yZWRTZW5kU3RhdHVzKSB7XG4gICAgU3BvbnNvcmVkU2VuZFN0YXR1c1tcIlBFTkRJTkdcIl0gPSBcInBlbmRpbmdcIjtcbiAgICBTcG9uc29yZWRTZW5kU3RhdHVzW1wiU0lHTkVEXCJdID0gXCJzaWduZWRcIjtcbiAgICBTcG9uc29yZWRTZW5kU3RhdHVzW1wiU1VCTUlUVEVEXCJdID0gXCJzdWJtaXR0ZWRcIjtcbiAgICBTcG9uc29yZWRTZW5kU3RhdHVzW1wiQ09NUExFVEVcIl0gPSBcImNvbXBsZXRlXCI7XG4gICAgU3BvbnNvcmVkU2VuZFN0YXR1c1tcIkZBSUxFRFwiXSA9IFwiZmFpbGVkXCI7XG59KShTcG9uc29yZWRTZW5kU3RhdHVzIHx8IChleHBvcnRzLlNwb25zb3JlZFNlbmRTdGF0dXMgPSBTcG9uc29yZWRTZW5kU3RhdHVzID0ge30pKTtcbi8qKlxuICogVmFsaWRhdG9yIHN0YXR1cyB0eXBlIGRlZmluaXRpb24uXG4gKiBSZXByZXNlbnRzIHRoZSB2YXJpb3VzIHN0YXRlcyBhIHZhbGlkYXRvciBjYW4gYmUgaW4uXG4gKi9cbnZhciBWYWxpZGF0b3JTdGF0dXM7XG4oZnVuY3Rpb24gKFZhbGlkYXRvclN0YXR1cykge1xuICAgIFZhbGlkYXRvclN0YXR1c1tcIlVOS05PV05cIl0gPSBcInVua25vd25cIjtcbiAgICBWYWxpZGF0b3JTdGF0dXNbXCJQUk9WSVNJT05JTkdcIl0gPSBcInByb3Zpc2lvbmluZ1wiO1xuICAgIFZhbGlkYXRvclN0YXR1c1tcIlBST1ZJU0lPTkVEXCJdID0gXCJwcm92aXNpb25lZFwiO1xuICAgIFZhbGlkYXRvclN0YXR1c1tcIkRFUE9TSVRFRFwiXSA9IFwiZGVwb3NpdGVkXCI7XG4gICAgVmFsaWRhdG9yU3RhdHVzW1wiUEVORElOR19BQ1RJVkFUSU9OXCJdID0gXCJwZW5kaW5nX2FjdGl2YXRpb25cIjtcbiAgICBWYWxpZGF0b3JTdGF0dXNbXCJBQ1RJVkVcIl0gPSBcImFjdGl2ZVwiO1xuICAgIFZhbGlkYXRvclN0YXR1c1tcIkVYSVRJTkdcIl0gPSBcImV4aXRpbmdcIjtcbiAgICBWYWxpZGF0b3JTdGF0dXNbXCJFWElURURcIl0gPSBcImV4aXRlZFwiO1xuICAgIFZhbGlkYXRvclN0YXR1c1tcIldJVEhEUkFXQUxfQVZBSUxBQkxFXCJdID0gXCJ3aXRoZHJhd2FsX2F2YWlsYWJsZVwiO1xuICAgIFZhbGlkYXRvclN0YXR1c1tcIldJVEhEUkFXQUxfQ09NUExFVEVcIl0gPSBcIndpdGhkcmF3YWxfY29tcGxldGVcIjtcbiAgICBWYWxpZGF0b3JTdGF0dXNbXCJBQ1RJVkVfU0xBU0hFRFwiXSA9IFwiYWN0aXZlX3NsYXNoZWRcIjtcbiAgICBWYWxpZGF0b3JTdGF0dXNbXCJFWElURURfU0xBU0hFRFwiXSA9IFwiZXhpdGVkX3NsYXNoZWRcIjtcbiAgICBWYWxpZGF0b3JTdGF0dXNbXCJSRUFQRURcIl0gPSBcInJlYXBlZFwiO1xufSkoVmFsaWRhdG9yU3RhdHVzIHx8IChleHBvcnRzLlZhbGlkYXRvclN0YXR1cyA9IFZhbGlkYXRvclN0YXR1cyA9IHt9KSk7XG4vKipcbiAqIFN0YWtpbmcgcmV3YXJkIGZvcm1hdCB0eXBlIGRlZmluaXRpb24uXG4gKiBSZXByZXNlbnRzIHRoZSBmb3JtYXQgaW4gd2hpY2ggc3Rha2luZyByZXdhcmRzIGNhbiBiZSBxdWVyaWVkLlxuICovXG52YXIgU3Rha2luZ1Jld2FyZEZvcm1hdDtcbihmdW5jdGlvbiAoU3Rha2luZ1Jld2FyZEZvcm1hdCkge1xuICAgIFN0YWtpbmdSZXdhcmRGb3JtYXRbXCJVU0RcIl0gPSBcInVzZFwiO1xuICAgIFN0YWtpbmdSZXdhcmRGb3JtYXRbXCJOQVRJVkVcIl0gPSBcIm5hdGl2ZVwiO1xufSkoU3Rha2luZ1Jld2FyZEZvcm1hdCB8fCAoZXhwb3J0cy5TdGFraW5nUmV3YXJkRm9ybWF0ID0gU3Rha2luZ1Jld2FyZEZvcm1hdCA9IHt9KSk7XG4vKipcbiAqIFBheWxvYWQgU2lnbmF0dXJlIHN0YXR1cyB0eXBlIGRlZmluaXRpb24uXG4gKi9cbnZhciBQYXlsb2FkU2lnbmF0dXJlU3RhdHVzO1xuKGZ1bmN0aW9uIChQYXlsb2FkU2lnbmF0dXJlU3RhdHVzKSB7XG4gICAgUGF5bG9hZFNpZ25hdHVyZVN0YXR1c1tcIlBFTkRJTkdcIl0gPSBcInBlbmRpbmdcIjtcbiAgICBQYXlsb2FkU2lnbmF0dXJlU3RhdHVzW1wiU0lHTkVEXCJdID0gXCJzaWduZWRcIjtcbiAgICBQYXlsb2FkU2lnbmF0dXJlU3RhdHVzW1wiRkFJTEVEXCJdID0gXCJmYWlsZWRcIjtcbn0pKFBheWxvYWRTaWduYXR1cmVTdGF0dXMgfHwgKGV4cG9ydHMuUGF5bG9hZFNpZ25hdHVyZVN0YXR1cyA9IFBheWxvYWRTaWduYXR1cmVTdGF0dXMgPSB7fSkpO1xuLyoqXG4gKiBTZXJ2ZXJTaWduZXIgc3RhdHVzIHR5cGUgZGVmaW5pdGlvbi5cbiAqL1xudmFyIFNlcnZlclNpZ25lclN0YXR1cztcbihmdW5jdGlvbiAoU2VydmVyU2lnbmVyU3RhdHVzKSB7XG4gICAgU2VydmVyU2lnbmVyU3RhdHVzW1wiUEVORElOR1wiXSA9IFwicGVuZGluZ19zZWVkX2NyZWF0aW9uXCI7XG4gICAgU2VydmVyU2lnbmVyU3RhdHVzW1wiQUNUSVZFXCJdID0gXCJhY3RpdmVfc2VlZFwiO1xufSkoU2VydmVyU2lnbmVyU3RhdHVzIHx8IChleHBvcnRzLlNlcnZlclNpZ25lclN0YXR1cyA9IFNlcnZlclNpZ25lclN0YXR1cyA9IHt9KSk7XG4vKipcbiAqIFN0YWtlT3B0aW9uc01vZGUgdHlwZSBkZWZpbml0aW9uLlxuICovXG52YXIgU3Rha2VPcHRpb25zTW9kZTtcbihmdW5jdGlvbiAoU3Rha2VPcHRpb25zTW9kZSkge1xuICAgIC8qKlxuICAgICAqIERlZmF1bHRzIHRvIHRoZSBtb2RlIHNwZWNpZmljIHRvIHRoZSBhc3NldC5cbiAgICAgKi9cbiAgICBTdGFrZU9wdGlvbnNNb2RlW1wiREVGQVVMVFwiXSA9IFwiZGVmYXVsdFwiO1xuICAgIC8qKlxuICAgICAqIFBhcnRpYWwgcmVwcmVzZW50cyBQYXJ0aWFsIEV0aGVyZXVtIFN0YWtpbmcgbW9kZS5cbiAgICAgKi9cbiAgICBTdGFrZU9wdGlvbnNNb2RlW1wiUEFSVElBTFwiXSA9IFwicGFydGlhbFwiO1xuICAgIC8qKlxuICAgICAqIE5hdGl2ZSByZXByZXNlbnRzIE5hdGl2ZSBFdGhlcmV1bSBTdGFraW5nIG1vZGUuXG4gICAgICovXG4gICAgU3Rha2VPcHRpb25zTW9kZVtcIk5BVElWRVwiXSA9IFwibmF0aXZlXCI7XG59KShTdGFrZU9wdGlvbnNNb2RlIHx8IChleHBvcnRzLlN0YWtlT3B0aW9uc01vZGUgPSBTdGFrZU9wdGlvbnNNb2RlID0ge30pKTtcbi8qKlxuICogU21hcnQgQ29udHJhY3QgVHlwZVxuICovXG52YXIgU21hcnRDb250cmFjdFR5cGU7XG4oZnVuY3Rpb24gKFNtYXJ0Q29udHJhY3RUeXBlKSB7XG4gICAgU21hcnRDb250cmFjdFR5cGVbXCJFUkMyMFwiXSA9IFwiZXJjMjBcIjtcbiAgICBTbWFydENvbnRyYWN0VHlwZVtcIkVSQzcyMVwiXSA9IFwiZXJjNzIxXCI7XG4gICAgU21hcnRDb250cmFjdFR5cGVbXCJFUkMxMTU1XCJdID0gXCJlcmMxMTU1XCI7XG59KShTbWFydENvbnRyYWN0VHlwZSB8fCAoZXhwb3J0cy5TbWFydENvbnRyYWN0VHlwZSA9IFNtYXJ0Q29udHJhY3RUeXBlID0ge30pKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getWeekBackDate = exports.formatDate = exports.parseUnsignedPayload = exports.delay = exports.convertStringToHex = exports.registerAxiosInterceptors = exports.logApiResponse = void 0;\nconst api_error_1 = __webpack_require__(/*! ./api_error */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/api_error.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\n/**\n * Prints Axios response to the console for debugging purposes.\n *\n * @param response - The Axios response object.\n * @param debugging - Flag to enable or disable logging.\n * @returns The Axios response object.\n */\nconst logApiResponse = (response, debugging = false) => {\n    if (debugging) {\n        let output = typeof response.data === \"string\" ? response.data : \"\";\n        if (typeof response.data === \"object\") {\n            output = JSON.stringify(response.data, null, 4);\n        }\n        console.log(`API RESPONSE: \n      Status: ${response.status} \n      URL: ${response.config.url} \n      Data: ${output}`);\n    }\n    return response;\n};\nexports.logApiResponse = logApiResponse;\n/**\n * Registers request and response interceptors to an Axios instance.\n *\n * @param axiosInstance - The Axios instance to register the interceptors.\n * @param requestFn - The request interceptor function.\n * @param responseFn - The response interceptor function.\n */\nconst registerAxiosInterceptors = (axiosInstance, requestFn, responseFn) => {\n    axiosInstance.interceptors.request.use(requestFn);\n    axiosInstance.interceptors.response.use(responseFn, error => {\n        return Promise.reject(api_error_1.APIError.fromError(error));\n    });\n};\nexports.registerAxiosInterceptors = registerAxiosInterceptors;\n/**\n * Converts a Uint8Array to a hex string.\n *\n * @param key - The key to convert.\n * @returns The converted hex string.\n */\nconst convertStringToHex = (key) => {\n    return Buffer.from(key).toString(\"hex\");\n};\nexports.convertStringToHex = convertStringToHex;\n/**\n * Delays the execution of the function by the specified number of seconds.\n *\n * @param seconds - The number of seconds to delay the execution.\n * @returns A promise that resolves after the specified number of seconds.\n */\nasync function delay(seconds) {\n    return new Promise(resolve => setTimeout(resolve, seconds * 1000));\n}\nexports.delay = delay;\n/**\n * Parses an Unsigned Payload and returns the JSON object.\n *\n * @throws {InvalidUnsignedPayload} If the Unsigned Payload is invalid.\n * @param payload - The Unsigned Payload.\n * @returns The parsed JSON object.\n */\nfunction parseUnsignedPayload(payload) {\n    const rawPayload = payload.match(/../g)?.map(byte => parseInt(byte, 16));\n    if (!rawPayload) {\n        throw new errors_1.InvalidUnsignedPayloadError(\"Unable to parse unsigned payload\");\n    }\n    let parsedPayload;\n    try {\n        const rawPayloadBytes = new Uint8Array(rawPayload);\n        const decoder = new TextDecoder();\n        parsedPayload = JSON.parse(decoder.decode(rawPayloadBytes));\n    }\n    catch (error) {\n        throw new errors_1.InvalidUnsignedPayloadError(\"Unable to decode unsigned payload JSON\");\n    }\n    return parsedPayload;\n}\nexports.parseUnsignedPayload = parseUnsignedPayload;\n/**\n * Formats the input date to 'YYYY-MM-DD'\n *\n * @param date - The date to format.\n *\n * @returns a formated date of 'YYYY-MM-DD'\n */\nfunction formatDate(date) {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Months are zero-based, so add 1\n    const day = String(date.getDate()).padStart(2, \"0\");\n    return `${year}-${month}-${day}T00:00:00Z`;\n}\nexports.formatDate = formatDate;\n/**\n *\n * Takes a date and subtracts a week from it. (7 days)\n *\n * @param date - The date to be formatted.\n *\n * @returns a formatted date that is one week ago.\n */\nfunction getWeekBackDate(date) {\n    date.setDate(date.getDate() - 7);\n    return formatDate(date);\n}\nexports.getWeekBackDate = getWeekBackDate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2NvaW5iYXNlL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixHQUFHLGtCQUFrQixHQUFHLDRCQUE0QixHQUFHLGFBQWEsR0FBRywwQkFBMEIsR0FBRyxpQ0FBaUMsR0FBRyxzQkFBc0I7QUFDckwsb0JBQW9CLG1CQUFPLENBQUMsMkZBQWE7QUFDekMsaUJBQWlCLG1CQUFPLENBQUMscUZBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixhQUFhO0FBQ2IsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ0EsY0FBYyxLQUFLLEdBQUcsTUFBTSxHQUFHLElBQUk7QUFDbkM7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9jb2luYmFzZS91dGlscy5qcz83ZGI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRXZWVrQmFja0RhdGUgPSBleHBvcnRzLmZvcm1hdERhdGUgPSBleHBvcnRzLnBhcnNlVW5zaWduZWRQYXlsb2FkID0gZXhwb3J0cy5kZWxheSA9IGV4cG9ydHMuY29udmVydFN0cmluZ1RvSGV4ID0gZXhwb3J0cy5yZWdpc3RlckF4aW9zSW50ZXJjZXB0b3JzID0gZXhwb3J0cy5sb2dBcGlSZXNwb25zZSA9IHZvaWQgMDtcbmNvbnN0IGFwaV9lcnJvcl8xID0gcmVxdWlyZShcIi4vYXBpX2Vycm9yXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG4vKipcbiAqIFByaW50cyBBeGlvcyByZXNwb25zZSB0byB0aGUgY29uc29sZSBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxuICpcbiAqIEBwYXJhbSByZXNwb25zZSAtIFRoZSBBeGlvcyByZXNwb25zZSBvYmplY3QuXG4gKiBAcGFyYW0gZGVidWdnaW5nIC0gRmxhZyB0byBlbmFibGUgb3IgZGlzYWJsZSBsb2dnaW5nLlxuICogQHJldHVybnMgVGhlIEF4aW9zIHJlc3BvbnNlIG9iamVjdC5cbiAqL1xuY29uc3QgbG9nQXBpUmVzcG9uc2UgPSAocmVzcG9uc2UsIGRlYnVnZ2luZyA9IGZhbHNlKSA9PiB7XG4gICAgaWYgKGRlYnVnZ2luZykge1xuICAgICAgICBsZXQgb3V0cHV0ID0gdHlwZW9mIHJlc3BvbnNlLmRhdGEgPT09IFwic3RyaW5nXCIgPyByZXNwb25zZS5kYXRhIDogXCJcIjtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZS5kYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhLCBudWxsLCA0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhgQVBJIFJFU1BPTlNFOiBcbiAgICAgIFN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9IFxuICAgICAgVVJMOiAke3Jlc3BvbnNlLmNvbmZpZy51cmx9IFxuICAgICAgRGF0YTogJHtvdXRwdXR9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnRzLmxvZ0FwaVJlc3BvbnNlID0gbG9nQXBpUmVzcG9uc2U7XG4vKipcbiAqIFJlZ2lzdGVycyByZXF1ZXN0IGFuZCByZXNwb25zZSBpbnRlcmNlcHRvcnMgdG8gYW4gQXhpb3MgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIGF4aW9zSW5zdGFuY2UgLSBUaGUgQXhpb3MgaW5zdGFuY2UgdG8gcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9ycy5cbiAqIEBwYXJhbSByZXF1ZXN0Rm4gLSBUaGUgcmVxdWVzdCBpbnRlcmNlcHRvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSByZXNwb25zZUZuIC0gVGhlIHJlc3BvbnNlIGludGVyY2VwdG9yIGZ1bmN0aW9uLlxuICovXG5jb25zdCByZWdpc3RlckF4aW9zSW50ZXJjZXB0b3JzID0gKGF4aW9zSW5zdGFuY2UsIHJlcXVlc3RGbiwgcmVzcG9uc2VGbikgPT4ge1xuICAgIGF4aW9zSW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKHJlcXVlc3RGbik7XG4gICAgYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKHJlc3BvbnNlRm4sIGVycm9yID0+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGFwaV9lcnJvcl8xLkFQSUVycm9yLmZyb21FcnJvcihlcnJvcikpO1xuICAgIH0pO1xufTtcbmV4cG9ydHMucmVnaXN0ZXJBeGlvc0ludGVyY2VwdG9ycyA9IHJlZ2lzdGVyQXhpb3NJbnRlcmNlcHRvcnM7XG4vKipcbiAqIENvbnZlcnRzIGEgVWludDhBcnJheSB0byBhIGhleCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIFRoZSBjb252ZXJ0ZWQgaGV4IHN0cmluZy5cbiAqL1xuY29uc3QgY29udmVydFN0cmluZ1RvSGV4ID0gKGtleSkgPT4ge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShrZXkpLnRvU3RyaW5nKFwiaGV4XCIpO1xufTtcbmV4cG9ydHMuY29udmVydFN0cmluZ1RvSGV4ID0gY29udmVydFN0cmluZ1RvSGV4O1xuLyoqXG4gKiBEZWxheXMgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZnVuY3Rpb24gYnkgdGhlIHNwZWNpZmllZCBudW1iZXIgb2Ygc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0gc2Vjb25kcyAtIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0byBkZWxheSB0aGUgZXhlY3V0aW9uLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgdGhlIHNwZWNpZmllZCBudW1iZXIgb2Ygc2Vjb25kcy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZGVsYXkoc2Vjb25kcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgc2Vjb25kcyAqIDEwMDApKTtcbn1cbmV4cG9ydHMuZGVsYXkgPSBkZWxheTtcbi8qKlxuICogUGFyc2VzIGFuIFVuc2lnbmVkIFBheWxvYWQgYW5kIHJldHVybnMgdGhlIEpTT04gb2JqZWN0LlxuICpcbiAqIEB0aHJvd3Mge0ludmFsaWRVbnNpZ25lZFBheWxvYWR9IElmIHRoZSBVbnNpZ25lZCBQYXlsb2FkIGlzIGludmFsaWQuXG4gKiBAcGFyYW0gcGF5bG9hZCAtIFRoZSBVbnNpZ25lZCBQYXlsb2FkLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBKU09OIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VVbnNpZ25lZFBheWxvYWQocGF5bG9hZCkge1xuICAgIGNvbnN0IHJhd1BheWxvYWQgPSBwYXlsb2FkLm1hdGNoKC8uLi9nKT8ubWFwKGJ5dGUgPT4gcGFyc2VJbnQoYnl0ZSwgMTYpKTtcbiAgICBpZiAoIXJhd1BheWxvYWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkludmFsaWRVbnNpZ25lZFBheWxvYWRFcnJvcihcIlVuYWJsZSB0byBwYXJzZSB1bnNpZ25lZCBwYXlsb2FkXCIpO1xuICAgIH1cbiAgICBsZXQgcGFyc2VkUGF5bG9hZDtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByYXdQYXlsb2FkQnl0ZXMgPSBuZXcgVWludDhBcnJheShyYXdQYXlsb2FkKTtcbiAgICAgICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICAgICAgICBwYXJzZWRQYXlsb2FkID0gSlNPTi5wYXJzZShkZWNvZGVyLmRlY29kZShyYXdQYXlsb2FkQnl0ZXMpKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5JbnZhbGlkVW5zaWduZWRQYXlsb2FkRXJyb3IoXCJVbmFibGUgdG8gZGVjb2RlIHVuc2lnbmVkIHBheWxvYWQgSlNPTlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZFBheWxvYWQ7XG59XG5leHBvcnRzLnBhcnNlVW5zaWduZWRQYXlsb2FkID0gcGFyc2VVbnNpZ25lZFBheWxvYWQ7XG4vKipcbiAqIEZvcm1hdHMgdGhlIGlucHV0IGRhdGUgdG8gJ1lZWVktTU0tREQnXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0byBmb3JtYXQuXG4gKlxuICogQHJldHVybnMgYSBmb3JtYXRlZCBkYXRlIG9mICdZWVlZLU1NLUREJ1xuICovXG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUpIHtcbiAgICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIGNvbnN0IG1vbnRoID0gU3RyaW5nKGRhdGUuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsIFwiMFwiKTsgLy8gTW9udGhzIGFyZSB6ZXJvLWJhc2VkLCBzbyBhZGQgMVxuICAgIGNvbnN0IGRheSA9IFN0cmluZyhkYXRlLmdldERhdGUoKSkucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgIHJldHVybiBgJHt5ZWFyfS0ke21vbnRofS0ke2RheX1UMDA6MDA6MDBaYDtcbn1cbmV4cG9ydHMuZm9ybWF0RGF0ZSA9IGZvcm1hdERhdGU7XG4vKipcbiAqXG4gKiBUYWtlcyBhIGRhdGUgYW5kIHN1YnRyYWN0cyBhIHdlZWsgZnJvbSBpdC4gKDcgZGF5cylcbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBkYXRlIHRvIGJlIGZvcm1hdHRlZC5cbiAqXG4gKiBAcmV0dXJucyBhIGZvcm1hdHRlZCBkYXRlIHRoYXQgaXMgb25lIHdlZWsgYWdvLlxuICovXG5mdW5jdGlvbiBnZXRXZWVrQmFja0RhdGUoZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIDcpO1xuICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUpO1xufVxuZXhwb3J0cy5nZXRXZWVrQmFja0RhdGUgPSBnZXRXZWVrQmFja0RhdGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/validator.js":
/*!************************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/validator.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Validator = void 0;\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst api_1 = __webpack_require__(/*! ../client/api */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/client/api.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\n/**\n * A representation of a validator onchain.\n */\nclass Validator {\n    /**\n     * Creates a Validator object.\n     *\n     * @class\n     * @param model - The underlying Validator object.\n     * @throws {Error} - If the Validator model is empty.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Invalid model type\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns the list of Validators.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @param status - The status to filter by.\n     * @returns The list of Validators.\n     */\n    static async list(networkId, assetId, status) {\n        const validators = [];\n        const response = await coinbase_1.Coinbase.apiClients.validator.listValidators(networkId, assetId, Validator.getAPIValidatorStatus(status));\n        response.data.data.forEach(validator => {\n            validators.push(new Validator(validator));\n        });\n        return validators;\n    }\n    /**\n     *\n     * Returns the details of a specific validator.\n     *\n     * @param networkId - The network ID.\n     * @param assetId - The asset ID.\n     * @param id - The unique publicly identifiable id of the validator for which to fetch the data.\n     * @returns The requested validator details.\n     */\n    static async fetch(networkId, assetId, id) {\n        const response = await coinbase_1.Coinbase.apiClients.validator.getValidator(networkId, assetId, id);\n        return new Validator(response.data);\n    }\n    /**\n     * Returns the Validator status.\n     *\n     * @param status - The API Validator status.\n     * @returns The Validator status.\n     */\n    static getAPIValidatorStatus(status) {\n        /* istanbul ignore next */\n        switch (status) {\n            case types_1.ValidatorStatus.UNKNOWN:\n                return api_1.ValidatorStatus.Unknown;\n            case types_1.ValidatorStatus.PROVISIONING:\n                return api_1.ValidatorStatus.Provisioning;\n            case types_1.ValidatorStatus.PROVISIONED:\n                return api_1.ValidatorStatus.Provisioned;\n            case types_1.ValidatorStatus.DEPOSITED:\n                return api_1.ValidatorStatus.Deposited;\n            case types_1.ValidatorStatus.PENDING_ACTIVATION:\n                return api_1.ValidatorStatus.PendingActivation;\n            case types_1.ValidatorStatus.ACTIVE:\n                return api_1.ValidatorStatus.Active;\n            case types_1.ValidatorStatus.EXITING:\n                return api_1.ValidatorStatus.Exiting;\n            case types_1.ValidatorStatus.EXITED:\n                return api_1.ValidatorStatus.Exited;\n            case types_1.ValidatorStatus.WITHDRAWAL_AVAILABLE:\n                return api_1.ValidatorStatus.WithdrawalAvailable;\n            case types_1.ValidatorStatus.WITHDRAWAL_COMPLETE:\n                return api_1.ValidatorStatus.WithdrawalComplete;\n            case types_1.ValidatorStatus.ACTIVE_SLASHED:\n                return api_1.ValidatorStatus.ActiveSlashed;\n            case types_1.ValidatorStatus.EXITED_SLASHED:\n                return api_1.ValidatorStatus.ExitedSlashed;\n            case types_1.ValidatorStatus.REAPED:\n                return api_1.ValidatorStatus.Reaped;\n            default:\n                return api_1.ValidatorStatus.Unknown;\n        }\n    }\n    /**\n     * Returns the Validator ID.\n     *\n     * @returns The Validator ID.\n     */\n    getValidatorId() {\n        return this.model.validator_id;\n    }\n    /**\n     * Returns the Validator status.\n     *\n     * @returns The Validator status.\n     */\n    getStatus() {\n        switch (this.model.status) {\n            case api_1.ValidatorStatus.Unknown:\n                return types_1.ValidatorStatus.UNKNOWN;\n            case api_1.ValidatorStatus.Provisioning:\n                return types_1.ValidatorStatus.PROVISIONING;\n            case api_1.ValidatorStatus.Provisioned:\n                return types_1.ValidatorStatus.PROVISIONED;\n            case api_1.ValidatorStatus.Deposited:\n                return types_1.ValidatorStatus.DEPOSITED;\n            case api_1.ValidatorStatus.PendingActivation:\n                return types_1.ValidatorStatus.PENDING_ACTIVATION;\n            case api_1.ValidatorStatus.Active:\n                return types_1.ValidatorStatus.ACTIVE;\n            case api_1.ValidatorStatus.Exiting:\n                return types_1.ValidatorStatus.EXITING;\n            case api_1.ValidatorStatus.Exited:\n                return types_1.ValidatorStatus.EXITED;\n            case api_1.ValidatorStatus.WithdrawalAvailable:\n                return types_1.ValidatorStatus.WITHDRAWAL_AVAILABLE;\n            case api_1.ValidatorStatus.WithdrawalComplete:\n                return types_1.ValidatorStatus.WITHDRAWAL_COMPLETE;\n            case api_1.ValidatorStatus.ActiveSlashed:\n                return types_1.ValidatorStatus.ACTIVE_SLASHED;\n            case api_1.ValidatorStatus.ExitedSlashed:\n                return types_1.ValidatorStatus.EXITED_SLASHED;\n            case api_1.ValidatorStatus.Reaped:\n                return types_1.ValidatorStatus.REAPED;\n            default:\n                return types_1.ValidatorStatus.UNKNOWN;\n        }\n    }\n    /**\n     * Returns the string representation of the Validator.\n     *\n     * @returns The string representation of the Validator.\n     */\n    toString() {\n        return `Id: ${this.getValidatorId()} Status: ${this.getStatus()}`;\n    }\n}\nexports.Validator = Validator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/wallet.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/wallet.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Wallet = void 0;\nconst bip32_1 = __webpack_require__(/*! @scure/bip32 */ \"(ssr)/./node_modules/@scure/bip32/lib/index.js\");\nconst crypto = __importStar(__webpack_require__(/*! crypto */ \"crypto\"));\nconst decimal_js_1 = __importDefault(__webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/decimal.js/decimal.js\"));\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.commonjs/index.js\");\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst secp256k1 = __importStar(__webpack_require__(/*! secp256k1 */ \"(ssr)/./node_modules/secp256k1/index.js\"));\nconst wallet_address_1 = __webpack_require__(/*! ./address/wallet_address */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/wallet_address.js\");\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\");\nconst balance_1 = __webpack_require__(/*! ./balance */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\");\nconst balance_map_1 = __webpack_require__(/*! ./balance_map */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js\");\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/utils.js\");\nconst webhook_1 = __webpack_require__(/*! ./webhook */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/webhook.js\");\n/**\n * A representation of a Wallet. Wallets come with a single default Address, but can expand to have a set of Addresses,\n * each of which can hold a balance of one or more Assets. Wallets can create new Addresses, list their addresses,\n * list their balances, and transfer Assets to other Addresses. Wallets should be created through User.createWallet or User.importWallet.\n * Wallets should be created using `Wallet.create`, imported using `Wallet.import`, or fetched using `Wallet.fetch`.\n * Existing wallets can be imported with a seed using `Wallet.import`.\n * Wallets backed by a Server Signer can be fetched with `Wallet.fetch` and used for signing operations immediately.\n */\nclass Wallet {\n    /**\n     * Private constructor to prevent direct instantiation outside of factory method. Use Wallet.init instead.\n     *\n     * @ignore\n     * @param model - The wallet model object.\n     * @param master - The HD master key.\n     * @param seed - The seed to use for the Wallet. Expects a 32-byte hexadecimal with no 0x prefix.\n     * @hideconstructor\n     */\n    constructor(model, master, seed) {\n        this.addresses = [];\n        this.addressPathPrefix = \"m/44'/60'/0'/0\";\n        this.model = model;\n        this.master = master;\n        this.seed = seed;\n    }\n    /**\n     * Lists the Wallets belonging to the CDP Project.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Wallets to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Wallets. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of Wallets.\n     */\n    static async listWallets({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.wallet.listWallets(limit, page);\n        const wallets = response.data.data;\n        for (const wallet of wallets) {\n            data.push(Wallet.init(wallet, \"\"));\n        }\n        const hasMore = response.data.has_more;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Fetches a Wallet by its ID. The returned wallet can be immediately used for signing operations if backed by a server signer.\n     * If the wallet is not backed by a server signer, the wallet's seed will need to be set before it can be used for signing operations.\n     *\n     * @param wallet_id - The ID of the Wallet to fetch\n     * @returns The fetched Wallet\n     */\n    static async fetch(wallet_id) {\n        const response = await coinbase_1.Coinbase.apiClients.wallet.getWallet(wallet_id);\n        return Wallet.init(response.data, \"\");\n    }\n    /**\n     * Imports a Wallet for the given Wallet data.\n     *\n     * @param data - The Wallet data to import.\n     * @param data.walletId - The ID of the Wallet to import.\n     * @param data.seed - The seed to use for the Wallet.\n     * @returns The imported Wallet.\n     * @throws {ArgumentError} If the Wallet ID is not provided.\n     * @throws {ArgumentError} If the seed is not provided.\n     * @throws {APIError} If the request fails.\n     */\n    static async import(data) {\n        if (!data.walletId) {\n            throw new errors_1.ArgumentError(\"Wallet ID must be provided\");\n        }\n        if (!data.seed) {\n            throw new errors_1.ArgumentError(\"Seed must be provided\");\n        }\n        const walletModel = await coinbase_1.Coinbase.apiClients.wallet.getWallet(data.walletId);\n        const wallet = Wallet.init(walletModel.data, data.seed);\n        await wallet.listAddresses();\n        return wallet;\n    }\n    /**\n     * Returns a newly created Wallet object.\n     *\n     * @constructs Wallet\n     * @param options - The options to create the Wallet.\n     * @param options.networkId - the ID of the blockchain network. Defaults to 'base-sepolia'.\n     * @param options.intervalSeconds - The interval at which to poll the backend, in seconds.\n     * @param options.timeoutSeconds - The maximum amount of time to wait for the ServerSigner to create a seed, in seconds.\n     * @throws {ArgumentError} If the model or client is not provided.\n     * @throws {Error} - If address derivation or caching fails.\n     * @throws {APIError} - If the request fails.\n     * @returns A promise that resolves with the new Wallet object.\n     */\n    static async create({ networkId = coinbase_1.Coinbase.networks.BaseSepolia, timeoutSeconds = 20, intervalSeconds = 0.2, } = {}) {\n        const result = await coinbase_1.Coinbase.apiClients.wallet.createWallet({\n            wallet: {\n                network_id: networkId,\n                use_server_signer: coinbase_1.Coinbase.useServerSigner,\n            },\n        });\n        const wallet = Wallet.init(result.data, undefined);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            await wallet.waitForSigner(wallet.getId(), intervalSeconds, timeoutSeconds);\n        }\n        await wallet.createAddress();\n        return wallet;\n    }\n    /**\n     * Returns a new Wallet object. Do not use this method directly. Instead, use one of:\n     * - Wallet.create (Create a new Wallet),\n     * - Wallet.import (Import a Wallet with seed),\n     * - Wallet.fetch (fetch a Wallet by ID w/o seed, useful for server signer wallets).\n     *\n     * @constructs Wallet\n     * @param model - The underlying Wallet model object\n     * @param seed - The seed to use for the Wallet. Expects a 32-byte hexadecimal with no 0x prefix. If null or undefined, a new seed will be generated.\n     * If the empty string, no seed is generated, and the Wallet will be instantiated without a seed and its corresponding private keys.\n     * @throws {ArgumentError} If the model or client is not provided.\n     * @throws {Error} - If address derivation or caching fails.\n     * @throws {APIError} - If the request fails.\n     * @returns A promise that resolves with the new Wallet object.\n     */\n    static init(model, seed) {\n        const wallet = new Wallet(model, undefined, seed);\n        if (coinbase_1.Coinbase.useServerSigner) {\n            return wallet;\n        }\n        wallet.setMasterNode(seed);\n        return wallet;\n    }\n    /**\n     * Exports the Wallet's data to a WalletData object.\n     *\n     * @returns The Wallet's data.\n     * @throws {APIError} - If the request fails.\n     */\n    export() {\n        if (!this.seed) {\n            throw new Error(\"Cannot export Wallet without loaded seed\");\n        }\n        return { walletId: this.getId(), seed: this.seed };\n    }\n    /**\n     * Creates a new Address in the Wallet.\n     *\n     * @returns The new Address.\n     * @throws {APIError} - If the address creation fails.\n     */\n    async createAddress() {\n        let payload, key;\n        if (!coinbase_1.Coinbase.useServerSigner) {\n            // TODO: Coordinate this value with concurrent calls to createAddress.\n            const addressIndex = this.addresses.length;\n            const hdKey = this.deriveKey(addressIndex);\n            const attestation = this.createAttestation(hdKey);\n            const publicKey = (0, utils_1.convertStringToHex)(hdKey.publicKey);\n            key = new ethers_1.ethers.Wallet((0, utils_1.convertStringToHex)(hdKey.privateKey));\n            payload = {\n                public_key: publicKey,\n                attestation: attestation,\n                address_index: addressIndex,\n            };\n        }\n        const response = await coinbase_1.Coinbase.apiClients.address.createAddress(this.model.id, payload);\n        if (!this.addresses.length || !coinbase_1.Coinbase.useServerSigner) {\n            await this.reload();\n        }\n        const address = new wallet_address_1.WalletAddress(response.data, key);\n        this.addresses.push(address);\n        return address;\n    }\n    /**\n     * Set the seed for the Wallet.\n     *\n     * @param seed - The seed to use for the Wallet. Expects a 32-byte hexadecimal with no 0x prefix.\n     * @throws {ArgumentError} If the seed is empty.\n     * @throws {Error} If the seed is already set.\n     */\n    setSeed(seed) {\n        if (seed === undefined || seed === \"\") {\n            throw new errors_1.ArgumentError(\"Seed must not be empty\");\n        }\n        if (this.master) {\n            throw new Error(\"Seed is already set\");\n        }\n        this.setMasterNode(seed);\n        if (this.addresses.length < 1) {\n            return;\n        }\n        this.addresses.forEach((address, index) => {\n            const derivedKey = this.deriveKey(index);\n            const etherWallet = new ethers_1.ethers.Wallet((0, utils_1.convertStringToHex)(derivedKey.privateKey));\n            if (etherWallet.address != address.getId()) {\n                throw new Error(`Seed does not match wallet; cannot find address ${etherWallet.address}`);\n            }\n            address.setKey(etherWallet);\n        });\n    }\n    /**\n     * Returns the WalletAddress with the given ID.\n     *\n     * @param addressId - The ID of the WalletAddress to retrieve.\n     * @returns The WalletAddress.\n     */\n    async getAddress(addressId) {\n        if (this.addresses.length < 1) {\n            this.addresses = await this.listAddresses();\n        }\n        return this.addresses.find(address => {\n            return address.getId() === addressId;\n        });\n    }\n    /**\n     * Returns the list of Addresses in the Wallet.\n     *\n     * @returns The list of Addresses.\n     */\n    async listAddresses() {\n        const response = await coinbase_1.Coinbase.apiClients.address.listAddresses(this.getId(), Wallet.MAX_ADDRESSES);\n        const addresses = response.data.data.map((address, index) => {\n            return this.buildWalletAddress(address, index);\n        });\n        this.addresses = addresses;\n        return addresses;\n    }\n    /**\n     *  Trades the given amount of the given Asset for another Asset.\n     *  Currently only the default address is used to source the Trade.\n     *\n     * @param options - The options to create the Trade.\n     * @param options.amount - The amount of the Asset to send.\n     * @param options.fromAssetId - The ID of the Asset to trade from.\n     * @param options.toAssetId - The ID of the Asset to trade to.\n     * @throws {Error} If the default address is not found.\n     * @throws {Error} If the private key is not loaded, or if the asset IDs are unsupported, or if there are insufficient funds.\n     * @returns The created Trade object.\n     */\n    async createTrade(options) {\n        return (await this.getDefaultAddress()).createTrade(options);\n    }\n    /**\n     * Get the stakeable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check the stakeable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the stakeable balance.\n     * @throws {Error} if the default address is not found.\n     * @returns The stakeable balance.\n     */\n    async stakeableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        return (await this.getDefaultAddress()).stakeableBalance(asset_id, mode, options);\n    }\n    /**\n     * Get the unstakeable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check the unstakeable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the unstakeable balance.\n     * @throws {Error} if the default address is not found.\n     * @returns The unstakeable balance.\n     */\n    async unstakeableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        return (await this.getDefaultAddress()).unstakeableBalance(asset_id, mode, options);\n    }\n    /**\n     * Get the claimable balance for the supplied asset.\n     *\n     * @param asset_id - The asset to check claimable balance for.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options for getting the claimable balance.\n     * @throws {Error} if the default address is not found.\n     * @returns The claimable balance.\n     */\n    async claimableBalance(asset_id, mode = types_1.StakeOptionsMode.DEFAULT, options = {}) {\n        return (await this.getDefaultAddress()).claimableBalance(asset_id, mode, options);\n    }\n    /**\n     * Lists the staking rewards for the address.\n     *\n     * @param assetId - The asset ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @param format - The format to return the rewards in. (usd, native). Defaults to usd.\n     * @throws {Error} if the default address is not found.\n     * @returns The staking rewards.\n     */\n    async stakingRewards(assetId, startTime = (0, utils_1.getWeekBackDate)(new Date()), endTime = (0, utils_1.formatDate)(new Date()), format = types_1.StakingRewardFormat.USD) {\n        return (await this.getDefaultAddress()).stakingRewards(assetId, startTime, endTime, format);\n    }\n    /**\n     * Lists the historical staking balances for the address.\n     *\n     * @param assetId - The asset ID.\n     * @param startTime - The start time.\n     * @param endTime - The end time.\n     * @throws {Error} if the default address is not found.\n     * @returns The staking balances.\n     */\n    async historicalStakingBalances(assetId, startTime = (0, utils_1.getWeekBackDate)(new Date()), endTime = (0, utils_1.formatDate)(new Date())) {\n        return (await this.getDefaultAddress()).historicalStakingBalances(assetId, startTime, endTime);\n    }\n    /**\n     * Lists the historical balances for a given asset belonging to the default address of the wallet.\n     *\n     * @param assetId - The asset ID.\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Historical Balances to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Historical Balances. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of Historical Balances for the given Asset ID.\n     */\n    async listHistoricalBalances(assetId, { limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined } = {}) {\n        return (await this.getDefaultAddress()).listHistoricalBalances(assetId, { limit, page });\n    }\n    /**\n     * Creates a staking operation to stake, signs it, and broadcasts it on the blockchain.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset for the staking operation.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options such as setting the mode for the staking action.\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @throws {Error} if the default address is not found.\n     * @returns The staking operation after it's completed fully.\n     */\n    async createStake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 60, intervalSeconds = 0.2) {\n        return (await this.getDefaultAddress()).createStake(amount, assetId, mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Creates a staking operation to unstake, signs it, and broadcasts it on the blockchain.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset for the staking operation.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options such as setting the mode for the staking action.\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @throws {Error} if the default address is not found.\n     * @returns The staking operation after it's completed successfully.\n     */\n    async createUnstake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 60, intervalSeconds = 0.2) {\n        return (await this.getDefaultAddress()).createUnstake(amount, assetId, mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Creates a staking operation to claim stake, signs it, and broadcasts it on the blockchain.\n     *\n     * @param amount - The amount for the staking operation.\n     * @param assetId - The asset for the staking operation.\n     * @param mode - The staking mode. Defaults to DEFAULT.\n     * @param options - Additional options such as setting the mode for the staking action.\n     * @param timeoutSeconds - The amount to wait for the transaction to complete when broadcasted.\n     * @param intervalSeconds - The amount to check each time for a successful broadcast.\n     * @throws {Error} if the default address is not found.\n     * @returns The staking operation after it's completed fully.\n     */\n    async createClaimStake(amount, assetId, mode = types_1.StakeOptionsMode.DEFAULT, options = {}, timeoutSeconds = 60, intervalSeconds = 0.2) {\n        return (await this.getDefaultAddress()).createClaimStake(amount, assetId, mode, options, timeoutSeconds, intervalSeconds);\n    }\n    /**\n     * Returns the list of balances of this Wallet. Balances are aggregated across all Addresses in the Wallet.\n     *\n     * @returns The list of balances. The key is the Asset ID, and the value is the balance.\n     */\n    async listBalances() {\n        const response = await coinbase_1.Coinbase.apiClients.wallet.listWalletBalances(this.model.id);\n        return balance_map_1.BalanceMap.fromBalances(response.data.data);\n    }\n    /**\n     * Returns the balance of the provided Asset. Balances are aggregated across all Addresses in the Wallet.\n     *\n     * @param assetId - The ID of the Asset to retrieve the balance for.\n     * @returns The balance of the Asset.\n     */\n    async getBalance(assetId) {\n        const response = await coinbase_1.Coinbase.apiClients.wallet.getWalletBalance(this.model.id, asset_1.Asset.primaryDenomination(assetId));\n        if (!response.data.amount) {\n            return new decimal_js_1.default(0);\n        }\n        const balance = balance_1.Balance.fromModelAndAssetId(response.data, assetId);\n        return balance.amount;\n    }\n    /**\n     * Returns the Network ID of the Wallet.\n     *\n     * @returns The network ID.\n     */\n    getNetworkId() {\n        return this.model.network_id;\n    }\n    /**\n     * Returns the ServerSigner Status of the Wallet.\n     *\n     * @returns the ServerSigner Status.\n     */\n    getServerSignerStatus() {\n        const status = {\n            pending_seed_creation: types_1.ServerSignerStatus.PENDING,\n            active_seed: types_1.ServerSignerStatus.ACTIVE,\n        };\n        return this.model.server_signer_status ? status[this.model.server_signer_status] : undefined;\n    }\n    /**\n     * Returns the wallet ID.\n     *\n     * @returns The wallet ID.\n     */\n    getId() {\n        return this.model.id;\n    }\n    /**\n     * Saves the seed of the Wallet to the given file. Wallets whose seeds are saved this way can be\n     * rehydrated using load_seed. A single file can be used for multiple Wallet seeds.\n     * This is an insecure method of storing Wallet seeds and should only be used for development purposes.\n     *\n     * @param filePath - The path of the file to save the seed to\n     * @param encrypt - Whether the seed information persisted to the local file system should be\n     * encrypted or not. Data is unencrypted by default.\n     * @returns A string indicating the success of the operation\n     * @throws {Error} If the Wallet does not have a seed\n     */\n    saveSeed(filePath, encrypt = false) {\n        if (!this.master) {\n            throw new Error(\"Cannot save Wallet without loaded seed\");\n        }\n        const existingSeedsInStore = this.getExistingSeeds(filePath);\n        const data = this.export();\n        let seedToStore = data.seed;\n        let authTag = \"\";\n        let iv = \"\";\n        if (encrypt) {\n            const ivBytes = crypto.randomBytes(12);\n            const sharedSecret = this.getEncryptionKey();\n            const cipher = crypto.createCipheriv(\"aes-256-gcm\", crypto.createHash(\"sha256\").update(sharedSecret).digest(), ivBytes);\n            const encryptedData = Buffer.concat([cipher.update(data.seed, \"utf8\"), cipher.final()]);\n            authTag = cipher.getAuthTag().toString(\"hex\");\n            seedToStore = encryptedData.toString(\"hex\");\n            iv = ivBytes.toString(\"hex\");\n        }\n        existingSeedsInStore[data.walletId] = {\n            seed: seedToStore,\n            encrypted: encrypt,\n            authTag: authTag,\n            iv: iv,\n        };\n        fs.writeFileSync(filePath, JSON.stringify(existingSeedsInStore, null, 2), \"utf8\");\n        return `Successfully saved seed for ${data.walletId} to ${filePath}.`;\n    }\n    /**\n     * Loads the seed of the Wallet from the given file.\n     *\n     * @param filePath - The path of the file to load the seed from\n     * @returns A string indicating the success of the operation\n     */\n    async loadSeed(filePath) {\n        const existingSeedsInStore = this.getExistingSeeds(filePath);\n        if (Object.keys(existingSeedsInStore).length === 0) {\n            throw new errors_1.ArgumentError(`File ${filePath} does not contain any seed data`);\n        }\n        if (existingSeedsInStore[this.getId()] === undefined) {\n            throw new errors_1.ArgumentError(`File ${filePath} does not contain seed data for wallet ${this.getId()}`);\n        }\n        const seedData = existingSeedsInStore[this.getId()];\n        let seed = seedData.seed;\n        if (!seed) {\n            /* istanbul ignore next */\n            throw new errors_1.ArgumentError(\"Seed data is malformed\");\n        }\n        if (seedData.encrypted) {\n            const sharedSecret = this.getEncryptionKey();\n            if (!seedData.iv || !seedData.authTag) {\n                /* istanbul ignore next */\n                throw new errors_1.ArgumentError(\"Encrypted seed data is malformed\");\n            }\n            const decipher = crypto.createDecipheriv(\"aes-256-gcm\", crypto.createHash(\"sha256\").update(sharedSecret).digest(), Buffer.from(seedData.iv, \"hex\"));\n            decipher.setAuthTag(Buffer.from(seedData.authTag, \"hex\"));\n            const decryptedData = Buffer.concat([\n                decipher.update(Buffer.from(seed, \"hex\")),\n                decipher.final(),\n            ]);\n            seed = decryptedData.toString(\"utf8\");\n        }\n        this.setSeed(seed);\n        await this.listAddresses();\n        return `Successfully loaded seed for wallet ${this.getId()} from ${filePath}.`;\n    }\n    /**\n     * Returns the default address of the Wallet.\n     *\n     * @returns The default address\n     */\n    async getDefaultAddress() {\n        if (this.model.default_address === undefined) {\n            throw new Error(\"WalletModel default address not set\");\n        }\n        const defaultAddress = await this.getAddress(this.model.default_address.address_id);\n        if (!defaultAddress) {\n            throw new Error(\"Default address not found\");\n        }\n        return defaultAddress;\n    }\n    /**\n     * Returns whether the Wallet has a seed with which to derive keys and sign transactions.\n     *\n     * @returns Whether the Wallet has a seed with which to derive keys and sign transactions.\n     */\n    canSign() {\n        return this.master?.publicKey !== undefined;\n    }\n    /**\n     * Requests funds from the faucet for the Wallet's default address and returns the faucet transaction.\n     * This is only supported on testnet networks.\n     *\n     * @param assetId - The ID of the Asset to request from the faucet.\n     * @throws {Error} If the default address is not found.\n     * @throws {APIError} If the request fails.\n     * @returns The successful faucet transaction\n     */\n    async faucet(assetId) {\n        if (!this.model.default_address) {\n            throw new Error(\"Default address not found\");\n        }\n        const transaction = (await this.getDefaultAddress()).faucet(assetId);\n        return transaction;\n    }\n    /**\n     * Transfers the given amount of the given Asset to the given address. Only same-Network Transfers are supported.\n     * Currently only the default_address is used to source the Transfer.\n     *\n     * @param options - The options to create the Transfer.\n     * @param options.amount - The amount of the Asset to send.\n     * @param options.assetId - The ID of the Asset to send.\n     * @param options.destination - The destination of the transfer. If a Wallet, sends to the Wallet's default address. If a String, interprets it as the address ID.\n     * @param options.gasless - Whether the Transfer should be gasless. Defaults to false.\n     * @returns The created Transfer object.\n     * @throws {APIError} if the API request to create a Transfer fails.\n     * @throws {APIError} if the API request to broadcast a Transfer fails.\n     */\n    async createTransfer(options) {\n        return (await this.getDefaultAddress()).createTransfer(options);\n    }\n    /**\n     * Creates a Payload Signature.\n     *\n     * @param unsignedPayload - The Unsigned Payload to sign.\n     * @returns A promise that resolves to the Payload Signature object.\n     * @throws {APIError} if the API request to create a Payload Signature fails.\n     * @throws {Error} if the default address is not found.\n     */\n    async createPayloadSignature(unsignedPayload) {\n        return (await this.getDefaultAddress()).createPayloadSignature(unsignedPayload);\n    }\n    /**\n     * Creates a Webhook for a wallet, monitors all wallet addresses for onchain events.\n     *\n     * @param notificationUri - The URI to which the webhook notifications will be sent.\n     *\n     * @returns The newly created webhook instance.\n     */\n    async createWebhook(notificationUri) {\n        const result = await coinbase_1.Coinbase.apiClients.webhook.createWalletWebhook(this.getId(), {\n            notification_uri: notificationUri,\n        });\n        return webhook_1.Webhook.init(result.data);\n    }\n    /**\n     * Invokes a contract with the given data.\n     *\n     * @param options - The options to invoke the contract\n     * @param options.contractAddress - The address of the contract the method will be invoked on.\n     * @param options.method - The method to invoke on the contract.\n     * @param options.abi - The ABI of the contract.\n     * @param options.args - The arguments to pass to the contract method invocation.\n     *   The keys should be the argument names and the values should be the argument values.\n     * @param options.amount - The amount of the asset to send to a payable contract method.\n     * @param options.assetId - The ID of the asset to send to a payable contract method.\n     *   The asset must be a denomination of the native asset. (Ex. \"wei\", \"gwei\", or \"eth\").\n     * @returns The ContractInvocation object.\n     * @throws {APIError} if the API request to create a contract invocation fails.\n     */\n    async invokeContract(options) {\n        return (await this.getDefaultAddress()).invokeContract(options);\n    }\n    /**\n     * Deploys an ERC20 token contract.\n     *\n     * @param options - The options for creating the ERC20 token.\n     * @param options.name - The name of the ERC20 token.\n     * @param options.symbol - The symbol of the ERC20 token.\n     * @param options.totalSupply - The total supply of the ERC20 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {Error} If the private key is not loaded when not using server signer.\n     */\n    async deployToken(options) {\n        return (await this.getDefaultAddress()).deployToken(options);\n    }\n    /**\n     * Deploys an ERC721 token contract.\n     *\n     * @param options - The options for creating the ERC721 token.\n     * @param options.name - The name of the ERC721 token.\n     * @param options.symbol - The symbol of the ERC721 token.\n     * @param options.baseURI - The base URI of the ERC721 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {Error} If the private key is not loaded when not using server signer.\n     */\n    async deployNFT(options) {\n        return (await this.getDefaultAddress()).deployNFT(options);\n    }\n    /**\n     * Deploys an ERC1155 token contract.\n     *\n     * @param options - The options for creating the ERC1155 token.\n     * @param options.name - The name of the ERC1155 token.\n     * @param options.symbol - The symbol of the ERC1155 token.\n     * @param options.baseURI - The base URI of the ERC1155 token.\n     * @returns A Promise that resolves to the deployed SmartContract object.\n     * @throws {Error} If the private key is not loaded when not using server signer.\n     */\n    async deployMultiToken(options) {\n        return (await this.getDefaultAddress()).deployMultiToken(options);\n    }\n    /**\n     * Returns a String representation of the Wallet.\n     *\n     * @returns a String representation of the Wallet\n     */\n    toString() {\n        return `Wallet{id: '${this.model.id}', networkId: '${this.model.network_id}'}`;\n    }\n    /**\n     * Validates the seed and address models passed to the constructor.\n     *\n     * @param seed - The seed to use for the Wallet\n     */\n    validateSeed(seed) {\n        if (seed && seed.length !== 64) {\n            throw new errors_1.ArgumentError(\"Seed must be 32 bytes\");\n        }\n    }\n    /**\n     * Loads the seed data from the given file.\n     *\n     * @param filePath - The path of the file to load the seed data from\n     * @returns The seed data\n     */\n    getExistingSeeds(filePath) {\n        try {\n            const data = fs.readFileSync(filePath, \"utf8\");\n            if (!data) {\n                return {};\n            }\n            const seedData = JSON.parse(data);\n            if (!Object.entries(seedData).every(([key, value]) => typeof key === \"string\" &&\n                /* eslint-disable @typescript-eslint/no-explicit-any */\n                typeof value.authTag === \"string\" &&\n                typeof value.encrypted === \"boolean\" &&\n                typeof value.iv === \"string\" &&\n                typeof value.seed === \"string\")) {\n                throw new errors_1.ArgumentError(\"Malformed backup data\");\n            }\n            return seedData;\n        }\n        catch (error) {\n            /* eslint-enable @typescript-eslint/no-explicit-any */\n            if (error.code === \"ENOENT\") {\n                return {};\n            }\n            throw new errors_1.ArgumentError(\"Malformed backup data\");\n        }\n    }\n    /**\n     * Gets the key for encrypting seed data.\n     *\n     * @returns The encryption key.\n     */\n    getEncryptionKey() {\n        const privateKey = crypto.createPrivateKey(coinbase_1.Coinbase.apiKeyPrivateKey);\n        const publicKey = crypto.createPublicKey(coinbase_1.Coinbase.apiKeyPrivateKey);\n        const encryptionKey = crypto.diffieHellman({\n            privateKey,\n            publicKey,\n        });\n        return encryptionKey;\n    }\n    /**\n     * Returns a WalletAddress object for the given AddressModel.\n     *\n     * @param addressModel - The AddressModel to build the WalletAddress from.\n     * @param index - The index of the AddressModel.\n     * @returns The WalletAddress object.\n     */\n    buildWalletAddress(addressModel, index) {\n        if (!this.master) {\n            return new wallet_address_1.WalletAddress(addressModel);\n        }\n        const key = this.deriveKey(index);\n        const ethWallet = new ethers_1.ethers.Wallet((0, utils_1.convertStringToHex)(key.privateKey));\n        if (ethWallet.address != addressModel.address_id) {\n            throw new Error(`Seed does not match wallet`);\n        }\n        return new wallet_address_1.WalletAddress(addressModel, ethWallet);\n    }\n    /**\n     * Waits until the ServerSigner has created a seed for the Wallet.\n     *\n     * @param walletId - The ID of the Wallet that is awaiting seed creation.\n     * @param intervalSeconds - The interval at which to poll the CDPService, in seconds.\n     * @param timeoutSeconds - The maximum amount of time to wait for the ServerSigner to create a seed, in seconds.\n     * @throws {APIError} if the API request to get a Wallet fails.\n     * @throws {Error} if the ServerSigner times out.\n     */\n    async waitForSigner(walletId, intervalSeconds = 0.2, timeoutSeconds = 20) {\n        const startTime = Date.now();\n        while (Date.now() - startTime < timeoutSeconds * 1000) {\n            const response = await coinbase_1.Coinbase.apiClients.wallet.getWallet(walletId);\n            if (response?.data.server_signer_status === types_1.ServerSignerStatus.ACTIVE) {\n                return;\n            }\n            await (0, utils_1.delay)(intervalSeconds);\n        }\n        throw new Error(\"Wallet creation timed out. Check status of your Server-Signer\");\n    }\n    /**\n     * Sets the master node for the given seed, if valid. If the seed is undefined it will set the master node using a random seed.\n     *\n     * @param seed - The seed to use for the Wallet.\n     * @returns The master node for the given seed.\n     */\n    setMasterNode(seed) {\n        if (seed === \"\") {\n            return undefined;\n        }\n        if (seed === undefined) {\n            seed = ethers_1.ethers.Wallet.createRandom().privateKey.slice(2);\n        }\n        this.validateSeed(seed);\n        this.seed = seed;\n        this.master = bip32_1.HDKey.fromMasterSeed(Buffer.from(seed, \"hex\"));\n    }\n    /**\n     * Derives a key for an already registered Address in the Wallet.\n     *\n     * @param index - The index of the Address to derive.\n     * @throws {Error} - If the key derivation fails.\n     * @returns The derived key.\n     */\n    deriveKey(index) {\n        if (!this.master) {\n            throw new Error(\"Cannot derive key for Wallet without seed loaded\");\n        }\n        const derivedKey = this.master?.derive(this.addressPathPrefix + `/${index}`);\n        if (!derivedKey?.privateKey) {\n            throw new Error(\"Failed to derive key\");\n        }\n        return derivedKey;\n    }\n    /**\n     * Creates an attestation for the Address currently being created.\n     *\n     * @param key - The key of the Wallet.\n     * @returns The attestation.\n     */\n    createAttestation(key) {\n        if (!key.publicKey || !key.privateKey) {\n            /* istanbul ignore next */\n            throw Error;\n        }\n        const publicKey = (0, utils_1.convertStringToHex)(key.publicKey);\n        const payload = JSON.stringify({\n            wallet_id: this.model.id,\n            public_key: publicKey,\n        });\n        const hashedPayload = crypto.createHash(\"sha256\").update(payload).digest();\n        const signature = secp256k1.ecdsaSign(hashedPayload, key.privateKey);\n        const r = signature.signature.slice(0, 32);\n        const s = signature.signature.slice(32, 64);\n        const v = signature.recid + 27 + 4;\n        const newSignatureBuffer = Buffer.concat([Buffer.from([v]), r, s]);\n        const newSignatureHex = newSignatureBuffer.toString(\"hex\");\n        return newSignatureHex;\n    }\n    /**\n     * Reloads the Wallet model with the latest data from the server.\n     *\n     * @throws {APIError} if the API request to get a Wallet fails.\n     */\n    async reload() {\n        const result = await coinbase_1.Coinbase.apiClients.wallet.getWallet(this.model.id);\n        this.model = result?.data;\n    }\n}\nexports.Wallet = Wallet;\nWallet.MAX_ADDRESSES = 20;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/wallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/webhook.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/coinbase/webhook.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Webhook = void 0;\nconst coinbase_1 = __webpack_require__(/*! ./coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\");\n/**\n * A representation of a Webhook,\n * which provides methods to create, list, update, and delete webhooks that are used to receive notifications of specific events.\n */\nclass Webhook {\n    /**\n     * Initializes a new Webhook object.\n     *\n     * @param model - The underlying Webhook object.\n     * @throws {Error} If the model is not provided.\n     */\n    constructor(model) {\n        if (!model) {\n            throw new Error(\"Webhook model cannot be empty\");\n        }\n        this.model = model;\n    }\n    /**\n     * Returns a new Webhook object. Do not use this method directly. Instead, Webhook.create(...)\n     *\n     * @constructs Webhook\n     * @param model - The underlying Webhook model object\n     * @returns A Webhook object.\n     */\n    static init(model) {\n        return new Webhook(model);\n    }\n    /**\n     * Creates a new webhook for a specified network.\n     *\n     * @param options - The options to create webhook.\n     * @param options.networkId - The network ID for which the webhook is created.\n     * @param options.notificationUri - The URI where notifications should be sent.\n     * @param options.eventType - The type of event for the webhook.\n     * @param options.eventTypeFilter - Filter for wallet activity event type.\n     * @param options.eventFilters - Filters applied to the events that determine which specific events trigger the webhook.\n     * @returns A promise that resolves to a new instance of Webhook.\n     */\n    static async create({ networkId, notificationUri, eventType, eventTypeFilter, eventFilters = [], }) {\n        const result = await coinbase_1.Coinbase.apiClients.webhook.createWebhook({\n            network_id: networkId,\n            notification_uri: notificationUri,\n            event_type: eventType,\n            event_type_filter: eventTypeFilter,\n            event_filters: eventFilters,\n        });\n        return new Webhook(result.data);\n    }\n    /**\n     * Lists the Webhooks belonging to the CDP Project.\n     *\n     * @param options - The pagination options.\n     * @param options.limit - The maximum number of Webhooks to return. Limit can range between 1 and 100.\n     * @param options.page - The cursor for pagination across multiple pages of Webhooks. Don\\&#39;t include this parameter on the first call. Use the next page value returned in a previous response to request subsequent results.\n     *\n     * @returns The paginated list response of Webhooks.\n     */\n    static async list({ limit = coinbase_1.Coinbase.defaultPageLimit, page = undefined, } = {}) {\n        const data = [];\n        let nextPage;\n        const response = await coinbase_1.Coinbase.apiClients.webhook.listWebhooks(limit, page);\n        const webhooks = response.data.data;\n        for (const w of webhooks) {\n            data.push(new Webhook(w));\n        }\n        const hasMore = response.data.has_more ? response.data.has_more : false;\n        if (hasMore) {\n            if (response.data.next_page) {\n                nextPage = response.data.next_page;\n            }\n        }\n        return {\n            data,\n            hasMore,\n            nextPage,\n        };\n    }\n    /**\n     * Returns the ID of the webhook.\n     *\n     * @returns The ID of the webhook, or undefined if the model is null.\n     */\n    getId() {\n        return this.model?.id;\n    }\n    /**\n     * Returns the network ID associated with the webhook.\n     *\n     * @returns The network ID of the webhook, or undefined if the model is null.\n     */\n    getNetworkId() {\n        return this.model?.network_id;\n    }\n    /**\n     * Returns the notification URI of the webhook.\n     *\n     * @returns The URI where notifications are sent, or undefined if the model is null.\n     */\n    getNotificationURI() {\n        return this.model?.notification_uri;\n    }\n    /**\n     * Returns the event type of the webhook.\n     *\n     * @returns The type of event the webhook listens for, or undefined if the model is null.\n     */\n    getEventType() {\n        return this.model?.event_type;\n    }\n    /**\n     * Returns the event type filter of the webhook.\n     *\n     * @returns The filter which will be used to filter for events of a certain event type\n     */\n    getEventTypeFilter() {\n        return this.model?.event_type_filter;\n    }\n    /**\n     * Returns the event filters applied to the webhook.\n     *\n     * @returns An array of event filters used by the webhook, or undefined if the model is null.\n     */\n    getEventFilters() {\n        return this.model?.event_filters;\n    }\n    /**\n     * Returns the signature header of the webhook.\n     *\n     * @returns The signature header which will be set on the callback requests, or undefined if the model is null.\n     */\n    getSignatureHeader() {\n        return this.model?.signature_header;\n    }\n    /**\n     * Updates the webhook with a new notification URI, and optionally a new list of addresses to monitor.\n     *\n     * @param options - The options to update webhook.\n     * @param options.notificationUri - The new URI for webhook notifications.\n     * @param options.eventTypeFilter - The new eventTypeFilter that contains a new list (replacement) of addresses to monitor for the webhook.\n     * @returns A promise that resolves to the updated Webhook object.\n     */\n    async update({ notificationUri, eventTypeFilter, }) {\n        const finalNotificationUri = notificationUri ?? this.getNotificationURI();\n        const finalEventTypeFilter = eventTypeFilter ?? this.getEventTypeFilter();\n        const result = await coinbase_1.Coinbase.apiClients.webhook.updateWebhook(this.getId(), {\n            notification_uri: finalNotificationUri,\n            event_filters: this.getEventFilters(),\n            event_type_filter: finalEventTypeFilter,\n        });\n        this.model = result.data;\n        return this;\n    }\n    /**\n     * Deletes the webhook.\n     *\n     * @returns A promise that resolves when the webhook is deleted and its attributes are set to null.\n     */\n    async delete() {\n        await coinbase_1.Coinbase.apiClients.webhook.deleteWebhook(this.getId());\n        this.model = null;\n    }\n    /**\n     * Returns a String representation of the Webhook.\n     *\n     * @returns A String representation of the Webhook.\n     */\n    toString() {\n        return (`Webhook { id: '${this.getId()}', networkId: '${this.getNetworkId()}', ` +\n            `eventType: '${this.getEventType()}', eventFilter: ${JSON.stringify(this.getEventFilters())}, ` +\n            `eventTypeFilter: ${JSON.stringify(this.getEventTypeFilter())}, ` +\n            `notificationUri: '${this.getNotificationURI()}', signatureHeader: '${this.getSignatureHeader()}' }`);\n    }\n}\nexports.Webhook = Webhook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/webhook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/dist/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./coinbase/address */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/address/external_address */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/external_address.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/address/wallet_address */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/address/wallet_address.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/api_error */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/api_error.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/asset */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/asset.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/authenticator */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/authenticator.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/balance */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/balance_map */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/balance_map.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/coinbase */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/coinbase.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/constants */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/constants.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/contract_event */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_event.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/contract_invocation */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/contract_invocation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/errors */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/errors.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/faucet_transaction */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/faucet_transaction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/hash */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/hash.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/historical_balance */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/historical_balance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/payload_signature */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/payload_signature.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/server_signer */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/server_signer.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/smart_contract */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/smart_contract.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/staking_balance */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_balance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/staking_operation */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_operation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/staking_reward */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/staking_reward.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/trade */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/trade.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/transaction */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transaction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/transfer */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/transfer.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/types */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/validator */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/validator.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/wallet */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/wallet.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/webhook */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/webhook.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinbase/read_contract */ \"(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/coinbase/read_contract.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NvaW5iYXNlLXNkay9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDekMsYUFBYSxtQkFBTyxDQUFDLGtJQUFxQztBQUMxRCxhQUFhLG1CQUFPLENBQUMsOEhBQW1DO0FBQ3hELGFBQWEsbUJBQU8sQ0FBQyxvR0FBc0I7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLDRGQUFrQjtBQUN2QyxhQUFhLG1CQUFPLENBQUMsNEdBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDekMsYUFBYSxtQkFBTyxDQUFDLHdHQUF3QjtBQUM3QyxhQUFhLG1CQUFPLENBQUMsa0dBQXFCO0FBQzFDLGFBQWEsbUJBQU8sQ0FBQyxvR0FBc0I7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLDhHQUEyQjtBQUNoRCxhQUFhLG1CQUFPLENBQUMsd0hBQWdDO0FBQ3JELGFBQWEsbUJBQU8sQ0FBQyw4RkFBbUI7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLHNIQUErQjtBQUNwRCxhQUFhLG1CQUFPLENBQUMsMEZBQWlCO0FBQ3RDLGFBQWEsbUJBQU8sQ0FBQyxzSEFBK0I7QUFDcEQsYUFBYSxtQkFBTyxDQUFDLG9IQUE4QjtBQUNuRCxhQUFhLG1CQUFPLENBQUMsNEdBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQyw4R0FBMkI7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLGdIQUE0QjtBQUNqRCxhQUFhLG1CQUFPLENBQUMsb0hBQThCO0FBQ25ELGFBQWEsbUJBQU8sQ0FBQyw4R0FBMkI7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLDRGQUFrQjtBQUN2QyxhQUFhLG1CQUFPLENBQUMsd0dBQXdCO0FBQzdDLGFBQWEsbUJBQU8sQ0FBQyxrR0FBcUI7QUFDMUMsYUFBYSxtQkFBTyxDQUFDLDRGQUFrQjtBQUN2QyxhQUFhLG1CQUFPLENBQUMsb0dBQXNCO0FBQzNDLGFBQWEsbUJBQU8sQ0FBQyw4RkFBbUI7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLGdHQUFvQjtBQUN6QyxhQUFhLG1CQUFPLENBQUMsNEdBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jb2luYmFzZS1zZGsvZGlzdC9pbmRleC5qcz9iMjA1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvYWRkcmVzc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvYWRkcmVzcy9leHRlcm5hbF9hZGRyZXNzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9hZGRyZXNzL3dhbGxldF9hZGRyZXNzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9hcGlfZXJyb3JcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL2Fzc2V0XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9hdXRoZW50aWNhdG9yXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9iYWxhbmNlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9iYWxhbmNlX21hcFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvY29pbmJhc2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvY29udHJhY3RfZXZlbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL2NvbnRyYWN0X2ludm9jYXRpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL2Vycm9yc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvZmF1Y2V0X3RyYW5zYWN0aW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9oYXNoXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9oaXN0b3JpY2FsX2JhbGFuY2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL3BheWxvYWRfc2lnbmF0dXJlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9zZXJ2ZXJfc2lnbmVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9zbWFydF9jb250cmFjdFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2Uvc3Rha2luZ19iYWxhbmNlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS9zdGFraW5nX29wZXJhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2Uvc3Rha2luZ19yZXdhcmRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL3RyYWRlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS90cmFuc2FjdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvdHJhbnNmZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL3R5cGVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2luYmFzZS92YWxpZGF0b3JcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5iYXNlL3dhbGxldFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2Uvd2ViaG9va1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbmJhc2UvcmVhZF9jb250cmFjdFwiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/coinbase-sdk/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/coinbase-sdk/package.json":
/*!**********************************************************!*\
  !*** ./node_modules/@coinbase/coinbase-sdk/package.json ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"@coinbase/coinbase-sdk","author":"Coinbase Inc.","license":"ISC","description":"Coinbase Platform SDK","repository":"https://github.com/coinbase/coinbase-sdk-nodejs","version":"0.10.0","main":"dist/index.js","types":"dist/index.d.ts","scripts":{"lint":"eslint -c .eslintrc.json src/coinbase/**.ts","lint-fix":"eslint -c .eslintrc.json src/coinbase/*.ts --fix","format":"prettier -c .prettierrc --write \\"**/*.{ts,js,cjs,json,md}\\"","format-check":"prettier -c .prettierrc --check \\"**/*.{ts,js,cjs,json,md}\\"","check":"tsc --noEmit","test":"npx jest --no-cache  --testMatch=**/*_test.ts","test:dry-run":"npm install && npm ci && npm publish --dry-run","test:e2e":"npx jest --no-cache --testMatch=**/e2e.ts --coverageThreshold \'{}\'","test:types":"tsd --files src/tests/types.test-d.ts","clean":"rm -rf dist/*","build":"tsc","prepack":"tsc","docs":"typedoc --entryPoints ./src --entryPointStrategy expand --exclude ./src/tests/**/*.ts"},"files":["dist"],"dependencies":{"@scure/bip32":"^1.4.0","abitype":"^1.0.6","axios":"^1.6.8","axios-mock-adapter":"^1.22.0","axios-retry":"^4.4.1","bip32":"^4.0.0","bip39":"^3.1.0","decimal.js":"^10.4.3","dotenv":"^16.4.5","ethers":"^6.12.1","node-jose":"^2.2.0","secp256k1":"^5.0.0","viem":"^2.21.26"},"devDependencies":{"@types/jest":"^29.5.12","@types/node":"^20.12.11","@types/node-jose":"^1.1.13","@types/secp256k1":"^4.0.6","@typescript-eslint/eslint-plugin":"^7.8.0","@typescript-eslint/parser":"^7.8.0","eslint":"^8.57.0","eslint-config-prettier":"^9.1.0","eslint-plugin-jsdoc":"^48.2.5","eslint-plugin-prettier":"^5.1.3","jest":"^29.7.0","mock-fs":"^5.2.0","prettier":"^3.2.5","ts-jest":"^29.1.2","ts-node":"^10.9.2","tsd":"^0.31.2","typedoc":"^0.25.13","typescript":"^5.4.5"}}');

/***/ })

};
;