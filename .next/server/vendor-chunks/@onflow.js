"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@onflow";
exports.ids = ["vendor-chunks/@onflow"];
exports.modules = {

/***/ "(ssr)/./node_modules/@onflow/config/dist/config.module.js":
/*!***********************************************************!*\
  !*** ./node_modules/@onflow/config/dist/config.module.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearConfig: () => (/* binding */ clearConfig),\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   getContracts: () => (/* binding */ getContracts)\n/* harmony export */ });\n/* harmony import */ var _onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-actor */ \"(ssr)/./node_modules/@onflow/util-actor/dist/actor.module.js\");\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/./node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n\n\n\n\nconst pipe = function () {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return func(res);\n    }, v);\n  };\n};\n\n/***\n * Merge multiple functions returning objects into one object.\n * @param funcs - Functions to merge\n * @return Merged object\n */\nconst mergePipe = function () {\n  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    funcs[_key2] = arguments[_key2];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return {\n        ...res,\n        ...func(v)\n      };\n    }, {});\n  };\n};\n\n/**\n * @description Object check\n * @param value - Value to check\n * @returns Is object status\n */\nconst isObject = value => value && typeof value === \"object\" && !Array.isArray(value);\n\n/**\n * @description Deep merge multiple objects.\n * @param target - Target object\n * @param sources - Source objects\n * @returns Merged object\n */\nconst mergeDeep = function (target) {\n  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    sources[_key3 - 1] = arguments[_key3];\n  }\n  if (!sources.length) return target;\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, {\n          [key]: {}\n        });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  return mergeDeep(target, ...sources);\n};\n\n/**\n * @description Deep merge multiple Flow JSON.\n * @param value - Flow JSON or array of Flow JSONs\n * @returns Merged Flow JSON\n */\nconst mergeFlowJSONs = value => Array.isArray(value) ? mergeDeep({}, ...value) : value;\n\n/**\n * @description Filter out contracts section of flow.json.\n * @param obj - Flow JSON\n * @returns Contracts section of Flow JSON\n */\nconst filterContracts = obj => obj.contracts ? obj.contracts : {};\n\n/**\n * @description Filter out dependencies section of flow.json.\n * @param obj - Flow JSON\n * @returns Dependencies section of Flow JSON\n */\nconst filterDependencies = obj => obj.dependencies ? obj.dependencies : {};\n\n/**\n * @description Gathers contract addresses by network\n * @param network - Network to gather addresses for\n * @returns Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapContractAliasesToNetworkAddress = network => contracts => {\n  return Object.entries(contracts).reduce((c, _ref) => {\n    let [key, value] = _ref;\n    const networkContractAlias = value?.aliases?.[network];\n    if (networkContractAlias) {\n      c[key] = networkContractAlias;\n    }\n    return c;\n  }, {});\n};\n\n/**\n * @description Gathers dependency addresses by network\n * @param network - Network to gather addresses for\n * @returns Dependency names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapDependencyAliasesToNetworkAddress = network => dependencies => {\n  return Object.entries(dependencies).reduce((c, _ref2) => {\n    let [key, value] = _ref2;\n    const networkDependencyAlias = value?.aliases?.[network];\n    if (networkDependencyAlias) {\n      c[key] = networkDependencyAlias;\n    }\n    return c;\n  }, {});\n};\nconst mapDeploymentsToNetworkAddress = network => _ref3 => {\n  let {\n    deployments = {},\n    accounts = {}\n  } = _ref3;\n  const networkDeployment = deployments?.[network];\n  if (!networkDeployment) return {};\n  return Object.entries(networkDeployment).reduce((c, _ref4) => {\n    let [key, value] = _ref4;\n    // Resolve account address\n    const accountAddress = accounts[key]?.address;\n    if (!accountAddress) return c;\n\n    // Create an object assigning the address to the contract name.\n    return value.reduce((c, contract) => {\n      return {\n        ...c,\n        [contract]: accountAddress\n      };\n    }, {});\n  }, {});\n};\n\n/**\n * @description Take in flow.json files and return contract to address mapping by network\n * @param jsons - Flow JSON or array of Flow JSONs\n * @param network - Network to gather addresses for\n * @returns Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst getContracts = (jsons, network) => {\n  return pipe(mergeFlowJSONs, mergePipe(mapDeploymentsToNetworkAddress(network), pipe(filterContracts, mapContractAliasesToNetworkAddress(network)), pipe(filterDependencies, mapDependencyAliasesToNetworkAddress(network))))(jsons);\n};\n\n/**\n * @description Checks if string is hexidecimal\n * @param str - String to check\n * @returns Is hexidecimal status\n */\nconst isHexidecimal = str => {\n  // Check that it is a string\n  if (typeof str !== \"string\") return false;\n  return /^[0-9A-Fa-f]+$/.test(str);\n};\n\n/**\n * @description Checks flow.json file for private keys\n * @param flowJSON - Flow JSON\n * @returns Has private keys status\n */\nconst hasPrivateKeys = flowJSON => {\n  return Object.entries(flowJSON?.accounts ?? []).reduce((hasPrivateKey, _ref5) => {\n    let [, value] = _ref5;\n    if (hasPrivateKey) return true;\n    return value && Object.prototype.hasOwnProperty.call(value, \"key\") && isHexidecimal(value?.key);\n  }, false);\n};\n\n/**\n * @description Take in flow.json or array of flow.json files and checks for private keys\n * @param value - Flow JSON or array of Flow JSONs\n * @returns Has private keys status\n */\nconst anyHasPrivateKeys = value => {\n  if (Array.isArray(value)) return value.some(hasPrivateKeys);\n  return hasPrivateKeys(value);\n};\n\n/**\n * @description Format network to always be 'emulator', 'testnet', 'previewnet' or 'mainnet'\n * @param network - Network to format\n * @returns Formatted network name (either 'emulator', 'testnet', 'previewnet' or 'mainnet')\n */\nconst cleanNetwork = network => {\n  const cleanedNetwork = network?.toLowerCase() === \"local\" ? \"emulator\" : network?.toLowerCase();\n  if (cleanedNetwork === \"emulator\" || cleanedNetwork === \"testnet\" || cleanedNetwork === \"mainnet\" || cleanedNetwork === \"previewnet\") return cleanedNetwork;\n  throw new Error(`Invalid network \"${network}\". Must be one of \"emulator\", \"local\", \"testnet\", or \"mainnet\"`);\n};\n\n// Inject config into logger to break circular dependency\n_onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.setConfig(config);\nconst NAME = \"config\";\nconst PUT = \"PUT_CONFIG\";\nconst GET = \"GET_CONFIG\";\nconst GET_ALL = \"GET_ALL_CONFIG\";\nconst UPDATE = \"UPDATE_CONFIG\";\nconst DELETE = \"DELETE_CONFIG\";\nconst CLEAR = \"CLEAR_CONFIG\";\nconst WHERE = \"WHERE_CONFIG\";\nconst UPDATED = \"CONFIG/UPDATED\";\nconst identity = v => v;\nconst HANDLERS = {\n  [PUT]: (ctx, _letter, _ref) => {\n    let {\n      key,\n      value\n    } = _ref;\n    if (key == null) throw new Error(\"Missing 'key' for config/put.\");\n    ctx.put(key, value);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [GET]: (ctx, letter, _ref2) => {\n    let {\n      key,\n      fallback\n    } = _ref2;\n    if (key == null) throw new Error(\"Missing 'key' for config/get\");\n    letter.reply(ctx.get(key, fallback));\n  },\n  [GET_ALL]: (ctx, letter) => {\n    letter.reply({\n      ...ctx.all()\n    });\n  },\n  [UPDATE]: (ctx, letter, _ref3) => {\n    let {\n      key,\n      fn\n    } = _ref3;\n    if (key == null) throw new Error(\"Missing 'key' for config/update\");\n    ctx.update(key, fn || identity);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [DELETE]: (ctx, letter, _ref4) => {\n    let {\n      key\n    } = _ref4;\n    if (key == null) throw new Error(\"Missing 'key' for config/delete\");\n    ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [CLEAR]: ctx => {\n    const keys = Object.keys(ctx.all());\n    for (const key of keys) ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [WHERE]: (ctx, letter, _ref5) => {\n    let {\n      pattern\n    } = _ref5;\n    if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\");\n    letter.reply(ctx.where(pattern));\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n  }\n};\n(0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.spawn)(HANDLERS, NAME);\n\n/**\n * @description Adds a key-value pair to the config\n * @param key - The key to add\n * @param value - The value to add\n * @returns The config object\n */\nfunction put(key, value) {\n  (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, PUT, {\n    key,\n    value\n  });\n  return config();\n}\n\n/**\n * @description Gets a key-value pair with a fallback from the config\n * @param key - The key to add\n * @param fallback - The fallback value to return if key is not found\n * @returns The value found at key or fallback\n */\nfunction get(key, fallback) {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, GET, {\n    key,\n    fallback\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Returns the first non null config value or the fallback\n * @param wants - The keys to search for\n * @param fallback - The fallback value to return if key is not found\n * @returns The value found at key or fallback\n */\nasync function first() {\n  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let fallback = arguments.length > 1 ? arguments[1] : undefined;\n  if (!wants.length) return fallback;\n  const [head, ...rest] = wants;\n  const ret = await get(head);\n  if (ret == null) return first(rest, fallback);\n  return ret;\n}\n\n/**\n * @description Returns the current config\n * @returns The config object\n */\nfunction all() {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, GET_ALL, null, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Updates a key-value pair in the config\n * @param key - The key to update\n * @param fn - The function to update the value with\n * @returns The config object\n */\nfunction update(key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;\n  (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, UPDATE, {\n    key,\n    fn\n  });\n  return config();\n}\n\n/**\n * @description Deletes a key-value pair from the config\n * @param key - The key to delete\n * @returns The config object\n */\nfunction _delete(key) {\n  (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, DELETE, {\n    key\n  });\n  return config();\n}\n\n/**\n * @description Returns a subset of the config based on a pattern\n * @param pattern - The pattern to match keys against\n * @returns The subset of the config\n */\nfunction where(pattern) {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, WHERE, {\n    pattern\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Subscribes to config updates\n * @param callback - The callback to call when config is updated\n * @returns The unsubscribe function\n */\nfunction subscribe(callback) {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.subscriber)(NAME, () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.spawn)(HANDLERS, NAME), callback);\n}\n\n/**\n * @description Clears the config\n */\nasync function clearConfig() {\n  await (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, CLEAR);\n}\n\n/**\n * @description Resets the config to a previous state\n * @param oldConfig - The previous config state\n * @returns The config object\n */\nasync function resetConfig(oldConfig) {\n  return clearConfig().then(() => config(oldConfig));\n}\n\n/**\n * @description Takes in flow.json or array of flow.json files and creates contract placeholders\n * @param data - The data to load\n * @param data.flowJSON - The flow.json or array of flow.json files\n * @param options - override flag\n * @param options.ignoreConflicts - ignore conflicts and override config\n */\nasync function load(data) {\n  let {\n    ignoreConflicts = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const network = await get(\"flow.network\");\n  const cleanedNetwork = cleanNetwork(network);\n  const {\n    flowJSON\n  } = data;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Boolean(flowJSON), \"config.load -- 'flowJSON' must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define \"flow.network\" to \"emulator\", \"local\", \"testnet\", or \"mainnet\" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);\n  if (anyHasPrivateKeys(flowJSON)) {\n    const isEmulator = cleanedNetwork === \"emulator\";\n    _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.log({\n      title: \"Private Keys Detected\",\n      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,\n      level: isEmulator ? _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.warn : _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.error\n    });\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isEmulator, `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`);\n  }\n  for (const [key, value] of Object.entries(getContracts(flowJSON, cleanedNetwork))) {\n    const contractConfigKey = `0x${key}`;\n    const existingContractConfigKey = await get(contractConfigKey);\n    if (existingContractConfigKey && existingContractConfigKey !== value && !ignoreConflicts) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.warn\n      });\n    } else {\n      put(contractConfigKey, value);\n    }\n    const systemContractConfigKey = `system.contracts.${key}`;\n    const systemExistingContractConfigKeyValue = await get(systemContractConfigKey);\n    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value && !ignoreConflicts) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.warn\n      });\n    } else {\n      put(systemContractConfigKey, value);\n    }\n  }\n}\n\n/**\n * @description Sets the config\n * @param values - The values to set\n * @returns The config object\n */\nfunction config(values) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(d => put(d, values[d]));\n  }\n  return {\n    put,\n    get,\n    all,\n    first,\n    update,\n    delete: _delete,\n    where,\n    subscribe,\n    overload,\n    load\n  };\n}\nconfig.put = put;\nconfig.get = get;\nconfig.all = all;\nconfig.first = first;\nconfig.update = update;\nconfig.delete = _delete;\nconfig.where = where;\nconfig.subscribe = subscribe;\nconfig.overload = overload;\nconfig.load = load;\n\n/**\n * @description Temporarily overloads the config with the given values and calls the callback\n * @param values - The values to overload the config with\n * @param callback - The callback to call with the overloaded config\n * @returns The result of the callback\n */\nasync function overload(values, callback) {\n  const oldConfig = await all();\n  try {\n    config(values);\n    const result = await callback(await all());\n    return result;\n  } finally {\n    await resetConfig(oldConfig);\n  }\n}\n\n\n//# sourceMappingURL=config.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy9jb25maWcvZGlzdC9jb25maWcubW9kdWxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRjtBQUN2QztBQUNLOztBQUVuRDtBQUNBLHVFQUF1RSxhQUFhO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsZUFBZTtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxJQUFJO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnR0FBZ0csZUFBZTtBQUMvRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7O0FBRW5FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsSUFBSTtBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLElBQUk7QUFDUDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxJQUFJO0FBQ1QsR0FBRyxJQUFJO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5Qzs7QUFFQTtBQUNBLDBEQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSCxHQUFHLHlEQUFTO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxHQUFHLDJEQUFXO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EseURBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLHdEQUFJO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx3REFBSTtBQUNiO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsd0RBQUk7QUFDYjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLHdEQUFJO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsd0RBQUk7QUFDTjtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsd0RBQUk7QUFDYjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsOERBQVUsYUFBYSx5REFBSztBQUNyQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0RBQUk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUUsaUVBQVM7QUFDWCxFQUFFLGlFQUFTO0FBQ1g7QUFDQTtBQUNBLElBQUksb0RBQVU7QUFDZDtBQUNBO0FBQ0EsMEJBQTBCLHVEQUFhLFFBQVEsdURBQWE7QUFDNUQsS0FBSztBQUNMLElBQUksaUVBQVM7QUFDYjtBQUNBO0FBQ0EsbUNBQW1DLElBQUk7QUFDdkM7QUFDQTtBQUNBLE1BQU0sb0RBQVU7QUFDaEI7QUFDQTtBQUNBLGVBQWUsdURBQWE7QUFDNUIsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0Esd0RBQXdELElBQUk7QUFDNUQ7QUFDQTtBQUNBLE1BQU0sb0RBQVU7QUFDaEI7QUFDQTtBQUNBLGVBQWUsdURBQWE7QUFDNUIsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRTZDO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvY29uZmlnL2Rpc3QvY29uZmlnLm1vZHVsZS5qcz9iZGZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNwYXduLCBVTlNVQlNDUklCRSwgU1VCU0NSSUJFLCBzZW5kLCBzdWJzY3JpYmVyIH0gZnJvbSAnQG9uZmxvdy91dGlsLWFjdG9yJztcbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdAb25mbG93L3V0aWwtbG9nZ2VyJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0BvbmZsb3cvdXRpbC1pbnZhcmlhbnQnO1xuXG5jb25zdCBwaXBlID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cbiAgcmV0dXJuIHYgPT4ge1xuICAgIHJldHVybiBmdW5jcy5yZWR1Y2UoKHJlcywgZnVuYykgPT4ge1xuICAgICAgcmV0dXJuIGZ1bmMocmVzKTtcbiAgICB9LCB2KTtcbiAgfTtcbn07XG5cbi8qKipcbiAqIE1lcmdlIG11bHRpcGxlIGZ1bmN0aW9ucyByZXR1cm5pbmcgb2JqZWN0cyBpbnRvIG9uZSBvYmplY3QuXG4gKiBAcGFyYW0gZnVuY3MgLSBGdW5jdGlvbnMgdG8gbWVyZ2VcbiAqIEByZXR1cm4gTWVyZ2VkIG9iamVjdFxuICovXG5jb25zdCBtZXJnZVBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBmdW5jc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG4gIHJldHVybiB2ID0+IHtcbiAgICByZXR1cm4gZnVuY3MucmVkdWNlKChyZXMsIGZ1bmMpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnJlcyxcbiAgICAgICAgLi4uZnVuYyh2KVxuICAgICAgfTtcbiAgICB9LCB7fSk7XG4gIH07XG59O1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBPYmplY3QgY2hlY2tcbiAqIEBwYXJhbSB2YWx1ZSAtIFZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyBJcyBvYmplY3Qgc3RhdHVzXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gdmFsdWUgPT4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHZhbHVlKTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gRGVlcCBtZXJnZSBtdWx0aXBsZSBvYmplY3RzLlxuICogQHBhcmFtIHRhcmdldCAtIFRhcmdldCBvYmplY3RcbiAqIEBwYXJhbSBzb3VyY2VzIC0gU291cmNlIG9iamVjdHNcbiAqIEByZXR1cm5zIE1lcmdlZCBvYmplY3RcbiAqL1xuY29uc3QgbWVyZ2VEZWVwID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHNvdXJjZXMgPSBuZXcgQXJyYXkoX2xlbjMgPiAxID8gX2xlbjMgLSAxIDogMCksIF9rZXkzID0gMTsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIHNvdXJjZXNbX2tleTMgLSAxXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cbiAgaWYgKCFzb3VyY2VzLmxlbmd0aCkgcmV0dXJuIHRhcmdldDtcbiAgY29uc3Qgc291cmNlID0gc291cmNlcy5zaGlmdCgpO1xuICBpZiAoaXNPYmplY3QodGFyZ2V0KSAmJiBpc09iamVjdChzb3VyY2UpKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoc291cmNlW2tleV0pKSB7XG4gICAgICAgIGlmICghdGFyZ2V0W2tleV0pIE9iamVjdC5hc3NpZ24odGFyZ2V0LCB7XG4gICAgICAgICAgW2tleV06IHt9XG4gICAgICAgIH0pO1xuICAgICAgICBtZXJnZURlZXAodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGFyZ2V0LCB7XG4gICAgICAgICAgW2tleV06IHNvdXJjZVtrZXldXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbWVyZ2VEZWVwKHRhcmdldCwgLi4uc291cmNlcyk7XG59O1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBEZWVwIG1lcmdlIG11bHRpcGxlIEZsb3cgSlNPTi5cbiAqIEBwYXJhbSB2YWx1ZSAtIEZsb3cgSlNPTiBvciBhcnJheSBvZiBGbG93IEpTT05zXG4gKiBAcmV0dXJucyBNZXJnZWQgRmxvdyBKU09OXG4gKi9cbmNvbnN0IG1lcmdlRmxvd0pTT05zID0gdmFsdWUgPT4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBtZXJnZURlZXAoe30sIC4uLnZhbHVlKSA6IHZhbHVlO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBGaWx0ZXIgb3V0IGNvbnRyYWN0cyBzZWN0aW9uIG9mIGZsb3cuanNvbi5cbiAqIEBwYXJhbSBvYmogLSBGbG93IEpTT05cbiAqIEByZXR1cm5zIENvbnRyYWN0cyBzZWN0aW9uIG9mIEZsb3cgSlNPTlxuICovXG5jb25zdCBmaWx0ZXJDb250cmFjdHMgPSBvYmogPT4gb2JqLmNvbnRyYWN0cyA/IG9iai5jb250cmFjdHMgOiB7fTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gRmlsdGVyIG91dCBkZXBlbmRlbmNpZXMgc2VjdGlvbiBvZiBmbG93Lmpzb24uXG4gKiBAcGFyYW0gb2JqIC0gRmxvdyBKU09OXG4gKiBAcmV0dXJucyBEZXBlbmRlbmNpZXMgc2VjdGlvbiBvZiBGbG93IEpTT05cbiAqL1xuY29uc3QgZmlsdGVyRGVwZW5kZW5jaWVzID0gb2JqID0+IG9iai5kZXBlbmRlbmNpZXMgPyBvYmouZGVwZW5kZW5jaWVzIDoge307XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIEdhdGhlcnMgY29udHJhY3QgYWRkcmVzc2VzIGJ5IG5ldHdvcmtcbiAqIEBwYXJhbSBuZXR3b3JrIC0gTmV0d29yayB0byBnYXRoZXIgYWRkcmVzc2VzIGZvclxuICogQHJldHVybnMgQ29udHJhY3QgbmFtZXMgYnkgYWRkcmVzc2VzIG1hcHBpbmcgZS5nIHsgXCJIZWxsb1dvcmxkXCI6IFwiMHgxMjNcIiB9XG4gKi9cbmNvbnN0IG1hcENvbnRyYWN0QWxpYXNlc1RvTmV0d29ya0FkZHJlc3MgPSBuZXR3b3JrID0+IGNvbnRyYWN0cyA9PiB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhjb250cmFjdHMpLnJlZHVjZSgoYywgX3JlZikgPT4ge1xuICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmO1xuICAgIGNvbnN0IG5ldHdvcmtDb250cmFjdEFsaWFzID0gdmFsdWU/LmFsaWFzZXM/LltuZXR3b3JrXTtcbiAgICBpZiAobmV0d29ya0NvbnRyYWN0QWxpYXMpIHtcbiAgICAgIGNba2V5XSA9IG5ldHdvcmtDb250cmFjdEFsaWFzO1xuICAgIH1cbiAgICByZXR1cm4gYztcbiAgfSwge30pO1xufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gR2F0aGVycyBkZXBlbmRlbmN5IGFkZHJlc3NlcyBieSBuZXR3b3JrXG4gKiBAcGFyYW0gbmV0d29yayAtIE5ldHdvcmsgdG8gZ2F0aGVyIGFkZHJlc3NlcyBmb3JcbiAqIEByZXR1cm5zIERlcGVuZGVuY3kgbmFtZXMgYnkgYWRkcmVzc2VzIG1hcHBpbmcgZS5nIHsgXCJIZWxsb1dvcmxkXCI6IFwiMHgxMjNcIiB9XG4gKi9cbmNvbnN0IG1hcERlcGVuZGVuY3lBbGlhc2VzVG9OZXR3b3JrQWRkcmVzcyA9IG5ldHdvcmsgPT4gZGVwZW5kZW5jaWVzID0+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGRlcGVuZGVuY2llcykucmVkdWNlKChjLCBfcmVmMikgPT4ge1xuICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmMjtcbiAgICBjb25zdCBuZXR3b3JrRGVwZW5kZW5jeUFsaWFzID0gdmFsdWU/LmFsaWFzZXM/LltuZXR3b3JrXTtcbiAgICBpZiAobmV0d29ya0RlcGVuZGVuY3lBbGlhcykge1xuICAgICAgY1trZXldID0gbmV0d29ya0RlcGVuZGVuY3lBbGlhcztcbiAgICB9XG4gICAgcmV0dXJuIGM7XG4gIH0sIHt9KTtcbn07XG5jb25zdCBtYXBEZXBsb3ltZW50c1RvTmV0d29ya0FkZHJlc3MgPSBuZXR3b3JrID0+IF9yZWYzID0+IHtcbiAgbGV0IHtcbiAgICBkZXBsb3ltZW50cyA9IHt9LFxuICAgIGFjY291bnRzID0ge31cbiAgfSA9IF9yZWYzO1xuICBjb25zdCBuZXR3b3JrRGVwbG95bWVudCA9IGRlcGxveW1lbnRzPy5bbmV0d29ya107XG4gIGlmICghbmV0d29ya0RlcGxveW1lbnQpIHJldHVybiB7fTtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG5ldHdvcmtEZXBsb3ltZW50KS5yZWR1Y2UoKGMsIF9yZWY0KSA9PiB7XG4gICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWY0O1xuICAgIC8vIFJlc29sdmUgYWNjb3VudCBhZGRyZXNzXG4gICAgY29uc3QgYWNjb3VudEFkZHJlc3MgPSBhY2NvdW50c1trZXldPy5hZGRyZXNzO1xuICAgIGlmICghYWNjb3VudEFkZHJlc3MpIHJldHVybiBjO1xuXG4gICAgLy8gQ3JlYXRlIGFuIG9iamVjdCBhc3NpZ25pbmcgdGhlIGFkZHJlc3MgdG8gdGhlIGNvbnRyYWN0IG5hbWUuXG4gICAgcmV0dXJuIHZhbHVlLnJlZHVjZSgoYywgY29udHJhY3QpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmMsXG4gICAgICAgIFtjb250cmFjdF06IGFjY291bnRBZGRyZXNzXG4gICAgICB9O1xuICAgIH0sIHt9KTtcbiAgfSwge30pO1xufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gVGFrZSBpbiBmbG93Lmpzb24gZmlsZXMgYW5kIHJldHVybiBjb250cmFjdCB0byBhZGRyZXNzIG1hcHBpbmcgYnkgbmV0d29ya1xuICogQHBhcmFtIGpzb25zIC0gRmxvdyBKU09OIG9yIGFycmF5IG9mIEZsb3cgSlNPTnNcbiAqIEBwYXJhbSBuZXR3b3JrIC0gTmV0d29yayB0byBnYXRoZXIgYWRkcmVzc2VzIGZvclxuICogQHJldHVybnMgQ29udHJhY3QgbmFtZXMgYnkgYWRkcmVzc2VzIG1hcHBpbmcgZS5nIHsgXCJIZWxsb1dvcmxkXCI6IFwiMHgxMjNcIiB9XG4gKi9cbmNvbnN0IGdldENvbnRyYWN0cyA9IChqc29ucywgbmV0d29yaykgPT4ge1xuICByZXR1cm4gcGlwZShtZXJnZUZsb3dKU09OcywgbWVyZ2VQaXBlKG1hcERlcGxveW1lbnRzVG9OZXR3b3JrQWRkcmVzcyhuZXR3b3JrKSwgcGlwZShmaWx0ZXJDb250cmFjdHMsIG1hcENvbnRyYWN0QWxpYXNlc1RvTmV0d29ya0FkZHJlc3MobmV0d29yaykpLCBwaXBlKGZpbHRlckRlcGVuZGVuY2llcywgbWFwRGVwZW5kZW5jeUFsaWFzZXNUb05ldHdvcmtBZGRyZXNzKG5ldHdvcmspKSkpKGpzb25zKTtcbn07XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIENoZWNrcyBpZiBzdHJpbmcgaXMgaGV4aWRlY2ltYWxcbiAqIEBwYXJhbSBzdHIgLSBTdHJpbmcgdG8gY2hlY2tcbiAqIEByZXR1cm5zIElzIGhleGlkZWNpbWFsIHN0YXR1c1xuICovXG5jb25zdCBpc0hleGlkZWNpbWFsID0gc3RyID0+IHtcbiAgLy8gQ2hlY2sgdGhhdCBpdCBpcyBhIHN0cmluZ1xuICBpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gL15bMC05QS1GYS1mXSskLy50ZXN0KHN0cik7XG59O1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBDaGVja3MgZmxvdy5qc29uIGZpbGUgZm9yIHByaXZhdGUga2V5c1xuICogQHBhcmFtIGZsb3dKU09OIC0gRmxvdyBKU09OXG4gKiBAcmV0dXJucyBIYXMgcHJpdmF0ZSBrZXlzIHN0YXR1c1xuICovXG5jb25zdCBoYXNQcml2YXRlS2V5cyA9IGZsb3dKU09OID0+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGZsb3dKU09OPy5hY2NvdW50cyA/PyBbXSkucmVkdWNlKChoYXNQcml2YXRlS2V5LCBfcmVmNSkgPT4ge1xuICAgIGxldCBbLCB2YWx1ZV0gPSBfcmVmNTtcbiAgICBpZiAoaGFzUHJpdmF0ZUtleSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIHZhbHVlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgXCJrZXlcIikgJiYgaXNIZXhpZGVjaW1hbCh2YWx1ZT8ua2V5KTtcbiAgfSwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gVGFrZSBpbiBmbG93Lmpzb24gb3IgYXJyYXkgb2YgZmxvdy5qc29uIGZpbGVzIGFuZCBjaGVja3MgZm9yIHByaXZhdGUga2V5c1xuICogQHBhcmFtIHZhbHVlIC0gRmxvdyBKU09OIG9yIGFycmF5IG9mIEZsb3cgSlNPTnNcbiAqIEByZXR1cm5zIEhhcyBwcml2YXRlIGtleXMgc3RhdHVzXG4gKi9cbmNvbnN0IGFueUhhc1ByaXZhdGVLZXlzID0gdmFsdWUgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZS5zb21lKGhhc1ByaXZhdGVLZXlzKTtcbiAgcmV0dXJuIGhhc1ByaXZhdGVLZXlzKHZhbHVlKTtcbn07XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIEZvcm1hdCBuZXR3b3JrIHRvIGFsd2F5cyBiZSAnZW11bGF0b3InLCAndGVzdG5ldCcsICdwcmV2aWV3bmV0JyBvciAnbWFpbm5ldCdcbiAqIEBwYXJhbSBuZXR3b3JrIC0gTmV0d29yayB0byBmb3JtYXRcbiAqIEByZXR1cm5zIEZvcm1hdHRlZCBuZXR3b3JrIG5hbWUgKGVpdGhlciAnZW11bGF0b3InLCAndGVzdG5ldCcsICdwcmV2aWV3bmV0JyBvciAnbWFpbm5ldCcpXG4gKi9cbmNvbnN0IGNsZWFuTmV0d29yayA9IG5ldHdvcmsgPT4ge1xuICBjb25zdCBjbGVhbmVkTmV0d29yayA9IG5ldHdvcms/LnRvTG93ZXJDYXNlKCkgPT09IFwibG9jYWxcIiA/IFwiZW11bGF0b3JcIiA6IG5ldHdvcms/LnRvTG93ZXJDYXNlKCk7XG4gIGlmIChjbGVhbmVkTmV0d29yayA9PT0gXCJlbXVsYXRvclwiIHx8IGNsZWFuZWROZXR3b3JrID09PSBcInRlc3RuZXRcIiB8fCBjbGVhbmVkTmV0d29yayA9PT0gXCJtYWlubmV0XCIgfHwgY2xlYW5lZE5ldHdvcmsgPT09IFwicHJldmlld25ldFwiKSByZXR1cm4gY2xlYW5lZE5ldHdvcms7XG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBuZXR3b3JrIFwiJHtuZXR3b3JrfVwiLiBNdXN0IGJlIG9uZSBvZiBcImVtdWxhdG9yXCIsIFwibG9jYWxcIiwgXCJ0ZXN0bmV0XCIsIG9yIFwibWFpbm5ldFwiYCk7XG59O1xuXG4vLyBJbmplY3QgY29uZmlnIGludG8gbG9nZ2VyIHRvIGJyZWFrIGNpcmN1bGFyIGRlcGVuZGVuY3lcbmxvZ2dlci5zZXRDb25maWcoY29uZmlnKTtcbmNvbnN0IE5BTUUgPSBcImNvbmZpZ1wiO1xuY29uc3QgUFVUID0gXCJQVVRfQ09ORklHXCI7XG5jb25zdCBHRVQgPSBcIkdFVF9DT05GSUdcIjtcbmNvbnN0IEdFVF9BTEwgPSBcIkdFVF9BTExfQ09ORklHXCI7XG5jb25zdCBVUERBVEUgPSBcIlVQREFURV9DT05GSUdcIjtcbmNvbnN0IERFTEVURSA9IFwiREVMRVRFX0NPTkZJR1wiO1xuY29uc3QgQ0xFQVIgPSBcIkNMRUFSX0NPTkZJR1wiO1xuY29uc3QgV0hFUkUgPSBcIldIRVJFX0NPTkZJR1wiO1xuY29uc3QgVVBEQVRFRCA9IFwiQ09ORklHL1VQREFURURcIjtcbmNvbnN0IGlkZW50aXR5ID0gdiA9PiB2O1xuY29uc3QgSEFORExFUlMgPSB7XG4gIFtQVVRdOiAoY3R4LCBfbGV0dGVyLCBfcmVmKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGtleSxcbiAgICAgIHZhbHVlXG4gICAgfSA9IF9yZWY7XG4gICAgaWYgKGtleSA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nICdrZXknIGZvciBjb25maWcvcHV0LlwiKTtcbiAgICBjdHgucHV0KGtleSwgdmFsdWUpO1xuICAgIGN0eC5icm9hZGNhc3QoVVBEQVRFRCwge1xuICAgICAgLi4uY3R4LmFsbCgpXG4gICAgfSk7XG4gIH0sXG4gIFtHRVRdOiAoY3R4LCBsZXR0ZXIsIF9yZWYyKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGtleSxcbiAgICAgIGZhbGxiYWNrXG4gICAgfSA9IF9yZWYyO1xuICAgIGlmIChrZXkgPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyAna2V5JyBmb3IgY29uZmlnL2dldFwiKTtcbiAgICBsZXR0ZXIucmVwbHkoY3R4LmdldChrZXksIGZhbGxiYWNrKSk7XG4gIH0sXG4gIFtHRVRfQUxMXTogKGN0eCwgbGV0dGVyKSA9PiB7XG4gICAgbGV0dGVyLnJlcGx5KHtcbiAgICAgIC4uLmN0eC5hbGwoKVxuICAgIH0pO1xuICB9LFxuICBbVVBEQVRFXTogKGN0eCwgbGV0dGVyLCBfcmVmMykgPT4ge1xuICAgIGxldCB7XG4gICAgICBrZXksXG4gICAgICBmblxuICAgIH0gPSBfcmVmMztcbiAgICBpZiAoa2V5ID09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgJ2tleScgZm9yIGNvbmZpZy91cGRhdGVcIik7XG4gICAgY3R4LnVwZGF0ZShrZXksIGZuIHx8IGlkZW50aXR5KTtcbiAgICBjdHguYnJvYWRjYXN0KFVQREFURUQsIHtcbiAgICAgIC4uLmN0eC5hbGwoKVxuICAgIH0pO1xuICB9LFxuICBbREVMRVRFXTogKGN0eCwgbGV0dGVyLCBfcmVmNCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBrZXlcbiAgICB9ID0gX3JlZjQ7XG4gICAgaWYgKGtleSA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nICdrZXknIGZvciBjb25maWcvZGVsZXRlXCIpO1xuICAgIGN0eC5kZWxldGUoa2V5KTtcbiAgICBjdHguYnJvYWRjYXN0KFVQREFURUQsIHtcbiAgICAgIC4uLmN0eC5hbGwoKVxuICAgIH0pO1xuICB9LFxuICBbQ0xFQVJdOiBjdHggPT4ge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjdHguYWxsKCkpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIGN0eC5kZWxldGUoa2V5KTtcbiAgICBjdHguYnJvYWRjYXN0KFVQREFURUQsIHtcbiAgICAgIC4uLmN0eC5hbGwoKVxuICAgIH0pO1xuICB9LFxuICBbV0hFUkVdOiAoY3R4LCBsZXR0ZXIsIF9yZWY1KSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIHBhdHRlcm5cbiAgICB9ID0gX3JlZjU7XG4gICAgaWYgKHBhdHRlcm4gPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyAncGF0dGVybicgZm9yIGNvbmZpZy93aGVyZVwiKTtcbiAgICBsZXR0ZXIucmVwbHkoY3R4LndoZXJlKHBhdHRlcm4pKTtcbiAgfSxcbiAgW1NVQlNDUklCRV06IChjdHgsIGxldHRlcikgPT4ge1xuICAgIGN0eC5zdWJzY3JpYmUobGV0dGVyLmZyb20pO1xuICAgIGN0eC5zZW5kKGxldHRlci5mcm9tLCBVUERBVEVELCB7XG4gICAgICAuLi5jdHguYWxsKClcbiAgICB9KTtcbiAgfSxcbiAgW1VOU1VCU0NSSUJFXTogKGN0eCwgbGV0dGVyKSA9PiB7XG4gICAgY3R4LnVuc3Vic2NyaWJlKGxldHRlci5mcm9tKTtcbiAgfVxufTtcbnNwYXduKEhBTkRMRVJTLCBOQU1FKTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gQWRkcyBhIGtleS12YWx1ZSBwYWlyIHRvIHRoZSBjb25maWdcbiAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIGFkZFxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGFkZFxuICogQHJldHVybnMgVGhlIGNvbmZpZyBvYmplY3RcbiAqL1xuZnVuY3Rpb24gcHV0KGtleSwgdmFsdWUpIHtcbiAgc2VuZChOQU1FLCBQVVQsIHtcbiAgICBrZXksXG4gICAgdmFsdWVcbiAgfSk7XG4gIHJldHVybiBjb25maWcoKTtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gR2V0cyBhIGtleS12YWx1ZSBwYWlyIHdpdGggYSBmYWxsYmFjayBmcm9tIHRoZSBjb25maWdcbiAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIGFkZFxuICogQHBhcmFtIGZhbGxiYWNrIC0gVGhlIGZhbGxiYWNrIHZhbHVlIHRvIHJldHVybiBpZiBrZXkgaXMgbm90IGZvdW5kXG4gKiBAcmV0dXJucyBUaGUgdmFsdWUgZm91bmQgYXQga2V5IG9yIGZhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIGdldChrZXksIGZhbGxiYWNrKSB7XG4gIHJldHVybiBzZW5kKE5BTUUsIEdFVCwge1xuICAgIGtleSxcbiAgICBmYWxsYmFja1xuICB9LCB7XG4gICAgZXhwZWN0UmVwbHk6IHRydWUsXG4gICAgdGltZW91dDogMTBcbiAgfSk7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIGZpcnN0IG5vbiBudWxsIGNvbmZpZyB2YWx1ZSBvciB0aGUgZmFsbGJhY2tcbiAqIEBwYXJhbSB3YW50cyAtIFRoZSBrZXlzIHRvIHNlYXJjaCBmb3JcbiAqIEBwYXJhbSBmYWxsYmFjayAtIFRoZSBmYWxsYmFjayB2YWx1ZSB0byByZXR1cm4gaWYga2V5IGlzIG5vdCBmb3VuZFxuICogQHJldHVybnMgVGhlIHZhbHVlIGZvdW5kIGF0IGtleSBvciBmYWxsYmFja1xuICovXG5hc3luYyBmdW5jdGlvbiBmaXJzdCgpIHtcbiAgbGV0IHdhbnRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgbGV0IGZhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIGlmICghd2FudHMubGVuZ3RoKSByZXR1cm4gZmFsbGJhY2s7XG4gIGNvbnN0IFtoZWFkLCAuLi5yZXN0XSA9IHdhbnRzO1xuICBjb25zdCByZXQgPSBhd2FpdCBnZXQoaGVhZCk7XG4gIGlmIChyZXQgPT0gbnVsbCkgcmV0dXJuIGZpcnN0KHJlc3QsIGZhbGxiYWNrKTtcbiAgcmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0aGUgY3VycmVudCBjb25maWdcbiAqIEByZXR1cm5zIFRoZSBjb25maWcgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFsbCgpIHtcbiAgcmV0dXJuIHNlbmQoTkFNRSwgR0VUX0FMTCwgbnVsbCwge1xuICAgIGV4cGVjdFJlcGx5OiB0cnVlLFxuICAgIHRpbWVvdXQ6IDEwXG4gIH0pO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBVcGRhdGVzIGEga2V5LXZhbHVlIHBhaXIgaW4gdGhlIGNvbmZpZ1xuICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gdXBkYXRlXG4gKiBAcGFyYW0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gdXBkYXRlIHRoZSB2YWx1ZSB3aXRoXG4gKiBAcmV0dXJucyBUaGUgY29uZmlnIG9iamVjdFxuICovXG5mdW5jdGlvbiB1cGRhdGUoa2V5KSB7XG4gIGxldCBmbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogaWRlbnRpdHk7XG4gIHNlbmQoTkFNRSwgVVBEQVRFLCB7XG4gICAga2V5LFxuICAgIGZuXG4gIH0pO1xuICByZXR1cm4gY29uZmlnKCk7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIERlbGV0ZXMgYSBrZXktdmFsdWUgcGFpciBmcm9tIHRoZSBjb25maWdcbiAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIGRlbGV0ZVxuICogQHJldHVybnMgVGhlIGNvbmZpZyBvYmplY3RcbiAqL1xuZnVuY3Rpb24gX2RlbGV0ZShrZXkpIHtcbiAgc2VuZChOQU1FLCBERUxFVEUsIHtcbiAgICBrZXlcbiAgfSk7XG4gIHJldHVybiBjb25maWcoKTtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gUmV0dXJucyBhIHN1YnNldCBvZiB0aGUgY29uZmlnIGJhc2VkIG9uIGEgcGF0dGVyblxuICogQHBhcmFtIHBhdHRlcm4gLSBUaGUgcGF0dGVybiB0byBtYXRjaCBrZXlzIGFnYWluc3RcbiAqIEByZXR1cm5zIFRoZSBzdWJzZXQgb2YgdGhlIGNvbmZpZ1xuICovXG5mdW5jdGlvbiB3aGVyZShwYXR0ZXJuKSB7XG4gIHJldHVybiBzZW5kKE5BTUUsIFdIRVJFLCB7XG4gICAgcGF0dGVyblxuICB9LCB7XG4gICAgZXhwZWN0UmVwbHk6IHRydWUsXG4gICAgdGltZW91dDogMTBcbiAgfSk7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIFN1YnNjcmliZXMgdG8gY29uZmlnIHVwZGF0ZXNcbiAqIEBwYXJhbSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayB0byBjYWxsIHdoZW4gY29uZmlnIGlzIHVwZGF0ZWRcbiAqIEByZXR1cm5zIFRoZSB1bnN1YnNjcmliZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgcmV0dXJuIHN1YnNjcmliZXIoTkFNRSwgKCkgPT4gc3Bhd24oSEFORExFUlMsIE5BTUUpLCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIENsZWFycyB0aGUgY29uZmlnXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNsZWFyQ29uZmlnKCkge1xuICBhd2FpdCBzZW5kKE5BTUUsIENMRUFSKTtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gUmVzZXRzIHRoZSBjb25maWcgdG8gYSBwcmV2aW91cyBzdGF0ZVxuICogQHBhcmFtIG9sZENvbmZpZyAtIFRoZSBwcmV2aW91cyBjb25maWcgc3RhdGVcbiAqIEByZXR1cm5zIFRoZSBjb25maWcgb2JqZWN0XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHJlc2V0Q29uZmlnKG9sZENvbmZpZykge1xuICByZXR1cm4gY2xlYXJDb25maWcoKS50aGVuKCgpID0+IGNvbmZpZyhvbGRDb25maWcpKTtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gVGFrZXMgaW4gZmxvdy5qc29uIG9yIGFycmF5IG9mIGZsb3cuanNvbiBmaWxlcyBhbmQgY3JlYXRlcyBjb250cmFjdCBwbGFjZWhvbGRlcnNcbiAqIEBwYXJhbSBkYXRhIC0gVGhlIGRhdGEgdG8gbG9hZFxuICogQHBhcmFtIGRhdGEuZmxvd0pTT04gLSBUaGUgZmxvdy5qc29uIG9yIGFycmF5IG9mIGZsb3cuanNvbiBmaWxlc1xuICogQHBhcmFtIG9wdGlvbnMgLSBvdmVycmlkZSBmbGFnXG4gKiBAcGFyYW0gb3B0aW9ucy5pZ25vcmVDb25mbGljdHMgLSBpZ25vcmUgY29uZmxpY3RzIGFuZCBvdmVycmlkZSBjb25maWdcbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZChkYXRhKSB7XG4gIGxldCB7XG4gICAgaWdub3JlQ29uZmxpY3RzID0gZmFsc2VcbiAgfSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIGNvbnN0IG5ldHdvcmsgPSBhd2FpdCBnZXQoXCJmbG93Lm5ldHdvcmtcIik7XG4gIGNvbnN0IGNsZWFuZWROZXR3b3JrID0gY2xlYW5OZXR3b3JrKG5ldHdvcmspO1xuICBjb25zdCB7XG4gICAgZmxvd0pTT05cbiAgfSA9IGRhdGE7XG4gIGludmFyaWFudChCb29sZWFuKGZsb3dKU09OKSwgXCJjb25maWcubG9hZCAtLSAnZmxvd0pTT04nIG11c3QgYmUgZGVmaW5lZFwiKTtcbiAgaW52YXJpYW50KCEhY2xlYW5lZE5ldHdvcmssIGBGbG93IE5ldHdvcmsgUmVxdWlyZWQgLS0gSW4gb3JkZXIgZm9yIEZDTCB0byBsb2FkIHlvdXIgY29udHJhY3RzIHBsZWFzZSBkZWZpbmUgXCJmbG93Lm5ldHdvcmtcIiB0byBcImVtdWxhdG9yXCIsIFwibG9jYWxcIiwgXCJ0ZXN0bmV0XCIsIG9yIFwibWFpbm5ldFwiIGluIHlvdXIgY29uZmlnLiBTZWUgbW9yZSBoZXJlOiBodHRwczovL2RldmVsb3BlcnMuZmxvdy5jb20vdG9vbHMvZmNsLWpzL3JlZmVyZW5jZS9jb25maWd1cmUtZmNsYCk7XG4gIGlmIChhbnlIYXNQcml2YXRlS2V5cyhmbG93SlNPTikpIHtcbiAgICBjb25zdCBpc0VtdWxhdG9yID0gY2xlYW5lZE5ldHdvcmsgPT09IFwiZW11bGF0b3JcIjtcbiAgICBsb2dnZXIubG9nKHtcbiAgICAgIHRpdGxlOiBcIlByaXZhdGUgS2V5cyBEZXRlY3RlZFwiLFxuICAgICAgbWVzc2FnZTogYFByaXZhdGUga2V5cyBzaG91bGQgYmUgc3RvcmVkIGluIGEgc2VwYXJhdGUgZmxvdy5qc29uIGZpbGUgZm9yIHNlY3VyaXR5LiBTZWUgbW9yZSBoZXJlOiBodHRwczovL2RldmVsb3BlcnMuZmxvdy5jb20vdG9vbHMvZmxvdy1jbGkvc2VjdXJpdHlgLFxuICAgICAgbGV2ZWw6IGlzRW11bGF0b3IgPyBsb2dnZXIuTEVWRUxTLndhcm4gOiBsb2dnZXIuTEVWRUxTLmVycm9yXG4gICAgfSk7XG4gICAgaW52YXJpYW50KGlzRW11bGF0b3IsIGBQcml2YXRlIGtleXMgc2hvdWxkIGJlIHN0b3JlZCBpbiBhIHNlcGFyYXRlIGZsb3cuanNvbiBmaWxlIGZvciBzZWN1cml0eS4gU2VlIG1vcmUgaGVyZTogaHR0cHM6Ly9kZXZlbG9wZXJzLmZsb3cuY29tL3Rvb2xzL2Zsb3ctY2xpL3NlY3VyaXR5YCk7XG4gIH1cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZ2V0Q29udHJhY3RzKGZsb3dKU09OLCBjbGVhbmVkTmV0d29yaykpKSB7XG4gICAgY29uc3QgY29udHJhY3RDb25maWdLZXkgPSBgMHgke2tleX1gO1xuICAgIGNvbnN0IGV4aXN0aW5nQ29udHJhY3RDb25maWdLZXkgPSBhd2FpdCBnZXQoY29udHJhY3RDb25maWdLZXkpO1xuICAgIGlmIChleGlzdGluZ0NvbnRyYWN0Q29uZmlnS2V5ICYmIGV4aXN0aW5nQ29udHJhY3RDb25maWdLZXkgIT09IHZhbHVlICYmICFpZ25vcmVDb25mbGljdHMpIHtcbiAgICAgIGxvZ2dlci5sb2coe1xuICAgICAgICB0aXRsZTogXCJDb250cmFjdCBQbGFjZWhvbGRlciBDb25mbGljdCBEZXRlY3RlZFwiLFxuICAgICAgICBtZXNzYWdlOiBgQSBnZW5lcmF0ZWQgY29udHJhY3QgcGxhY2Vob2xkZXIgZnJvbSBjb25maWcubG9hZCBjb25mbGljdHMgd2l0aCBhIHBsYWNlaG9sZGVyIHlvdSd2ZSBzZXQgbWFudWFsbHkgaW4gY29uZmlnIGhhdmUgdGhlIHNhbWUgbmFtZS5gLFxuICAgICAgICBsZXZlbDogbG9nZ2VyLkxFVkVMUy53YXJuXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHV0KGNvbnRyYWN0Q29uZmlnS2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIGNvbnN0IHN5c3RlbUNvbnRyYWN0Q29uZmlnS2V5ID0gYHN5c3RlbS5jb250cmFjdHMuJHtrZXl9YDtcbiAgICBjb25zdCBzeXN0ZW1FeGlzdGluZ0NvbnRyYWN0Q29uZmlnS2V5VmFsdWUgPSBhd2FpdCBnZXQoc3lzdGVtQ29udHJhY3RDb25maWdLZXkpO1xuICAgIGlmIChzeXN0ZW1FeGlzdGluZ0NvbnRyYWN0Q29uZmlnS2V5VmFsdWUgJiYgc3lzdGVtRXhpc3RpbmdDb250cmFjdENvbmZpZ0tleVZhbHVlICE9PSB2YWx1ZSAmJiAhaWdub3JlQ29uZmxpY3RzKSB7XG4gICAgICBsb2dnZXIubG9nKHtcbiAgICAgICAgdGl0bGU6IFwiQ29udHJhY3QgUGxhY2Vob2xkZXIgQ29uZmxpY3QgRGV0ZWN0ZWRcIixcbiAgICAgICAgbWVzc2FnZTogYEEgZ2VuZXJhdGVkIGNvbnRyYWN0IHBsYWNlaG9sZGVyIGZyb20gY29uZmlnLmxvYWQgY29uZmxpY3RzIHdpdGggYSBwbGFjZWhvbGRlciB5b3UndmUgc2V0IG1hbnVhbGx5IGluIGNvbmZpZyBoYXZlIHRoZSBzYW1lIG5hbWUuYCxcbiAgICAgICAgbGV2ZWw6IGxvZ2dlci5MRVZFTFMud2FyblxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1dChzeXN0ZW1Db250cmFjdENvbmZpZ0tleSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBTZXRzIHRoZSBjb25maWdcbiAqIEBwYXJhbSB2YWx1ZXMgLSBUaGUgdmFsdWVzIHRvIHNldFxuICogQHJldHVybnMgVGhlIGNvbmZpZyBvYmplY3RcbiAqL1xuZnVuY3Rpb24gY29uZmlnKHZhbHVlcykge1xuICBpZiAodmFsdWVzICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlcyA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKHZhbHVlcykubWFwKGQgPT4gcHV0KGQsIHZhbHVlc1tkXSkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgcHV0LFxuICAgIGdldCxcbiAgICBhbGwsXG4gICAgZmlyc3QsXG4gICAgdXBkYXRlLFxuICAgIGRlbGV0ZTogX2RlbGV0ZSxcbiAgICB3aGVyZSxcbiAgICBzdWJzY3JpYmUsXG4gICAgb3ZlcmxvYWQsXG4gICAgbG9hZFxuICB9O1xufVxuY29uZmlnLnB1dCA9IHB1dDtcbmNvbmZpZy5nZXQgPSBnZXQ7XG5jb25maWcuYWxsID0gYWxsO1xuY29uZmlnLmZpcnN0ID0gZmlyc3Q7XG5jb25maWcudXBkYXRlID0gdXBkYXRlO1xuY29uZmlnLmRlbGV0ZSA9IF9kZWxldGU7XG5jb25maWcud2hlcmUgPSB3aGVyZTtcbmNvbmZpZy5zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG5jb25maWcub3ZlcmxvYWQgPSBvdmVybG9hZDtcbmNvbmZpZy5sb2FkID0gbG9hZDtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gVGVtcG9yYXJpbHkgb3ZlcmxvYWRzIHRoZSBjb25maWcgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzIGFuZCBjYWxscyB0aGUgY2FsbGJhY2tcbiAqIEBwYXJhbSB2YWx1ZXMgLSBUaGUgdmFsdWVzIHRvIG92ZXJsb2FkIHRoZSBjb25maWcgd2l0aFxuICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIHRvIGNhbGwgd2l0aCB0aGUgb3ZlcmxvYWRlZCBjb25maWdcbiAqIEByZXR1cm5zIFRoZSByZXN1bHQgb2YgdGhlIGNhbGxiYWNrXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIG92ZXJsb2FkKHZhbHVlcywgY2FsbGJhY2spIHtcbiAgY29uc3Qgb2xkQ29uZmlnID0gYXdhaXQgYWxsKCk7XG4gIHRyeSB7XG4gICAgY29uZmlnKHZhbHVlcyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbGJhY2soYXdhaXQgYWxsKCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgcmVzZXRDb25maWcob2xkQ29uZmlnKTtcbiAgfVxufVxuXG5leHBvcnQgeyBjbGVhckNvbmZpZywgY29uZmlnLCBnZXRDb250cmFjdHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/config/dist/config.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/fcl-core/dist/fcl-core.module.js":
/*!***************************************************************!*\
  !*** ./node_modules/@onflow/fcl-core/dist/fcl-core.module.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppUtils: () => (/* binding */ index$1),\n/* harmony export */   CORE_STRATEGIES: () => (/* binding */ CORE_STRATEGIES),\n/* harmony export */   FCL_REDIRECT_URL_PARAM_NAME: () => (/* binding */ FCL_REDIRECT_URL_PARAM_NAME),\n/* harmony export */   FCL_RESPONSE_PARAM_NAME: () => (/* binding */ FCL_RESPONSE_PARAM_NAME),\n/* harmony export */   FvmErrorCode: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.FvmErrorCode),\n/* harmony export */   HashAlgorithm: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.HashAlgorithm),\n/* harmony export */   InteractionResolverKind: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.InteractionResolverKind),\n/* harmony export */   InteractionStatus: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.InteractionStatus),\n/* harmony export */   InteractionTag: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.InteractionTag),\n/* harmony export */   InteractionTemplateUtils: () => (/* binding */ index),\n/* harmony export */   SignatureAlgorithm: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.SignatureAlgorithm),\n/* harmony export */   SubscriptionTopic: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.SubscriptionTopic),\n/* harmony export */   TestUtils: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.TestUtils),\n/* harmony export */   TransactionError: () => (/* binding */ TransactionError),\n/* harmony export */   TransactionExecutionStatus: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.TransactionExecutionStatus),\n/* harmony export */   TransactionRole: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.TransactionRole),\n/* harmony export */   URL: () => (/* binding */ URL$1),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   WalletUtils: () => (/* binding */ index$2),\n/* harmony export */   account: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.account),\n/* harmony export */   arg: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.arg),\n/* harmony export */   args: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.args),\n/* harmony export */   atBlockHeight: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.atBlockHeight),\n/* harmony export */   atBlockId: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.atBlockId),\n/* harmony export */   authorization: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.authorization),\n/* harmony export */   authorizations: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.authorizations),\n/* harmony export */   block: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block),\n/* harmony export */   build: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.build),\n/* harmony export */   buildMessageHandler: () => (/* binding */ buildMessageHandler),\n/* harmony export */   cadence: () => (/* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_13__.template),\n/* harmony export */   cdc: () => (/* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_13__.template),\n/* harmony export */   config: () => (/* reexport safe */ _onflow_config__WEBPACK_IMPORTED_MODULE_5__.config),\n/* harmony export */   createFlowClientCore: () => (/* binding */ createFlowClientCore),\n/* harmony export */   createSignableVoucher: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.createSignableVoucher),\n/* harmony export */   decode: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode),\n/* harmony export */   discovery: () => (/* binding */ discovery),\n/* harmony export */   display: () => (/* reexport safe */ _onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.display),\n/* harmony export */   events: () => (/* binding */ events),\n/* harmony export */   execStrategy: () => (/* binding */ execStrategy),\n/* harmony export */   flowEmulator: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.flowEmulator),\n/* harmony export */   flowMainnet: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.flowMainnet),\n/* harmony export */   flowTestnet: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.flowTestnet),\n/* harmony export */   getAccount: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getAccount),\n/* harmony export */   getBlock: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getBlock),\n/* harmony export */   getBlockHeader: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getBlockHeader),\n/* harmony export */   getChainId: () => (/* binding */ getChainId),\n/* harmony export */   getCollection: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getCollection),\n/* harmony export */   getCurrentUser: () => (/* binding */ getCurrentUser),\n/* harmony export */   getEvents: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEvents),\n/* harmony export */   getEventsAtBlockHeightRange: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockHeightRange),\n/* harmony export */   getEventsAtBlockIds: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockIds),\n/* harmony export */   getExecHttpPost: () => (/* binding */ getExecHttpPost),\n/* harmony export */   getMutate: () => (/* binding */ getMutate),\n/* harmony export */   getNetworkParameters: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getNetworkParameters),\n/* harmony export */   getNodeVersionInfo: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getNodeVersionInfo),\n/* harmony export */   getTransaction: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getTransaction),\n/* harmony export */   getTransactionStatus: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getTransactionStatus),\n/* harmony export */   initServiceRegistry: () => (/* binding */ initServiceRegistry),\n/* harmony export */   invariant: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant),\n/* harmony export */   isBad: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.isBad),\n/* harmony export */   isOk: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.isOk),\n/* harmony export */   isReactNative: () => (/* binding */ isReactNative),\n/* harmony export */   limit: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.limit),\n/* harmony export */   nodeVersionInfo: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.nodeVersionInfo),\n/* harmony export */   normalizePollingResponse: () => (/* binding */ normalizePollingResponse),\n/* harmony export */   param: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.param),\n/* harmony export */   params: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.params),\n/* harmony export */   payer: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.payer),\n/* harmony export */   ping: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.ping),\n/* harmony export */   pipe: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.pipe),\n/* harmony export */   pluginRegistry: () => (/* binding */ pluginRegistry),\n/* harmony export */   proposer: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.proposer),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   queryRaw: () => (/* binding */ queryRaw),\n/* harmony export */   ref: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.ref),\n/* harmony export */   sansPrefix: () => (/* reexport safe */ _onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix),\n/* harmony export */   script: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.script),\n/* harmony export */   send: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serviceEndpoint: () => (/* binding */ serviceEndpoint),\n/* harmony export */   setIsReactNative: () => (/* binding */ setIsReactNative),\n/* harmony export */   subscribe: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.subscribe),\n/* harmony export */   subscribeEvents: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.subscribeEvents),\n/* harmony export */   subscribeRaw: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.subscribeRaw),\n/* harmony export */   t: () => (/* reexport module object */ _onflow_types__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   transaction: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.transaction),\n/* harmony export */   tx: () => (/* binding */ transaction),\n/* harmony export */   validator: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.validator),\n/* harmony export */   verifyUserSignatures: () => (/* binding */ verifyUserSignatures),\n/* harmony export */   voucherIntercept: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.voucherIntercept),\n/* harmony export */   voucherToTxId: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.voucherToTxId),\n/* harmony export */   why: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.why),\n/* harmony export */   withPrefix: () => (/* reexport safe */ _onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)\n/* harmony export */ });\n/* harmony import */ var _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/sdk */ \"(ssr)/./node_modules/@onflow/sdk/dist/sdk.module.js\");\n/* harmony import */ var _onflow_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/types */ \"(ssr)/./node_modules/@onflow/types/dist/types.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/./node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var _onflow_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @onflow/config */ \"(ssr)/./node_modules/@onflow/config/dist/config.module.js\");\n/* harmony import */ var _onflow_util_address__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @onflow/util-address */ \"(ssr)/./node_modules/@onflow/util-address/dist/util-address.module.js\");\n/* harmony import */ var _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @onflow/rlp */ \"(ssr)/./node_modules/@onflow/rlp/dist/rlp.module.js\");\n/* harmony import */ var _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @onflow/typedefs */ \"(ssr)/./node_modules/@onflow/typedefs/dist/typedefs.module.js\");\n/* harmony import */ var _onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @onflow/util-actor */ \"(ssr)/./node_modules/@onflow/util-actor/dist/actor.module.js\");\n/* harmony import */ var _onflow_transport_http__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @onflow/transport-http */ \"(ssr)/./node_modules/@onflow/transport-http/dist/index.module.js\");\n/* harmony import */ var _improbable_eng_grpc_web__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @improbable-eng/grpc-web */ \"(ssr)/./node_modules/@improbable-eng/grpc-web/dist/grpc-web-client.js\");\n/* harmony import */ var _improbable_eng_grpc_web__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_improbable_eng_grpc_web__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var sha3__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! sha3 */ \"(ssr)/./node_modules/sha3/index.js\");\n/* harmony import */ var _onflow_util_template__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @onflow/util-template */ \"(ssr)/./node_modules/@onflow/util-template/dist/template.module.js\");\n/* harmony import */ var _onflow_util_semver__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @onflow/util-semver */ \"(ssr)/./node_modules/@onflow/util-semver/dist/index.module.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm/v4.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst VERSION = \"1.21.0\";\n\nconst is = type => d => typeof d === type;\n\n/**\n * @description Checks if a value is required (not null or undefined). This is a type guard that\n * ensures the value is not null or undefined, useful for validation and filtering operations.\n *\n * @param d The value to check for null or undefined\n * @returns True if the value is not null or undefined, false otherwise\n *\n * @example\n * // Filter out null/undefined values from an array\n * import * as fcl from \"@onflow/fcl\"\n *\n * const values = [1, null, \"hello\", undefined, true]\n * const requiredValues = values.filter(fcl.isRequired)\n * console.log(requiredValues) // [1, \"hello\", true]\n */\nconst isRequired = d => d != null;\n\n/**\n * @description Type guard that checks if a value is an object. This is useful for runtime type checking\n * and ensuring type safety when working with dynamic data.\n *\n * @param d The value to check\n * @returns True if the value is an object, false otherwise\n *\n * @example\n * // Check if a value is an object\n * import * as fcl from \"@onflow/fcl\"\n *\n * const obj = { name: \"Flow\" }\n * const notObj = \"string\"\n * console.log(fcl.isObject(obj)) // true\n * console.log(fcl.isObject(notObj)) // false\n */\nconst isObject = is(\"object\");\n\n/**\n * @description Type guard that checks if a value is a string. Useful for validating input types\n * and ensuring type safety in your applications.\n *\n * @param d The value to check\n * @returns True if the value is a string, false otherwise\n *\n * @example\n * // Validate string input\n * import * as fcl from \"@onflow/fcl\"\n *\n * const text = \"Hello, Flow!\"\n * const notText = 123\n * console.log(fcl.isString(text)) // true\n * console.log(fcl.isString(notText)) // false\n */\nconst isString = is(\"string\");\n\n/**\n * @description Type guard that checks if a value is a function. This is particularly useful\n * when working with callbacks, event handlers, or optional function parameters.\n *\n * @param d The value to check\n * @returns True if the value is a function, false otherwise\n *\n * @example\n * // Check if a callback is provided\n * import * as fcl from \"@onflow/fcl\"\n *\n * const callback = () => console.log(\"Hello\")\n * const notCallback = \"string\"\n * console.log(fcl.isFunc(callback)) // true\n * console.log(fcl.isFunc(notCallback)) // false\n */\nconst isFunc = is(\"function\");\n\n/**\n * @description Type guard that checks if a value is a number. This includes both integers\n * and floating-point numbers, but excludes NaN and Infinity.\n *\n * @param d The value to check\n * @returns True if the value is a number, false otherwise\n *\n * @example\n * // Validate numeric input\n * import * as fcl from \"@onflow/fcl\"\n *\n * const num = 42\n * const notNum = \"42\"\n * console.log(fcl.isNumber(num)) // true\n * console.log(fcl.isNumber(notNum)) // false\n */\nconst isNumber = is(\"number\");\n\n/**\n * @description Normalizes function or array arguments into a standard array format for use with\n * Flow transactions and scripts. If the input is a function, it executes the function with\n * sdk.arg and types as parameters. Otherwise, returns an empty array.\n *\n * @param ax Arguments function, array, or undefined value to normalize\n * @returns Normalized array of arguments ready for use with Flow transactions/scripts\n *\n * @example\n * // Using with function-style arguments\n * const argsFn = (arg, t) => [\n *   arg(\"Hello\", t.String),\n *   arg(42, t.Int)\n * ]\n * const normalized = normalizeArgs(argsFn)\n * // Returns: [{value: \"Hello\", xform: ...}, {value: 42, xform: ...}]\n */\nfunction normalizeArgs(ax) {\n  if (isFunc(ax)) return ax(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.arg, _onflow_types__WEBPACK_IMPORTED_MODULE_1__);\n  return [];\n}\n\nasync function pre(context, type, opts) {\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(opts), `${type}(opts) -- opts is required`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isObject(opts), `${type}(opts) -- opts must be an object`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!(opts.cadence && opts.template), `${type}({ template, cadence }) -- cannot pass both cadence and template`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(opts.cadence || opts?.template), `${type}({ cadence }) -- cadence is required`);\n  // // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(opts.cadence) || opts?.template, `${type}({ cadence }) -- cadence must be a string`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(await context.config.get(\"accessNode.api\"), `${type}(opts) -- Required value for \"accessNode.api\" not defined in config. See: ${\"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/src/exec/query.md#configuration\"}`);\n}\n\n/**\n * @description Validates and prepares options for Flow transaction execution (mutations). This function\n * performs comprehensive validation of the provided options to ensure they meet the requirements for\n * executing transactions on the Flow blockchain, including checking for required configuration values.\n *\n * @param opts Options object containing either Cadence code or template references for the transaction\n * @param opts.cadence Optional Cadence transaction code string\n * @param opts.template Optional interaction template object or reference\n * @returns Promise that resolves when validation passes\n * @throws Error if validation fails or required configuration is missing\n *\n * @example\n * // Validate transaction options with Cadence code\n * await preMutate({\n *   cadence: \"transaction { execute { log(\\\"Hello Flow!\\\") } }\"\n * })\n *\n * // Validate transaction options with template\n * await preMutate({\n *   template: transferFlowTemplate\n * })\n */\nasync function preMutate(context, opts) {\n  return pre(context, \"mutate\", opts);\n}\n\n/**\n * @description Validates and prepares options for Flow script execution (queries). This function\n * performs comprehensive validation of the provided options to ensure they meet the requirements for\n * executing scripts on the Flow blockchain, including checking for required configuration values.\n *\n * @param opts Options object containing either Cadence code or template references for the script\n * @param opts.cadence Optional Cadence script code string\n * @param opts.template Optional interaction template object or reference\n * @returns Promise that resolves when validation passes\n * @throws Error if validation fails or required configuration is missing\n *\n * @example\n * // Validate script options with Cadence code\n * await preQuery({\n *   cadence: \"access(all) fun main(): String { return \\\"Hello Flow!\\\" }\"\n * })\n *\n * // Validate script options with template\n * await preQuery({\n *   template: getAccountTemplate\n * })\n */\nasync function preQuery(context, opts) {\n  return pre(context, \"query\", opts);\n}\n\nasync function httpDocumentResolver(_ref) {\n  let {\n    url\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof url !== \"undefined\", \"retrieve({ url }) -- url must be defined\");\n  let res;\n  try {\n    res = await cross_fetch__WEBPACK_IMPORTED_MODULE_3___default()(url);\n  } catch (e) {\n    throw new Error(\"httpDocumentResolver Error: Failed to retrieve document.\");\n  }\n  let document = res.ok ? await res.json() : null;\n  return document;\n}\nconst DOCUMENT_RESOLVERS = new Map([[\"http\", httpDocumentResolver], [\"https\", httpDocumentResolver]]);\n\n/**\n * @description Retrieves a document from a URL using protocol-specific resolvers. This function\n * supports HTTP/HTTPS by default and can be extended with custom resolvers through FCL configuration.\n * It's used internally by FCL to fetch interaction templates and other external documents.\n *\n * @param params The retrieval parameters\n * @param params.url The URL of the document to retrieve\n * @returns Promise that resolves to the retrieved document (typically a JSON object)\n * @throws {Error} If URL is invalid, protocol is unsupported, or retrieval fails\n *\n * @example\n * // Retrieve an interaction template\n * const template = await retrieve({\n *   url: \"https://flix.flow.com/v1.0/templates/transfer-flow-tokens\"\n * })\n * console.log(\"Template:\", template)\n */\nasync function retrieve(context, _ref2) {\n  let {\n    url\n  } = _ref2;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof url !== \"undefined\", \"retrieve({ url }) -- url must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof url === \"string\", \"retrieve({ url }) -- url must be a string\");\n  const documentResolversFromConfig = await context.config.where(/^document\\.resolver\\./);\n  Object.keys(documentResolversFromConfig).map(key => {\n    const resolverFromConfig = documentResolversFromConfig[key];\n    const resolverProtocol = key.replace(/^document\\.resolver\\./, \"\");\n    DOCUMENT_RESOLVERS.set(resolverProtocol, resolverFromConfig);\n  });\n  const urlParts = /^(.*):\\/\\/([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/.exec(url);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(urlParts, \"Failed to parse URL\");\n  const protocol = urlParts[1];\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(urlParts, \"Failed to parse URL protocol\");\n  const resolver = DOCUMENT_RESOLVERS.get(protocol);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(resolver, `No resolver found for protcol=${protocol}`);\n  let document = await resolver({\n    url\n  });\n  return document;\n}\n\n/**\n * @description Fills import addresses in Cadence for network\n *\n * @param params\n * @param params.network Network to derive Cadence for\n * @param params.template Interaction Template to derive Cadence from\n * @returns Promise that resolves with the derived Cadence code\n */\nasync function deriveCadenceByNetwork100(_ref) {\n  let {\n    network,\n    template\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_version === \"1.0.0\", \"deriveCadenceByNetwork100({ template }) -- template must be version 1.0.0\");\n  const networkDependencies = Object.keys(template?.data?.dependencies).map(dependencyPlaceholder => {\n    const dependencyNetworkContracts = Object.values(template?.data?.dependencies?.[dependencyPlaceholder]);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(dependencyNetworkContracts !== undefined, `deriveCadenceByNetwork100 -- Could not find contracts for dependency placeholder: ${dependencyPlaceholder}`);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(dependencyNetworkContracts.length > 0, `deriveCadenceByNetwork100 -- Could not find contracts for dependency placeholder: ${dependencyPlaceholder}`);\n    const dependencyContract = dependencyNetworkContracts[0];\n    const dependencyContractForNetwork = dependencyContract?.[network];\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(dependencyContractForNetwork, `deriveCadenceByNetwork100 -- Could not find ${network} network information for dependency: ${dependencyPlaceholder}`);\n    return [dependencyPlaceholder, dependencyContractForNetwork?.address];\n  });\n  return networkDependencies.reduce((cadence, _ref2) => {\n    let [placeholder, address] = _ref2;\n    const regex = new RegExp(\"(\\\\b\" + placeholder + \"\\\\b)\", \"g\");\n    return cadence.replace(regex, address);\n  }, template.data.cadence);\n}\n\n/**\n * @description Replaces string imports with the actual contract address\n *\n * @param params\n * @param params.cadence The Cadence code\n * @param params.networkDependencies Network dependencies mapping\n * @returns Cadence code with replaced imports\n */\nfunction replaceStringImports(_ref) {\n  let {\n    cadence,\n    networkDependencies\n  } = _ref;\n  return Object.keys(networkDependencies).reduce((c, contractName) => {\n    const address = networkDependencies[contractName];\n    const regex = new RegExp(`import \"\\\\b${contractName}\\\\b\"`, \"g\");\n    return c.replace(regex, `import ${contractName} from ${address}`);\n  }, cadence);\n}\n\n/**\n * @description Fills import addresses in Cadence for network\n *\n * @param params\n * @param params.network Network to derive Cadence for\n * @param params.template Interaction Template to derive Cadence from\n * @returns Promise that resolves with the derived Cadence code\n */\nasync function deriveCadenceByNetwork110(_ref) {\n  let {\n    network,\n    template\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_version === \"1.1.0\", \"deriveCadenceByNetwork110({ template }) -- template must be version 1.1.0\");\n\n  // get network dependencies from template dependencies, use new string import format\n  const networkDependencies = {};\n  template?.data?.dependencies.forEach(dependency => {\n    dependency.contracts.forEach(contract => {\n      const contractName = contract.contract;\n      contract.networks.forEach(net => {\n        if (net.network === network) {\n          networkDependencies[contractName] = net.address;\n        }\n      });\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(networkDependencies[contractName] !== undefined, `deriveCadenceByNetwork110 -- Could not find contracts Network Address: ${network} ${contractName}`);\n    });\n  });\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Object.keys(networkDependencies).length === template?.data?.dependencies.length, `deriveCadenceByNetwork110 -- Could not find contracts for import dependencies: ${networkDependencies}`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Object.keys(networkDependencies).length === Object.values(networkDependencies).length, `deriveCadenceByNetwork110 -- Could not find all addresses for network ${network} dependencies:  ${networkDependencies}`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!template?.data?.cadence?.body, `no cadence found -- Could not replace import dependencies: ${networkDependencies}`);\n  return replaceStringImports({\n    cadence: template?.data?.cadence?.body,\n    networkDependencies\n  });\n}\n\n/**\n * @description Fills import addresses in Cadence for network\n *\n * @param params\n * @param params.network Network to derive Cadence for\n * @param params.template Interaction Template to derive Cadence from\n * @returns Promise that resolves with the derived Cadence code\n */\nasync function deriveCadenceByNetwork(_ref) {\n  let {\n    network,\n    template\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(network != undefined, \"deriveCadenceByNetwork({ network }) -- network must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof network === \"string\", \"deriveCadenceByNetwork({ network }) -- network must be a string\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template != undefined, \"deriveCadenceByNetwork({ template }) -- template must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof template === \"object\", \"deriveCadenceByNetwork({ template }) -- template must be an object\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_type === \"InteractionTemplate\", \"deriveCadenceByNetwork({ template }) -- template must be an InteractionTemplate\");\n  switch (template.f_version) {\n    case \"1.1.0\":\n      return await deriveCadenceByNetwork110({\n        network,\n        template\n      });\n    case \"1.0.0\":\n      return await deriveCadenceByNetwork100({\n        network,\n        template\n      });\n    default:\n      throw new Error(\"deriveCadenceByNetwork Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Fetches the chain ID from the Flow network by querying the network parameters.\n * The chain ID is a unique identifier for the specific Flow network (mainnet, testnet, etc.)\n * and is essential for ensuring transactions are executed on the correct network.\n *\n * @param opts Optional configuration object that can contain network access settings and other parameters\n * @returns Promise that resolves to the chain ID string (e.g., \"flow-mainnet\", \"flow-testnet\")\n *\n * @example\n * // Fetch chain ID from the configured network\n * const chainId = await fetchChainId()\n * console.log(chainId) // \"flow-mainnet\" or \"flow-testnet\"\n */\nasync function fetchChainId(context) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const response = await context.sdk.send([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getNetworkParameters)()], opts).then(context.sdk.decode);\n  return response.chainId;\n}\n\n/**\n * Note to self:\n * Create the partial context\n * Then you need to make functions take only the necessary parts of the context\n * This way you can avoid the issue where the subtype does not satisfy the args\n */\n\n/**\n * Create a global FCL Context based on the current global config.\n *\n * Some configuration values are still curried to the context as a backward compatibility measure.\n */\nfunction createPartialGlobalFCLContext() {\n  return {\n    config: (0,_onflow_config__WEBPACK_IMPORTED_MODULE_5__.config)(),\n    sdk: {\n      send: _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send,\n      decode: _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode,\n      subscribe: _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.subscribe,\n      subscribeRaw: _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.subscribeRaw,\n      account: _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.account,\n      block: _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block,\n      resolve: _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.resolve\n    }\n  };\n}\n\n// Cache of chainId promises for each access node value\n// key: access node, value: chainId promise\nlet chainIdCache = {};\nlet hasWarnedEnv = false;\nfunction createGetChainId(context) {\n  /**\n   * @description\n   * Gets the chain ID if its set, otherwise gets the chain ID from the access node\n   *\n   * @param opts Optional configuration parameters\n   * @param opts.node Override the access node URL for this request instead of using the configured one\n   * @param opts.enableRequestLogging Enable logging for the chain ID request\n   * @returns Promise that resolves to the chain ID string (e.g., \"mainnet\", \"testnet\", \"local\")\n   * @throws If the chain ID cannot be determined from configuration or access node\n   *\n   * @example\n   * // Get chain ID using configured access node\n   * import * as fcl from \"@onflow/fcl\"\n   *\n   * const chainId = await fcl.getChainId()\n   * console.log(\"Connected to:\", chainId) // \"testnet\" or \"mainnet\"\n   */\n  async function getChainId() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let flowNetworkCfg = await context.config.get(\"flow.network\");\n    let envCfg = await context.config.get(\"env\");\n    if (envCfg && !hasWarnedEnv) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log.deprecate({\n        pkg: \"FCL\",\n        subject: 'Using the \"env\" configuration key for specifying the flow network',\n        message: \"Configuring to specify flow network is no longer required\",\n        transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/TRANSITIONS.md#0001-deprecate-env-config-key\"\n      });\n      hasWarnedEnv = true;\n    }\n    const accessNode = opts.node || (await context.config.get(\"accessNode.api\"));\n    if (!accessNode) {\n      // Fall back to deprecated flow.network and env config keys\n      // This probably should have been done before trying to fetch the chainId from the access node\n      // However, this was the behaviour with the initial implementation of getChainId()\n      if (flowNetworkCfg) {\n        return flowNetworkCfg;\n      } else if (envCfg) {\n        return envCfg;\n      }\n      throw new Error(`Either the \"accessNode.api\" config key or opts.node must be set`);\n    }\n\n    // Try using cached chainId first if it exists and access node is the same\n    if (chainIdCache[accessNode]) {\n      try {\n        return await chainIdCache[accessNode];\n      } catch {}\n    }\n\n    // If no cached chainId, value is stale, or last attempt failed, try getting chainId from access node\n    // Check if another getChainId() call has already started a new promise, if not, start a new one\n    // There may have been concurrent calls to getChainId() while the first call was waiting for the response\n    if (!chainIdCache[accessNode]) {\n      chainIdCache[accessNode] = fetchChainId(context, opts).catch(error => {\n        // If there was an error, reset the promise so that the next call will try again\n        chainIdCache[accessNode] = null;\n        throw error;\n      });\n    }\n\n    // Use newly created promise\n    try {\n      return await chainIdCache[accessNode];\n    } catch (e) {\n      // Fall back to deprecated flow.network and env config keys\n      // This probably should have been done before trying to fetch the chainId from the access node\n      // However, this was the behaviour with the initial implementation of getChainId()\n      if (flowNetworkCfg) {\n        return flowNetworkCfg;\n      } else if (envCfg) {\n        return envCfg;\n      }\n      throw new Error(`Error getting chainId from access node - are you using the correct access node endpoint.  If running locally, is your emulator up-to-date? ${e.message}`);\n    }\n  }\n  return getChainId;\n}\nconst getChainId = /* @__PURE__ */createGetChainId(createPartialGlobalFCLContext());\n\n/**\n * @description Watches the FCL configuration for changes to the access node and automatically updates\n * the chain ID cache accordingly. This ensures that chain ID information stays current when the\n * access node configuration changes, preventing stale chain ID data from being used.\n *\n * @returns A function that can be called to unsubscribe the configuration listener\n *\n * @example\n * // Start watching for chain ID changes\n * import * as fcl from \"@onflow/fcl\"\n *\n * const unsubscribe = fcl.watchForChainIdChanges()\n *\n * // Later, when you want to stop watching\n * unsubscribe()\n */\nfunction watchForChainIdChanges(context) {\n  if (!context) {\n    context = createPartialGlobalFCLContext();\n  }\n  return context.config.subscribe(() => {\n    // Call getChainId to update the chainId cache if access node has changed\n    createGetChainId(context)({\n      enableRequestLogging: false\n    }).catch(() => {});\n  });\n}\n\n/**\n * @description Prepares and processes template options for Flow transactions and scripts. This function handles\n * the resolution of interaction templates by either fetching them from a URL or using provided template data,\n * and derives the appropriate Cadence code based on the current network configuration.\n *\n * @param opts Template options object that can contain either direct Cadence code or template references\n * @param opts.cadence Optional Cadence code string to use directly\n * @param opts.template Optional template object or URL string. If a URL string is provided, the template will be fetched\n * @returns Promise that resolves to the processed template options with resolved Cadence code\n *\n * @example\n * // Prepare template with direct Cadence code\n * const opts = await prepTemplateOpts({\n *   cadence: \"transaction { execute { log(\\\"Hello Flow!\\\") } }\"\n * })\n *\n * // Prepare template from URL\n * const opts = await prepTemplateOpts({\n *   template: \"https://flix.flow.com/v1/templates/transfer-flow\"\n * })\n *\n * // Prepare template with template object\n * const opts = await prepTemplateOpts({\n *   template: {\n *     f_type: \"InteractionTemplate\",\n *     f_version: \"1.1.0\",\n *     id: \"transfer-flow\",\n *     data: { cadence: { \"flow-mainnet\": \"transaction { ... }\" } }\n *   }\n * })\n */\nasync function prepTemplateOpts(context, opts) {\n  if (isString(opts?.template)) {\n    opts.template = await retrieve(context, {\n      url: opts?.template\n    });\n  }\n  const cadence = opts.cadence || (await deriveCadenceByNetwork({\n    template: opts.template,\n    network: await createGetChainId(context)(opts)\n  }));\n  opts.cadence = cadence;\n  return opts;\n}\n\nfunction createQueryRaw(context) {\n  /**\n   * @description Allows you to submit scripts to query the blockchain and get raw response data.\n   *\n   * @param opts Query Options and configuration\n   * @param opts.cadence Cadence Script used to query Flow\n   * @param opts.args Arguments passed to cadence script\n   * @param opts.template Interaction Template for a script\n   * @param opts.isSealed Block Finality\n   * @param opts.limit Compute Limit for Query\n   * @returns A promise that resolves to the raw query result\n   *\n   * @example\n   * import * as fcl from '@onflow/fcl';\n   *\n   * const result = await fcl.queryRaw({\n   *   cadence: `\n   *     access(all) fun main(a: Int, b: Int, addr: Address): Int {\n   *       log(addr)\n   *       return a + b\n   *     }\n   *   `,\n   *   args: (arg, t) => [\n   *     arg(7, t.Int), // a: Int\n   *     arg(6, t.Int), // b: Int\n   *     arg('0xba1132bc08f82fe2', t.Address), // addr: Address\n   *   ],\n   * });\n   */\n  async function queryRaw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await preQuery(context, opts);\n    opts = await prepTemplateOpts(context, opts);\n    return context.sdk.send([_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.script(opts.cadence), _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.args(normalizeArgs(opts.args || [])), _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.atLatestBlock(opts.isSealed ?? false), opts.limit && typeof opts.limit === \"number\" && _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.limit(opts.limit)]);\n  }\n  return queryRaw;\n}\nconst queryRaw = /* @__PURE__ */createQueryRaw(createPartialGlobalFCLContext());\n\nfunction createQuery(context) {\n  /**\n   * @description Allows you to submit scripts to query the blockchain.\n   *\n   * @param opts Query options configuration\n   * @param opts.cadence A valid cadence script (required)\n   * @param opts.args Any arguments to the script if needed should be supplied via a function that returns an array of arguments\n   * @param opts.limit Compute (Gas) limit for query.\n   * @param opts.template Interaction Template for a script\n   * @param opts.isSealed Block Finality\n   * @returns A JSON representation of the response\n   *\n   * @example\n   * import * as fcl from '@onflow/fcl';\n   *\n   * const result = await fcl.query({\n   *   cadence: `\n   *     access(all) fun main(a: Int, b: Int, addr: Address): Int {\n   *       log(addr)\n   *       return a + b\n   *     }\n   *   `,\n   *   args: (arg, t) => [\n   *     arg(7, t.Int), // a: Int\n   *     arg(6, t.Int), // b: Int\n   *     arg('0xba1132bc08f82fe2', t.Address), // addr: Address\n   *   ],\n   * });\n   * console.log(result); // 13\n   */\n  async function query() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return createQueryRaw(context)(opts).then(context.sdk.decode);\n  }\n  return query;\n}\nconst query = /* @__PURE__ */createQuery(createPartialGlobalFCLContext());\n\nconst FCL_REDIRECT_URL_PARAM_NAME = \"fcl_redirect_url\";\nconst FCL_RESPONSE_PARAM_NAME = \"fclResponseJson\";\nconst CORE_STRATEGIES = {\n  \"HTTP/RPC\": \"HTTP/RPC\",\n  \"HTTP/POST\": \"HTTP/POST\",\n  \"IFRAME/RPC\": \"IFRAME/RPC\",\n  \"POP/RPC\": \"POP/RPC\",\n  \"TAB/RPC\": \"TAB/RPC\",\n  \"EXT/RPC\": \"EXT/RPC\",\n  \"DEEPLINK/RPC\": \"DEEPLINK/RPC\"\n};\n\n/**\n * @description Sets up a message listener to receive messages from the parent FCL application. This\n * function is used by wallet services to listen for specific message types from FCL and respond\n * accordingly. It handles message filtering, data sanitization, and provides context about the\n * message origin for security purposes.\n *\n * @param messageType The specific message type to listen for (e.g., \"FCL:VIEW:READY:RESPONSE\")\n * @param cb Callback function executed when a matching message is received\n * @param cb.data The message data received from FCL, with deprecated fields removed\n * @param cb.context Context object providing security information\n * @param cb.context.origin The origin URL of the FCL application sending the message\n *\n * @returns Function to remove the event listener and stop listening for messages\n *\n * @example\n * // Listen for authentication requests from FCL\n * import { onMessageFromFCL } from \"@onflow/fcl\"\n *\n * const removeListener = onMessageFromFCL(\"FCL:VIEW:READY:RESPONSE\", (data, context) => {\n *   console.log(\"FCL is ready for communication\")\n *   console.log(\"Message from:\", context.origin)\n *   console.log(\"Ready data:\", data)\n *\n *   // Verify origin for security\n *   if (context.origin === \"https://myapp.com\") {\n *     initializeWalletServices()\n *   } else {\n *     console.warn(\"Unexpected origin:\", context.origin)\n *   }\n * })\n *\n * // Stop listening when wallet service closes\n * window.addEventListener(\"beforeunload\", () => {\n *   removeListener()\n * })\n */\nconst onMessageFromFCL = function (messageType) {\n  let cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  const buildData = data => {\n    if (data.deprecated) console.warn(\"DEPRECATION NOTICE\", data.deprecated.message);\n    delete data?.body?.interaction;\n    return data;\n  };\n  const internal = e => {\n    const {\n      data,\n      origin\n    } = e;\n    if (typeof data !== \"object\") return;\n    if (typeof data == null) return;\n    if (data.type !== messageType) return;\n    cb(buildData(data), {\n      origin\n    });\n  };\n  window.addEventListener(\"message\", internal);\n  return () => window.removeEventListener(\"message\", internal);\n};\n\n/**\n * @description Sends messages from a wallet or service back to the parent FCL application. This function\n * handles communication between wallet UIs (running in iframes, popups, or redirects) and the main FCL\n * application. It automatically detects the communication method (redirect, iframe, or popup) and sends\n * the message accordingly.\n *\n * @param type The message type identifier (e.g., \"FCL:VIEW:RESPONSE\", \"FCL:VIEW:READY\")\n * @param msg Optional message payload containing response data\n * @param msg.f_type FCL message format type, should be \"PollingResponse\"\n * @param msg.f_vsn FCL message format version, should be \"1.0.0\"\n * @param msg.status Response status\n * @param msg.reason Reason for the response (especially for DECLINED status)\n * @param msg.data Actual response data (signatures, account info, etc.)\n *\n * @throws When unable to communicate with parent FCL instance\n *\n * @example\n * // Send approval response with signature data\n * import { sendMsgToFCL } from \"@onflow/fcl\"\n *\n * sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n *   f_type: \"CompositeSignature\",\n *   f_vsn: \"1.0.0\",\n *   addr: \"0x1234567890abcdef\",\n *   keyId: 0,\n *   signature: \"abc123...\"\n * })\n */\nconst sendMsgToFCL = (type, msg) => {\n  const data = {\n    ...msg,\n    type\n  };\n  const urlParams = new URLSearchParams(window.location.search);\n  const redirectUrl = urlParams.get(FCL_REDIRECT_URL_PARAM_NAME);\n  if (redirectUrl) {\n    const url = new URL(redirectUrl);\n    url.searchParams.append(FCL_RESPONSE_PARAM_NAME, JSON.stringify(data));\n    window.location.href = url.href;\n  } else if (window.location !== window.parent.location) {\n    window.parent.postMessage({\n      ...msg,\n      type\n    }, \"*\");\n  } else if (window.opener) {\n    window.opener.postMessage({\n      ...msg,\n      type\n    }, \"*\");\n  } else {\n    throw new Error(\"Unable to communicate with parent FCL instance\");\n  }\n};\n\n/**\n * @description Initiates the communication handshake between a wallet service and FCL. This function\n * listens for the \"FCL:VIEW:READY:RESPONSE\" message from FCL and automatically sends \"FCL:VIEW:READY\"\n * to indicate the wallet service is ready to receive requests. This is typically the first function\n * called when a wallet service loads.\n *\n * @param cb Callback function executed when FCL responds with ready confirmation\n * @param cb.data Data received from FCL ready response\n * @param cb.context Context object containing origin information\n * @param cb.context.origin Origin of the FCL application\n * @param msg Optional message payload to include with ready signal\n *\n * @example\n * // Basic wallet service initialization\n * import { ready } from \"@onflow/fcl\"\n *\n * ready((data, context) => {\n *   console.log(\"FCL is ready to communicate\")\n *   console.log(\"FCL origin:\", context.origin)\n *   console.log(\"Ready data:\", data)\n *\n *   // Wallet service is now ready to handle authentication requests\n *   initializeWalletUI()\n * })\n */\nconst ready = function (cb) {\n  onMessageFromFCL(\"FCL:VIEW:READY:RESPONSE\", cb);\n  sendMsgToFCL(\"FCL:VIEW:READY\");\n};\n\n/**\n * @description Closes the wallet service window/iframe and notifies FCL that the service is shutting down.\n * This should be called when the user cancels an operation or when the wallet service needs to close itself.\n *\n * Sends \"FCL:VIEW:CLOSE\".\n */\nconst close = () => {\n  sendMsgToFCL(\"FCL:VIEW:CLOSE\");\n};\n\n/**\n * @description Sends an approval response to FCL with the provided data. This indicates that the user\n * has approved the requested operation (authentication, transaction signing, etc.) and includes the\n * resulting data (signatures, account information, etc.).\n *\n * Sends \"FCL:VIEW:RESPONSE\". with status \"APPROVED\".\n *\n * @param data The approval data to send back to FCL (signatures, account info, etc.)\n *\n * @example\n * // Approve authentication with account data\n * import { approve } from \"@onflow/fcl\"\n *\n * const accountData = {\n *   f_type: \"AuthnResponse\",\n *   f_vsn: \"1.0.0\",\n *   addr: \"0x1234567890abcdef\",\n *   services: [\n *     {\n *       f_type: \"Service\",\n *       f_vsn: \"1.0.0\",\n *       type: \"authz\",\n *       method: \"HTTP/POST\",\n *       endpoint: \"https://wallet.example.com/authz\"\n *     }\n *   ]\n * }\n *\n * approve(accountData)\n */\nconst approve = data => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"APPROVED\",\n    reason: null,\n    data: data\n  });\n};\n\n/**\n * @description Sends a decline response to FCL indicating that the user has rejected or cancelled\n * the requested operation. This should be called when the user explicitly cancels an operation\n * or when an error prevents the operation from completing.\n *\n * Sends \"FCL:VIEW:RESPONSE\". with status \"DECLINED\".\n *\n * @param reason Human-readable reason for declining the request\n *\n * @example\n * // Decline when user cancels authentication\n * import { decline } from \"@onflow/fcl\"\n *\n * document.getElementById('cancel-btn').addEventListener('click', () => {\n *   decline(\"User cancelled authentication\")\n * })\n */\nconst decline = reason => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"DECLINED\",\n    reason: reason,\n    data: null\n  });\n};\n\n/**\n * @description Sends a redirect response to FCL indicating that the operation requires a redirect\n * to complete. This is used when the wallet service needs to redirect the user to another URL\n * (such as a native app deep link or external service).\n *\n * Sends \"FCL:VIEW:RESPONSE\". with status \"REDIRECT\".\n *\n * @param data Redirect data containing the target URL and any additional parameters\n *\n * @example\n * // Redirect to native wallet app\n * import { redirect } from \"@onflow/fcl\"\n *\n * redirect({\n *   f_type: \"RedirectResponse\",\n *   f_vsn: \"1.0.0\",\n *   url: \"flow-wallet://sign?transaction=abc123\",\n *   callback: \"https://myapp.com/callback\"\n * })\n */\nconst redirect = data => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"REDIRECT\",\n    reason: null,\n    data: data\n  });\n};\n\nconst SERVICE_PRAGMA = {\n  f_type: \"Service\",\n  f_vsn: \"1.0.0\"\n};\nconst IDENTITY_PRAGMA = {\n  f_type: \"Identity\",\n  f_vsn: \"1.0.0\"\n};\nconst USER_PRAGMA = {\n  f_type: \"USER\",\n  f_vsn: \"1.0.0\"\n};\nconst POLLING_RESPONSE_PRAGMA = {\n  f_type: \"PollingResponse\",\n  f_vsn: \"1.0.0\"\n};\nconst COMPOSITE_SIGNATURE_PRAGMA = {\n  f_type: \"CompositeSignature\",\n  f_vsn: \"1.0.0\"\n};\n\n/**\n * @description Creates a new CompositeSignature instance. CompositeSignature is a standardized\n * signature format used in the Flow ecosystem to represent cryptographic signatures along with\n * the signing account information. It includes the signature data, the account address, and\n * the key ID used for signing.\n *\n * @param addr Flow account address that created the signature (will be normalized with 0x prefix)\n * @param keyId The key ID/index used to create the signature (will be converted to number)\n * @param signature The cryptographic signature as a hexadecimal string\n *\n * @property f_type FCL type identifier, always \"CompositeSignature\"\n * @property f_vsn FCL version identifier for the signature format\n * @property addr Flow account address with 0x prefix\n * @property keyId Key ID used for signing (as number)\n * @property signature Signature data as hex string\n *\n * @example\n * // Create a composite signature for transaction signing\n * import { CompositeSignature } from \"@onflow/fcl\"\n *\n * const compSig = new CompositeSignature(\n *   \"1234567890abcdef\", // will be normalized to \"0x1234567890abcdef\"\n *   0,                  // key ID\n *   \"abc123def456...\"   // signature hex string\n * )\n *\n * console.log(compSig)\n * // {\n * //   f_type: \"CompositeSignature\",\n * //   f_vsn: \"1.0.0\",\n * //   addr: \"0x1234567890abcdef\",\n * //   keyId: 0,\n * //   signature: \"abc123def456...\"\n * // }\n */\nclass CompositeSignature {\n  constructor(addr, keyId, signature) {\n    this.f_type = COMPOSITE_SIGNATURE_PRAGMA.f_type;\n    this.f_vsn = COMPOSITE_SIGNATURE_PRAGMA.f_vsn;\n    this.addr = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(addr);\n    this.keyId = Number(keyId);\n    this.signature = signature;\n  }\n}\n\nconst rightPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(value.padEnd(pad * 2, \"0\"), \"hex\");\nconst leftPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(value.padStart(pad * 2, \"0\"), \"hex\");\nconst addressBuffer = addr => leftPaddedHexBuffer(addr, 8);\nconst nonceBuffer = nonce => _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(nonce, \"hex\");\n\n/**\n * @description Encodes account proof data for cryptographic signing on the Flow blockchain. This function\n * creates a standardized message format that combines the application identifier, account address,\n * and nonce into a format suitable for cryptographic signing. The encoded message can then be signed\n * by the account's private key to create an account proof.\n *\n * @param data Object containing the account proof components\n * @param data.address The Flow account address for which to create the proof\n * @param data.nonce A random hexadecimal string (minimum 32 bytes/64 hex chars) to prevent replay attacks\n * @param data.appIdentifier A unique identifier for your application to prevent cross-app replay attacks\n * @param includeDomainTag Whether to include the FCL domain tag in the encoding\n *\n * @returns The encoded message as a hexadecimal string ready for signing\n *\n * @throws If required parameters are missing or invalid, or if nonce is too short\n *\n * @example\n * // Basic account proof encoding\n * import { encodeAccountProof } from \"@onflow/fcl\"\n *\n * const accountProofData = {\n *   address: \"0x1234567890abcdef\",\n *   nonce: \"75f8587e5bd982ec9289c5be1f9426bd12b4c1de9c7a7e4d8c5f9e8b2a7c3f1e9\", // 64 hex chars (32 bytes)\n *   appIdentifier: \"MyAwesomeApp\"\n * }\n *\n * const encodedMessage = encodeAccountProof(accountProofData)\n * console.log(\"Encoded message:\", encodedMessage)\n */\nconst encodeAccountProof = function (_ref) {\n  let {\n    address,\n    nonce,\n    appIdentifier\n  } = _ref;\n  let includeDomainTag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!address, \"Encode Message For Provable Authn Error: address must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!nonce, \"Encode Message For Provable Authn Error: nonce must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!appIdentifier, \"Encode Message For Provable Authn Error: appIdentifier must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(nonce.length >= 64, \"Encode Message For Provable Authn Error: nonce must be minimum of 32 bytes\");\n  const ACCOUNT_PROOF_DOMAIN_TAG = rightPaddedHexBuffer(_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(\"FCL-ACCOUNT-PROOF-V0.0\").toString(\"hex\"), 32);\n  if (includeDomainTag) {\n    return _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.concat([ACCOUNT_PROOF_DOMAIN_TAG, (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([appIdentifier, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(address)), nonceBuffer(nonce)])]).toString(\"hex\");\n  }\n  return (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([appIdentifier, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(address)), nonceBuffer(nonce)]).toString(\"hex\");\n};\n\n/**\n * @description Injects an external authentication service into the global FCL extensions array.\n * This function is used by wallet providers to register their authentication services with FCL,\n * making them available for user authentication. The service must be of type \"authn\" and have\n * a valid endpoint.\n *\n * @param service The authentication service to inject. Must have type \"authn\" and a valid endpoint\n *\n * @example\n * // Register a wallet authentication service\n * const walletService = {\n *   type: \"authn\",\n *   endpoint: \"https://example-wallet.com/fcl/authn\",\n *   method: \"HTTP/POST\",\n *   identity: { address: \"0x123...\" },\n *   provider: { name: \"Example Wallet\" }\n * }\n * fcl.WalletUtils.injectExtService(walletService)\n */\nfunction injectExtService(service) {\n  if (service.type === \"authn\" && service.endpoint != null) {\n    if (!Array.isArray(window.fcl_extensions)) {\n      window.fcl_extensions = [];\n    }\n    window.fcl_extensions.push(service);\n  } else {\n    console.warn(\"Authn service is required\");\n  }\n}\n\nvar index$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CompositeSignature: CompositeSignature,\n  approve: approve,\n  close: close,\n  decline: decline,\n  encodeAccountProof: encodeAccountProof,\n  encodeMessageFromSignable: _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.encodeMessageFromSignable,\n  injectExtService: injectExtService,\n  onMessageFromFCL: onMessageFromFCL,\n  ready: ready,\n  redirect: redirect,\n  sendMsgToFCL: sendMsgToFCL\n});\n\nconst ACCOUNT_PROOF = \"ACCOUNT_PROOF\";\nconst USER_SIGNATURE = \"USER_SIGNATURE\";\n\n/**\n * @description Validates input arguments for signature verification functions (both account proof and user signature verification).\n * This function performs comprehensive validation of parameters to ensure they meet the requirements for cryptographic\n * signature verification on the Flow blockchain. It handles two different validation scenarios: account proof validation\n * (when appIdentifier is provided) and user signature validation (when message is provided).\n *\n * @param args Object containing the arguments to validate. The validation behavior depends on which properties are present:\n * - For account proof validation: appIdentifier, address, nonce, and signatures are required\n * - For user signature validation: message, address, and compSigs are required\n * @param args.appIdentifier Optional unique identifier for the application (triggers account proof validation mode)\n * @param args.address Flow account address that should be exactly 16 characters (without 0x prefix)\n * @param args.nonce Hexadecimal string representing a cryptographic nonce (for account proof validation)\n * @param args.signatures Array of CompositeSignature objects for account proof validation\n * @param args.message Hexadecimal string representing the signed message (for user signature validation)\n * @param args.compSigs Array of CompositeSignature objects for user signature validation\n *\n * @returns Always returns true if validation passes, otherwise throws an error\n *\n * @throws Throws an invariant error if any validation check fails, with specific error messages for each validation failure\n *\n * @example\n * // Validate account proof arguments\n * const accountProofArgs = {\n *   appIdentifier: \"MyApp\",\n *   address: \"1234567890abcdef\",\n *   nonce: \"75f8587e5bd982ec9289c5be1f9426bd\",\n *   signatures: [{\n *     f_type: \"CompositeSignature\",\n *     f_vsn: \"1.0.0\",\n *     addr: \"0x1234567890abcdef\",\n *     keyId: 0,\n *     signature: \"abc123def456...\"\n *   }]\n * }\n *\n * const isValid = validateArgs(accountProofArgs) // Returns true or throws\n *\n * // Validate user signature arguments\n * const userSigArgs = {\n *   message: \"48656c6c6f20576f726c64\", // \"Hello World\" in hex\n *   address: \"1234567890abcdef\",\n *   compSigs: [{\n *     f_type: \"CompositeSignature\",\n *     f_vsn: \"1.0.0\",\n *     addr: \"0x1234567890abcdef\",\n *     keyId: 0,\n *     signature: \"def456abc123...\"\n *   }]\n * }\n *\n * const isValid = validateArgs(userSigArgs) // Returns true or throws\n */\nconst validateArgs = args => {\n  if (args.appIdentifier) {\n    const {\n      appIdentifier,\n      address,\n      nonce,\n      signatures\n    } = args;\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(appIdentifier), \"verifyAccountProof({ appIdentifier }) -- appIdentifier must be a string\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(address) && (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(address).length === 16, \"verifyAccountProof({ address }) -- address must be a valid address\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(nonce), \"nonce must be a hex string\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Array.isArray(signatures) && signatures.every((sig, i, arr) => sig.f_type === \"CompositeSignature\"), \"Must include an Array of CompositeSignatures to verify\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(signatures.map(cs => cs.addr).every((addr, i, arr) => addr === arr[0]), \"User signatures to be verified must be from a single account address\");\n    return true;\n  } else {\n    const {\n      message,\n      address,\n      compSigs\n    } = args;\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(message), \"Signed message must be a hex string\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(address) && (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(address).length === 16, \"verifyUserSignatures({ address }) -- address must be a valid address\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Array.isArray(compSigs) && compSigs.every((sig, i, arr) => sig.f_type === \"CompositeSignature\"), \"Must include an Array of CompositeSignatures to verify\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(compSigs.map(cs => cs.addr).every((addr, i, arr) => addr === arr[0]), \"User signatures to be verified must be from a single account address\");\n    return true;\n  }\n};\n\n// TODO: pass in option for contract but we're connected to testnet\n// log address + network -> in sync?\nconst getVerifySignaturesScript = async (context, sig, opts) => {\n  const verifyFunction = sig === \"ACCOUNT_PROOF\" ? \"verifyAccountProofSignatures\" : \"verifyUserSignatures\";\n  const network = await createGetChainId(context)(opts);\n  const contractAddresses = {\n    testnet: \"0x74daa6f9c7ef24b1\",\n    mainnet: \"0xb4b82a1c9d21d284\",\n    previewnet: \"0x40b5b8b2ce81ea4a\"\n  };\n  const fclCryptoContract = opts.fclCryptoContract || contractAddresses[network];\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(fclCryptoContract, `${verifyFunction}({ fclCryptoContract }) -- FCLCrypto contract address is unknown for network: ${network}. Please manually specify the FCLCrypto contract address.`);\n  return `\n      import FCLCrypto from ${fclCryptoContract}\n\n      access(all) fun main(\n          address: Address, \n          message: String, \n          keyIndices: [Int], \n          signatures: [String]\n      ): Bool {\n        return FCLCrypto.${verifyFunction}(address: address, message: message, keyIndices: keyIndices, signatures: signatures)\n      }\n    `;\n};\nfunction createVerifyAccountProof(context) {\n  /**\n   * @description Verifies the authenticity of an account proof signature on the Flow blockchain.\n   * Account proofs are cryptographic signatures used to prove ownership of a Flow account without\n   * revealing private keys. This function validates that the provided signatures were indeed created\n   * by the private keys associated with the specified Flow account address.\n   *\n   * @param appIdentifier A unique identifier for your application. This is typically\n   * your app's name or domain and is included in the signed message to prevent replay attacks\n   * across different applications.\n   * @param accountProofData Object containing the account proof data to verify\n   * @param accountProofData.address The Flow account address that allegedly signed the proof\n   * @param accountProofData.nonce A random hexadecimal string (minimum 32 bytes, 64 hex chars)\n   * used to prevent replay attacks. Should be unique for each proof request.\n   * @param accountProofData.signatures Array of composite signatures to verify\n   * against the account's public keys\n   * @param opts Optional configuration parameters\n   * @param opts.fclCryptoContract Override address for the FCLCrypto contract if not using\n   * the default for the current network\n   *\n   * @returns Promise that resolves to true if all signatures are valid, false otherwise.\n   *\n   * @returns `true` if verified or `false`\n   *\n   * @example\n   * import * as fcl from \"@onflow/fcl\"\n   *\n   * const accountProofData = {\n   *   address: \"0x123\",\n   *   nonce: \"F0123\"\n   *   signatures: [{f_type: \"CompositeSignature\", f_vsn: \"1.0.0\", addr: \"0x123\", keyId: 0, signature: \"abc123\"}],\n   * }\n   *\n   * const isValid = await fcl.AppUtils.verifyAccountProof(\n   *   \"AwesomeAppId\",\n   *   accountProofData,\n   *   {fclCryptoContract}\n   * )\n   */\n  async function verifyAccountProof(appIdentifier, _ref) {\n    let {\n      address,\n      nonce,\n      signatures\n    } = _ref;\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    validateArgs({\n      appIdentifier,\n      address,\n      nonce,\n      signatures\n    });\n    const message = encodeAccountProof({\n      address,\n      nonce,\n      appIdentifier\n    }, false);\n    const signaturesArr = [];\n    const keyIndices = [];\n    for (const el of signatures) {\n      signaturesArr.push(el.signature);\n      keyIndices.push(el.keyId.toString());\n    }\n    return createQuery(context)({\n      cadence: await getVerifySignaturesScript(context, ACCOUNT_PROOF, opts),\n      args: (arg, t) => [arg((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(address), t.Address), arg(message, t.String), arg(keyIndices, t.Array(t.Int)), arg(signaturesArr, t.Array(t.String))]\n    });\n  }\n  return verifyAccountProof;\n}\nfunction createVerifyUserSignatures(context) {\n  /**\n   * @description Verifies user signatures for arbitrary messages on the Flow blockchain. This function\n   * validates that the provided signatures were created by the private keys associated with the specified\n   * Flow account when signing the given message. This is useful for authenticating users or validating\n   * signed data outside of transaction contexts.\n   *\n   * @param message The message that was signed, encoded as a hexadecimal string. The original\n   * message should be converted to hex before passing to this function.\n   * @param compSigs Array of composite signatures to verify. All signatures\n   * must be from the same account address.\n   * @param compSigs[].f_type Must be \"CompositeSignature\"\n   * @param compSigs[].f_vsn Must be \"1.0.0\"\n   * @param compSigs[].addr The Flow account address that created the signature\n   * @param compSigs[].keyId The key ID used to create the signature\n   * @param compSigs[].signature The actual signature data\n   * @param opts Optional configuration parameters\n   * @param opts.fclCryptoContract Override address for the FCLCrypto contract\n   *\n   * @returns Promise that resolves to true if all signatures are valid, false otherwise\n   *\n   * @throws If parameters are invalid, signatures are from different accounts, or network issues occur\n   *\n   * @example\n   * // Basic message signature verification\n   * import * as fcl from \"@onflow/fcl\"\n   *\n   * const originalMessage = \"Hello, Flow blockchain!\"\n   * const hexMessage = Buffer.from(originalMessage).toString(\"hex\")\n   *\n   * const signatures = [{\n   *   f_type: \"CompositeSignature\",\n   *   f_vsn: \"1.0.0\",\n   *   addr: \"0x1234567890abcdef\",\n   *   keyId: 0,\n   *   signature: \"abc123def456...\" // signature from user's wallet\n   * }]\n   *\n   * const isValid = await fcl.AppUtils.verifyUserSignatures(\n   *   hexMessage,\n   *   signatures\n   * )\n   */\n  async function verifyUserSignatures(message, compSigs) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const address = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(compSigs[0].addr);\n    validateArgs({\n      message,\n      address,\n      compSigs\n    });\n    const signaturesArr = [];\n    const keyIndices = [];\n    for (const el of compSigs) {\n      signaturesArr.push(el.signature);\n      keyIndices.push(el.keyId.toString());\n    }\n    return createQuery(context)({\n      cadence: await getVerifySignaturesScript(context, USER_SIGNATURE, opts),\n      args: (arg, t) => [arg(address, t.Address), arg(message, t.String), arg(keyIndices, t.Array(t.Int)), arg(signaturesArr, t.Array(t.String))]\n    });\n  }\n  return verifyUserSignatures;\n}\nconst verifyAccountProof = /* @__PURE__ */createVerifyAccountProof(createPartialGlobalFCLContext());\nconst verifyUserSignatures$1 = /* @__PURE__ */createVerifyUserSignatures(createPartialGlobalFCLContext());\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  verifyAccountProof: verifyAccountProof,\n  verifyUserSignatures: verifyUserSignatures$1\n});\n\n/**\n * @description Verify a valid signature/s for an account on Flow.\n * @deprecated since version '1.0.0-alpha.0', use AppUtils.verifyUserSignatures instead\n */\nconst verifyUserSignatures = _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log.deprecate({\n  pkg: \"FCL\",\n  subject: \"fcl.verifyUserSignatures()\",\n  message: \"Please use fcl.AppUtils.verifyUserSignatures()\",\n  callback: function verifyUserSignatures(message, compSigs) {\n    return verifyUserSignatures$1(message, compSigs);\n  }\n});\n\n/**\n * @description Serializes a Flow transaction or script to a JSON-formatted signable voucher that can be\n * used for offline signing or inspection. This is useful for creating signable transactions that can be\n * signed by external wallets or hardware devices.\n *\n * @param args Array of interaction builder functions or a pre-built interaction object. Builder functions are typically from @onflow/sdk such as\n * transaction(), script(), args(), proposer(), etc.\n * @param opts Optional configuration object\n * @param opts.resolve Custom resolve function to use instead of the default\n *\n * @returns A JSON string representation of the signable voucher that contains all\n * the transaction details needed for signing\n *\n * @example\n * // Serialize a simple transaction\n * import * as fcl from \"@onflow/fcl\"\n *\n * const voucher = await fcl.serialize([\n *   fcl.transaction`\n *     transaction(amount: UFix64, to: Address) {\n *       prepare(signer: AuthAccount) {\n *         // Transaction logic here\n *       }\n *     }\n *   `,\n *   fcl.args([\n *     fcl.arg(\"10.0\", fcl.t.UFix64),\n *     fcl.arg(\"0x01\", fcl.t.Address)\n *   ]),\n *   fcl.proposer(authz),\n *   fcl.payer(authz),\n *   fcl.authorizations([authz])\n * ])\n */\nfunction createSerialize(context) {\n  const serialize = async function (args) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const resolveFunction = opts.resolve || context.sdk.resolve;\n    if (Array.isArray(args)) args = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.pipe)((0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.interaction)(), args);\n    return JSON.stringify((0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.createSignableVoucher)(await resolveFunction(args)), null, 2);\n  };\n  return serialize;\n}\nconst serialize = /* @__PURE__ */createSerialize(createPartialGlobalFCLContext());\n\nconst ERROR_CODE_REGEX = /\\[Error Code: (\\d+)\\]/;\nclass TransactionError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n    this.type = _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.FvmErrorCode[code];\n  }\n  static fromErrorMessage(errorMessage) {\n    const match = errorMessage.match(ERROR_CODE_REGEX);\n    const code = match ? parseInt(match[1], 10) : undefined;\n    return new TransactionError(errorMessage, code || _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.FvmErrorCode.UNKNOWN_ERROR);\n  }\n}\n\n/**\n * @description Extracts configuration values that match a given regular expression pattern from the Flow configuration.\n * This utility function filters the configuration entries using the provided regex pattern and returns a simplified\n * object with the matching keys (with the regex pattern removed) and their corresponding values.\n *\n * @param regex Regular expression pattern to filter configuration keys. The matched portion will be removed from the resulting keys\n * @returns Promise that resolves to an object containing the filtered configuration entries with simplified keys\n *\n * @example\n * // Extract all configuration keys starting with \"accessNode\"\n * const accessNodeConfig = await configLens(/^accessNode\\./)\n * // If config has \"accessNode.api\" = \"https://rest-mainnet.onflow.org\"\n * // Result: { \"api\": \"https://rest-mainnet.onflow.org\" }\n *\n * // Extract wallet-related configuration\n * const walletConfig = await configLens(/^wallet\\./)\n * // Filters keys like \"wallet.discovery.api\" and returns simplified object\n */\nasync function configLens(context, regex) {\n  return Object.fromEntries(Object.entries(await context.config.where(regex)).map(_ref => {\n    let [key, value] = _ref;\n    return [key.replace(regex, \"\"), value];\n  }));\n}\n\n/**\n * @description Checks if a transaction has expired based on its status code.\n * A transaction is considered expired when its status equals 5.\n *\n * @param tx The transaction status object to check\n * @returns True if the transaction has expired, false otherwise\n *\n * @example\n * // Check if a transaction has expired\n * const txStatus = await fcl.tx(transactionId).snapshot()\n * if (isExpired(txStatus)) {\n *   console.log(\"Transaction has expired\")\n * }\n */\nconst isExpired = tx => tx.status === 5;\n\n/**\n * @description Checks if a transaction has been sealed. A transaction is sealed when it has been\n * included in a block and finalized on the blockchain (status >= 4).\n *\n * @param tx The transaction status object to check\n * @returns True if the transaction is sealed, false otherwise\n *\n * @example\n * // Wait for transaction to be sealed\n * const txStatus = await fcl.tx(transactionId).snapshot()\n * if (isSealed(txStatus)) {\n *   console.log(\"Transaction is sealed and finalized\")\n * }\n */\nconst isSealed = tx => tx.status >= 4;\n\n/**\n * @description Checks if a transaction has been executed. A transaction is executed when it has\n * been processed by the blockchain network (status >= 3).\n *\n * @param tx The transaction status object to check\n * @returns True if the transaction has been executed, false otherwise\n *\n * @example\n * // Check if transaction has been executed\n * const txStatus = await fcl.tx(transactionId).snapshot()\n * if (isExecuted(txStatus)) {\n *   console.log(\"Transaction has been executed\")\n * }\n */\nconst isExecuted = tx => tx.status >= 3;\n\n/**\n * @description Checks if a transaction has been finalized. A transaction is finalized when it has\n * been included in a block (status >= 2).\n *\n * @param tx The transaction status object to check\n * @returns True if the transaction has been finalized, false otherwise\n *\n * @example\n * // Check if transaction has been finalized\n * const txStatus = await fcl.tx(transactionId).snapshot()\n * if (isFinalized(txStatus)) {\n *   console.log(\"Transaction has been finalized\")\n * }\n */\nconst isFinalized = tx => tx.status >= 2;\n\n/**\n * @description Checks if a transaction is pending. A transaction is pending when it has been\n * submitted to the network but not yet processed (status >= 1).\n *\n * @param tx The transaction status object to check\n * @returns True if the transaction is pending, false otherwise\n *\n * @example\n * // Check if transaction is still pending\n * const txStatus = await fcl.tx(transactionId).snapshot()\n * if (isPending(txStatus)) {\n *   console.log(\"Transaction is still pending\")\n * }\n */\nconst isPending = tx => tx.status >= 1;\n\n/**\n * @description Checks if a transaction status is unknown. A transaction has unknown status when\n * it hasn't been processed yet or there's no information available (status >= 0).\n *\n * @param tx The transaction status object to check\n * @returns True if the transaction status is unknown, false otherwise\n *\n * @example\n * // Check if transaction status is unknown\n * const txStatus = await fcl.tx(transactionId).snapshot()\n * if (isUnknown(txStatus)) {\n *   console.log(\"Transaction status is unknown\")\n * }\n */\nconst isUnknown = tx => tx.status >= 0;\n\n/**\n * @description Performs a deep equality comparison between two values. This function recursively\n * compares all properties of objects and arrays to determine if they are equal.\n *\n * @param a First value to compare\n * @param b Second value to compare\n * @returns True if the values are deeply equal, false otherwise\n *\n * @example\n * // Compare two objects\n * const obj1 = { name: \"Flow\", version: \"1.0\" }\n * const obj2 = { name: \"Flow\", version: \"1.0\" }\n * console.log(deepEqual(obj1, obj2)) // true\n */\nconst deepEqual = (a, b) => {\n  if (a === b) return true;\n  if (typeof a !== \"object\" || typeof b !== \"object\") return false;\n  if (Object.keys(a).length !== Object.keys(b).length) return false;\n  for (const key in a) if (!deepEqual(a[key], b[key])) return false;\n  return true;\n};\n\n/**\n * @description Checks if two values are different by performing a deep equality comparison.\n * This is the inverse of the deepEqual function.\n *\n * @param a First value to compare\n * @param b Second value to compare\n * @returns True if the values are different, false if they are equal\n *\n * @example\n * // Check if objects are different\n * const obj1 = { name: \"Flow\", version: \"1.0\" }\n * const obj2 = { name: \"Flow\", version: \"2.0\" }\n * console.log(isDiff(obj1, obj2)) // true\n */\nconst isDiff = (a, b) => {\n  return !deepEqual(a, b);\n};\n\n/**\n * @description Extracts a transaction ID from either a string or an object containing a transactionId property.\n * This utility function handles both formats and ensures a valid transaction ID is returned.\n *\n * @param transactionId Either a transaction ID string or an object with a transactionId property\n * @returns The transaction ID as a string\n * @throws If transactionId is null, undefined, or invalid\n *\n * @example\n * // Extract from string\n * const txId = scoped(\"abc123def456\")\n * console.log(txId) // \"abc123def456\"\n */\nconst scoped = transactionId => {\n  if (typeof transactionId === \"object\") transactionId = transactionId.transactionId;\n  if (transactionId == null) throw new Error(\"transactionId required\");\n  return transactionId;\n};\n\nconst TXID_REGEXP = /^[0-9a-fA-F]{64}$/;\n\nconst POLL = \"POLL\";\nconst TIMEOUT = \"TIMEOUT\";\n\n/**\n * @typedef {import(\"@onflow/typedefs\").Transaction} Transaction\n */\n\n/**\n * @typedef {import(\"@onflow/typedefs\").TransactionStatus} TransactionStatus\n */\n\nconst fetchTxStatus = async transactionId => {\n  return (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send)([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getTransactionStatus)(transactionId)]).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n};\nconst makeHandlers$1 = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.INIT]: async ctx => {\n      setTimeout(() => ctx.sendSelf(TIMEOUT), opts.txNotFoundTimeout);\n      ctx.sendSelf(POLL);\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SUBSCRIBE]: (ctx, letter) => {\n      ctx.subscribe(letter.from);\n      ctx.send(letter.from, _onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UPDATED, ctx.all());\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UNSUBSCRIBE]: (ctx, letter) => {\n      ctx.unsubscribe(letter.from);\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SNAPSHOT]: async (ctx, letter) => {\n      letter.reply(ctx.all());\n    },\n    [TIMEOUT]: async ctx => {\n      // If status is still unknown, send a timeout error\n      if (Object.keys(ctx.all()).length === 0) {\n        ctx.fatalError(new Error(`TX status polling failed: no transaction was found within timeout interval (${opts.txNotFoundTimeout}ms)`));\n      }\n    },\n    [POLL]: async ctx => {\n      // Helper to queue another poll\n      const poll = () => setTimeout(() => ctx.sendSelf(POLL), opts.pollRate);\n      let tx;\n      const prevTx = ctx.all();\n      try {\n        tx = await fetchTxStatus(ctx.self());\n      } catch (e) {\n        const isHttpNotFound = e instanceof _onflow_transport_http__WEBPACK_IMPORTED_MODULE_10__.HTTPRequestError && e.statusCode === 404;\n        const isGrpcNotFound = e.code === _improbable_eng_grpc_web__WEBPACK_IMPORTED_MODULE_11__.grpc.Code.NotFound;\n\n        // If TX is not found, suppress error and poll again\n        if (isHttpNotFound || isGrpcNotFound) {\n          return poll();\n        }\n        return ctx.fatalError(e);\n      }\n      if (!isSealed(tx)) poll();\n      if (isDiff(prevTx, tx)) ctx.broadcast(_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UPDATED, tx);\n      ctx.merge(tx);\n    }\n  };\n};\nconst spawnTransaction = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return transactionId => {\n    return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.spawn)(makeHandlers$1(opts), scoped(transactionId));\n  };\n};\n\n/**\n * Provides methods for interacting with a transaction\n *\n * @param {string} transactionId - The transaction ID\n * @param {object} [opts] - Optional parameters\n * @param {number} [opts.pollRate=1000] - Polling rate in milliseconds\n * @param {number} [opts.txNotFoundTimeout=12500] - Timeout in milliseconds for ignoring transaction not found errors (do not modify unless you know what you are doing)\n * @returns {{\n *    snapshot: function(): Promise<TransactionStatus>,\n *    subscribe: function(SubscriptionCallback): function(): void,\n *    onceFinalized: function(): Promise<TransactionStatus>,\n *    onceExecuted: function(): Promise<TransactionStatus>,\n *    onceSealed: function(): Promise<TransactionStatus>\n * }}\n * @throws {Error} If transactionId is not a 64 byte hash string\n */\nfunction transaction$1(transactionId) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    txNotFoundTimeout: 12500,\n    pollRate: 1000\n  };\n  // Validate transactionId as 64 byte hash\n  if (!TXID_REGEXP.test(scoped(transactionId))) throw new Error(\"Invalid transactionId\");\n  function snapshot() {\n    return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.snapshoter)(transactionId, spawnTransaction(opts));\n  }\n  function subscribe(callback) {\n    return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.subscriber)(scoped(transactionId), spawnTransaction(opts), callback);\n  }\n  function once(predicate) {\n    return function innerOnce() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const suppress = opts.suppress || false;\n      return new Promise((resolve, reject) => {\n        const unsub = subscribe((txStatus, error) => {\n          if ((error || txStatus.statusCode) && !suppress) {\n            if (error != null) {\n              reject(error);\n              unsub();\n            } else if (txStatus.statusCode === 1) {\n              const transactionError = TransactionError.fromErrorMessage(txStatus.errorMessage);\n              reject(transactionError);\n              unsub();\n            }\n            return;\n          }\n          if (predicate(txStatus)) {\n            resolve(txStatus);\n            unsub();\n          }\n        });\n      });\n    };\n  }\n  return {\n    snapshot,\n    subscribe,\n    onceFinalized: once(isFinalized),\n    onceExecuted: once(isExecuted),\n    onceSealed: once(isSealed)\n  };\n}\ntransaction$1.isUnknown = isUnknown;\ntransaction$1.isPending = isPending;\ntransaction$1.isFinalized = isFinalized;\ntransaction$1.isExecuted = isExecuted;\ntransaction$1.isSealed = isSealed;\ntransaction$1.isExpired = isExpired;\n\nconst FLOW_EMULATOR$1 = \"local\";\n\n// Map of transaction observables\n// Used for shared global singleton to prevent duplicate subscriptions\nconst registry = new Map();\nfunction createTransaction(context) {\n  /**\n   * @description Creates a transaction monitor that provides methods for tracking and subscribing to\n   * transaction status updates on the Flow blockchain. This function returns an object with methods\n   * to get snapshots, subscribe to status changes, and wait for specific transaction states.\n   *\n   * @param transactionId The 64-character hex transaction ID to monitor. Must be a valid\n   * Flow transaction hash (64 bytes represented as hex string).\n   * @param opts Optional configuration parameters\n   * @param opts.pollRate Polling rate in milliseconds when using legacy polling fallback\n   * @param opts.txNotFoundTimeout Timeout in milliseconds for ignoring transaction\n   * not found errors during initial transaction propagation (do not modify unless you know what you are doing)\n   *\n   * @returns Transaction monitor object with methods for tracking transaction status\n   *\n   * @throws If transactionId is not a valid 64-byte hash string\n   *\n   * @example\n   * // Basic transaction monitoring\n   * import * as fcl from \"@onflow/fcl\"\n   *\n   * const txId = await fcl.mutate({\n   *   cadence: `\n   *     transaction {\n   *       execute { log(\"Hello, World!\") }\n   *     }\n   *   `\n   * })\n   *\n   * // Get current status\n   * const status = await fcl.tx(txId).snapshot()\n   * console.log(\"Current status:\", status.status)\n   *\n   * // Subscribe to all status changes\n   * const unsubscribe = fcl.tx(txId).subscribe((status) => {\n   *   console.log(\"Status update:\", status.status)\n   *   if (status.status === fcl.transaction.isSealed) {\n   *     console.log(\"Transaction sealed!\")\n   *     console.log(\"Events:\", status.events)\n   *   }\n   * })\n   * // Clean up subscription when done\n   * setTimeout(() => unsubscribe(), 60000)\n   *\n   * // Wait for specific transaction states\n   * try {\n   *   // Wait for finalization (consensus reached)\n   *   const finalizedStatus = await fcl.tx(txId).onceFinalized()\n   *   console.log(\"Transaction finalized\")\n   *\n   *   // Wait for execution (transaction executed)\n   *   const executedStatus = await fcl.tx(txId).onceExecuted()\n   *   console.log(\"Transaction executed\")\n   *\n   *   // Wait for sealing (transaction sealed in block)\n   *   const sealedStatus = await fcl.tx(txId).onceSealed()\n   *   console.log(\"Transaction sealed:\", sealedStatus.events)\n   * } catch (error) {\n   *   console.error(\"Transaction failed:\", error.message)\n   * }\n   *\n   * // Handle transaction errors\n   * fcl.tx(txId).subscribe(\n   *   (status) => {\n   *     if (status.statusCode === 1) {\n   *       console.error(\"Transaction error:\", status.errorMessage)\n   *     }\n   *   },\n   *   (error) => {\n   *     console.error(\"Subscription error:\", error)\n   *   }\n   * )\n   */\n  function transaction(transactionId) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      txNotFoundTimeout: 12500,\n      pollRate: 1000\n    };\n    // Validate transactionId as 64 byte hash\n    if (!TXID_REGEXP.test(scoped(transactionId))) throw new Error(\"Invalid transactionId\");\n    function getObservable() {\n      let observable = registry.get(transactionId);\n      if (!observable) {\n        observable = createObservable(context, transactionId, opts);\n        registry.set(transactionId, observable);\n      }\n      return observable;\n    }\n    function snapshot() {\n      return Promise.resolve(getObservable().value);\n    }\n    function subscribe(onData, onError) {\n      const observable = getObservable();\n      const {\n        unsubscribe\n      } = observable.subscribe(onData, onError);\n      return () => unsubscribe();\n    }\n    function once(predicate) {\n      return function innerOnce() {\n        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n          suppress: false\n        };\n        const suppress = opts.suppress || false;\n        return new Promise((resolve, reject) => {\n          const unsub = subscribe(txStatus => {\n            if (txStatus.statusCode === 1) {\n              const transactionError = TransactionError.fromErrorMessage(txStatus.errorMessage);\n              reject(transactionError);\n              unsub();\n            } else if (predicate(txStatus)) {\n              resolve(txStatus);\n              unsub();\n            }\n          }, err => {\n            if (!suppress) {\n              reject(err);\n              unsub();\n            }\n          });\n        });\n      };\n    }\n    return {\n      snapshot,\n      subscribe,\n      onceFinalized: once(isFinalized),\n      onceExecuted: once(isExecuted),\n      onceSealed: once(isSealed)\n    };\n  }\n  transaction.isUnknown = _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.isUnknown;\n  transaction.isPending = isPending;\n  transaction.isFinalized = isFinalized;\n  transaction.isExecuted = isExecuted;\n  transaction.isSealed = isSealed;\n  transaction.isExpired = isExpired;\n  return transaction;\n}\nconst transaction = /* @__PURE__ */createTransaction(createPartialGlobalFCLContext());\n\n/**\n * @description Creates an observable for a transaction\n */\nfunction createObservable(context, txId, opts) {\n  const observers = new Set();\n  let value = {\n    blockId: \"\",\n    status: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.TransactionExecutionStatus.UNKNOWN,\n    statusCode: 0,\n    errorMessage: \"\",\n    events: [],\n    statusString: \"\"\n  };\n\n  // Initialize the subscription\n  init().catch(error);\n  async function init() {\n    const flowNetwork = await createGetChainId(context)();\n\n    // As of Flow CLI v2.2.8, WebSocket subscriptions are not supported on the Flow emulator\n    // This conditional will be removed when WebSocket subscriptions are supported in this environment\n    if (flowNetwork === FLOW_EMULATOR$1) {\n      console.warn(\"Events are not supported on the Flow emulator, falling back to legacy polling.\");\n      fallbackLegacyPolling();\n    } else {\n      subscribeTransactionStatuses();\n    }\n  }\n\n  // Subscribe to transaction status updates\n  function subscribeTransactionStatuses() {\n    // Subscribe to transaction status updates\n    const subscription = context.sdk.subscribe({\n      topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.SubscriptionTopic.TRANSACTION_STATUSES,\n      args: {\n        transactionId: txId\n      },\n      onData: txStatus => {\n        if (isDiff(value, txStatus)) {\n          value = txStatus;\n          next(txStatus);\n        }\n\n        // Clean up the subscription if the transaction is sealed\n        // Wait for next tick to ensure unsubscribe is defined\n        if (isSealed(txStatus)) {\n          new Promise(resolve => setTimeout(resolve, 0)).then(() => {\n            if (isSealed(txStatus)) {\n              subscription.unsubscribe();\n            }\n          });\n        }\n      },\n      onError: err => {\n        if (err instanceof _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.SubscriptionsNotSupportedError) {\n          console.warn(\"Failed to subscribe to transaction status updates using real-time streaming (are you using the deprecated GRPC transport?), falling back to polling.\");\n          fallbackLegacyPolling();\n        } else {\n          error(err);\n        }\n      }\n    });\n  }\n  function fallbackLegacyPolling() {\n    // Poll for transaction status updates\n    const unsubscribe = transaction$1(txId, opts).subscribe((txStatus, err) => {\n      if (err) {\n        error(err);\n      } else if (txStatus && isDiff(value, txStatus)) {\n        value = txStatus;\n        next(txStatus);\n\n        // Clean up the subscription if the transaction is sealed\n        // Wait for next tick to ensure unsubscribe is defined\n        if (isSealed(txStatus)) {\n          new Promise(resolve => setTimeout(resolve, 0)).then(() => {\n            unsubscribe();\n          });\n        }\n      }\n    });\n  }\n  function next(txStatus) {\n    for (const observer of observers) {\n      try {\n        observer.onData(txStatus);\n      } catch (error) {\n        console.error(\"Error in transaction observer\", error);\n      }\n    }\n  }\n  function error(err) {\n    for (const observer of observers) {\n      try {\n        observer.onError(err);\n      } catch (error) {\n        console.error(\"Error in transaction observer\", error);\n      }\n    }\n  }\n  return {\n    subscribe(onData, onError) {\n      const observer = {\n        onData,\n        onError: onError || (() => {})\n      };\n      observers.add(observer);\n      onData(value);\n      return {\n        unsubscribe: () => observers.delete(observer)\n      };\n    },\n    get value() {\n      return value;\n    }\n  };\n}\n\nconst RATE = 10000;\nconst UPDATED$1 = \"UPDATED\";\nconst TICK = \"TICK\";\nconst HIGH_WATER_MARK = \"hwm\";\nconst scheduleTick = async (fclContext, ctx) => {\n  return setTimeout(() => ctx.sendSelf(TICK), await fclContext.config.get(\"fcl.eventPollRate\", RATE));\n};\nfunction createHandlers$1(fclContext) {\n  const HANDLERS = {\n    [TICK]: async ctx => {\n      if (!ctx.hasSubs()) return;\n      let hwm = ctx.get(HIGH_WATER_MARK);\n      if (hwm == null) {\n        ctx.put(HIGH_WATER_MARK, await fclContext.sdk.block());\n        ctx.put(TICK, await scheduleTick(fclContext, ctx));\n      } else {\n        let next = await fclContext.sdk.block();\n        ctx.put(HIGH_WATER_MARK, next);\n        if (hwm.height < next.height) {\n          const data = await fclContext.sdk.send([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockHeightRange)(ctx.self(), hwm.height + 1, next.height)]).then(fclContext.sdk.decode);\n          for (let d of data) ctx.broadcast(UPDATED$1, d);\n        }\n        ctx.put(TICK, await scheduleTick(fclContext, ctx));\n      }\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SUBSCRIBE]: async (ctx, letter) => {\n      if (!ctx.hasSubs()) {\n        ctx.put(TICK, await scheduleTick(fclContext, ctx));\n      }\n      ctx.subscribe(letter.from);\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UNSUBSCRIBE]: (ctx, letter) => {\n      ctx.unsubscribe(letter.from);\n      if (!ctx.hasSubs()) {\n        clearTimeout(ctx.get(TICK));\n        ctx.delete(TICK);\n        ctx.delete(HIGH_WATER_MARK);\n      }\n    }\n  };\n  return HANDLERS;\n}\nconst spawnEvents = (fclContext, key) => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.spawn)(createHandlers$1(fclContext), key);\nfunction createLegacyEvents(context) {\n  /**\n   * @description Subscribe to events\n   * @param key A valid event name\n   * @returns An object with a subscribe method\n   *\n   * @example\n   * import * as fcl from \"@onflow/fcl\"\n   * fcl.events(eventName).subscribe((event) => console.log(event))\n   */\n  function legacyEvents(key) {\n    return {\n      /**\n       * @description Subscribe to events\n       * @param {Function} callback The callback function\n       * @returns {SubscriptionCallback}\n       */\n      subscribe: callback => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.subscriber)(key, address => spawnEvents(context, address), callback)\n    };\n  }\n  return legacyEvents;\n}\n\nconst FLOW_EMULATOR = \"local\";\nfunction createEvents(context) {\n  /**\n   * @description Subscribes to Flow blockchain events in real-time. This function provides a way to listen\n   * for specific events emitted by smart contracts on the Flow blockchain. It automatically handles\n   * fallback to legacy polling for environments that don't support WebSocket subscriptions.\n   *\n   * @param filterOrType Event filter object or event type string.\n   * If a string is provided, it will be treated as a single event type to subscribe to.\n   * If an EventFilter object is provided, it can contain multiple event types and other filter criteria.\n   * @param filterOrType.eventTypes Array of event type strings to subscribe to\n   * @param filterOrType.startBlockId Block ID to start streaming from\n   * @param filterOrType.startBlockHeight Block height to start streaming from\n   *\n   * @returns An object containing a subscribe method\n   * @returns returns.subscribe Function to start the subscription\n   * @returns returns.subscribe.onData Callback function called when an event is received\n   * @returns returns.subscribe.onError Optional callback function called when an error occurs\n   * @returns returns.subscribe.unsubscribe Function returned by subscribe() to stop the subscription\n   *\n   * @example\n   * // Subscribe to a specific event type\n   * import * as fcl from \"@onflow/fcl\"\n   *\n   * const unsubscribe = fcl.events(\"A.0x1654653399040a61.FlowToken.TokensWithdrawn\")\n   *   .subscribe((event) => {\n   *     console.log(\"Event received:\", event)\n   *     console.log(\"Event data:\", event.data)\n   *     console.log(\"Transaction ID:\", event.transactionId)\n   *   })\n   *\n   * // Stop listening after 30 seconds\n   * setTimeout(() => {\n   *   unsubscribe()\n   * }, 30000)\n   *\n   * // Subscribe to multiple event types with error handling\n   * const unsubscribe = fcl.events({\n   *   eventTypes: [\n   *     \"A.0x1654653399040a61.FlowToken.TokensWithdrawn\",\n   *     \"A.0x1654653399040a61.FlowToken.TokensDeposited\"\n   *   ]\n   * }).subscribe(\n   *   (event) => {\n   *     console.log(\"Token event:\", event.type, event.data)\n   *   },\n   *   (error) => {\n   *     console.error(\"Event subscription error:\", error)\n   *   }\n   * )\n   *\n   * // Subscribe to events starting from a specific block height\n   * const unsubscribe = fcl.events({\n   *   eventTypes: [\"A.CONTRACT.EVENT\"],\n   *   startBlockHeight: 12345678\n   * }).subscribe((event) => {\n   *   console.log(\"Historical and new events:\", event)\n   * })\n   */\n  function events(filterOrType) {\n    let filter;\n    if (typeof filterOrType === \"string\") {\n      filter = {\n        eventTypes: [filterOrType]\n      };\n    } else {\n      filter = filterOrType || {};\n    }\n    return {\n      subscribe: function (onData) {\n        let onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : error => {\n          console.error(\"Unhandled error in event subscription:\", error);\n        };\n        let unsubscribeFn = () => {};\n        let unsubscribeFnLegacy = () => {};\n\n        // Subscribe to the event stream\n        function subscribeEventStream() {\n          const {\n            unsubscribe\n          } = context.sdk.subscribe({\n            topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.SubscriptionTopic.EVENTS,\n            args: filter,\n            onData: event => {\n              // Emit the event\n              onData(event);\n            },\n            onError: error => {\n              // If subscriptions are not supported, fallback to legacy polling, otherwise return the error\n              if (error instanceof _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.SubscriptionsNotSupportedError) {\n                console.warn(\"Failed to subscribe to events using real-time streaming (are you using the deprecated GRPC transport?), falling back to legacy polling.\");\n                fallbackLegacyPolling();\n              } else {\n                onError(error);\n              }\n            }\n          });\n          unsubscribeFn = unsubscribe;\n        }\n\n        // Fallback to legacy polling if real-time streaming is not supported\n        function fallbackLegacyPolling() {\n          if (typeof filterOrType !== \"string\") {\n            throw new Error(\"Legacy fcl.events fallback only supports string filters (single event type)\");\n          }\n          unsubscribeFnLegacy = createLegacyEvents(context)(filterOrType).subscribe((event, error) => {\n            if (error) {\n              onError(error);\n            } else {\n              if (event) {\n                onData(event);\n              }\n            }\n          });\n        }\n        async function subscribeToEvents() {\n          const network = await createGetChainId(context)();\n\n          // As of Flow CLI v2.2.8, WebSocket subscriptions are not supported on the Flow emulator\n          // This conditional will be removed when WebSocket subscriptions are supported in this environment\n          if (network === FLOW_EMULATOR) {\n            console.warn(\"Events are not supported on the Flow emulator, falling back to legacy polling.\");\n            fallbackLegacyPolling();\n          } else {\n            subscribeEventStream();\n          }\n        }\n\n        // Subscribe to events\n        const initPromise = subscribeToEvents().catch(error => {\n          onError(error);\n        });\n\n        // Return an unsubscribe function\n        return () => {\n          initPromise.finally(() => {\n            unsubscribeFn();\n            unsubscribeFnLegacy();\n          });\n        };\n      }\n    };\n  }\n  return events;\n}\nconst events = /*@__PURE__*/createEvents(createPartialGlobalFCLContext());\n\nconst stub = () => {\n  throw new Error(`Platform specific Core Strategies are not initialized`);\n};\nconst stubCoreStrategies = {\n  [CORE_STRATEGIES[\"EXT/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"HTTP/POST\"]]: stub,\n  [CORE_STRATEGIES[\"IFRAME/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"POP/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"TAB/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"EXT/RPC\"]]: stub\n};\nconst supportedPlugins = [\"ServicePlugin\"];\nconst supportedServicePlugins = [\"discovery-service\"];\nconst validateDiscoveryPlugin = servicePlugin => {\n  const {\n    services = [],\n    serviceStrategy\n  } = servicePlugin;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Array.isArray(services), \"Services must be an array\");\n  for (const ds of services) {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(ds.f_type) && ds.f_type === \"Service\", \"Service is required\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(ds.type) && ds.type === \"authn\", `Service must be type authn. Received ${ds.type}`);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(ds.method in CORE_STRATEGIES || serviceStrategy.method === ds.method, `Service method ${ds.method} is not supported`);\n  }\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(serviceStrategy), \"Service strategy is required\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(serviceStrategy.method) && isString(serviceStrategy.method), \"Service strategy method is required\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(serviceStrategy.exec) && isFunc(serviceStrategy.exec), \"Service strategy exec function is required\");\n  return {\n    discoveryServices: services,\n    serviceStrategy\n  };\n};\nconst ServiceRegistry = _ref => {\n  let {\n    coreStrategies\n  } = _ref;\n  let services = new Set();\n  let strategies = new Map(Object.entries(coreStrategies));\n  const add = servicePlugin => {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(supportedServicePlugins.includes(servicePlugin.type), `Service Plugin type ${servicePlugin.type} is not supported`);\n    if (servicePlugin.type === \"discovery-service\") {\n      const {\n        discoveryServices,\n        serviceStrategy\n      } = validateDiscoveryPlugin(servicePlugin);\n      setServices(discoveryServices);\n      if (!strategies.has(serviceStrategy.method)) {\n        strategies.set(serviceStrategy.method, serviceStrategy.exec);\n      } else {\n        (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log)({\n          title: `Add Service Plugin`,\n          message: `Service strategy for ${serviceStrategy.method} already exists`,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.LEVELS.warn\n        });\n      }\n    }\n  };\n  const setServices = discoveryServices => services = new Set([...discoveryServices]);\n  const getServices = () => [...services];\n  const getStrategy = method => strategies.get(method);\n  const getStrategies = () => [...strategies.keys()];\n  return Object.freeze({\n    add,\n    getServices,\n    getStrategy,\n    getStrategies\n  });\n};\nconst validatePlugins = plugins => {\n  let pluginsArray;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!plugins, \"No plugins supplied\");\n  if (!Array.isArray(plugins)) {\n    pluginsArray = [plugins];\n  } else {\n    pluginsArray = [...plugins];\n  }\n  for (const p of pluginsArray) {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(p.name), \"Plugin name is required\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(p.f_type), \"Plugin f_type is required\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(supportedPlugins.includes(p.f_type), `Plugin type ${p.f_type} is not supported`);\n  }\n  return pluginsArray;\n};\nconst PluginRegistry = () => {\n  const pluginsMap = new Map();\n  const getPlugins = () => pluginsMap;\n  const add = plugins => {\n    const pluginsArray = validatePlugins(plugins);\n    for (const p of pluginsArray) {\n      pluginsMap.set(p.name, p);\n      if (p.f_type === \"ServicePlugin\") {\n        serviceRegistry.add(p);\n      }\n    }\n  };\n  return Object.freeze({\n    add,\n    getPlugins\n  });\n};\nlet serviceRegistry;\nconst getIsServiceRegistryInitialized = () => typeof serviceRegistry !== \"undefined\";\n\n/**\n * @description Initializes the service registry with core strategies for different communication methods.\n * This function sets up the registry that manages wallet service strategies and should be called once\n * during FCL initialization with platform-specific core strategies.\n *\n * @param params Configuration object containing core strategies\n * @param params.coreStrategies Object mapping strategy names to their implementation functions\n * @returns The initialized service registry instance\n *\n * @example\n * // Initialize service registry with core strategies\n * const registry = initServiceRegistry({\n *   coreStrategies: {\n *     \"HTTP/POST\": httpPostStrategy,\n *     \"IFRAME/RPC\": iframeRpcStrategy,\n *     \"POP/RPC\": popupRpcStrategy\n *   }\n * })\n */\nconst initServiceRegistry = _ref2 => {\n  let {\n    coreStrategies\n  } = _ref2;\n  if (getIsServiceRegistryInitialized()) {\n    return serviceRegistry;\n  }\n  const _serviceRegistry = ServiceRegistry({\n    coreStrategies\n  });\n  serviceRegistry = _serviceRegistry;\n  return _serviceRegistry;\n};\n\n/**\n * @description Gets the singleton service registry instance. If the registry hasn't been initialized,\n * it will be initialized with stub core strategies and a warning will be logged. This function\n * provides access to the registry for service and strategy management.\n *\n * @returns The service registry instance\n *\n * @example\n * // Get the service registry\n * const registry = getServiceRegistry()\n * const services = registry.getServices()\n * const strategy = registry.getStrategy(\"HTTP/POST\")\n */\nconst getServiceRegistry = () => {\n  if (!getIsServiceRegistryInitialized()) {\n    console.warn(\"Registry is not initalized, it will be initialized with stub core strategies\");\n    return initServiceRegistry({\n      coreStrategies: stubCoreStrategies\n    });\n  }\n  return serviceRegistry;\n};\n\n/**\n * @description Global plugin registry instance for managing FCL plugins. This registry handles\n * the registration and management of various FCL plugins including service plugins that add\n * new wallet services and strategies.\n *\n * @example\n * // Add a plugin to the registry\n * pluginRegistry.add({\n *   name: \"MyWalletPlugin\",\n *   f_type: \"ServicePlugin\",\n *   type: \"discovery-service\",\n *   services: [...],\n *   serviceStrategy: { method: \"CUSTOM/RPC\", exec: customExecFunction }\n * })\n */\nconst pluginRegistry = PluginRegistry();\n\n/**\n * @description Creates an array of discovery services by combining extension services from the\n * window object with registered services from the service registry. This is used internally\n * by FCL to gather all available wallet and authentication services.\n *\n * @returns Promise that resolves to an array of available services\n *\n * @example\n * // Get all available discovery services\n * const services = await makeDiscoveryServices()\n * console.log(services.length) // Number of available services\n * services.forEach(service => {\n *   console.log(`Service: ${service.provider?.name}, Type: ${service.type}`)\n * })\n */\nconst makeDiscoveryServices = async () => {\n  const extensionServices = window?.fcl_extensions || [];\n  return [...extensionServices, ...getServiceRegistry().getServices()];\n};\n\n/**\n * @description Creates and configures a discovery service object used for wallet authentication.\n * This function combines the provided service configuration with discovery-related settings from\n * the FCL configuration to create a complete service definition for wallet authentication flows.\n *\n * @param context FCL context containing configuration and SDK\n * @param service Optional partial service configuration to override defaults\n * @param service.method Optional communication method for the service\n * @param service.endpoint Optional endpoint URL for the service\n * @returns Promise that resolves to a complete discovery service configuration\n * @throws Error if required configuration values are missing\n *\n * @example\n * // Get discovery service with default configuration\n * const discoveryService = await getDiscoveryService(context)\n * console.log(discoveryService.endpoint) // Configured discovery endpoint\n *\n * // Override discovery service endpoint\n * const customService = await getDiscoveryService(context, {\n *   endpoint: \"https://wallet.example.com/authn\",\n *   method: \"HTTP/POST\"\n * })\n *\n * // Use with custom wallet service\n * const walletService = await getDiscoveryService(context, {\n *   endpoint: \"https://my-wallet.com/fcl\",\n *   provider: {\n *     name: \"My Wallet\",\n *     icon: \"https://my-wallet.com/icon.png\"\n *   }\n * })\n */\nasync function getDiscoveryService(context, service) {\n  const discoveryAuthnInclude = await context.config.get(\"discovery.authn.include\", []);\n  const discoveryAuthnExclude = await context.config.get(\"discovery.authn.exclude\", []);\n  const discoveryFeaturesSuggested = await context.config.get(\"discovery.features.suggested\", []);\n  const discoveryWalletMethod = await context.config.first([\"discovery.wallet.method\", \"discovery.wallet.method.default\"], undefined);\n  const method = service?.method ? service.method : discoveryWalletMethod;\n  const endpoint = service?.endpoint ?? (await context.config.first([\"discovery.wallet\", \"challenge.handshake\"], undefined));\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(endpoint, `\n    If no service is passed to \"authenticate,\" then \"discovery.wallet\" must be defined in fcl config.\n    See: \"https://docs.onflow.org/fcl/reference/api/#setting-configuration-values\"\n    `);\n  return {\n    ...service,\n    type: \"authn\",\n    endpoint,\n    method,\n    discoveryAuthnInclude,\n    discoveryAuthnExclude,\n    discoveryFeaturesSuggested\n  };\n}\n\nlet _isReactNative = false;\n\n/**\n * @description Checks if the current environment is React Native. This function returns a boolean\n * indicating whether FCL is running in a React Native environment rather than a browser or Node.js.\n * This is useful for platform-specific functionality and enabling React Native-specific features.\n *\n * @returns True if running in React Native environment, false otherwise\n *\n * @example\n * // Check if running in React Native\n * import * as fcl from \"@onflow/fcl\"\n *\n * if (fcl.isReactNative()) {\n *   console.log(\"Running in React Native\")\n *   // Use React Native specific wallet integrations\n *   // Enable deep linking for wallet connections\n * } else {\n *   console.log(\"Running in browser or Node.js\")\n *   // Use web-based wallet integrations\n * }\n */\nfunction isReactNative() {\n  return _isReactNative;\n}\n\n/**\n * @description Sets the React Native environment flag for FCL. This function should be called during\n * initialization of React Native applications to inform FCL that it's running in a React Native\n * environment. This enables React Native-specific behaviors and optimizations.\n *\n * @param value True to indicate React Native environment, false otherwise\n *\n * @example\n * // Set React Native flag during app initialization\n * import * as fcl from \"@onflow/fcl\"\n *\n * // In your React Native app's entry point (e.g., App.js)\n * fcl.setIsReactNative(true)\n *\n * // Configure FCL for React Native\n * fcl.config({\n *   \"accessNode.api\": \"https://rest-testnet.onflow.org\",\n *   \"discovery.wallet\": \"https://fcl-discovery.onflow.org/api/testnet/authn\"\n * })\n */\nfunction setIsReactNative(value) {\n  _isReactNative = value;\n}\n\n// This is a workaround for an ongoing issue with URL in React Native\n// It does not parse the URL correctly and appends trailing slashes\n// See: https://github.com/facebook/react-native/issues/24428\n// See: https://github.com/facebook/react-native/issues/24428\n\nconst _URL = globalThis.URL;\nlet URL$1 = class URL extends _URL {\n  constructor(url, base) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    super(url, base, ...args);\n\n    // Extra check if in React Native\n    if (!isReactNative()) {\n      return;\n    }\n\n    // Fix trailing slash issue\n    if (this._url && !url.toString().endsWith(\"/\") && this._url.endsWith(\"/\")) {\n      this._url = this._url.slice(0, -1);\n    }\n  }\n};\n\n/**\n * @description Fetches available wallet services from the discovery endpoint based on the\n * requested service types. This function queries the FCL discovery service to find compatible\n * wallet providers that support the specified service types.\n *\n * @param params Object containing the types of services to discover\n * @returns Promise resolving to an array of Service objects from the discovery endpoint\n *\n * @example\n * // Discover authentication services\n * const services = await getServices({ types: [\"authn\"] })\n * console.log(services) // Array of available wallet authentication services\n */\nasync function getServices(_ref) {\n  let {\n    context,\n    types\n  } = _ref;\n  const endpoint = await context.config.get(\"discovery.authn.endpoint\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Boolean(endpoint), `\"discovery.authn.endpoint\" in config must be defined.`);\n  const include = await context.config.get(\"discovery.authn.include\", []);\n  const exclude = await context.config.get(\"discovery.authn.exclude\", []);\n  const url = new URL$1(endpoint);\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      type: types,\n      fclVersion: VERSION,\n      include,\n      exclude,\n      features: {\n        suggested: await context.config.get(\"discovery.features.suggested\", [])\n      },\n      clientServices: await makeDiscoveryServices(),\n      supportedStrategies: getServiceRegistry().getStrategies(),\n      userAgent: window?.navigator?.userAgent,\n      network: await getChainId()\n    })\n  }).then(d => d.json());\n}\n\nconst SERVICE_ACTOR_KEYS = {\n  AUTHN: \"authn\",\n  RESULTS: \"results\",\n  SNAPSHOT: \"SNAPSHOT\",\n  UPDATED: \"UPDATED\",\n  UPDATE_RESULTS: \"UPDATE_RESULTS\"\n};\nconst warn = (fact, msg) => {\n  if (fact) {\n    console.warn(`\n      %cFCL Warning\n      ============================\n      ${msg}\n      For more info, please see the docs: https://docs.onflow.org/fcl/\n      ============================\n      `, \"font-weight:bold;font-family:monospace;\");\n  }\n};\nconst fetchServicesFromDiscovery = async context => {\n  try {\n    const services = await getServices({\n      context,\n      types: [SERVICE_ACTOR_KEYS.AUTHN]\n    });\n    (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(SERVICE_ACTOR_KEYS.AUTHN, SERVICE_ACTOR_KEYS.UPDATE_RESULTS, {\n      results: services\n    });\n  } catch (error) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log)({\n      title: `${error.name} Error fetching Discovery API services.`,\n      message: error.message,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.LEVELS.error\n    });\n  }\n};\nfunction createHandlers(context) {\n  return {\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.INIT]: async ctx => {\n      warn(typeof window === \"undefined\", '\"fcl.discovery\" is only available in the browser.');\n      // If you call this before the window is loaded extensions will not be set yet\n      if (document.readyState === \"complete\") {\n        fetchServicesFromDiscovery(context);\n      } else {\n        window.addEventListener(\"load\", () => {\n          fetchServicesFromDiscovery(context);\n        });\n      }\n    },\n    [SERVICE_ACTOR_KEYS.UPDATE_RESULTS]: (ctx, _letter, data) => {\n      ctx.merge(data);\n      ctx.broadcast(SERVICE_ACTOR_KEYS.UPDATED, {\n        ...ctx.all()\n      });\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SUBSCRIBE]: (ctx, letter) => {\n      ctx.subscribe(letter.from);\n      ctx.send(letter.from, SERVICE_ACTOR_KEYS.UPDATED, {\n        ...ctx.all()\n      });\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UNSUBSCRIBE]: (ctx, letter) => ctx.unsubscribe(letter.from),\n    [SERVICE_ACTOR_KEYS.SNAPSHOT]: async (ctx, letter) => letter.reply({\n      ...ctx.all()\n    })\n  };\n}\nconst spawnProviders = context => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.spawn)(createHandlers(context), SERVICE_ACTOR_KEYS.AUTHN);\n\n/**\n * Discovery authn service for interacting with Flow compatible wallets.\n *\n * Discovery abstracts away code so that developers don't have to deal with the discovery\n * of Flow compatible wallets, integration, or authentication. Using discovery from FCL\n * allows dapps to list and authenticate with wallets while having full control over the UI.\n * Common use cases for this are login or registration pages.\n *\n * NOTE: The following methods can only be used in web browsers.\n *\n * WARNING: discovery.authn.endpoint value MUST be set in the configuration before calling this method.\n *\n * @example\n * // Basic usage with React\n * import './config';\n * import { useState, useEffect } from 'react';\n * import * as fcl from '@onflow/fcl';\n *\n * function Component() {\n *   const [wallets, setWallets] = useState([]);\n *   useEffect(\n *     () => fcl.discovery.authn.subscribe((res) => setWallets(res.results)),\n *     [],\n *   );\n *\n *   return (\n *     <div>\n *       {wallets.map((wallet) => (\n *         <button\n *           key={wallet.provider.address}\n *           onClick={() => fcl.authenticate({ service: wallet })}\n *         >\n *           Login with {wallet.provider.name}\n *         </button>\n *       ))}\n *     </div>\n *   );\n * }\n *\n * // Configuration for opt-in services\n * import { config } from '@onflow/fcl';\n *\n * config({\n *   'discovery.authn.endpoint':\n *     'https://fcl-discovery.onflow.org/api/testnet/authn', // Endpoint set to Testnet\n *   'discovery.authn.include': ['0x9d2e44203cb13051'], // Ledger wallet address on Testnet set to be included\n *   'discovery.authn.exclude': ['0x123456789abcdef01'], // Example of excluding a wallet by address\n * });\n */\nfunction createAuthn(context) {\n  /**\n   * @description Discovery methods for interacting with Authn.\n   */\n  const authn = {\n    /**\n     * Subscribe to Discovery authn services and receive real-time updates.\n     *\n     * This method allows you to subscribe to changes in the available authentication services.\n     * When new services are discovered or existing ones are updated, the callback function will be invoked.\n     *\n     * @param cb Callback function that receives the list of available services and any error\n     * @returns A function to unsubscribe from the service updates\n     *\n     * @example\n     * import * as fcl from '@onflow/fcl';\n     *\n     * const unsubscribe = fcl.discovery.authn.subscribe((services, error) => {\n     *   if (error) {\n     *     console.error('Discovery error:', error);\n     *     return;\n     *   }\n     *   console.log('Available services:', services);\n     * });\n     *\n     * // Later, to stop receiving updates\n     * unsubscribe();\n     */\n    subscribe: cb => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.subscriber)(SERVICE_ACTOR_KEYS.AUTHN, () => spawnProviders(context), cb),\n    /**\n     * Get the current snapshot of Discovery authn services.\n     *\n     * This method returns a promise that resolves to the current state of available authentication services\n     * without setting up a subscription. Useful for one-time checks or initial state loading.\n     *\n     * @returns A promise that resolves to the current service data\n     *\n     * @example\n     * import * as fcl from '@onflow/fcl';\n     *\n     * async function getServices() {\n     *   try {\n     *     const serviceData = await fcl.discovery.authn.snapshot();\n     *     console.log('Current services:', serviceData.results);\n     *   } catch (error) {\n     *     console.error('Failed to get services:', error);\n     *   }\n     * }\n     */\n    snapshot: () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.snapshoter)(SERVICE_ACTOR_KEYS.AUTHN, () => spawnProviders(context)),\n    /**\n     * Trigger an update of authn services from the discovery endpoint.\n     *\n     * This method manually triggers a refresh of the available authentication services\n     * from the configured discovery endpoint. Useful when you want to force a refresh\n     * of the service list.\n     *\n     * @example\n     * import * as fcl from '@onflow/fcl';\n     *\n     * // Force refresh of available services\n     * fcl.discovery.authn.update();\n     */\n    update: () => {\n      // Only fetch services if the window is loaded\n      // Otherwise, this will be called by the INIT handler\n      if (document.readyState === \"complete\") {\n        fetchServicesFromDiscovery(context);\n      }\n    }\n  };\n  return authn;\n}\nconst authn = /* @__PURE__ */createAuthn(createPartialGlobalFCLContext());\n\nconst discovery = {\n  authn\n};\n\n/**\n * @description Generates a SHA3-256 hash of a UTF-8 string. This function is commonly used in Flow\n * for creating deterministic hashes of Cadence code, interaction templates, and other string data\n * that need to be uniquely identified or verified for integrity.\n *\n * @param utf8String The UTF-8 string to hash\n * @returns The SHA3-256 hash of the input string as a hexadecimal string\n *\n * @example\n * // Generate hash of Cadence code\n * const cadenceCode = \"access(all) fun main(): String { return \\\"Hello\\\" }\"\n * const hash = genHash(cadenceCode)\n * console.log(hash) // \"a1b2c3d4e5f6...\" (64-character hex string)\n */\nfunction genHash(utf8String) {\n  const sha = new sha3__WEBPACK_IMPORTED_MODULE_12__.SHA3(256);\n  sha.update(_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(utf8String, \"utf8\"));\n  return sha.digest(\"hex\");\n}\n\n/**\n * @description Generates Interaction Template ID for a given Interaction Template\n *\n * @param params\n * @param params.template Interaction Template\n * @returns Interaction Template ID\n */\nasync function generateTemplateId$2(_ref) {\n  let {\n    template\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!template, \"generateTemplateId({ template }) -- template must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof template === \"object\", \"generateTemplateId({ template }) -- template must be an object\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_type === \"InteractionTemplate\", \"generateTemplateId({ template }) -- template object must be an InteractionTemplate\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_version === \"1.0.0\", \"generateTemplateId({ template }) -- template object must be an version 1.0.0\");\n  const templateData = template.data;\n  const messages = await Promise.all(Object.keys(templateData.messages).map(async messageKey => [genHash(messageKey), await Promise.all(Object.keys(templateData.messages?.[messageKey]?.i18n).map(async i18nkeylanguage => [genHash(i18nkeylanguage), genHash(templateData.messages?.[messageKey]?.i18n?.[i18nkeylanguage])]))]));\n  const dependencies = await Promise.all(Object.keys(templateData?.dependencies).map(async dependencyAddressPlaceholder => [genHash(dependencyAddressPlaceholder), await Promise.all(Object.keys(templateData?.dependencies?.[dependencyAddressPlaceholder]).map(async dependencyContract => [genHash(dependencyContract), await Promise.all(Object.keys(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]).map(async dependencyContractNetwork => [genHash(dependencyContractNetwork), [genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].address), genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].contract), genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].fq_address), genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].pin), genHash(String(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].pin_block_height))]]))]))]));\n  const _arguments = await Promise.all(Object.keys(templateData?.[\"arguments\"]).map(async argumentLabel => [genHash(argumentLabel), [genHash(String(templateData?.[\"arguments\"]?.[argumentLabel].index)), genHash(templateData?.[\"arguments\"]?.[argumentLabel].type), genHash(templateData?.[\"arguments\"]?.[argumentLabel].balance || \"\"), await Promise.all(Object.keys(templateData?.[\"arguments\"]?.[argumentLabel].messages).map(async argumentMessageKey => [genHash(argumentMessageKey), await Promise.all(Object.keys(templateData?.[\"arguments\"]?.[argumentLabel].messages?.[argumentMessageKey].i18n).map(async i18nkeylanguage => [genHash(i18nkeylanguage), genHash(templateData?.[\"arguments\"]?.[argumentLabel].messages?.[argumentMessageKey].i18n?.[i18nkeylanguage])]))]))]]));\n  const encodedHex = (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([genHash(\"InteractionTemplate\"), genHash(\"1.0.0\"), genHash(templateData?.type), genHash(templateData?.interface), messages, genHash(templateData?.cadence), dependencies, _arguments]).toString(\"hex\");\n  return genHash(encodedHex);\n}\n\n/**\n * @description Creates an ImportItem object from a contract name and address. This is a utility\n * function used to generate standardized import objects for interaction templates and dependency\n * management. The contract field is initialized as an empty string.\n *\n * @param params The parameters object containing contract details\n * @param params.contractName The name of the contract being imported\n * @param params.address The Flow address where the contract is deployed\n * @returns ImportItem object with contractName, address, and empty contract field\n *\n * @example\n * // Generate import for FlowToken contract\n * const importItem = generateImport({\n *   contractName: \"FlowToken\",\n *   address: \"0x1654653399040a61\"\n * })\n * console.log(importItem)\n * // { contractName: \"FlowToken\", address: \"0x1654653399040a61\", contract: \"\" }\n */\nfunction generateImport(_ref) {\n  let {\n    contractName,\n    address\n  } = _ref;\n  return {\n    contractName,\n    address,\n    contract: \"\"\n  };\n}\n\n/**\n * @description Parses a Cadence script or transaction to find all import statements and extracts\n * the contract names and addresses. This function uses regular expressions to identify import\n * statements and creates ImportItem objects for each imported contract.\n *\n * @param cadence The Cadence code string to parse for import statements\n * @returns Array of ImportItem objects containing contract names and addresses\n *\n * @example\n * // Parse imports from Cadence code\n * const cadenceCode = `\n *   import FlowToken from 0x1654653399040a61\n *   import FungibleToken, NonFungibleToken from 0x9a0766d93b6608b7\n *\n *   transaction() {\n *     // transaction code\n *   }\n * `\n *\n * const imports = findImports(cadenceCode)\n * console.log(imports)\n * // [\n * //   { contractName: \"FlowToken\", address: \"0x1654653399040a61\", contract: \"\" },\n * //   { contractName: \"FungibleToken\", address: \"0x9a0766d93b6608b7\", contract: \"\" },\n * //   { contractName: \"NonFungibleToken\", address: \"0x9a0766d93b6608b7\", contract: \"\" }\n * // ]\n */\nfunction findImports(cadence) {\n  const imports = [];\n  const importsReg = /import ((\\w|,| )+)* from 0x\\w+/g;\n  const fileImports = cadence.match(importsReg) || [];\n  for (const fileImport of fileImports) {\n    const importLineReg = /import ((\\w+|, |)*) from (0x\\w+)/g;\n    const importLine = importLineReg.exec(fileImport);\n    const contractsReg = /((?:\\w+)+),?/g;\n    const contracts = importLine?.[1].match(contractsReg) || [];\n    for (const contract of contracts) {\n      imports.push(generateImport({\n        address: importLine?.[3],\n        contractName: contract.replace(/,/g, \"\")\n      }));\n    }\n  }\n  return imports;\n}\n\nfunction createGenerateDependencyPin110(context) {\n  /**\n   * @description Produces a dependency pin for a contract at current state of chain\n   * @param params\n   * @param params.address The address of the account containing the contract\n   * @param params.contractName The name of the contract\n   * @param params.blockHeight The block height to generate the dependency pin at\n   * @param opts Options to pass to the interaction\n   * @returns The dependency pin\n   */\n  async function generateDependencyPin110(_ref) {\n    let {\n      address,\n      contractName\n    } = _ref;\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(address != undefined, \"generateDependencyPin({ address }) -- address must be defined\");\n    (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(contractName != undefined, \"generateDependencyPin({ contractName }) -- contractName must be defined\");\n    (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof address === \"string\", \"generateDependencyPin({ address }) -- address must be a string\");\n    (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof contractName === \"string\", \"generateDependencyPin({ contractName }) -- contractName must be a string\");\n    const horizon = [generateImport({\n      contractName,\n      address\n    })];\n    for (const horizonImport of horizon) {\n      const account = await context.sdk.send([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getAccount)(await context.config.get(horizonImport.address, horizonImport.address))], opts).then(context.sdk.decode);\n      horizonImport.contract = account.contracts?.[horizonImport.contractName];\n      if (!horizonImport.contract) {\n        console.error(\"Did not find expected contract\", horizonImport, account);\n        throw new Error(\"Did not find expected contract\");\n      }\n      const contractImports = findImports(horizonImport.contract);\n      horizon.push(...contractImports);\n    }\n    const contractPinSelfHashesPromises = horizon.map(iport => genHash(iport.contract));\n    // genHash returns a promise, so we need to await the results of all the promises\n    const contractPinSelfHashes = await Promise.all(contractPinSelfHashesPromises);\n    const contractPinHashes = contractPinSelfHashes.join(\"\");\n    return genHash(contractPinHashes);\n  }\n  return generateDependencyPin110;\n}\nconst generateDependencyPin110 = /* @__PURE__ */createGenerateDependencyPin110(createPartialGlobalFCLContext());\n\nasync function generateContractNetworks(context, contractName, networks) {\n  const values = [];\n  for (const net of networks) {\n    const networkHashes = [genHash(net.network)];\n    const {\n      address,\n      dependency_pin_block_height\n    } = net;\n    if (net.dependency_pin) {\n      const hash = await createGenerateDependencyPin110(context)({\n        address,\n        contractName,\n        blockHeight: dependency_pin_block_height\n      });\n      networkHashes.push(genHash(hash));\n    }\n    values.push(networkHashes);\n  }\n  return values;\n}\nasync function generateContractDependencies(context, dependencies) {\n  const values = [];\n  for (let i = 0; i < dependencies.length; i++) {\n    const dependency = dependencies[i];\n    const contracts = [];\n    for (let j = 0; j < dependency?.contracts.length; j++) {\n      const c = dependency?.contracts[j];\n      const contractName = c?.contract;\n      contracts.push(genHash(contractName));\n      const contractHashes = await generateContractNetworks(context, contractName, c?.networks);\n      contracts.push(contractHashes);\n    }\n    values.push(contracts);\n  }\n  return values;\n}\nfunction createGenerateTemplateId(context) {\n  /**\n   * @description Generates Interaction Template ID for a given Interaction Template\n   *\n   * @param params\n   * @param params.template Interaction Template\n   * @returns Interaction Template ID\n   */\n  async function generateTemplateId(_ref) {\n    let {\n      template\n    } = _ref;\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!template, \"generateTemplateId({ template }) -- template must be defined\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof template === \"object\", \"generateTemplateId({ template }) -- template must be an object\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_type === \"InteractionTemplate\", \"generateTemplateId({ template }) -- template object must be an InteractionTemplate\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_version === \"1.1.0\", \"generateTemplateId({ template }) -- template object must be an version 1.1.0\");\n    const templateData = template.data;\n    const messages = await Promise.all(templateData.messages.map(async templateMessage => [genHash(templateMessage.key), await Promise.all(templateMessage.i18n.map(async templateMessagei18n => [genHash(templateMessagei18n.tag), genHash(templateMessagei18n.translation)]))]));\n    const params = await Promise.all(templateData?.[\"parameters\"].sort((a, b) => a.index - b.index).map(async arg => [genHash(arg.label), [genHash(String(arg.index)), genHash(arg.type), await Promise.all(arg.messages.map(async argumentMessage => [genHash(argumentMessage.key), await Promise.all(argumentMessage.i18n.map(async argumentMessagei18n => [genHash(argumentMessagei18n.tag), genHash(argumentMessagei18n.translation)]))]))]]));\n    const dependencies = [await generateContractDependencies(context, templateData?.dependencies)];\n    const encodedHex = (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([genHash(template?.f_type), genHash(template?.f_version), genHash(templateData?.type), genHash(templateData?.interface), messages, genHash(templateData?.cadence?.body), [dependencies], params]).toString(\"hex\");\n    return genHash(encodedHex);\n  }\n  return generateTemplateId;\n}\nconst generateTemplateId$1 = /* @__PURE__ */createGenerateTemplateId(createPartialGlobalFCLContext());\n\n/**\n * @description Generates Interaction Template ID for a given Interaction Template\n *\n * @param params\n * @param params.template Interaction Template\n * @returns Interaction Template ID\n */\nasync function generateTemplateId(_ref) {\n  let {\n    template\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!template, \"generateTemplateId({ template }) -- template must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof template === \"object\", \"generateTemplateId({ template }) -- template must be an object\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_type === \"InteractionTemplate\", \"generateTemplateId({ template }) -- template object must be an InteractionTemplate\");\n  switch (template.f_version) {\n    case \"1.1.0\":\n      return await generateTemplateId$1({\n        template\n      });\n    case \"1.0.0\":\n      return await generateTemplateId$2({\n        template\n      });\n    default:\n      throw new Error(\"generateTemplateId Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Verifies the given Interaction Template Id has been correctly generated\n *\n * @param params\n * @param params.template Interaction Template\n * @returns true or false, Interaction Template ID\n */\nasync function verifyGeneratedTemplateId(_ref2) {\n  let {\n    template\n  } = _ref2;\n  return template.id === (await generateTemplateId({\n    template\n  }));\n}\n\n/**\n * @description Checks whether a set of auditors have audited a given Interaction Template on the Flow\n * blockchain. This function validates that the provided interaction template has been properly audited\n * for security by trusted auditors before execution. It queries the Flow blockchain's audit contract\n * to verify audit status.\n *\n * @param params\n * @param params.template The Interaction Template to check audits for. Must be\n * a valid InteractionTemplate object with f_type \"InteractionTemplate\"\n * @param params.auditors Array of auditor addresses to check. If not provided, will use\n * auditors from configuration 'flow.auditors'\n * @param opts Optional configuration parameters\n * @param opts.flowInteractionAuditContract Override address for the FlowInteractionAudit\n * contract if not using network defaults\n *\n * @returns Promise that resolves to an object mapping auditor\n * addresses to boolean values indicating whether they have audited the template\n *\n * @throws If template is invalid, template ID cannot be recomputed, network is unsupported,\n * or required configuration is missing\n *\n * @example\n * // Check if template has been audited by specific auditors\n * import * as fcl from \"@onflow/fcl\"\n *\n * const template = {\n *   f_type: \"InteractionTemplate\",\n *   f_version: \"1.1.0\",\n *   id: \"template-id-123\",\n *   data: {\n *     type: \"transaction\",\n *     interface: \"...\",\n *     cadence: \"transaction { ... }\"\n *   }\n * }\n *\n * const auditorAddresses = [\n *   \"0x1234567890abcdef\",\n *   \"0xabcdef1234567890\"\n * ]\n *\n * const auditResults = await fcl.InteractionTemplateUtils.getInteractionTemplateAudits({\n *   template,\n *   auditors: auditorAddresses\n * })\n *\n * console.log(auditResults)\n * // { \"0x1234567890abcdef\": true, \"0xabcdef1234567890\": false }\n */\nasync function getInteractionTemplateAudits(context, _ref) {\n  let {\n    template,\n    auditors\n  } = _ref;\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"getInteractionTemplateAudits({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template.f_type === \"InteractionTemplate\", \"getInteractionTemplateAudits({ template }) -- template must be an InteractionTemplate\");\n\n  // Recompute ID to be sure it matches\n  let recomputedTemplateID = await generateTemplateId({\n    template\n  });\n  if (recomputedTemplateID !== template.id) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log)({\n      title: \"getInteractionTemplateAudits Debug Error\",\n      message: `Could not recompute and match template ID\n                computed: ${recomputedTemplateID}\n                template: ${template.id}\n            `,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.LEVELS.debug\n    });\n    throw new Error(\"getInteractionTemplateAudits Error: Could not recompute and match template ID\");\n  }\n  switch (template.f_version) {\n    case \"1.1.0\":\n    case \"1.0.0\":\n      const _auditors = auditors || (await context.config.get(\"flow.auditors\"));\n      (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(_auditors, \"getInteractionTemplateAudits Error: Required configuration for 'fcl.auditors' is not set\");\n      (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(Array.isArray(_auditors), \"getInteractionTemplateAudits Error: Required configuration for 'fcl.auditors' is not an array\");\n      let FlowInteractionAuditContract = opts.flowInteractionAuditContract;\n      if (!FlowInteractionAuditContract) {\n        const fclNetwork = await createGetChainId(context)(opts);\n        (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(fclNetwork === \"mainnet\" || fclNetwork === \"testnet\", \"getInteractionTemplateAudits Error: Unable to determine address for FlowInteractionTemplateAudit contract. Set configuration for 'fcl.network' to 'mainnet' or 'testnet'\");\n        if (fclNetwork === \"mainnet\") {\n          FlowInteractionAuditContract = \"0xfd100e39d50a13e6\";\n        } else {\n          FlowInteractionAuditContract = \"0xf78bfc12d0a786dc\";\n        }\n      }\n      const audits = await createQuery(context)({\n        cadence: `\n        import FlowInteractionTemplateAudit from ${FlowInteractionAuditContract}\n        access(all) fun main(templateId: String, auditors: [Address]): {Address:Bool} {\n          return FlowInteractionTemplateAudit.getHasTemplateBeenAuditedByAuditors(templateId: templateId, auditors: auditors)\n        }\n        `,\n        args: (arg, t) => [arg(recomputedTemplateID, t.String), arg(_auditors, t.Array(t.Address))]\n      });\n      return audits;\n    default:\n      throw new Error(\"getInteractionTemplateAudits Error: Unsupported template version\");\n  }\n}\n\nfunction creategenerateDependencyPin100(context) {\n  /**\n   * @description Produces a dependency pin for a contract at current state of chain\n   * @param params\n   * @param params.address The address of the account containing the contract\n   * @param params.contractName The name of the contract\n   * @param opts Options to pass to the interaction\n   * @returns The dependency pin\n   */\n  async function generateDependencyPin100(_ref) {\n    let {\n      address,\n      contractName\n    } = _ref;\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(address != undefined, \"generateDependencyPin({ address }) -- address must be defined\");\n    (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(contractName != undefined, \"generateDependencyPin({ contractName }) -- contractName must be defined\");\n    (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof address === \"string\", \"generateDependencyPin({ address }) -- address must be a string\");\n    (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof contractName === \"string\", \"generateDependencyPin({ contractName }) -- contractName must be a string\");\n    const horizon = [generateImport({\n      contractName,\n      address\n    })];\n    for (const horizonImport of horizon) {\n      const account = await context.sdk.send([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getAccount)(await context.config.get(horizonImport.address, horizonImport.address))], opts).then(context.sdk.decode);\n      horizonImport.contract = account.contracts?.[horizonImport.contractName];\n      if (!horizonImport.contract) {\n        console.error(\"Did not find expected contract\", horizonImport, account);\n        throw new Error(\"Did not find expected contract\");\n      }\n      const contractImports = findImports(horizonImport.contract);\n      horizon.push(...contractImports);\n    }\n    const contractHashes = horizon.map(iport => genHash(iport.contract));\n    const contractHashesJoined = contractHashes.join(\"\");\n    return genHash(contractHashesJoined);\n  }\n  return generateDependencyPin100;\n}\nconst generateDependencyPin100 = /* @__PURE__ */creategenerateDependencyPin100(createPartialGlobalFCLContext());\n\n/**\n * @description Generates a dependency pin for a smart contract on the Flow blockchain. A dependency\n * pin is a cryptographic hash that uniquely identifies a specific version of a contract at a particular\n * state. This is used in Interaction Templates to ensure consistent behavior by pinning to specific\n * contract versions and preventing issues from contract updates.\n *\n * @param params\n * @param params.version The version of the interaction template (e.g., \"1.0.0\", \"1.1.0\")\n * @param params.address The Flow account address containing the contract (with or without 0x prefix)\n * @param params.contractName The name of the contract to generate a pin for\n * @param params.blockHeight Optional specific block height to pin to\n * @param opts Additional options to pass to the underlying interaction\n *\n * @returns Promise that resolves to the dependency pin as a string\n *\n * @throws If required parameters are missing or invalid, or if the template version is unsupported\n *\n * @example\n * // Generate dependency pin for a contract at current state\n * import * as fcl from \"@onflow/fcl\"\n *\n * const dependencyPin = await fcl.InteractionTemplateUtils.generateDependencyPin({\n *   version: \"1.1.0\",\n *   address: \"0x1654653399040a61\",\n *   contractName: \"FlowToken\"\n * })\n */\nasync function generateDependencyPin(_ref) {\n  let {\n    version,\n    address,\n    contractName\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(address != undefined, \"generateDependencyPin({ address }) -- address must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(contractName != undefined, \"generateDependencyPin({ contractName }) -- contractName must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof address === \"string\", \"generateDependencyPin({ address }) -- address must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof contractName === \"string\", \"generateDependencyPin({ contractName }) -- contractName must be a string\");\n  switch (version) {\n    case \"1.1.0\":\n      return await generateDependencyPin110({\n        address,\n        contractName\n      });\n    case \"1.0.0\":\n      return await generateDependencyPin100({\n        address,\n        contractName\n      });\n    default:\n      throw new Error(\"deriveCadenceByNetwork Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Generates a dependency pin for a smart contract at the latest sealed block on the Flow\n * blockchain. This variant ensures the pin is generated against the most recent finalized state of the\n * network, providing consistency and avoiding issues with pending transactions affecting the pin generation.\n *\n * @param params\n * @param params.version The version of the interaction template (e.g., \"1.0.0\", \"1.1.0\")\n * @param params.address The Flow account address containing the contract (with or without 0x prefix)\n * @param params.contractName The name of the contract to generate a pin for\n * @param params.blockHeight This parameter is ignored as the function always uses latest sealed block\n * @param opts Additional options to pass to the underlying interaction\n *\n * @returns Promise that resolves to the dependency pin as a string\n *\n * @throws If required parameters are missing or invalid, template version is unsupported,\n * or if unable to fetch the latest sealed block\n *\n * @example\n * // Generate dependency pin at latest sealed block\n * import * as fcl from \"@onflow/fcl\"\n *\n * const dependencyPin = await fcl.InteractionTemplateUtils.generateDependencyPinAtLatestSealedBlock({\n *   version: \"1.1.0\",\n *   address: \"0x1654653399040a61\",\n *   contractName: \"FlowToken\"\n * })\n */\nasync function generateDependencyPinAtLatestSealedBlock(_ref2) {\n  let {\n    version,\n    address,\n    contractName\n  } = _ref2;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const latestSealedBlock = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block)({\n    sealed: true\n  }, opts);\n  latestSealedBlock?.height;\n  return generateDependencyPin({\n    version,\n    address,\n    contractName});\n}\n\n/**\n * @description Checks if an Interaction Template's pins match those generated at a block height\n *\n * @param params\n * @param params.template Interaction Template to check pins for\n * @param params.blockHeight Block height to check pins at\n * @param params.network Network to check pins on\n * @param opts\n * @returns Whether or not the pins match\n */\nasync function verifyDependencyPinsSame(_ref) {\n  let {\n    template,\n    blockHeight,\n    network\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"generateDependencyPin({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template === \"object\", \"generateDependencyPin({ template }) -- template must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template.f_type === \"InteractionTemplate\", \"generateDependencyPin({ template }) -- template must be an InteractionTemplate\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(network != undefined, \"generateDependencyPin({ network }) network must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(blockHeight != undefined, \"generateDependencyPin({ blockHeight }) blockHeight must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof blockHeight === \"number\", \"generateDependencyPin({ blockHeight }) blockHeight must be a number\");\n  switch (template.f_version) {\n    case \"1.0.0\":\n      const templateDependenciesPlaceholderKeys = Object.keys(template.data.dependencies);\n      for (let templateDependencyPlaceholderKey of templateDependenciesPlaceholderKeys) {\n        const templateDependencyPlaceholder = template.data.dependencies[templateDependencyPlaceholderKey];\n        const templateDependencyPlaceholderContractNames = Object.keys(templateDependencyPlaceholder);\n        for (let templateDependencyPlaceholderContractName of templateDependencyPlaceholderContractNames) {\n          const templateDependencyPlaceholderContractNetworks = template.data.dependencies[templateDependencyPlaceholderKey][templateDependencyPlaceholderContractName];\n          const templateDependency = templateDependencyPlaceholderContractNetworks[network];\n          if (typeof templateDependency === \"undefined\") continue;\n          const pin = await generateDependencyPin({\n            address: templateDependency.address,\n            contractName: templateDependency.contract});\n          if (pin !== templateDependency.pin) {\n            (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log)({\n              title: \"verifyDependencyPinsSame Debug Error\",\n              message: `Could not recompute and match dependency pin.\n                                address: ${templateDependency.address} | contract: ${templateDependency.contract}\n                                computed: ${pin}\n                                template: ${templateDependency.pin}\n                            `,\n              level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.LEVELS.debug\n            });\n            return false;\n          }\n        }\n      }\n      return true;\n    case \"1.1.0\":\n      let isVerified = false;\n      // iterate over each dependency\n      for (let i = 0; i < template.data?.dependencies.length; i++) {\n        const dependency = template.data?.dependencies[i];\n        // iterate over each contract in dependency\n        for (let j = 0; j < dependency?.contracts.length; j++) {\n          const contract = dependency?.contracts[j];\n          // iterate over each network in contract\n          for (let k = 0; k < contract?.networks.length; k++) {\n            const net = contract?.networks[k];\n            // if network matches, generate pin and compare\n            if (net.network === network) {\n              const pin = await generateDependencyPin({\n                version: template.f_version,\n                address: net.address,\n                contractName: contract.contract});\n              if (pin !== net.dependency_pin.pin) {\n                (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log)({\n                  title: \"verifyDependencyPinsSame Debug Error\",\n                  message: `Could not recompute and match dependency pin.\n                                    address: ${net.address} | contract: ${contract.contract}\n                                    computed: ${pin}\n                                    template: ${net.pin}\n                                `,\n                  level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.LEVELS.debug\n                });\n                return false;\n              } else {\n                isVerified = true;\n              }\n            }\n          }\n        }\n      }\n      return isVerified;\n    default:\n      throw new Error(\"verifyDependencyPinsSame Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Checks if an Interaction Template's pins match those generated at the latest block height\n *\n * @param params\n * @param params.template Interaction Template to check pins for\n * @param params.network Network to check pins on\n * @param opts\n * @returns Whether or not the pins match\n */\nasync function verifyDependencyPinsSameAtLatestSealedBlock(_ref2) {\n  let {\n    template,\n    network\n  } = _ref2;\n  const latestSealedBlock = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block)({\n    sealed: true\n  });\n  const latestSealedBlockHeight = latestSealedBlock?.height;\n  return verifyDependencyPinsSame({\n    template,\n    network,\n    blockHeight: latestSealedBlockHeight\n  });\n}\n\n/**\n * @description Get Interaction Template argument message\n *\n * @param params\n * @param params.localization [localization=\"en-US\"] Localization code\n * @param params.messageKey Message key\n * @param params.template Interaction Template\n * @returns Message\n */\nfunction getTemplateMessage(_ref) {\n  let {\n    localization = \"en-US\",\n    messageKey,\n    template\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(messageKey, \"getTemplateMessage({ messageKey }) -- messageKey must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof messageKey === \"string\", \"getTemplateMessage({ messageKey }) -- messageKey must be a string\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(localization, \"getTemplateMessage({ localization }) -- localization must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof localization === \"string\", \"getTemplateMessage({ localization }) -- localization must be a string\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template != undefined, \"getTemplateMessage({ template }) -- template must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof template === \"object\", \"getTemplateMessage({ template }) -- template must be an object\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_type === \"InteractionTemplate\", \"getTemplateMessage({ template }) -- template object must be an InteractionTemplate\");\n  switch (template.f_version) {\n    case \"1.1.0\":\n      const msg = template?.data?.messages?.find(a => a.key === messageKey);\n      if (!msg) return undefined;\n      const lzn = msg?.i18n?.find(a => a.tag === localization);\n      if (!lzn) return undefined;\n      return lzn.translation;\n    case \"1.0.0\":\n      return template?.data?.messages?.[messageKey]?.i18n?.[localization];\n    default:\n      throw new Error(\"getTemplateArgumentMessage Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Gets Interaction Template argument message by message key, argument label, and localization\n *\n * @param params\n * @param params.localization [localization=\"en-US\"] Localization to get message for\n * @param params.argumentLabel Argument label to get message for\n * @param params.messageKey Message key to get message for\n * @param params.template Interaction Template to get message from\n * @returns Message\n */\nfunction getTemplateArgumentMessage(_ref) {\n  let {\n    localization = \"en-US\",\n    argumentLabel,\n    messageKey,\n    template\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(messageKey, \"getTemplateArgumentMessage({ messageKey }) -- messageKey must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof messageKey === \"string\", \"getTemplateArgumentMessage({ messageKey }) -- messageKey must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(argumentLabel, \"getTemplateArgumentMessage({ argumentLabel }) -- argumentLabel must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof argumentLabel === \"string\", \"getTemplateArgumentMessage({ argumentLabel }) -- argumentLabel must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(localization, \"getTemplateArgumentMessage({ localization }) -- localization must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof localization === \"string\", \"getTemplateArgumentMessage({ localization }) -- localization must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"getTemplateArgumentMessage({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template === \"object\", \"getTemplateArgumentMessage({ template }) -- template must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template.f_type === \"InteractionTemplate\", \"getTemplateArgumentMessage({ template }) -- template object must be an InteractionTemplate\");\n  switch (template.f_version) {\n    case \"1.1.0\":\n      const param = template?.data?.parameters?.find(a => a.label === argumentLabel);\n      if (!param) return undefined;\n      const message = param?.messages?.find(a => a.key === messageKey);\n      if (!message) return undefined;\n      const lzn = message?.i18n?.find(a => a.tag === localization);\n      if (!lzn) return undefined;\n      return lzn.translation;\n    case \"1.0.0\":\n      return template?.data?.arguments?.[argumentLabel]?.messages?.[messageKey]?.i18n?.[localization];\n    default:\n      throw new Error(\"getTemplateArgumentMessage Error: Unsupported template version\");\n  }\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  deriveCadenceByNetwork: deriveCadenceByNetwork,\n  generateDependencyPin: generateDependencyPin,\n  generateDependencyPinAtLatestSealedBlock: generateDependencyPinAtLatestSealedBlock,\n  generateTemplateId: generateTemplateId,\n  getInteractionTemplateAudits: getInteractionTemplateAudits,\n  getTemplateArgumentMessage: getTemplateArgumentMessage,\n  getTemplateMessage: getTemplateMessage,\n  verifyDependencyPinsSame: verifyDependencyPinsSame,\n  verifyDependencyPinsSameAtLatestSealedBlock: verifyDependencyPinsSameAtLatestSealedBlock,\n  verifyGeneratedTemplateId: verifyGeneratedTemplateId\n});\n\n/**\n * @description Factory function that returns a mutate function for a given currentUser.\n *\n * @param currentUserOrConfig CurrentUser actor or configuration\n */\nconst createMutate = context => {\n  /**\n   * @description Allows you to submit transactions to the blockchain to potentially mutate the state.\n   *\n   * When being used in the browser, `fcl.mutate` uses the built-in `fcl.authz` function to produce the authorization (signatures) for the current user. When calling this method from Node.js, you will need to supply your own custom authorization function.\n   *\n   * @param opts Mutation options configuration\n   * @param opts.cadence A valid cadence transaction (required)\n   * @param opts.args Any arguments to the script if needed should be supplied via a function that returns an array of arguments\n   * @param opts.limit Compute (Gas) limit for query.\n   * @param opts.proposer The authorization function that returns a valid AuthorizationObject for the proposer role\n   * @param opts.template Interaction Template for a transaction\n   * @param opts.authz Authorization function for transaction\n   * @param opts.payer Payer Authorization function for transaction\n   * @param opts.authorizations Authorizations function for transaction\n   * @returns The transaction ID\n   *\n   * @example\n   * import * as fcl from '@onflow/fcl';\n   * // login somewhere before\n   * fcl.authenticate();\n   *\n   * const txId = await fcl.mutate({\n   *   cadence: `\n   *     import Profile from 0xba1132bc08f82fe2\n   *\n   *     transaction(name: String) {\n   *       prepare(account: auth(BorrowValue) &Account) {\n   *         account.storage.borrow<&{Profile.Owner}>(from: Profile.privatePath)!.setName(name)\n   *       }\n   *     }\n   *   `,\n   *   args: (arg, t) => [arg('myName', t.String)],\n   * });\n   */\n  const mutate = async function () {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var txid;\n    try {\n      await preMutate(context, opts);\n      opts = await prepTemplateOpts(context, opts);\n      // Allow for a config to overwrite the authorization function.\n      // prettier-ignore\n      const authz = await context.config.get(\"fcl.authz\", context.currentUser.authorization);\n      txid = context.sdk.send([_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.transaction(opts.cadence), _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.args(normalizeArgs(opts.args || [])), opts.limit && isNumber(opts.limit) && _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.limit(opts.limit),\n      // opts.proposer > opts.authz > authz\n      _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.proposer(opts.proposer || opts.authz || authz),\n      // opts.payer > opts.authz > authz\n      _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.payer(opts.payer || opts.authz || authz),\n      // opts.authorizations > [opts.authz > authz]\n      _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.authorizations(opts.authorizations || [opts.authz || authz])]).then(context.sdk.decode);\n      return txid;\n    } catch (error) {\n      throw error;\n    }\n  };\n  return mutate;\n};\n\n/**\n * @description Legacy factory function that creates a mutate function using global FCL context.\n * This function provides backward compatibility for code that was written before the\n * introduction of dependency injection patterns in FCL. It creates a mutate function\n * by combining a partial global context with a provided current user service.\n *\n * This function is considered legacy and should be used primarily for backward compatibility.\n * New code should prefer using the `createMutate` function with a complete FCL context\n * for better testability and dependency management.\n *\n * The function creates a partial context using global configuration and SDK methods,\n * then combines it with the provided current user service to create a fully functional\n * mutate function.\n *\n * @param currentUserOrConfig The current user service instance that provides authentication\n * and authorization capabilities. This service must implement the CurrentUserService interface\n * and provide methods for user authentication, authorization, and session management.\n *\n * @returns A mutate function that can submit transactions to the Flow blockchain.\n * The returned function accepts the same options as the standard mutate function:\n * - cadence: The Cadence transaction code to execute\n * - args: Function that returns transaction arguments\n * - template: Interaction template for standardized transactions\n * - limit: Compute limit for the transaction\n * - authz: Authorization function for all roles\n * - proposer: Specific authorization for proposer role\n * - payer: Specific authorization for payer role\n * - authorizations: Array of authorization functions for authorizer roles\n *\n * @example\n * // Legacy usage with global context\n * import { getMutate } from \"@onflow/fcl-core\"\n * import { getCurrentUser } from \"@onflow/fcl-core\"\n *\n * // Get the current user service\n * const currentUser = getCurrentUser({ platform: \"web\" })\n *\n * // Create mutate function using legacy pattern\n * const mutate = getMutate(currentUser)\n *\n * // Use the mutate function\n * const txId = await mutate({\n *   cadence: `\n *     transaction {\n *       execute { log(\"Hello, Flow!\") }\n *     }\n *   `\n * })\n */\nconst getMutate = currentUserOrConfig => {\n  const partialContext = createPartialGlobalFCLContext();\n  const context = {\n    ...partialContext,\n    currentUser: currentUserOrConfig\n  };\n  return createMutate(context);\n};\n\n/**\n * @description Normalizes a composite signature to ensure compatibility with FCL format\n *\n * @param resp The composite signature to normalize\n * @returns The normalized composite signature or null\n *\n * @example\n * const resp = normalizeCompositeSignature({\n *   f_type: \"CompositeSignature\",\n *   f_vsn: \"1.0.0\",\n *   addr: \"_____\",         // sans-prefix\n *   signature: \"adfe1234\", // hex\n *   keyId: 3,\n * })\n */\nfunction normalizeCompositeSignature(resp) {\n  if (resp == null) return null;\n  if (!resp[\"f_vsn\"]) {\n    return {\n      ...COMPOSITE_SIGNATURE_PRAGMA,\n      addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(resp.addr || resp.address),\n      signature: resp.signature || resp.sig,\n      keyId: resp.keyId\n    };\n  }\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp;\n    default:\n      return null;\n  }\n}\n\n/**\n * @description Normalizes an authn service to ensure compatibility with FCL service format\n *\n * @param service The authn service to normalize\n * @returns The normalized authn service or null\n *\n * @example\n * const service = normalizeAuthn({\n *   f_type: \"Service\",\n *   f_vsn: \"1.0.0\",\n *   type: \"authn\",\n *   uid: \"uniqueDedupeKey\",\n *   endpoint: \"https://rawr\",\n *   id: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n *   identity: {\n *     address: \"0x____\"\n *   },\n *   provider: {\n *     address: \"0x____\",\n *     name: \"Best Wallet\",\n *     description: \"The Best Wallet\",\n *     icon: \"https://\",\n *   }\n * })\n */\nfunction normalizeAuthn(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    return {\n      ...SERVICE_PRAGMA,\n      type: service.type,\n      uid: service.id,\n      endpoint: service.authn,\n      id: service.pid,\n      provider: {\n        address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(service.addr),\n        name: service.name,\n        icon: service.icon\n      }\n    };\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n/**\n * @description Normalizes an authz service to ensure compatibility with FCL service format\n *\n * @param service The authz service to normalize\n * @returns The normalized authz service or null\n *\n * @example\n * const service = normalizeAuthz({\n *   f_type: \"service\",\n *   f_vsn: \"1.0.0\",\n *   type: \"authz\",\n *   uid: \"uniqueDedupeKey\",\n *   endpoint: \"https://rawr\",\n *   method: \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n *   identity: {\n *     address: \"0x______\",\n *     keyId: 0,\n *   },\n *   data: {}, // included in body of authz request\n *   params: {}, // included as query params on endpoint url\n * })\n */\nfunction normalizeAuthz(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    return {\n      ...SERVICE_PRAGMA,\n      type: service.type,\n      uid: service.id,\n      endpoint: service.endpoint,\n      method: service.method,\n      identity: {\n        ...IDENTITY_PRAGMA,\n        address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(service.addr),\n        keyId: service.keyId\n      },\n      params: service.params,\n      data: service.data\n    };\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n/**\n * @description Normalizes a pre-authz service to ensure compatibility with FCL service format\n *\n * @param service The pre-authz service to normalize\n * @returns The normalized pre-authz service or null\n *\n * @example\n * const service = normalizePreAuthz({\n *   f_type: \"service\",\n *   f_vsn: \"1.0.0\",\n *   type: \"pre-authz\",\n *   uid: \"uniqueDedupeKey\",\n *   endpoint: \"https://rawr\",\n *   method: \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n *   identity: {\n *     address: \"0x______\",\n *     keyId: 0,\n *   },\n * })\n */\nfunction normalizePreAuthz(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    return {\n      ...SERVICE_PRAGMA,\n      type: service.type,\n      uid: service.id,\n      endpoint: service.endpoint,\n      method: service.method,\n      identity: {\n        ...IDENTITY_PRAGMA,\n        address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(service.addr),\n        keyId: service.keyId\n      },\n      params: service.params,\n      data: service.data\n    };\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n/**\n * @description Normalizes a frame service to ensure compatibility with FCL service format\n *\n * @param service The frame service to normalize\n * @returns The normalized frame service or null\n *\n * @example\n * const service = normalizeFrame({\n *   f_type: \"Service\",\n *   f_vsn: \"1.0.0\",\n *   type: \"frame\",\n *   endpoint: \"https://rawr\",\n *   data: {},   // Sent to frame when ready\n *   params: {}, // include in query params on frame\n * })\n */\nfunction normalizeFrame(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    return {\n      old: service,\n      ...SERVICE_PRAGMA,\n      type: \"frame\",\n      endpoint: service.endpoint,\n      params: service.params || {},\n      data: service.data || {}\n    };\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n/**\n * @description Normalizes a back-channel-rpc service to ensure compatibility with FCL service format\n *\n * @param service The back-channel-rpc service to normalize\n * @returns The normalized back-channel-rpc service or null\n *\n * @example\n * const service = normalizeBackChannelRpc({\n *   f_type: \"Service\",\n *   f_vsn: \"1.0.0\",\n *   type: \"back-channel-rpc\",\n *   endpoint: \"https://rawr\",\n *   method: \"HTTP/GET\", // HTTP/GET | HTTP/POST\n *   data: {},           // included in body of rpc\n *   params: {},         // included as query params on endpoint url\n * })\n */\nfunction normalizeBackChannelRpc(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    return {\n      ...SERVICE_PRAGMA,\n      type: \"back-channel-rpc\",\n      endpoint: service.endpoint,\n      method: service.method,\n      params: service.params || {},\n      data: service.data || {}\n    };\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n/**\n * @description Normalizes an open-id service to ensure compatibility with FCL service format\n *\n * @param service The open-id service to normalize\n * @returns The normalized open-id service or null\n *\n * @example\n * const service = normalizeOpenId({\n *   f_type: \"Service\",\n *   f_vsn: \"1.0.0\",\n *   type: \"open-id\",\n *   uid: \"uniqueDedupeKey\",\n *   method: \"data\",\n *   data: {\n *      profile: {\n *        name: \"Bob\",\n *        family_name: \"Builder\",\n *        given_name: \"Robert\",\n *        middle_name: \"the\",\n *        nickname: \"Bob the Builder\",\n *        preferred_username: \"bob\",\n *        profile: \"https://www.bobthebuilder.com/\",\n *        picture: \"https://avatars.onflow.org/avatar/bob\",\n *        gender: \"...\",\n *        birthday: \"2001-01-18\",\n *        zoneinfo: \"America/Vancouver\",\n *        locale: \"en-us\",\n *        updated_at: \"1614970797388\"\n *      },\n *      email: {\n *        email: \"bob@bob.bob\",\n *        email_verified: true\n *      },\n *      address: {\n *        address: \"One Apple Park Way, Cupertino, CA 95014, USA\"\n *      },\n *      phone: {\n *        phone_number: \"+1 (xxx) yyy-zzzz\",\n *        phone_number_verified: true\n *      },\n *      social: {\n *        twitter: \"@_qvvg\",\n *        twitter_verified: true\n *      },\n *   }\n * })\n */\nfunction normalizeOpenId(service) {\n  if (service == null) return null;\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n/**\n * @description Normalizes a user-signature service to ensure compatibility with FCL service format\n *\n * @param service The user-signature service to normalize\n * @returns The normalized user-signature service or null\n *\n * @example\n * const service = {\n *   \"f_type\": \"Service\",\n *   \"f_vsn\": \"1.0.0\",\n *   \"type\": \"user-signature\",\n *   \"uid\": \"uniqueDedupeKey\",\n *   \"endpoint\": \"https://rawr\",\n *   \"method\": \"IFRAME/RPC\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n *   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n *   \"data\": {}, // included in body of user-signature request\n *   \"params\": {}, // included as query params on endpoint url\n * }\n */\nfunction normalizeUserSignature(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    throw new Error(\"Invalid user-signature service\");\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n/**\n * @description Normalizes a local-view service to ensure compatibility with FCL format\n *\n * @param resp The local-view to normalize\n * @returns The normalized local-view or null\n *\n * @example\n * const service = normalizeLocalView({\n *   f_type: \"Service\",\n *   f_vsn: \"1.0.0\",\n *   type: \"local-view\",\n *   method: \"VIEW/IFRAME\",\n *   endpoint: \"https://woot.org/authz/local\",\n *   data: {},\n *   params: {},\n * })\n */\nfunction normalizeLocalView(resp) {\n  if (resp == null) return null;\n  if (resp.method == null) {\n    resp = {\n      ...resp,\n      type: \"local-view\",\n      method: \"VIEW/IFRAME\"\n    };\n  }\n  if (!resp[\"f_vsn\"]) {\n    return {\n      ...SERVICE_PRAGMA,\n      type: resp.type || \"local-view\",\n      method: resp.method,\n      endpoint: resp.endpoint,\n      data: resp.data || {},\n      params: resp.params || {}\n    };\n  }\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp;\n    default:\n      return null;\n  }\n}\n\n/**\n * @description Normalizes an account-proof service to ensure compatibility with FCL service format\n *\n * @param service The account-proof service to normalize\n * @returns The normalized account-proof service or null\n *\n * @example\n * {\n *   \"f_type\": \"Service\",                    // Its a service!\n *   \"f_vsn\": \"1.0.0\",                       // Follows the v1.0.0 spec for the service\n *   \"type\": \"account-proof\",                // the type of service it is\n *   \"method\": \"DATA\",                       // Its data!\n *   \"uid\": \"awesome-wallet#account-proof\",  // A unique identifier for the service\n *   \"data\": {\n *     \"f_type\": \"account-proof\",\n *     \"f_vsn\": \"1.0.0\",\n *     \"nonce\": \"0A1BC2FF\",                  // Nonce signed by the current account-proof (minimum 32 bytes in total, i.e 64 hex characters)\n *     \"address\": \"0xUSER\",                  // The user's address (8 bytes, i.e 16 hex characters)\n *     \"signature\": CompositeSignature,      // address (sans-prefix), keyId, signature (hex)\n * }\n */\nfunction normalizeAccountProof(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    throw new Error(`FCL Normalizer Error: Invalid account-proof service`);\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n/**\n * @description Normalizes an authn-refresh service to ensure compatibility with FCL service format\n *\n * @param service The authn-refresh service to normalize\n * @returns The normalized authn-refresh service or null\n *\n * @example\n * const service = normalizeAuthnRefresh({\n *   f_type: \"Service\",\n *   f_vsn: \"1.0.0\",\n *   type: \"authn-refresh\",\n *   uid: \"uniqueDedupeKey\",\n *   endpoint: \"https://rawr\",\n *   method: \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n *   id: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n *   data: {}, // included in body of request\n *   params: {}, // included as query params on endpoint url\n * })\n */\nfunction normalizeAuthnRefresh(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    throw new Error(\"Invalid authn-refresh service\");\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n/**\n * @description Normalizes an array of services by applying type-specific normalization to each service.\n * This function processes multiple services in batch, applying the appropriate normalizer based on\n * each service's type, and filters out any services that fail normalization.\n *\n * @param services Array of services to normalize\n * @param data Optional additional data to pass to individual service normalizers\n * @returns Array of normalized services with invalid services filtered out\n *\n * @example\n * // Normalize multiple services from wallet discovery\n * const rawServices = [\n *   { type: \"authn\", endpoint: \"https://wallet.com/authn\", ... },\n *   { type: \"authz\", endpoint: \"https://wallet.com/authz\", ... },\n *   { type: \"user-signature\", endpoint: \"https://wallet.com/sign\", ... }\n * ]\n *\n * const normalizedServices = normalizeServices(rawServices)\n * console.log(\"Normalized services:\", normalizedServices)\n */\nfunction normalizeServices(services, data) {\n  return services.map(service => normalizeService(service, data)).filter(Boolean);\n}\nconst serviceNormalizers = {\n  \"back-channel-rpc\": normalizeBackChannelRpc,\n  \"pre-authz\": normalizePreAuthz,\n  authz: normalizeAuthz,\n  authn: normalizeAuthn,\n  frame: normalizeFrame,\n  \"open-id\": normalizeOpenId,\n  \"user-signature\": normalizeUserSignature,\n  \"local-view\": normalizeLocalView,\n  \"account-proof\": normalizeAccountProof,\n  \"authn-refresh\": normalizeAuthnRefresh\n};\n\n/**\n * @description Normalizes a single service by applying the appropriate type-specific normalizer.\n * This function looks up the correct normalizer based on the service type and applies it to\n * ensure the service conforms to expected formats and contains required fields.\n *\n * @param service The service object to normalize\n * @param data Optional additional data to pass to the service normalizer\n * @returns The normalized service object\n *\n * @example\n * // Normalize an authentication service\n * const rawService = {\n *   type: \"authn\",\n *   endpoint: \"https://wallet.example.com/authn\",\n *   method: \"HTTP/POST\",\n *   // ... other service properties\n * }\n *\n * const normalized = normalizeService(rawService)\n * console.log(\"Normalized service:\", normalized)\n */\nfunction normalizeService(service, data) {\n  try {\n    const normalized = serviceNormalizers[service.type](service, data);\n    return normalized;\n  } catch (error) {\n    console.error(`Unrecognized FCL Service Type [${service.type}]`, service, error);\n    return service;\n  }\n}\n\n/**\n * @description Fetches additional services from a remote endpoint using an authorization code.\n * This function handles both modern service arrays and legacy wallet provider formats for\n * backward compatibility.\n *\n * @param servicesURL The URL endpoint to fetch services from\n * @param code The authorization code to include in the request\n * @returns Promise resolving to an array of Service objects\n *\n * @example\n * // Fetch services from a wallet provider\n * const services = await fetchServices(\n *   \"https://wallet.example.com/services\",\n *   \"auth_code_123\"\n * )\n */\nasync function fetchServices(servicesURL, code) {\n  if (servicesURL == null || code == null) return [];\n  const url = new URL$1(servicesURL);\n  url.searchParams.append(\"code\", code);\n  const resp = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(d => d.json());\n  if (Array.isArray(resp)) return resp;\n\n  // Backwards compatibility for First-Gen Wallet Providers\n  const services = [];\n\n  // Convert authorizations into authz services\n  if (Array.isArray(resp.authorizations)) {\n    for (let service of resp.authorizations) {\n      services.push({\n        type: \"authz\",\n        keyId: resp.keyId,\n        ...service\n      });\n    }\n  }\n\n  // Convert Provider info into an authn service\n  if (resp.provider != null) {\n    services.push({\n      type: \"authn\",\n      id: \"wallet-provider#authn\",\n      ...resp.provider\n    });\n  }\n  return services;\n}\n\n/**\n * @description Merges two arrays of services into a single array. This is a simple concatenation\n * operation used internally by FCL to combine service arrays from different sources.\n * The function handles undefined/null inputs gracefully by treating them as empty arrays.\n *\n * @param sx1 First array of services to merge\n * @param sx2 Second array of services to merge\n * @returns Combined array containing all services from both input arrays\n *\n * @example\n * // Merge wallet services with discovery services\n * const walletServices = [\n *   { type: \"authn\", endpoint: \"wallet1.com\" },\n *   { type: \"authz\", endpoint: \"wallet1.com\" }\n * ]\n * const discoveryServices = [\n *   { type: \"authn\", endpoint: \"wallet2.com\" }\n * ]\n * const allServices = mergeServices(walletServices, discoveryServices)\n */\nfunction mergeServices() {\n  let sx1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let sx2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  // TODO: Make this smarter\n  return [...sx1, ...sx2];\n}\n\n/**\n * @description Finds a service of a specific type from an array of services, returning the one with\n * the highest version number. This is used internally by FCL to select the most recent version\n * of a service when multiple services of the same type are available.\n *\n * @param services Array of services to search through\n * @param type The type of service to find (e.g., \"authn\", \"authz\", \"user-signature\")\n * @returns The service with the highest version number of the specified type, or null if none found\n *\n * @example\n * // Find the latest authentication service\n * const services = [\n *   { type: \"authn\", f_vsn: \"1.0.0\", endpoint: \"...\" },\n *   { type: \"authn\", f_vsn: \"1.1.0\", endpoint: \"...\" },\n *   { type: \"authz\", f_vsn: \"1.0.0\", endpoint: \"...\" }\n * ]\n * const latestAuthn = serviceOfType(services, \"authn\")\n */\nfunction serviceOfType() {\n  let services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let type = arguments.length > 1 ? arguments[1] : undefined;\n  // Find the greatest version of the service type\n  return services.reduce((mostRecent, service) => service.type === type ? !mostRecent || _onflow_util_semver__WEBPACK_IMPORTED_MODULE_14__.compare(service.f_vsn, mostRecent.f_vsn) > 0 ? service : mostRecent : mostRecent, null);\n}\n\nfunction deriveCompositeId(authn) {\n  return _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode([authn.provider?.address || authn.provider?.name || \"UNSPECIFIED\", authn.id]).toString(\"hex\");\n}\nfunction normalizeData(data) {\n  data.addr = data.addr ? (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(data.addr) : null;\n  data.paddr = data.paddr ? (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(data.paddr) : null;\n  return data;\n}\n\n/**\n * @description Builds a complete CurrentUser object from user data by normalizing addresses,\n * fetching additional services, and creating a composite ID. This function handles the\n * construction of the user object that represents the authenticated state in FCL.\n *\n * @param data The user data containing address, services, and authentication information\n * @returns Promise resolving to a CurrentUser object with normalized data and services\n *\n * @example\n * // Build a user object from authentication data\n * const userData = {\n *   addr: \"0x1234567890abcdef\",\n *   services: [...],\n *   hks: \"https://wallet.example.com/hooks\",\n *   code: \"auth_code_123\"\n * }\n * const user = await buildUser(userData)\n * console.log(user.addr) // \"0x1234567890abcdef\"\n */\nasync function buildUser(data) {\n  data = normalizeData(data);\n  var services = normalizeServices(mergeServices(data.services || [], await fetchServices(data.hks, data.code)));\n  const authn = serviceOfType(services, \"authn\");\n  return {\n    ...USER_PRAGMA,\n    addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(data.addr),\n    cid: deriveCompositeId(authn),\n    loggedIn: true,\n    services: services,\n    expiresAt: data.expires\n  };\n}\n\nconst FCL_WC_SERVICE_METHOD = \"WC/RPC\";\nconst isServerSide = typeof window === \"undefined\";\n\n/**\n * @description Checks if WalletConnect service plugin is enabled and logs a warning if it's not.\n * This function verifies that the WalletConnect strategy is registered in the service registry.\n * It's called internally by FCL to notify developers about missing WalletConnect configuration,\n * which is required for users to connect with certain wallets.\n *\n * @example\n * // This function is called automatically by FCL, but can be used manually:\n * checkWalletConnectEnabled()\n * // If WalletConnect is not configured, an error will be logged to the console\n *\n * // To properly configure WalletConnect to avoid the warning:\n * import * as fcl from \"@onflow/fcl\"\n *\n * fcl.config({\n *   \"app.detail.title\": \"My App\",\n *   \"walletconnect.projectId\": \"your-walletconnect-project-id\"\n * })\n */\n// Utility to notify the user if the Walletconnect service plugin has not been loaded\nfunction checkWalletConnectEnabled() {\n  if (isServerSide) return;\n  const serviceRegistry = getServiceRegistry();\n  const strategies = serviceRegistry.getStrategies();\n  if (!strategies.includes(FCL_WC_SERVICE_METHOD)) {\n    _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log({\n      title: \"FCL WalletConnect Service Plugin\",\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.LEVELS.error,\n      message: \"All dApps are expected to register for a WalletConnect projectId & add this to their FCL configuration.  If you do not do so, users will be unable to use certain wallets to interact with your dApp.  See https://developers.flow.com/tools/clients/fcl-js/configure-fcl for more information.\"\n    });\n  }\n}\n\nconst AbortController = globalThis.AbortController || __webpack_require__(/*! abort-controller */ \"(ssr)/./node_modules/abort-controller/dist/abort-controller.js\");\n/**\n * @description Executes a service strategy based on the service method. This function looks up the\n * appropriate strategy from the service registry and executes it with the provided parameters.\n * It's used internally by FCL to handle different communication methods with wallet services.\n *\n * @param params The parameters object containing service details and execution context\n * @returns Promise resolving to the strategy response\n *\n * @example\n * // Execute a service strategy (internal usage)\n * const response = await execStrategy({\n *   service: { method: \"HTTP/POST\", endpoint: \"https://wallet.example.com/authz\" },\n *   body: { transaction: \"...\" },\n *   config: execConfig,\n *   abortSignal: controller.signal\n * })\n */\nconst execStrategy = async _ref => {\n  let {\n    service,\n    body,\n    config,\n    abortSignal,\n    customRpc,\n    user,\n    opts\n  } = _ref;\n  const strategy = getServiceRegistry().getStrategy(service.method);\n  return strategy({\n    service,\n    body,\n    config,\n    abortSignal,\n    customRpc,\n    opts,\n    user\n  });\n};\n\n/**\n * @description Executes a service with the provided parameters, handling configuration setup,\n * error handling, and recursive service redirects. This is the main entry point for executing\n * wallet service interactions in FCL.\n *\n * @param params The service execution parameters including service, message, and configuration\n * @returns Promise resolving to a StrategyResponse containing the execution result\n *\n * @example\n * // Execute a service (internal usage)\n * const response = await execService({\n *   service: { type: \"authz\", method: \"HTTP/POST\", endpoint: \"...\" },\n *   msg: { transaction: \"...\" },\n *   config: { client: { platform: \"web\" } }\n * })\n */\nasync function execService(context, _ref2) {\n  let {\n    service,\n    msg = {},\n    config = {},\n    opts = {},\n    platform,\n    abortSignal = new AbortController().signal,\n    execStrategy: _execStrategy,\n    user\n  } = _ref2;\n  // Notify the developer if WalletConnect is not enabled\n  checkWalletConnectEnabled();\n  msg.data = service.data;\n  const execConfig = {\n    services: await configLens(context, /^service\\./),\n    app: await configLens(context, /^app\\.detail\\./),\n    client: {\n      ...config.client,\n      platform,\n      fclVersion: VERSION,\n      fclLibrary: \"https://github.com/onflow/fcl-js\",\n      hostname: window?.location?.hostname ?? null,\n      network: await createGetChainId(context)(opts)\n    }\n  };\n  try {\n    const res = await (_execStrategy || execStrategy)({\n      service,\n      body: msg,\n      config: execConfig,\n      opts,\n      user,\n      abortSignal\n    });\n    if (res.status === \"REDIRECT\") {\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(service.type === res.data.type, \"Cannot shift recursive service type in execService\");\n      return await execService(context, {\n        service: res.data,\n        msg,\n        config: execConfig,\n        opts,\n        abortSignal,\n        platform,\n        user\n      });\n    } else {\n      return res;\n    }\n  } catch (error) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log)({\n      title: `Error on execService ${service?.type}`,\n      message: error,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.LEVELS.error\n    });\n    throw error;\n  }\n}\n\n/**\n * @description Type guard function that checks if a value is a function. This is a simple utility\n * used internally by FCL for type checking and validation.\n *\n * @param d The value to check\n * @returns True if the value is a function, false otherwise\n *\n * @example\n * // Check if a value is a function\n * const callback = () => console.log(\"Hello\")\n * const notCallback = \"string\"\n *\n * console.log(isFn(callback)) // true\n * console.log(isFn(notCallback)) // false\n */\nconst isFn = d => typeof d === \"function\";\nconst NAME = \"CURRENT_USER\";\nconst UPDATED = \"CURRENT_USER/UPDATED\";\nconst SNAPSHOT = \"SNAPSHOT\";\nconst SET_CURRENT_USER = \"SET_CURRENT_USER\";\nconst DEL_CURRENT_USER = \"DEL_CURRENT_USER\";\nconst DATA = `{\n  \"f_type\": \"User\",\n  \"f_vsn\": \"1.0.0\",\n  \"addr\":null,\n  \"cid\":null,\n  \"loggedIn\":null,\n  \"expiresAt\":null,\n  \"services\":[]\n}`;\nconst getStoredUser = async storage => {\n  const fallback = JSON.parse(DATA);\n  const stored = await storage.get(NAME);\n  if (stored != null && fallback[\"f_vsn\"] !== stored[\"f_vsn\"]) {\n    storage.removeItem(NAME);\n    return fallback;\n  }\n  return stored || fallback;\n};\nconst makeHandlers = context => {\n  // Wrapper for backwards compatibility\n  const getStorageProvider = async () => {\n    if (context.getStorageProvider) return await context.getStorageProvider();\n    return await context.config.first([\"fcl.storage\", \"fcl.storage.default\"], undefined);\n  };\n  return {\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.INIT]: async ctx => {\n      if (typeof window === \"undefined\") {\n        console.warn(`\n        %cFCL Warning\n        ============================\n        \"currentUser\" is only available in the browser.\n        For more info, please see the docs: https://docs.onflow.org/fcl/\n        ============================\n        `, \"font-weight:bold;font-family:monospace;\");\n      }\n      ctx.merge(JSON.parse(DATA));\n      const storage = await getStorageProvider();\n      if (storage.can) {\n        const user = await getStoredUser(storage);\n        if (notExpired(user)) ctx.merge(user);\n      }\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SUBSCRIBE]: (ctx, letter) => {\n      ctx.subscribe(letter.from);\n      ctx.send(letter.from, UPDATED, {\n        ...ctx.all()\n      });\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UNSUBSCRIBE]: (ctx, letter) => {\n      ctx.unsubscribe(letter.from);\n    },\n    [SNAPSHOT]: async (ctx, letter) => {\n      letter.reply({\n        ...ctx.all()\n      });\n    },\n    [SET_CURRENT_USER]: async (ctx, letter, data) => {\n      ctx.merge(data);\n      const storage = await getStorageProvider();\n      if (storage.can) storage.put(NAME, ctx.all());\n      ctx.broadcast(UPDATED, {\n        ...ctx.all()\n      });\n    },\n    [DEL_CURRENT_USER]: async (ctx, letter) => {\n      ctx.merge(JSON.parse(DATA));\n      const storage = await getStorageProvider();\n      if (storage.can) storage.put(NAME, ctx.all());\n      ctx.broadcast(UPDATED, {\n        ...ctx.all()\n      });\n    }\n  };\n};\nconst spawnCurrentUser = context => {\n  (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.spawn)(makeHandlers(context), context.actorName);\n};\nfunction notExpired(user) {\n  return user.expiresAt == null || user.expiresAt === 0 || user.expiresAt > Date.now();\n}\nasync function getAccountProofData(context) {\n  let accountProofDataResolver = await context.config.get(\"fcl.accountProof.resolver\");\n  if (accountProofDataResolver == null) return;\n  if (!isFn(accountProofDataResolver)) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log)({\n      title: \"Account Proof Data Resolver must be a function\",\n      message: `Check fcl.accountProof.resolver configuration.\n                Expected: fcl.accountProof.resolver: async () => { ... }\n                Received: fcl.accountProof.resolver: ${typeof accountProofDataResolver}\n                `,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.LEVELS.warn\n    });\n    return;\n  }\n  const accountProofData = {\n    ...(await accountProofDataResolver())\n  };\n  const origin = window?.location?.origin;\n  if (accountProofData.appIdentifier) {\n    if (origin) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log.deprecate({\n        pkg: \"FCL\",\n        subject: \"appIdentifier in fcl.accountProof.resolver\",\n        message: \"Manually set app identifiers in the account proof resolver function are now deprecated.  These are now automatically set to the application origin URL by FCL\",\n        transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/TRANSITIONS.md#0002-deprecate-appIdentifier-field-in-account-proof-resolver\"\n      });\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof accountProofData.appIdentifier === \"string\", \"appIdentifier must be a string\");\n    }\n  } else {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(origin, \"The appIdentifier (origin) could not be inferred from the window.location.origin.  Please set the appIdentifier manually in the fcl.accountProof.resolver function.\");\n    accountProofData.appIdentifier = origin;\n  }\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(accountProofData.nonce), \"Nonce must be a hex string\");\n  return accountProofData;\n}\nconst makeConfig = async _ref => {\n  let {\n    discoveryAuthnInclude,\n    discoveryAuthnExclude,\n    discoveryFeaturesSuggested\n  } = _ref;\n  return {\n    client: {\n      discoveryAuthnInclude,\n      discoveryAuthnExclude,\n      discoveryFeaturesSuggested,\n      clientServices: await makeDiscoveryServices(),\n      supportedStrategies: getServiceRegistry().getStrategies()\n    }\n  };\n};\n\n/**\n * @description Factory function to create the authenticate method\n * @param config Current User Configuration\n */\nconst createAuthenticate = context =>\n/**\n * @description Calling this method will authenticate the current user via any wallet that supports FCL. Once called, FCL will initiate communication with the configured `discovery.wallet` endpoint which lets the user select a wallet to authenticate with. Once the wallet provider has authenticated the user, FCL will set the values on the current user object for future use and authorization.\n *\n * This method can only be used in web browsers.\n *\n * `discovery.wallet` value must be set in the configuration before calling this method. See FCL Configuration.\n *\n * The default discovery endpoint will open an iframe overlay to let the user choose a supported wallet.\n *\n * `authenticate` can also take a service returned from discovery with `fcl.authenticate(\\{ service \\})`.\n *\n * @param opts Authentication options\n * @param opts.service Optional service to use for authentication. A service returned from discovery can be passed here.\n * @param opts.redir Optional redirect flag. Defaults to false.\n * @param opts.forceReauth Optional force re-authentication flag. Defaults to false.\n * @returns Promise that resolves to the authenticated CurrentUser object or undefined\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * fcl\n *   .config()\n *   .put('accessNode.api', 'https://rest-testnet.onflow.org')\n *   .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\n * // anywhere on the page\n * fcl.authenticate();\n */\nasync function () {\n  let {\n    service,\n    redir = false,\n    forceReauth = false\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (service && !service?.provider?.is_installed && service?.provider?.requires_install) {\n    window.location.href = service?.provider?.install_link;\n    return;\n  }\n  return new Promise(async (resolve, reject) => {\n    spawnCurrentUser(context);\n    const opts = {\n      redir\n    };\n    const user = await createSnapshot(context)();\n    const refreshService = serviceOfType(user.services, \"authn-refresh\");\n    let accountProofData;\n    if (user.loggedIn && !forceReauth) {\n      if (refreshService) {\n        try {\n          const response = await execService(context, {\n            service: refreshService,\n            msg: accountProofData,\n            opts,\n            platform: context.platform,\n            user\n          });\n          (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(context.actorName, SET_CURRENT_USER, await buildUser(response));\n        } catch (error) {\n          (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log)({\n            title: `${error.name} Could not refresh wallet authentication.`,\n            message: error.message,\n            level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.LEVELS.error\n          });\n        } finally {\n          return resolve(await createSnapshot(context)());\n        }\n      } else {\n        return resolve(user);\n      }\n    }\n    try {\n      accountProofData = await getAccountProofData(context);\n    } catch (error) {\n      (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log)({\n        title: `${error.name} On Authentication: Could not resolve account proof data.`,\n        message: error.message,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.LEVELS.error\n      });\n      return reject(error);\n    }\n    try {\n      const discoveryService = await getDiscoveryService(context, service);\n      const response = await execService(context, {\n        service: discoveryService,\n        msg: accountProofData,\n        config: await makeConfig(discoveryService),\n        opts,\n        platform: context.platform,\n        execStrategy: context.discovery?.execStrategy,\n        user\n      });\n      (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(context.actorName, SET_CURRENT_USER, await buildUser(response));\n    } catch (error) {\n      (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.log)({\n        title: `${error} On Authentication`,\n        message: error,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_4__.LEVELS.error\n      });\n    } finally {\n      resolve(await createSnapshot(context)());\n    }\n  });\n};\n\n/**\n * @description Factory function to create the unauthenticate method\n * @param config Current User Configuration\n */\nfunction createUnauthenticate(context) {\n  /**\n   * @description Logs out the current user and sets the values on the current user object to null.\n   *\n   * This method can only be used in web browsers.\n   *\n   * The current user must be authenticated first.\n   *\n   * @example\n   * import * as fcl from '@onflow/fcl';\n   * fcl.config().put('accessNode.api', 'https://rest-testnet.onflow.org');\n   * // first authenticate to set current user\n   * fcl.authenticate();\n   * // ... somewhere else & sometime later\n   * fcl.unauthenticate();\n   * // fcl.currentUser.loggedIn === null\n   */\n  return function unauthenticate() {\n    spawnCurrentUser(context);\n    (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(context.actorName, DEL_CURRENT_USER);\n  };\n}\nconst normalizePreAuthzResponse = authz => ({\n  f_type: \"PreAuthzResponse\",\n  f_vsn: \"1.0.0\",\n  proposer: (authz || {}).proposer,\n  payer: (authz || {}).payer || [],\n  authorization: (authz || {}).authorization || []\n});\n\n/**\n * @description Factory function to create the resolvePreAuthz method\n * @param config Current User Configuration\n */\nconst createResolvePreAuthz = context => (authz, _ref2) => {\n  let {\n    user\n  } = _ref2;\n  const resp = normalizePreAuthzResponse(authz);\n  const axs = [];\n  if (resp.proposer != null) axs.push([\"PROPOSER\", resp.proposer]);\n  for (let az of resp.payer || []) axs.push([\"PAYER\", az]);\n  for (let az of resp.authorization || []) axs.push([\"AUTHORIZER\", az]);\n  var result = axs.map(_ref3 => {\n    let [role, az] = _ref3;\n    return {\n      tempId: [az.identity.address, az.identity.keyId].join(\"|\"),\n      addr: az.identity.address,\n      keyId: az.identity.keyId,\n      signingFunction(signable) {\n        return execService(context, {\n          service: az,\n          msg: signable,\n          platform: context.platform,\n          user\n        });\n      },\n      role: {\n        proposer: role === \"PROPOSER\",\n        payer: role === \"PAYER\",\n        authorizer: role === \"AUTHORIZER\"\n      }\n    };\n  });\n  return result;\n};\n\n/**\n * @description Factory function to create the authorization method\n * @param config Current User Configuration\n */\nconst createAuthorization = context =>\n/**\n * @description Produces the needed authorization details for the current user to submit transactions to Flow\n * It defines a signing function that connects to a user's wallet provider to produce signatures to submit transactions.\n *\n * @param account Account object\n * @returns Account object with signing function\n * */\nasync account => {\n  spawnCurrentUser(context);\n  return {\n    ...account,\n    tempId: \"CURRENT_USER\",\n    async resolve(account, preSignable) {\n      const user = await createAuthenticate(context)({\n        redir: true\n      });\n      const authz = serviceOfType(user.services, \"authz\");\n      const preAuthz = serviceOfType(user.services, \"pre-authz\");\n      if (preAuthz) return createResolvePreAuthz(context)(await execService(context, {\n        service: preAuthz,\n        msg: preSignable,\n        platform: context.platform,\n        user\n      }), {\n        user: user\n      });\n      if (authz) {\n        return {\n          ...account,\n          tempId: \"CURRENT_USER\",\n          resolve: null,\n          addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(authz.identity.address),\n          keyId: authz.identity.keyId,\n          sequenceNum: null,\n          signature: null,\n          async signingFunction(signable) {\n            return normalizeCompositeSignature(await execService(context, {\n              service: authz,\n              msg: signable,\n              opts: {\n                includeOlderJsonRpcCall: true\n              },\n              platform: context.platform,\n              user\n            }));\n          }\n        };\n      }\n      throw new Error(\"No Authz or PreAuthz Service configured for CURRENT_USER\");\n    }\n  };\n};\n\n/**\n * @description Factory function to create the subscribe method\n * @param context Current User Context\n */\nfunction createSubscribe(context) {\n  /**\n   * @description The callback passed to subscribe will be called when the user authenticates and un-authenticates, making it easy to update the UI accordingly.\n   *\n   * @param callback The callback will be called with the current user as the first argument when the current user is set or removed.\n   * @returns Function to unsubscribe from user state changes\n   *\n   * @example\n   * import React, { useState, useEffect } from 'react';\n   * import * as fcl from '@onflow/fcl';\n   *\n   * export function AuthCluster() {\n   *   const [user, setUser] = useState({ loggedIn: null });\n   *   useEffect(() => fcl.currentUser.subscribe(setUser), []); // sets the callback for FCL to use\n   *\n   *   if (user.loggedIn) {\n   *     return (\n   *       <div>\n   *         <span>{user?.addr ?? 'No Address'}</span>\n   *         <button onClick={fcl.unauthenticate}>Log Out</button>\n   *       </div>\n   *     );\n   *   } else {\n   *     return (\n   *       <div>\n   *         <button onClick={fcl.logIn}>Log In</button>{' '}\n   *         <button onClick={fcl.signUp}>Sign Up</button>\n   *       </div>\n   *     );\n   *   }\n   * }\n   */\n  return function subscribe(callback) {\n    spawnCurrentUser(context);\n    const EXIT = \"@EXIT\";\n    const self = (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.spawn)(async ctx => {\n      ctx.send(context.actorName, _onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SUBSCRIBE);\n      while (1) {\n        const letter = await ctx.receive();\n        if (letter.tag === EXIT) {\n          ctx.send(context.actorName, _onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UNSUBSCRIBE);\n          return;\n        }\n        callback(letter.data);\n      }\n    });\n    return () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(self, EXIT);\n  };\n}\n\n/**\n * @description Factory function to create the snapshot method\n * @param context Current User Context\n */\nfunction createSnapshot(context) {\n  /**\n   * @description Returns the current user object. This is the same object that is set and available on `fcl.currentUser.subscribe(callback)`.\n   *\n   * @returns Promise that resolves to the current user object\n   *\n   * @example\n   * // returns the current user object\n   * const user = fcl.currentUser.snapshot();\n   *\n   * // subscribes to the current user object and logs to console on changes\n   * fcl.currentUser.subscribe(console.log);\n   */\n  return function snapshot() {\n    spawnCurrentUser(context);\n    return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(context.actorName, SNAPSHOT, null, {\n      expectReply: true,\n      timeout: 0\n    });\n  };\n}\n\n/**\n * @description Resolves the current user as an argument\n * @param config Current User Configuration\n */\nconst createResolveArgument = config => async () => {\n  const {\n    addr\n  } = await createAuthenticate(config)();\n  return (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.arg)((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(addr), _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.t.Address);\n};\nconst makeSignable = msg => {\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(msg), \"Message must be a hex string\");\n  return {\n    message: msg\n  };\n};\n\n/**\n * @description Factory function to create the signUserMessage method\n * @param config Current User Configuration\n */\nconst createSignUserMessage = context =>\n/**\n * @description A method to use allowing the user to personally sign data via FCL Compatible Wallets/Services.\n *\n * This method requires the current user's wallet to support a signing service endpoint. Currently, only Blocto is compatible with this feature by default.\n *\n * @param msg A hexadecimal string to be signed\n * @returns An Array of CompositeSignatures: \\{`addr`, `keyId`, `signature`\\}\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n *\n * export const signMessage = async () => {\n *   const MSG = Buffer.from('FOO').toString('hex');\n *   try {\n *     return await currentUser.signUserMessage(MSG);\n *   } catch (error) {\n *     console.log(error);\n *   }\n * };\n */\nasync msg => {\n  spawnCurrentUser(context);\n  const user = await createAuthenticate(context)({\n    redir: true\n  });\n  const signingService = serviceOfType(user.services, \"user-signature\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(signingService, \"Current user must have authorized a signing service.\");\n  try {\n    const response = await execService(context, {\n      service: signingService,\n      msg: makeSignable(msg),\n      platform: context.platform,\n      user\n    });\n    if (Array.isArray(response)) {\n      return response.map(compSigs => normalizeCompositeSignature(compSigs));\n    } else {\n      return [normalizeCompositeSignature(response)];\n    }\n  } catch (error) {\n    return error;\n  }\n};\nconst _createUser = context => {\n  const currentUser = {\n    authenticate: createAuthenticate(context),\n    unauthenticate: createUnauthenticate(context),\n    authorization: createAuthorization(context),\n    signUserMessage: createSignUserMessage(context),\n    subscribe: createSubscribe(context),\n    snapshot: createSnapshot(context),\n    resolveArgument: createResolveArgument(context)\n  };\n  return Object.assign(() => {\n    return {\n      ...currentUser\n    };\n  }, {\n    ...currentUser\n  });\n};\nconst createUser = context => {\n  return _createUser({\n    ...context,\n    getStorageProvider: async () => context.storage,\n    discovery: context.discovery,\n    actorName: `${NAME}_${(0,uuid__WEBPACK_IMPORTED_MODULE_15__[\"default\"])()}`\n  });\n};\n\n/**\n * @description Creates and configures the Current User service for managing user authentication and\n * authorization in Flow applications. This is the core service for handling user sessions, wallet\n * connections, transaction signing, and user data management. The service provides both callable\n * function interface and object methods for maximum flexibility.\n *\n * @param config Configuration object for the current user service\n * @param config.platform Platform identifier (e.g., \"web\", \"mobile\", \"extension\")\n * @param config.discovery Optional discovery configuration for wallet services\n * @param config.getStorageProvider Optional function to provide custom storage implementation\n *\n * @returns Current user service object with authentication and authorization methods\n *\n * @example\n * // Basic setup and authentication\n * import * as fcl from \"@onflow/fcl\"\n *\n * // Configure FCL\n * fcl.config({\n *   \"accessNode.api\": \"https://rest-testnet.onflow.org\",\n *   \"discovery.wallet\": \"https://fcl-discovery.onflow.org/testnet/authn\"\n * })\n *\n * // Create current user service\n * const currentUser = fcl.getCurrentUser({\n *   platform: \"web\"\n * })\n *\n * // Authenticate user\n * const user = await currentUser.authenticate()\n * console.log(\"Authenticated user:\", user.addr)\n *\n * // Subscribe to authentication state changes\n * const currentUser = fcl.getCurrentUser({ platform: \"web\" })\n *\n * const unsubscribe = currentUser.subscribe((user) => {\n *   if (user.loggedIn) {\n *     console.log(\"User logged in:\", user.addr)\n *     document.getElementById(\"login-btn\").style.display = \"none\"\n *     document.getElementById(\"logout-btn\").style.display = \"block\"\n *   } else {\n *     console.log(\"User logged out\")\n *     document.getElementById(\"login-btn\").style.display = \"block\"\n *     document.getElementById(\"logout-btn\").style.display = \"none\"\n *   }\n * })\n *\n * // Clean up subscription\n * window.addEventListener(\"beforeunload\", () => unsubscribe())\n *\n * // Sign transactions with user authorization\n * const currentUser = fcl.getCurrentUser({ platform: \"web\" })\n *\n * const txId = await fcl.mutate({\n *   cadence: `\n *     transaction(amount: UFix64, to: Address) {\n *       prepare(signer: AuthAccount) {\n *         // Transfer tokens logic here\n *       }\n *     }\n *   `,\n *   args: (arg, t) => [\n *     arg(\"10.0\", t.UFix64),\n *     arg(\"0x01\", t.Address)\n *   ],\n *   authz: currentUser.authorization\n * })\n *\n * // Sign custom messages\n * const currentUser = fcl.getCurrentUser({ platform: \"web\" })\n *\n * const message = Buffer.from(\"Hello, Flow!\").toString(\"hex\")\n * const signatures = await currentUser.signUserMessage(message)\n *\n * console.log(\"Message signatures:\", signatures)\n */\nconst getCurrentUser = cfg => {\n  const partialContext = createPartialGlobalFCLContext();\n\n  // Wrapper for backwards compatibility\n  const getStorageProvider = async () => {\n    if (cfg.getStorageProvider) return await cfg.getStorageProvider();\n    return await _onflow_config__WEBPACK_IMPORTED_MODULE_5__.config.first([\"fcl.storage\", \"fcl.storage.default\"], undefined);\n  };\n  return _createUser({\n    ...partialContext,\n    getStorageProvider,\n    platform: cfg.platform,\n    actorName: NAME,\n    discovery: cfg.discovery\n  });\n};\n\n/**\n * @description Creates a URL object from a service endpoint with additional parameters including\n * the application origin and service-specific parameters. This function is used internally by\n * FCL strategies to construct the complete URL for service communication.\n *\n * @param service The service object containing endpoint and optional parameters\n * @returns URL object with all parameters appended as query string parameters\n *\n * @example\n * // Create URL from service\n * const service = {\n *   endpoint: \"https://wallet.example.com/authn\",\n *   params: {\n *     appName: \"MyApp\",\n *     nonce: \"abc123\"\n *   }\n * }\n * const url = serviceEndpoint(service)\n * console.log(url.toString())\n * // https://wallet.example.com/authn?l6n=https://myapp.com&appName=MyApp&nonce=abc123\n */\nfunction serviceEndpoint(service) {\n  const url = new URL$1(service.endpoint);\n  if (window?.location?.origin) {\n    url.searchParams.append(\"l6n\", window.location.origin);\n  }\n  if (service.params != null) {\n    for (let [key, value] of Object.entries(service.params || {})) {\n      url.searchParams.append(key, value);\n    }\n  }\n  return url;\n}\n\n/**\n * @description Makes an HTTP request to a service endpoint with the specified options.\n * This utility function handles the common patterns for communicating with wallet services\n * including proper headers, body serialization, and JSON response parsing.\n *\n * @param service The service configuration containing endpoint and headers\n * @param opts Optional request configuration including method, data, and headers\n * @returns Promise resolving to the parsed JSON response\n *\n * @example\n * // Fetch from a service endpoint\n * const response = await fetchService(service, {\n *   method: \"POST\",\n *   data: { transaction: \"...\" },\n *   headers: { \"Authorization\": \"Bearer token\" }\n * })\n */\nfunction fetchService(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const method = opts.method || \"POST\";\n  const body = method === \"GET\" ? undefined : JSON.stringify(opts.data || service.data || {});\n  return fetch(serviceEndpoint(service), {\n    method: method,\n    headers: {\n      ...(service.headers || {}),\n      ...(opts.headers || {}),\n      \"Content-Type\": \"application/json\"\n    },\n    body: body\n  }).then(d => d.json());\n}\n\n/**\n * @description Normalizes a polling response to ensure compatibility with FCL format\n *\n * @param resp The polling response to normalize\n * @returns The normalized polling response or null\n *\n * @example\n * const resp = normalizePollingResponse({\n *   f_type: \"PollingResponse\",\n *   f_vsn: \"1.0.0\",\n *   status: \"PENDING\", // PENDING | APPROVED | DECLINED | REDIRECT\n *   reason: null,      // Reason for Declining Transaction\n *   data: null,        // Return value for APPROVED\n *   updates: BackChannelRpc,\n *   local: Frame,\n * })\n */\nfunction normalizePollingResponse(resp) {\n  if (resp == null) return null;\n  if (!resp[\"f_vsn\"]) {\n    return {\n      ...POLLING_RESPONSE_PRAGMA,\n      status: resp.status ?? \"APPROVED\",\n      reason: resp.reason ?? null,\n      data: resp.compositeSignature || resp.data || {\n        ...resp\n      } || {},\n      updates: normalizeBackChannelRpc(resp.authorizationUpdates),\n      local: normalizeFrame((resp.local || [])[0])\n    };\n  }\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp;\n    default:\n      return null;\n  }\n}\n\nconst OPTIONS = {\n  \"HTTP/GET\": \"GET\",\n  \"HTTP/POST\": \"POST\"\n};\nconst serviceMethod = service => {\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(OPTIONS[service.method], \"Invalid Service Method for type back-channel-rpc\", {\n    service\n  });\n  return OPTIONS[service.method];\n};\n\n/**\n * @description Continuously polls a service endpoint until it receives an APPROVED or DECLINED\n * response. This function handles the asynchronous nature of wallet interactions by repeatedly\n * checking for status updates with appropriate delays.\n *\n * @param service The service configuration containing the polling endpoint\n * @param checkCanContinue Optional function to control whether polling should continue\n * @returns Promise resolving to the final response data when approved or rejected\n *\n * @example\n * // Poll a service for completion\n * const result = await poll(pollingService, () => !userCancelled)\n * console.log(result) // Final response data\n */\nasync function poll(service) {\n  let checkCanContinue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => true;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(service, \"Missing Polling Service\", {\n    service\n  });\n  const canContinue = checkCanContinue();\n  if (!canContinue) throw new Error(\"Externally Halted\");\n  let resp;\n  try {\n    if (typeof document !== \"undefined\" && document.visibilityState === \"hidden\") {\n      await new Promise(r => setTimeout(r, 500));\n      return poll(service, checkCanContinue);\n    }\n    resp = await fetchService(service, {\n      method: serviceMethod(service)\n    }).then(normalizePollingResponse);\n  } catch (error) {\n    throw error;\n  }\n  switch (resp?.status) {\n    case \"APPROVED\":\n      return resp.data;\n    case \"DECLINED\":\n      throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`);\n    default:\n      await new Promise(r => setTimeout(r, 500));\n      return poll(resp?.updates, checkCanContinue);\n  }\n}\n\n/**\n * @description Creates an HTTP POST strategy executor that handles wallet service communication\n * via HTTP POST requests. This function manages the full lifecycle including polling for\n * responses, handling local views, and managing user interactions.\n *\n * @param execLocal Function to execute local view rendering and user interaction\n * @returns HTTP POST strategy function that can be used to execute services\n *\n * @example\n * // Create an HTTP POST executor\n * const httpPostExec = getExecHttpPost(async (view, { serviceEndpoint, onClose }) => {\n *   // Render local view and return cleanup function\n *   return [viewData, () => cleanup()]\n * })\n */\nconst getExecHttpPost = execLocal => async _ref => {\n  let {\n    service,\n    body,\n    config,\n    opts\n  } = _ref;\n  const resp = await fetchService(service, {\n    data: {\n      fclVersion: VERSION,\n      service: {\n        params: service.params,\n        data: service.data,\n        type: service.type\n      },\n      config,\n      ...body\n    }\n  }).then(normalizePollingResponse);\n  if (resp?.status === \"APPROVED\") {\n    return resp.data;\n  } else if (resp?.status === \"DECLINED\") {\n    throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`);\n  } else if (resp?.status === \"REDIRECT\") {\n    return resp;\n  } else if (resp?.status === \"PENDING\") {\n    // these two flags are required to run polling one more time before it stops\n    let canContinue = true;\n    let shouldContinue = true;\n    const [_, unmount] = await execLocal(normalizeLocalView(resp.local), {\n      serviceEndpoint,\n      onClose: () => shouldContinue = false\n    });\n    const close = () => {\n      try {\n        unmount();\n        shouldContinue = false;\n      } catch (error) {\n        console.error(\"Frame Close Error\", error);\n      }\n    };\n\n    /**\n     * this function is run once per poll call.\n     * Offsetting canContinue flag to make sure that\n     * the polling is performed one extra time after canContinue flag is set to false\n     * to prevent halting on Android when a browser calls window.close\n     * before FCL receives a successful result from polling\n     *\n     * @returns {boolean}\n     */\n    const checkCanContinue = () => {\n      const offsetCanContinue = canContinue;\n      canContinue = shouldContinue;\n      return offsetCanContinue;\n    };\n    return poll(resp.updates, checkCanContinue).then(serviceResponse => {\n      close();\n      return serviceResponse;\n    }).catch(error => {\n      console.error(error);\n      close();\n      throw error;\n    });\n  } else {\n    console.error(`Auto Decline: Invalid Response`, {\n      service,\n      resp\n    });\n    throw new Error(`Auto Decline: Invalid Response`);\n  }\n};\n\nconst CLOSE_EVENT = \"FCL:VIEW:CLOSE\";\nconst READY_EVENT = \"FCL:VIEW:READY\";\nconst RESPONSE_EVENT = \"FCL:VIEW:RESPONSE\";\nconst CUSTOM_RPC = \"FCL:VIEW:CUSTOM_RPC\";\nconst _ = e => typeof e === \"string\" && e.toLowerCase();\nconst IGNORE = new Set([\"monetizationstart\", \"monetizationpending\", \"monetizationprogress\", \"monetizationstop\"]);\nconst deprecate = (was, want) => console.warn(\"DEPRECATION NOTICE\", `Received ${was}, please use ${want} for this and future versions of FCL`);\n\n/**\n * @description Creates a message handler for processing window messages from wallet service\n * frames or popups. This handler manages the communication protocol between FCL and wallet\n * services, including ready states, responses, and cleanup operations.\n *\n * @param params Configuration object containing callback functions and utilities\n * @returns Message event handler function that can be attached to window message listeners\n *\n * @example\n * // Create a message handler for wallet communication\n * const handler = buildMessageHandler({\n *   close: () => cleanup(),\n *   send: (msg) => postMessage(msg),\n *   onReady: (e, utils) => initializeWallet(utils),\n *   onResponse: (e, utils) => handleResponse(e.data),\n *   onMessage: (e, utils) => processMessage(e),\n *   onCustomRpc: (payload, utils) => handleRpc(payload)\n * })\n * window.addEventListener(\"message\", handler)\n */\nconst buildMessageHandler = _ref => {\n  let {\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n    getSource\n  } = _ref;\n  let source;\n  return e => {\n    try {\n      source = getSource?.() || source;\n    } catch (_) {\n      // If getSource isn't working correctly, we should reset source\n      // to prevent desync between the source and the actual source\n      source = null;\n    }\n    try {\n      if (typeof e.data !== \"object\") return;\n      if (IGNORE.has(e.data.type)) return;\n      if (source != null && e.source !== source) return;\n      if (_(e.data.type) === _(CLOSE_EVENT)) close();\n      if (_(e.data.type) === _(READY_EVENT)) {\n        onReady(e, {\n          send,\n          close\n        });\n        source ||= e.source;\n      }\n      if (_(e.data.type) === _(RESPONSE_EVENT)) onResponse(e, {\n        send,\n        close\n      });\n      if (_(e.data.type) === _(CUSTOM_RPC)) onCustomRpc(e.data.payload, {\n        send,\n        close\n      });\n      onMessage(e, {\n        send,\n        close\n      });\n\n      // Backwards Compatible\n      if (_(e.data.type) === _(\"FCL:FRAME:READY\")) {\n        deprecate(e.data.type, READY_EVENT);\n        onReady(e, {\n          send,\n          close\n        });\n        source ||= e.source;\n      }\n      if (_(e.data.type) === _(\"FCL:FRAME:RESPONSE\")) {\n        deprecate(e.data.type, RESPONSE_EVENT);\n        onResponse(e, {\n          send,\n          close\n        });\n      }\n      if (_(e.data.type) === _(\"FCL:FRAME:CLOSE\")) {\n        deprecate(e.data.type, CLOSE_EVENT);\n        close();\n      }\n      //\n      if (_(e.data.type) === _(\"FCL::CHALLENGE::RESPONSE\")) {\n        deprecate(e.data.type, RESPONSE_EVENT);\n        onResponse(e, {\n          send,\n          close\n        });\n      }\n      if (_(e.data.type) === _(\"FCL::AUTHZ_READY\")) {\n        deprecate(e.data.type, READY_EVENT);\n        onReady(e, {\n          send,\n          close\n        });\n        source ||= e.source;\n      }\n      if (_(e.data.type) === _(\"FCL::CHALLENGE::CANCEL\")) {\n        deprecate(e.data.type, CLOSE_EVENT);\n        close();\n      }\n      if (_(e.data.type) === _(\"FCL::CANCEL\")) {\n        deprecate(e.data.type, CLOSE_EVENT);\n        close();\n      }\n    } catch (error) {\n      console.error(\"Frame Callback Error\", error);\n      close();\n    }\n  };\n};\n\n// Define a compatibility config interface for backward compatibility\n\n/**\n * FCL Context contains the core infrastructure dependencies\n */\n\n/**\n * Factory function to create an FCL context\n */\nfunction createFCLContext(config) {\n  let contracts;\n  if (config.flowJson) {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!config.flowNetwork, \"If flowJson is provided, flowNetwork must also be specified.\");\n    const cleanedNetwork = config.flowNetwork.toLowerCase().replace(/^local$/, \"emulator\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(cleanedNetwork === \"mainnet\" || cleanedNetwork === \"testnet\" || cleanedNetwork === \"emulator\", `Invalid flowNetwork: ${config.flowNetwork}. Must be one of: mainnet, testnet, emulator.`);\n    contracts = (0,_onflow_config__WEBPACK_IMPORTED_MODULE_5__.getContracts)(config.flowJson, cleanedNetwork);\n  }\n  const sdk = (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.createSdkClient)({\n    accessNodeUrl: config.accessNodeUrl,\n    transport: config.transport,\n    computeLimit: config.computeLimit,\n    customResolver: config.customResolver,\n    customDecoders: config.customDecoders,\n    contracts: contracts\n  });\n  const configService = createConfigService(config);\n  const currentUser = createUser({\n    platform: config.platform,\n    storage: config.storage,\n    config: configService,\n    discovery: {\n      execStrategy: config.discovery?.execStrategy\n    },\n    sdk\n  });\n  return {\n    storage: config.storage,\n    currentUser: currentUser,\n    sdk: sdk,\n    config: configService,\n    platform: config.platform\n  };\n}\nfunction createConfigService(config) {\n  // Create internal config store based on provided typed config\n  const configStore = new Map([[\"platform\", config.platform], [\"discovery.wallet\", config.discoveryWallet], [\"discovery.wallet.method\", config.discoveryWalletMethod], [\"discovery.authn.endpoint\", config.discoveryAuthnEndpoint], [\"flow.network\", config.flowNetwork], [\"accessNode.api\", config.accessNodeUrl], [\"fcl.limit\", config.computeLimit], [\"app.detail.title\", config.appDetailTitle], [\"app.detail.icon\", config.appDetailIcon], [\"app.detail.description\", config.appDetailDescription], [\"app.detail.url\", config.appDetailUrl], [\"service.OpenID.scopes\", config.serviceOpenIdScopes]]);\n\n  // Filter out undefined values\n  for (const [key, value] of configStore.entries()) {\n    if (value === undefined) {\n      configStore.delete(key);\n    }\n  }\n\n  // Create subscribers registry\n  const subscribers = new Set();\n\n  // Create compatibility config layer\n  const configService = {\n    get: async (key, fallback) => {\n      return configStore.has(key) ? configStore.get(key) : fallback;\n    },\n    put: async (key, value) => {\n      configStore.set(key, value);\n      subscribers.forEach(fn => fn(configStore));\n      return configService;\n    },\n    update: async (key, updateFn) => {\n      const oldValue = configStore.get(key);\n      const newValue = updateFn(oldValue);\n      configStore.set(key, newValue);\n      subscribers.forEach(fn => fn(configStore));\n      return configService;\n    },\n    delete: async key => {\n      configStore.delete(key);\n      subscribers.forEach(fn => fn(configStore));\n      return configService;\n    },\n    where: async pattern => {\n      const result = {};\n      for (const [key, value] of configStore.entries()) {\n        if (pattern.test(key)) {\n          result[key] = value;\n        }\n      }\n      return result;\n    },\n    first: async (keys, defaultValue) => {\n      if (typeof keys === \"string\") keys = [keys];\n      for (const key of keys) {\n        if (configStore.has(key)) {\n          return configStore.get(key);\n        }\n      }\n      return defaultValue;\n    },\n    subscribe: callback => {\n      subscribers.add(callback);\n      return () => {\n        subscribers.delete(callback);\n      };\n    },\n    all: async () => {\n      return Object.fromEntries(configStore.entries());\n    }\n  };\n  return configService;\n}\n\nfunction createFlowClientCore(params) {\n  const context = createFCLContext({\n    ...params,\n    transport: params.transport || _onflow_transport_http__WEBPACK_IMPORTED_MODULE_10__.httpTransport\n  });\n  return {\n    // Global services\n    currentUser: context.currentUser,\n    // Execution methods\n    mutate: createMutate(context),\n    query: createQuery(context),\n    queryRaw: createQueryRaw(context),\n    verifyUserSignatures: createVerifyUserSignatures(context),\n    getChainId: createGetChainId(context),\n    // Streaming helpers\n    tx: createTransaction(context),\n    events: createEvents(context),\n    // Authentication methods\n    authenticate: context.currentUser.authenticate,\n    unauthenticate: context.currentUser.unauthenticate,\n    signUserMessage: context.currentUser.signUserMessage,\n    // Utility methods\n    serialize: createSerialize(context),\n    // Re-export the SDK methods\n    ...context.sdk\n  };\n}\n\n// Set chain id default on access node change\nwatchForChainIdChanges();\n\n\n//# sourceMappingURL=fcl-core.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/fcl-core/dist/fcl-core.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/fcl/dist/fcl.module.js":
/*!*****************************************************!*\
  !*** ./node_modules/@onflow/fcl/dist/fcl.module.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppUtils: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.AppUtils),\n/* harmony export */   FvmErrorCode: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_5__.FvmErrorCode),\n/* harmony export */   HashAlgorithm: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_5__.HashAlgorithm),\n/* harmony export */   InteractionResolverKind: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_5__.InteractionResolverKind),\n/* harmony export */   InteractionStatus: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_5__.InteractionStatus),\n/* harmony export */   InteractionTag: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_5__.InteractionTag),\n/* harmony export */   InteractionTemplateUtils: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.InteractionTemplateUtils),\n/* harmony export */   LOCAL_STORAGE: () => (/* binding */ LOCAL_STORAGE),\n/* harmony export */   SESSION_STORAGE: () => (/* binding */ SESSION_STORAGE),\n/* harmony export */   SignatureAlgorithm: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_5__.SignatureAlgorithm),\n/* harmony export */   SubscriptionTopic: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_5__.SubscriptionTopic),\n/* harmony export */   TestUtils: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.TestUtils),\n/* harmony export */   TransactionError: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.TransactionError),\n/* harmony export */   TransactionExecutionStatus: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_5__.TransactionExecutionStatus),\n/* harmony export */   TransactionRole: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_5__.TransactionRole),\n/* harmony export */   VERSION: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.VERSION),\n/* harmony export */   WalletUtils: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.WalletUtils),\n/* harmony export */   account: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.account),\n/* harmony export */   arg: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.arg),\n/* harmony export */   args: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.args),\n/* harmony export */   atBlockHeight: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.atBlockHeight),\n/* harmony export */   atBlockId: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.atBlockId),\n/* harmony export */   authenticate: () => (/* binding */ authenticate),\n/* harmony export */   authorization: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.authorization),\n/* harmony export */   authorizations: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.authorizations),\n/* harmony export */   authz: () => (/* binding */ authz),\n/* harmony export */   block: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.block),\n/* harmony export */   build: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.build),\n/* harmony export */   cadence: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.cadence),\n/* harmony export */   cdc: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.cdc),\n/* harmony export */   config: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.config),\n/* harmony export */   createFlowClient: () => (/* binding */ createFlowClient),\n/* harmony export */   createSignableVoucher: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.createSignableVoucher),\n/* harmony export */   currentUser: () => (/* binding */ currentUser),\n/* harmony export */   decode: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.decode),\n/* harmony export */   discovery: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.discovery),\n/* harmony export */   display: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.display),\n/* harmony export */   events: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.events),\n/* harmony export */   flowEmulator: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.flowEmulator),\n/* harmony export */   flowMainnet: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.flowMainnet),\n/* harmony export */   flowTestnet: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.flowTestnet),\n/* harmony export */   getAccount: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getAccount),\n/* harmony export */   getBlock: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getBlock),\n/* harmony export */   getBlockHeader: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getBlockHeader),\n/* harmony export */   getChainId: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getChainId),\n/* harmony export */   getCollection: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getCollection),\n/* harmony export */   getEvents: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getEvents),\n/* harmony export */   getEventsAtBlockHeightRange: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockHeightRange),\n/* harmony export */   getEventsAtBlockIds: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockIds),\n/* harmony export */   getNetworkParameters: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getNetworkParameters),\n/* harmony export */   getNodeVersionInfo: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getNodeVersionInfo),\n/* harmony export */   getTransaction: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getTransaction),\n/* harmony export */   getTransactionStatus: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getTransactionStatus),\n/* harmony export */   invariant: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.invariant),\n/* harmony export */   isBad: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.isBad),\n/* harmony export */   isOk: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.isOk),\n/* harmony export */   limit: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.limit),\n/* harmony export */   logIn: () => (/* binding */ logIn),\n/* harmony export */   mutate: () => (/* binding */ mutate),\n/* harmony export */   nodeVersionInfo: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.nodeVersionInfo),\n/* harmony export */   param: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.param),\n/* harmony export */   params: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.params),\n/* harmony export */   payer: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.payer),\n/* harmony export */   ping: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.ping),\n/* harmony export */   pipe: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.pipe),\n/* harmony export */   pluginRegistry: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.pluginRegistry),\n/* harmony export */   proposer: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.proposer),\n/* harmony export */   query: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.query),\n/* harmony export */   queryRaw: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.queryRaw),\n/* harmony export */   reauthenticate: () => (/* binding */ reauthenticate),\n/* harmony export */   ref: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.ref),\n/* harmony export */   sansPrefix: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.sansPrefix),\n/* harmony export */   script: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.script),\n/* harmony export */   send: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.send),\n/* harmony export */   serialize: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.serialize),\n/* harmony export */   signUp: () => (/* binding */ signUp),\n/* harmony export */   subscribe: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.subscribe),\n/* harmony export */   subscribeEvents: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.subscribeEvents),\n/* harmony export */   subscribeRaw: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.subscribeRaw),\n/* harmony export */   t: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   transaction: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.transaction),\n/* harmony export */   tx: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.tx),\n/* harmony export */   unauthenticate: () => (/* binding */ unauthenticate),\n/* harmony export */   validator: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.validator),\n/* harmony export */   verifyUserSignatures: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.verifyUserSignatures),\n/* harmony export */   voucherIntercept: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.voucherIntercept),\n/* harmony export */   voucherToTxId: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.voucherToTxId),\n/* harmony export */   why: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.why),\n/* harmony export */   withPrefix: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.withPrefix)\n/* harmony export */ });\n/* harmony import */ var _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/fcl-core */ \"(ssr)/./node_modules/@onflow/fcl-core/dist/fcl-core.module.js\");\n/* harmony import */ var _onflow_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/config */ \"(ssr)/./node_modules/@onflow/config/dist/config.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var _onflow_util_uid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @onflow/util-uid */ \"(ssr)/./node_modules/@onflow/util-uid/dist/util-uid.module.js\");\n/* harmony import */ var _onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onflow/fcl-wc */ \"(ssr)/./node_modules/@onflow/fcl-wc/dist/index.module.mjs\");\n/* harmony import */ var _onflow_typedefs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @onflow/typedefs */ \"(ssr)/./node_modules/@onflow/typedefs/dist/typedefs.module.js\");\n/* harmony import */ var _onflow_util_rpc__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @onflow/util-rpc */ \"(ssr)/./node_modules/@onflow/util-rpc/dist/index.module.js\");\n\n\n\n\n\n\n\n\n\n\nconst AbortController = globalThis.AbortController || __webpack_require__(/*! abort-controller */ \"(ssr)/./node_modules/abort-controller/dist/abort-controller.js\");\nfunction wrapAbortSignal(signal) {\n  const controller = new AbortController();\n  if (signal?.aborted) controller.abort();\n  signal?.addEventListener(\"abort\", () => controller.abort());\n  return controller;\n}\n\nlet DiscoveryNotification = /*#__PURE__*/function (DiscoveryNotification) {\n  DiscoveryNotification[\"NOTIFY_QRCODE_CONNECTING\"] = \"notifyQrCodeConnecting\";\n  DiscoveryNotification[\"NOTIFY_QRCODE_CONNECTED\"] = \"notifyQrCodeConnected\";\n  DiscoveryNotification[\"NOTIFY_QRCODE_ERROR\"] = \"notifyQrCodeError\";\n  return DiscoveryNotification;\n}({});\nlet FclRequest = /*#__PURE__*/function (FclRequest) {\n  FclRequest[\"REQUEST_WALLETCONNECT_QRCODE\"] = \"requestWalletConnectQrCode\";\n  FclRequest[\"EXEC_SERVICE\"] = \"execService\";\n  return FclRequest;\n}({});\n\nconst APPROVED = \"APPROVED\";\n\n// RPC handler for handling service execution requests (e.g extension service)\nconst execServiceHandlerFactory = _ref => {\n  let {\n    onExecResult,\n    execStrategyOpts,\n    execStrategyArgs,\n    abortSignal\n  } = _ref;\n  return async _ref2 => {\n    let {\n      service\n    } = _ref2;\n    try {\n      const result = await (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.execStrategy)({\n        ...execStrategyOpts,\n        service,\n        config: execStrategyOpts.config,\n        abortSignal\n      },\n      // Pass the rest of the arguments (protect against future changes)\n      ...execStrategyArgs.slice(1));\n      const status = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(result)?.status || APPROVED;\n      if (status === APPROVED) {\n        // Propogrates the result to the execStrategy hook\n        onExecResult(result);\n\n        // Notify Discovery that the service was approved\n        return null;\n      } else {\n        // Notify Discovery that the service was rejected\n        throw new Error(result?.reason || \"Service was declined\");\n      }\n    } catch (e) {\n      throw new Error(e?.message || \"Service execution failed\");\n    }\n  };\n};\n\n// RPC handler for handling WalletConnect QR code requests\nconst wcRequestHandlerFactory = _ref => {\n  let {\n    rpc,\n    network,\n    onExecResult,\n    authnBody,\n    abortSignal\n  } = _ref;\n  const watchQr = watchQrFactory({\n    rpc,\n    authnBody\n  });\n  return async _ref2 => {\n    if (abortSignal.aborted) {\n      throw new Error(\"Handler has been terminated\");\n    }\n    const provider = await (0,_onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_4__.getProvider)();\n\n    // Execute WC bypass if session is approved\n    const {\n      uri,\n      approval\n    } = await (0,_onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_4__.createSessionProposal)({\n      provider,\n      network\n    });\n\n    // Watch for QR code connection asynchronously\n    watchQr({\n      uri,\n      approval,\n      onExecResult\n    });\n    return {\n      uri\n    };\n  };\n};\nfunction watchQrFactory(_ref3) {\n  let {\n    rpc,\n    authnBody\n  } = _ref3;\n  return _ref4 => {\n    let {\n      uri,\n      approval,\n      onExecResult\n    } = _ref4;\n    // Watch for QR code connection & resolve callback if connected\n    setTimeout(async () => {\n      try {\n        const provider = await (0,_onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_4__.getProvider)();\n        const session = await approval();\n        rpc.notify(DiscoveryNotification.NOTIFY_QRCODE_CONNECTING, {\n          uri\n        });\n        const result = await (0,_onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_4__.request)({\n          method: _onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_4__.FLOW_METHODS.FLOW_AUTHN,\n          body: authnBody,\n          session,\n          provider\n        });\n        rpc.notify(DiscoveryNotification.NOTIFY_QRCODE_CONNECTED, {\n          uri\n        });\n        onExecResult(result);\n      } catch (e) {\n        rpc.notify(DiscoveryNotification.NOTIFY_QRCODE_ERROR, {\n          uri,\n          error: e?.message\n        });\n      }\n    }, 0);\n  };\n}\n\n// Initialize the discovery RPC client\nfunction createDiscoveryRpcClient(_ref) {\n  let {\n    onExecResult,\n    body,\n    opts,\n    args,\n    abortSignal\n  } = _ref;\n  const rpc = new _onflow_util_rpc__WEBPACK_IMPORTED_MODULE_6__.RpcClient({\n    notifications: []\n  });\n  rpc.on(FclRequest.REQUEST_WALLETCONNECT_QRCODE, wcRequestHandlerFactory({\n    network: opts.config.client.network,\n    rpc,\n    onExecResult,\n    authnBody: body,\n    abortSignal\n  }));\n  rpc.on(FclRequest.EXEC_SERVICE, execServiceHandlerFactory({\n    onExecResult,\n    execStrategyOpts: opts,\n    execStrategyArgs: args,\n    abortSignal\n  }));\n  return {\n    connect: rpc.connect.bind(rpc),\n    receive: rpc.receive.bind(rpc)\n  };\n}\n\nasync function execDiscovery(_ref) {\n  let {\n    customRpc,\n    opts,\n    args,\n    abortSignal\n  } = _ref;\n  // Update the discovery config to enable RPC support\n  const discoveryConfig = {\n    ...opts.config,\n    client: {\n      ...opts.config.client,\n      discoveryRpcEnabled: true\n    }\n  };\n\n  // Execute base discovery request\n  return (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.execStrategy)({\n    ...opts,\n    config: discoveryConfig,\n    customRpc,\n    abortSignal\n  },\n  // @ts-ignore - Pass the rest of the arguments (protect against future changes)\n  ...args.slice(1));\n}\n\nconst AUTHN_SERVICE_TYPE = \"authn\";\n\n// Defines the execStrategy hook for Discovery Service\n// Used to define custom service execution rules for the Discovery Service\nasync function execStrategyHook() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const [opts] = args;\n  const {\n    body,\n    abortSignal: baseAbortSignal,\n    service\n  } = opts;\n\n  // Ensure the service type is \"auth\" for the execStrategyHook\n  if (service?.type !== AUTHN_SERVICE_TYPE) {\n    console.error(`ERROR: Invalid service type for FCL Discovery execStrategyHook, expected \"${AUTHN_SERVICE_TYPE}\" but got \"${service?.type}\"`);\n    return (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.execStrategy)(...args);\n  }\n\n  // Create an abort controller for this context\n  // Either used to terminate WC bypass proposal loop or the base discovery request\n  const abortController = wrapAbortSignal(baseAbortSignal);\n  let discoveryPromise;\n  const resultPromise = new Promise(async (resolve, reject) => {\n    // Initialize the discovery RPC client\n    const rpc = createDiscoveryRpcClient({\n      onExecResult: resolve,\n      body,\n      opts,\n      args,\n      abortSignal: abortController.signal\n    });\n\n    // Execute the base discovery request\n    discoveryPromise = execDiscovery({\n      customRpc: rpc,\n      opts,\n      args,\n      abortSignal: abortController.signal\n    }).then(resolve, reject);\n  });\n\n  // Wait for the result promise to resolve or reject\n  await resultPromise.catch(() => {});\n\n  // Give Discovery time to cleanup\n  await Promise.race([new Promise(resolve => setTimeout(resolve, 1000)), discoveryPromise]).catch(() => {});\n\n  // Ensure the abort signal is propagated to all candidates on completion\n  abortController.abort();\n\n  // Return the result\n  return resultPromise;\n}\n\nconst isServer = typeof window === \"undefined\";\nconst getMetadata = config => {\n  const appTitle = config.appDetailTitle;\n  const appIcon = config.appDetailIcon;\n  const appDescription = config.appDetailDescription;\n  const appUrl = config.appDetailUrl;\n  return {\n    name: appTitle ?? document.title,\n    description: appDescription ?? \"\",\n    url: appUrl ?? window.location.origin,\n    icons: appIcon ? [appIcon] : []\n  };\n};\n\n// Use previous configuration to check for changes & notify the user that this is not possible\nlet lastConfig = null;\n\n// Only the first configuration will be used\nlet hasLoaded = false;\nfunction initFclWcLoader() {\n  _onflow_config__WEBPACK_IMPORTED_MODULE_1__.config.subscribe(async fullConfig => {\n    const wcConfig = {\n      walletConnectProjectId: fullConfig[\"walletconnect.projectId\"],\n      walletConnectDisableNotifications: fullConfig[\"walletconnect.disableNotifications\"],\n      appDetailTitle: fullConfig[\"app.detail.title\"],\n      appDetailIcon: fullConfig[\"app.detail.icon\"],\n      appDetailDescription: fullConfig[\"app.detail.description\"],\n      appDetailUrl: fullConfig[\"app.detail.url\"]\n    };\n    loadFclWc(wcConfig);\n  });\n}\nfunction loadFclWc(wcConfig) {\n  // We cannot load WalletConnect plugin on server side\n  if (isServer) {\n    return;\n  }\n  const projectId = wcConfig.walletConnectProjectId;\n  const disableNotifications = wcConfig.walletConnectDisableNotifications;\n\n  // Check if the plugin is already loaded by this loader, but with different configuration\n  // The plugin can only be loaded once\n  const previousConfig = lastConfig;\n  lastConfig = JSON.stringify(wcConfig, null, 2);\n  if (hasLoaded) {\n    if (previousConfig !== lastConfig) {\n      console.warn(`FCL WalletConnect Plugin has been already loaded with different configuration. It is not possible to change the configuration after the plugin has been loaded.\n\nPrevious configuration:\n${previousConfig}\n\nCurrent configuration:\n${lastConfig}`);\n    }\n    return;\n  }\n\n  // If the configuration is not set, we do not load the plugin\n  const isConfigured = !!projectId;\n  if (!isConfigured) {\n    return;\n  }\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!projectId, \"FCL Configuration value for 'walletconnect.projectId' is required\");\n\n  // Check if the plugin is already loaded manually\n  // Usually this won't happen as it is more likely that the plugin will be loaded by this loader\n  // before the developer has a chance to load it manually, but it's good to check\n  if (_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.pluginRegistry.getPlugins().has(_onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_4__.SERVICE_PLUGIN_NAME)) {\n    if (!hasLoaded) {\n      console.warn(\"It seems like the FCL WalletConnect plugins has been already loaded manually. This is no longer necessary, please see the documentation for more information.\");\n    }\n    hasLoaded = true;\n    return;\n  }\n  hasLoaded = true;\n\n  // Load the plugin if not already loaded\n  // We must lazy load the plugin to avoid race conditions\n  // where the developer attempts to use the plugin before\n  // our loader applies the configuration\n  const {\n    providerPromise: _clientPromise,\n    FclWcServicePlugin\n  } = _onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_4__.initLazy({\n    projectId,\n    metadata: getMetadata(wcConfig),\n    disableNotifications: disableNotifications ?? undefined\n  });\n  _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.pluginRegistry.add([FclWcServicePlugin]);\n}\n\nconst PLATFORM = \"web\";\nconst discoveryOpts = {\n  execStrategy: execStrategyHook\n};\nfunction createFlowClient(params) {\n  // TODO: Load into the global plugin registry for now.  This should be\n  // refactored to use a plugin registry bound to the client instance\n  // in the future.\n  loadFclWc({\n    walletConnectProjectId: params.walletconnectProjectId,\n    walletConnectDisableNotifications: params.walletconnectDisableNotifications,\n    appDetailTitle: params.appDetailTitle,\n    appDetailIcon: params.appDetailIcon,\n    appDetailDescription: params.appDetailDescription,\n    appDetailUrl: params.appDetailUrl\n  });\n  const fclCore = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.createFlowClientCore)({\n    flowNetwork: params.flowNetwork,\n    flowJson: params.flowJson,\n    accessNodeUrl: params.accessNodeUrl,\n    computeLimit: params.computeLimit || 9999,\n    transport: params.transport,\n    platform: PLATFORM,\n    storage: params.storage || LOCAL_STORAGE,\n    discovery: discoveryOpts,\n    discoveryWalletMethod: params.discoveryWalletMethod || \"IFRAME/RPC\",\n    discoveryAuthnEndpoint: params.discoveryAuthnEndpoint,\n    discoveryAuthnInclude: params.discoveryAuthnInclude,\n    customResolver: params.customResolver,\n    customDecoders: params.customDecoders,\n    discoveryWallet: params.discoveryWallet,\n    appDetailTitle: params.appDetailTitle,\n    appDetailIcon: params.appDetailIcon,\n    appDetailDescription: params.appDetailDescription,\n    appDetailUrl: params.appDetailUrl,\n    serviceOpenIdScopes: params.serviceOpenIdScopes\n  });\n  return {\n    ...fclCore\n  };\n}\n\nconst FRAME = \"FCL_IFRAME\";\nconst FRAME_STYLES = `\n  position:fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100vw;\n  display:block;\n  background:rgba(0,0,0,0.25);\n  z-index: 2147483647;\n  box-sizing: border-box;\n  color-scheme: light;\n`;\nfunction renderFrame(src) {\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!document.getElementById(FRAME), \"Attempt at triggering multiple Frames\", {\n    src\n  });\n  const $frame = document.createElement(\"iframe\");\n  $frame.src = src;\n  $frame.id = FRAME;\n  $frame.allow = \"usb *; hid *; clipboard-write\";\n  $frame.frameBorder = \"0\";\n  $frame.style.cssText = FRAME_STYLES;\n  document.body.append($frame);\n  const unmount = () => {\n    if (document.getElementById(FRAME)) {\n      document.getElementById(FRAME).remove();\n    }\n  };\n  return [$frame.contentWindow, unmount];\n}\n\nconst POP = \"FCL_POP\";\nlet popup = null;\nlet previousUrl$1 = null;\nfunction popupWindow(url, windowName, win, w, h) {\n  const y = win.top.outerHeight / 2 + win.top.screenY - h / 2;\n  const x = win.top.outerWidth / 2 + win.top.screenX - w / 2;\n  const popup = win.open(url, windowName, `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${y}, left=${x}`);\n  if (!popup) throw new Error(\"Popup failed to open (was it blocked by a popup blocker?)\");\n  return popup;\n}\nfunction renderPop(src) {\n  if (popup == null || popup?.closed) {\n    popup = popupWindow(src, POP, window, 640, 770);\n  } else if (previousUrl$1 !== src) {\n    popup.location.replace(src);\n    popup.focus();\n  } else {\n    popup.focus();\n  }\n  previousUrl$1 = src;\n  const unmount = () => {\n    if (popup && !popup.closed) {\n      popup.close();\n    }\n    popup = null;\n  };\n  return [popup, unmount];\n}\n\nlet tab$1 = null;\nlet previousUrl = null;\nfunction renderTab(src) {\n  if (tab$1 == null || tab$1?.closed) {\n    tab$1 = window.open(src, \"_blank\");\n    if (!tab$1) throw new Error(\"Tab failed to open (was it blocked by the browser?)\");\n  } else if (previousUrl !== src) {\n    tab$1.location.replace(src);\n    tab$1.focus();\n  } else {\n    tab$1.focus();\n  }\n  previousUrl = src;\n  const unmount = () => {\n    if (tab$1 && !tab$1.closed) {\n      tab$1.close();\n    }\n    tab$1 = null;\n  };\n  return [tab$1, unmount];\n}\n\nconst getDefaultConfig = () => {\n  return {\n    \"discovery.wallet.method.default\": \"IFRAME/RPC\"\n  };\n};\n\nconst noop$3 = () => {};\nfunction frame(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop$3,\n    close: noop$3\n  };\n  const onClose = opts.onClose || noop$3;\n  const onMessage = opts.onMessage || noop$3;\n  const onReady = opts.onReady || noop$3;\n  const onResponse = opts.onResponse || noop$3;\n  const onCustomRpc = opts.onCustomRpc || noop$3;\n  let $frame, unmount;\n  const handler = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.buildMessageHandler)({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n    getSource: () => $frame\n  });\n  window.addEventListener(\"message\", handler);\n  [$frame, unmount] = renderFrame((0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.serviceEndpoint)(service));\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      unmount();\n      onClose();\n    } catch (error) {\n      console.error(\"Frame Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      $frame.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Frame Send Error\", msg, error);\n    }\n  }\n}\n\nconst VERSION = \"1.20.0\";\n\nfunction execIframeRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    customRpc,\n    abortSignal,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    const id = (0,_onflow_util_uid__WEBPACK_IMPORTED_MODULE_3__.uid)();\n    const includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall;\n    const {\n      close\n    } = frame(service, {\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            fclVersion: VERSION,\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config,\n            deprecated: {\n              message: \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n            }\n          });\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n              deprecated: {\n                message: \"jsonrpc is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n              }\n            });\n          }\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                payload: msg\n              });\n            }\n          });\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onMessage(e, _ref4) {\n        let {\n          close\n        } = _ref4;\n        try {\n          if (typeof e.data !== \"object\") return;\n          if (e.data.jsonrpc !== \"2.0\") return;\n          if (e.data.id !== id) return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data.result);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onMessage error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      },\n      onCustomRpc(msg) {\n        customRpc?.receive(msg);\n      }\n    });\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        reject(`Declined: Aborted`);\n        close();\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        reject(`Declined: Aborted`);\n        close();\n      });\n    }\n  });\n}\n\nconst noop$2 = () => {};\nfunction pop(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop$2,\n    close: noop$2\n  };\n  const onClose = opts.onClose || noop$2;\n  const onMessage = opts.onMessage || noop$2;\n  const onReady = opts.onReady || noop$2;\n  const onResponse = opts.onResponse || noop$2;\n  const onCustomRpc = opts.onCustomRpc || noop$2;\n  let $pop, unmount;\n  const handler = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.buildMessageHandler)({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n    getSource: () => $pop\n  });\n  window.addEventListener(\"message\", handler);\n  [$pop, unmount] = renderPop((0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.serviceEndpoint)(service));\n  const timer = setInterval(function () {\n    if ($pop && $pop.closed) {\n      close();\n    }\n  }, 500);\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      clearInterval(timer);\n      unmount();\n      onClose();\n    } catch (error) {\n      console.error(\"Popup Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      $pop.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Popup Send Error\", msg, error);\n    }\n  }\n}\n\nfunction execPopRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    abortSignal,\n    customRpc,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    const id = (0,_onflow_util_uid__WEBPACK_IMPORTED_MODULE_3__.uid)();\n    const {\n      redir,\n      includeOlderJsonRpcCall\n    } = opts;\n    const {\n      close\n    } = pop(service, {\n      customRpc,\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config,\n            deprecated: {\n              message: \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n            }\n          });\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params]\n            });\n          }\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                payload: msg\n              });\n            }\n          });\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onMessage(e, _ref4) {\n        let {\n          close\n        } = _ref4;\n        try {\n          if (typeof e.data !== \"object\") return;\n          if (e.data.jsonrpc !== \"2.0\") return;\n          if (e.data.id !== id) return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data.result);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      },\n      onCustomRpc(msg) {\n        customRpc?.receive(msg);\n      }\n    });\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        reject(`Declined: Aborted`);\n        close();\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        reject(`Declined: Aborted`);\n        close();\n      });\n    }\n  });\n}\n\nconst noop$1 = () => {};\nfunction tab(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop$1,\n    close: noop$1\n  };\n  const onClose = opts.onClose || noop$1;\n  const onMessage = opts.onMessage || noop$1;\n  const onReady = opts.onReady || noop$1;\n  const onResponse = opts.onResponse || noop$1;\n  const onCustomRpc = opts.onCustomRpc || noop$1;\n  let $tab, unmount;\n  const handler = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.buildMessageHandler)({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n    getSource: () => $tab\n  });\n  window.addEventListener(\"message\", handler);\n  [$tab, unmount] = renderTab((0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.serviceEndpoint)(service));\n  const timer = setInterval(function () {\n    if ($tab && $tab.closed) {\n      close();\n    }\n  }, 500);\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      clearInterval(timer);\n      unmount();\n      onClose();\n    } catch (error) {\n      console.error(\"Tab Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      $tab.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Tab Send Error\", msg, error);\n    }\n  }\n}\n\nfunction execTabRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    abortSignal,\n    customRpc,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    const id = (0,_onflow_util_uid__WEBPACK_IMPORTED_MODULE_3__.uid)();\n    const {\n      redir,\n      includeOlderJsonRpcCall\n    } = opts;\n    const {\n      close\n    } = tab(service, {\n      customRpc,\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config,\n            deprecated: {\n              message: \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n            }\n          });\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params]\n            });\n          }\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                payload: msg\n              });\n            }\n          });\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onMessage(e, _ref4) {\n        let {\n          close\n        } = _ref4;\n        try {\n          if (typeof e.data !== \"object\") return;\n          if (e.data.jsonrpc !== \"2.0\") return;\n          if (e.data.id !== id) return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data.result);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      },\n      onCustomRpc(msg) {\n        customRpc?.receive(msg);\n      }\n    });\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        close();\n        reject(`Declined: Aborted`);\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        close();\n        reject(`Declined: Aborted`);\n      });\n    }\n  });\n}\n\nconst noop = () => {};\nfunction extension(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop,\n    close: noop\n  };\n  const onClose = opts.onClose || noop;\n  const onMessage = opts.onMessage || noop;\n  const onReady = opts.onReady || noop;\n  const onResponse = opts.onResponse || noop;\n  const onCustomRpc = opts.onCustomRpc || noop;\n  const handler = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.buildMessageHandler)({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc\n  });\n  window.addEventListener(\"message\", handler);\n  send({\n    service\n  });\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      onClose();\n    } catch (error) {\n      console.error(\"Ext Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      window && window.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Ext Send Error\", msg, error);\n    }\n  }\n}\n\nfunction execExtRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    abortSignal,\n    customRpc,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    const {\n      close\n    } = extension(service, {\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                body: msg\n              });\n            }\n          });\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execExtRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      },\n      onCustomRpc(msg) {\n        customRpc?.receive(msg);\n      }\n    });\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        close();\n        reject(`Declined: Aborted`);\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        close();\n        reject(`Declined: Aborted`);\n      });\n    }\n  });\n}\n\nconst NOT_IMPLEMENTED = () => {\n  throw new Error(\"Strategy util has not been implemented on this platform\");\n};\nconst VIEWS = {\n  \"VIEW/IFRAME\": renderFrame,\n  \"VIEW/POP\": renderPop,\n  \"VIEW/TAB\": renderTab,\n  \"VIEW/MOBILE_BROWSER\": NOT_IMPLEMENTED,\n  \"VIEW/DEEPLINK\": NOT_IMPLEMENTED\n};\nasync function execLocal(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    serviceEndpoint: () => {}\n  };\n  const {\n    serviceEndpoint\n  } = opts;\n  try {\n    return VIEWS[service.method](serviceEndpoint(service), opts);\n  } catch (error) {\n    console.error(\"execLocal({service, opts = {}})\", error, {\n      service,\n      opts\n    });\n    throw error;\n  }\n}\n\nconst coreStrategies = {\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"HTTP/RPC\"]]: (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getExecHttpPost)(execLocal),\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"HTTP/POST\"]]: (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getExecHttpPost)(execLocal),\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"IFRAME/RPC\"]]: execIframeRPC,\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"POP/RPC\"]]: execPopRPC,\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"TAB/RPC\"]]: execTabRPC,\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"EXT/RPC\"]]: execExtRPC\n};\n\nconst isServerSide = () => typeof window === \"undefined\";\nconst safeParseJSON = str => {\n  if (str == null) return null;\n  try {\n    return JSON.parse(str);\n  } catch (error) {\n    return null;\n  }\n};\nconst SESSION_STORAGE = {\n  can: !isServerSide() && !!window.sessionStorage,\n  get: async key => safeParseJSON(sessionStorage.getItem(key)),\n  put: async (key, value) => sessionStorage.setItem(key, JSON.stringify(value))\n};\nconst LOCAL_STORAGE = {\n  can: !isServerSide() && !!window.localStorage,\n  get: async key => safeParseJSON(localStorage.getItem(key)),\n  put: async (key, value) => localStorage.setItem(key, JSON.stringify(value))\n};\n\n/**\n * @description The main current user service for managing user authentication and authorization in Flow applications.\n * This service provides a complete interface for wallet connections, user sessions, transaction signing, and user data management.\n * It handles the complexity of connecting to various FCL-compatible wallets, managing authentication state, and providing\n * authorization functions for transaction signing.\n *\n * The currentUser service is configured for web platforms and uses the browser's localStorage by default for session persistence.\n * It integrates with Flow's discovery service to enable wallet selection and supports both authentication and re-authentication flows.\n *\n * This service is reactive and provides subscription capabilities to monitor authentication state changes in real-time.\n * All wallet interactions are handled through FCL's standardized protocols, ensuring compatibility with the Flow ecosystem.\n *\n * Returns an object with the following methods:\n * ```typescript\n * {\n *   authenticate,        // Authenticates the user via FCL-compatible wallets\n *   unauthenticate,      // Logs out the current user and clears session data\n *   authorization,       // Produces authorization details for transaction signing\n *   signUserMessage,     // Signs arbitrary messages with the user's wallet\n *   subscribe,           // Subscribes to authentication state changes\n *   snapshot,            // Returns the current user object snapshot\n *   resolveArgument      // Resolves the current user as a transaction argument\n * }\n * ```\n *\n * @returns A CurrentUserService object\n *\n * @example\n * // Basic authentication flow\n * import * as fcl from \"@onflow/fcl\"\n *\n * // Configure FCL\n * fcl.config({\n *   \"accessNode.api\": \"https://rest-testnet.onflow.org\",\n *   \"discovery.wallet\": \"https://fcl-discovery.onflow.org/testnet/authn\",\n *   \"flow.network\": \"testnet\"\n * })\n *\n * // Authenticate user\n * const user = await fcl.currentUser.authenticate()\n * console.log(\"User authenticated:\", user.addr)\n *\n * // Check authentication status\n * const currentUser = await fcl.currentUser.snapshot()\n * if (currentUser.loggedIn) {\n *   console.log(\"User is logged in:\", currentUser.addr)\n * }\n *\n * // Subscribe to authentication state changes\n * import * as fcl from \"@onflow/fcl\"\n *\n * const unsubscribe = fcl.currentUser.subscribe((user) => {\n *   if (user.loggedIn) {\n *     console.log(\"User logged in:\", user.addr)\n *     document.getElementById(\"login-btn\").style.display = \"none\"\n *     document.getElementById(\"logout-btn\").style.display = \"block\"\n *   } else {\n *     console.log(\"User logged out\")\n *     document.getElementById(\"login-btn\").style.display = \"block\"\n *     document.getElementById(\"logout-btn\").style.display = \"none\"\n *   }\n * })\n * // Clean up subscription when component unmounts\n * window.addEventListener(\"beforeunload\", () => unsubscribe())\n */\nconst currentUser = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentUser)({\n  platform: \"web\",\n  discovery: discoveryOpts,\n  getStorageProvider: async () => {\n    return (await _onflow_config__WEBPACK_IMPORTED_MODULE_1__.config.get(\"fcl.storage\")) || LOCAL_STORAGE;\n  }\n});\n\n/**\n * @description A transaction execution function that allows you to submit Cadence transactions to the Flow blockchain\n * to mutate on-chain state. This function handles the complete transaction lifecycle including building, signing, and\n * sending transactions to Flow. It provides a high-level interface that abstracts the complexity of transaction\n * construction while offering flexibility for advanced use cases.\n *\n * The mutate function automatically handles authorization using the current authenticated user by default, but allows\n * for custom authorization functions to be specified for different transaction roles (proposer, payer, authorizer).\n * It supports both simple single-party transactions and complex multi-party transactions with different signatories.\n *\n * This function integrates with FCL's address replacement system, allowing you to use placeholder addresses in your\n * Cadence code that are replaced with actual addresses at execution time. It also supports Interaction Templates\n * for standardized transaction execution patterns.\n *\n * The mutate function accepts a configuration object with the following structure:\n * ```typescript\n * {\n *   cadence?: string,                    // The Cadence transaction code to execute (required if template not provided)\n *   args?: Function,                     // Function that returns an array of arguments for the transaction\n *   template?: any,                      // Interaction Template object or URL for standardized transactions\n *   limit?: number,                      // Compute (gas) limit for the transaction execution\n *   authz?: AccountAuthorization,        // Authorization function for all signatory roles (proposer, payer, authorizer)\n *   proposer?: AccountAuthorization,     // Specific authorization function for the proposer role\n *   payer?: AccountAuthorization,        // Specific authorization function for the payer role\n *   authorizations?: AccountAuthorization[]  // Array of authorization functions for authorizer roles\n * }\n * ```\n *\n * @param opts Transaction configuration options\n *\n * @returns Promise that resolves to the transaction ID (txId) when the transaction is submitted\n *\n * @throws Throws an error if transaction validation fails, required configuration is missing,\n * or transaction execution encounters an error\n *\n * @example\n * // Basic transaction submission\n * import * as fcl from \"@onflow/fcl\"\n *\n * // Configure FCL first\n * fcl.config({\n *   \"accessNode.api\": \"https://rest-testnet.onflow.org\",\n *   \"discovery.wallet\": \"https://fcl-discovery.onflow.org/testnet/authn\",\n *   \"flow.network\": \"testnet\"\n * })\n *\n * // Authenticate user\n * await fcl.authenticate()\n *\n * // Submit a basic transaction\n * const txId = await fcl.mutate({\n *   cadence: `\n *     transaction(message: String) {\n *       prepare(account: AuthAccount) {\n *         log(\"Transaction executed by: \".concat(account.address.toString()))\n *         log(\"Message: \".concat(message))\n *       }\n *     }\n *   `,\n *   args: (arg, t) => [\n *     arg(\"Hello Flow!\", t.String)\n *   ],\n *   limit: 50\n * })\n *\n * console.log(\"Transaction submitted:\", txId)\n */\nconst mutate = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getMutate)(currentUser);\n\n/**\n * @description Calling this method will authenticate the current user via any wallet that supports FCL. Once called, FCL will initiate communication with the configured `discovery.wallet` endpoint which lets the user select a wallet to authenticate with. Once the wallet provider has authenticated the user, FCL will set the values on the current user object for future use and authorization.\n *\n * This method can only be used in web browsers.\n *\n * `discovery.wallet` value must be set in the configuration before calling this method. See FCL Configuration.\n *\n * The default discovery endpoint will open an iframe overlay to let the user choose a supported wallet.\n *\n * `authenticate` can also take a service returned from discovery with `fcl.authenticate({ service })`.\n *\n * @param opts Authentication options\n * @param opts.service Optional service to use for authentication. A service returned from discovery can be passed here.\n * @param opts.redir Optional redirect flag. Defaults to false.\n * @param opts.forceReauth Optional force re-authentication flag. Defaults to false.\n * @returns Promise that resolves to the authenticated CurrentUser object or undefined\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * fcl\n *   .config()\n *   .put('accessNode.api', 'https://rest-testnet.onflow.org')\n *   .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\n * // anywhere on the page\n * fcl.authenticate();\n */\nconst authenticate = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return currentUser().authenticate(opts);\n};\n\n/**\n * @description Logs out the current user and sets the values on the current user object to null.\n *\n * This method can only be used in web browsers.\n *\n * The current user must be authenticated first.\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * fcl.config().put('accessNode.api', 'https://rest-testnet.onflow.org');\n * // first authenticate to set current user\n * fcl.authenticate();\n * // ... somewhere else & sometime later\n * fcl.unauthenticate();\n * // fcl.currentUser.loggedIn === null\n */\nconst unauthenticate = () => currentUser().unauthenticate();\n\n/**\n * @description A convenience method that calls `fcl.unauthenticate()` and then `fcl.authenticate()` for the current user.\n *\n * This method can only be used in web browsers.\n *\n * The current user must be authenticated first.\n *\n * @param opts Authentication options passed to authenticate method\n * @param opts.service Optional service to use for authentication\n * @param opts.redir Optional redirect flag. Defaults to false.\n * @param opts.forceReauth Optional force re-authentication flag. Defaults to false.\n * @returns Promise that resolves to the authenticated CurrentUser object or undefined\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * // first authenticate to set current user\n * fcl.authenticate();\n * // ... somewhere else & sometime later\n * fcl.reauthenticate();\n * // logs out user and opens up login/sign-up flow\n */\nconst reauthenticate = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  currentUser().unauthenticate();\n  return currentUser().authenticate(opts);\n};\n\n/**\n * @description A convenience method that calls and is equivalent to `fcl.authenticate()`.\n *\n * This method can only be used in web browsers.\n *\n * @param opts Authentication options passed to authenticate method\n * @param opts.service Optional service to use for authentication\n * @param opts.redir Optional redirect flag. Defaults to false.\n * @param opts.forceReauth Optional force re-authentication flag. Defaults to false.\n * @returns Promise that resolves to the authenticated CurrentUser object or undefined\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * fcl.config()\n *   .put('accessNode.api', 'https://rest-testnet.onflow.org')\n *   .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\n *\n * // User clicks sign up button\n * fcl.signUp();\n */\nconst signUp = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return currentUser().authenticate(opts);\n};\n\n/**\n * @description A convenience method that calls and is equivalent to `fcl.authenticate()`.\n *\n * This method can only be used in web browsers.\n *\n * @param opts Authentication options passed to authenticate method\n * @param opts.service Optional service to use for authentication\n * @param opts.redir Optional redirect flag. Defaults to false.\n * @param opts.forceReauth Optional force re-authentication flag. Defaults to false.\n * @returns Promise that resolves to the authenticated CurrentUser object or undefined\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * fcl.config()\n *   .put('accessNode.api', 'https://rest-testnet.onflow.org')\n *   .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\n *\n * // User clicks log in button\n * fcl.logIn();\n */\nconst logIn = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return currentUser().authenticate(opts);\n};\n\n/**\n * @description A convenience method that produces the needed authorization details for the current user to submit transactions to Flow. It defines a signing function that connects to a user's wallet provider to produce signatures to submit transactions.\n *\n * You can replace this function with your own authorization function if needed.\n *\n * @returns An object containing the necessary details from the current user to authorize a transaction in any role.\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * // login somewhere before\n * fcl.authenticate();\n * // once logged in authz will produce values\n * console.log(fcl.authz);\n * // prints {addr, signingFunction, keyId, sequenceNum} from the current authenticated user.\n *\n * const txId = await fcl.mutate({\n *   cadence: `\n *     import Profile from 0xba1132bc08f82fe2\n *\n *     transaction(name: String) {\n *       prepare(account: auth(BorrowValue) &Account) {\n *         account.storage.borrow<&{Profile.Owner}>(from: Profile.privatePath)!.setName(name)\n *       }\n *     }\n *   `,\n *   args: (arg, t) => [arg('myName', t.String)],\n *   proposer: fcl.authz, // optional - default is fcl.authz\n *   payer: fcl.authz, // optional - default is fcl.authz\n *   authorizations: [fcl.authz], // optional - default is [fcl.authz]\n * });\n *\n * @note The default values for `proposer`, `payer`, and `authorizations` are already `fcl.authz` so there is no need to include these parameters, it is shown only for example purposes.\n */\nconst authz = currentUser().authorization;\n(0,_onflow_config__WEBPACK_IMPORTED_MODULE_1__.config)(getDefaultConfig());\n(0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.initServiceRegistry)({\n  coreStrategies\n});\n\n// Automatically load fcl-wc plugin\n// Based on the user's config\ninitFclWcLoader();\n\n\n//# sourceMappingURL=fcl.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/fcl/dist/fcl.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/rlp/dist/rlp.module.js":
/*!*****************************************************!*\
  !*** ./node_modules/@onflow/rlp/dist/rlp.module.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Buffer: () => (/* reexport safe */ buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   getLength: () => (/* binding */ getLength),\n/* harmony export */   toBuffer: () => (/* binding */ toBuffer)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n/**\n * Built on top of rlp library, removing the BN dependency for the flow.\n * Package : https://github.com/ethereumjs/rlp\n * RLP License : https://github.com/ethereumjs/rlp/blob/master/LICENSE\n *\n * ethereumjs/rlp is licensed under the\n * Mozilla Public License 2.0\n * Permissions of this weak copyleft license are conditioned on making available source code of licensed files and modifications of those files under the same license (or in certain cases, one of the GNU licenses). Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. However, a larger work using the licensed work may be distributed under different terms and without source code for files added in the larger work.\n */\n\n/**\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n */\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    const output = [];\n    for (let i = 0; i < input.length; i++) {\n      output.push(encode(input[i]));\n    }\n    const buf = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat(output);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([encodeLength(buf.length, 192), buf]);\n  } else {\n    const inputBuf = toBuffer(input);\n    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n  }\n}\n\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\nfunction safeParseInt(v, base) {\n  if (v.slice(0, 2) === \"00\") {\n    throw new Error(\"invalid RLP: extra zeros\");\n  }\n  return parseInt(v, base);\n}\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([len + offset]);\n  } else {\n    const hexLength = intToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = intToHex(offset + 55 + lLength);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(firstByte + hexLength, \"hex\");\n  }\n}\n\n/**\n * Built on top of rlp library, removing the BN dependency for the flow.\n * Package : https://github.com/ethereumjs/rlp\n * RLP License : https://github.com/ethereumjs/rlp/blob/master/LICENSE\n *\n * ethereumjs/rlp is licensed under the\n * Mozilla Public License 2.0\n * Permissions of this weak copyleft license are conditioned on making available source code of licensed files and modifications of those files under the same license (or in certain cases, one of the GNU licenses). Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. However, a larger work using the licensed work may be distributed under different terms and without source code for files added in the larger work.\n */\n\n/**\n * @param input - will be converted to buffer\n * @param stream Is the input a stream (false by default)\n * @returns returns buffer of encoded data\n */\nfunction decode(input, stream) {\n  if (stream === void 0) {\n    stream = false;\n  }\n  if (!input || input.length === 0) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n  }\n  const inputBuffer = toBuffer(input);\n  const decoded = _decode(inputBuffer);\n  if (stream) {\n    return decoded;\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error(\"invalid remainder\");\n  }\n  return decoded.data;\n}\n\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\nfunction getLength(input) {\n  const inputBuffer = toBuffer(input);\n  if (inputBuffer.length === 0) {\n    return 0;\n  }\n  const firstByte = inputBuffer[0];\n  if (firstByte <= 0x7f) {\n    return inputBuffer.length;\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f;\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6;\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf;\n  } else {\n    // a list  over 55 bytes long\n    const llength = firstByte - 0xf6;\n    const length = safeParseInt(inputBuffer.slice(1, llength).toString(\"hex\"), 16);\n    return llength + length;\n  }\n}\n\n/** Decode an input with RLP */\nfunction _decode(input) {\n  let length, llength, data, innerRemainder, d;\n  const decoded = [];\n  const firstByte = input[0];\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f;\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n    } else {\n      data = input.slice(1, length);\n    }\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error(\"invalid rlp encoding: byte must be less 0x80\");\n    }\n    return {\n      data: data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    llength = firstByte - 0xb6;\n    length = safeParseInt(input.slice(1, llength).toString(\"hex\"), 16);\n    data = input.slice(llength, length + llength);\n    if (data.length < length) {\n      throw new Error(\"invalid RLP\");\n    }\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = input.slice(1, length);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = safeParseInt(input.slice(1, llength).toString(\"hex\"), 16);\n    const totalLength = llength + length;\n    if (totalLength > input.length) {\n      throw new Error(\"invalid rlp: total length is larger than the data\");\n    }\n    innerRemainder = input.slice(llength, totalLength);\n    if (innerRemainder.length === 0) {\n      throw new Error(\"invalid rlp, List has a invalid length\");\n    }\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === \"0x\";\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n  if (typeof str !== \"string\") {\n    return str;\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n  if (integer < 0) {\n    throw new Error(\"Invalid integer as argument, must be unsigned!\");\n  }\n  const hex = integer.toString(16);\n  return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n  return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n  const hex = intToHex(integer);\n  return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex, \"hex\");\n}\n\n/** Transform anything into a Buffer */\nfunction toBuffer(v) {\n  if (!buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(v)) {\n    if (typeof v === \"string\") {\n      if (isHexPrefixed(v)) {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(padToEven(stripHexPrefix(v)), \"hex\");\n      } else {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(v);\n      }\n    } else if (typeof v === \"number\") {\n      if (!v) {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n      } else {\n        return intToBuffer(v);\n      }\n    } else if (v === null || v === undefined) {\n      return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n    } else if (v instanceof Uint8Array) {\n      return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(v);\n    } else {\n      throw new Error(\"invalid type\");\n    }\n  }\n  return v;\n}\n\n\n//# sourceMappingURL=rlp.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/rlp/dist/rlp.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/sdk/dist/sdk.module.js":
/*!*****************************************************!*\
  !*** ./node_modules/@onflow/sdk/dist/sdk.module.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FvmErrorCode: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.FvmErrorCode),\n/* harmony export */   HashAlgorithm: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.HashAlgorithm),\n/* harmony export */   InteractionResolverKind: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionResolverKind),\n/* harmony export */   InteractionStatus: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus),\n/* harmony export */   InteractionTag: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag),\n/* harmony export */   SignatureAlgorithm: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.SignatureAlgorithm),\n/* harmony export */   SubscriptionTopic: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.SubscriptionTopic),\n/* harmony export */   SubscriptionsNotSupportedError: () => (/* binding */ SubscriptionsNotSupportedError),\n/* harmony export */   TestUtils: () => (/* binding */ index),\n/* harmony export */   TransactionExecutionStatus: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionExecutionStatus),\n/* harmony export */   TransactionRole: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   account: () => (/* binding */ account),\n/* harmony export */   arg: () => (/* binding */ arg),\n/* harmony export */   args: () => (/* binding */ args),\n/* harmony export */   atBlockHeight: () => (/* binding */ atBlockHeight),\n/* harmony export */   atBlockId: () => (/* binding */ atBlockId),\n/* harmony export */   atLatestBlock: () => (/* binding */ atLatestBlock),\n/* harmony export */   authorization: () => (/* binding */ authorization),\n/* harmony export */   authorizations: () => (/* binding */ authorizations),\n/* harmony export */   block: () => (/* binding */ block),\n/* harmony export */   build: () => (/* binding */ build),\n/* harmony export */   cadence: () => (/* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_9__.template),\n/* harmony export */   cdc: () => (/* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_9__.template),\n/* harmony export */   config: () => (/* reexport safe */ _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config),\n/* harmony export */   createSdkClient: () => (/* binding */ createSdkClient),\n/* harmony export */   createSignableVoucher: () => (/* binding */ createSignableVoucher),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   destroy: () => (/* binding */ destroy),\n/* harmony export */   encodeMessageFromSignable: () => (/* binding */ encodeMessageFromSignable),\n/* harmony export */   encodeTransactionEnvelope: () => (/* binding */ encodeTransactionEnvelope),\n/* harmony export */   encodeTransactionPayload: () => (/* binding */ encodeTransactionPayload),\n/* harmony export */   encodeTxIdFromVoucher: () => (/* binding */ encodeTxIdFromVoucher),\n/* harmony export */   flowEmulator: () => (/* binding */ flowEmulator),\n/* harmony export */   flowMainnet: () => (/* binding */ flowMainnet),\n/* harmony export */   flowTestnet: () => (/* binding */ flowTestnet),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getAccount: () => (/* binding */ getAccount),\n/* harmony export */   getBlock: () => (/* binding */ getBlock),\n/* harmony export */   getBlockHeader: () => (/* binding */ getBlockHeader),\n/* harmony export */   getCollection: () => (/* binding */ getCollection),\n/* harmony export */   getEvents: () => (/* binding */ getEvents),\n/* harmony export */   getEventsAtBlockHeightRange: () => (/* binding */ getEventsAtBlockHeightRange),\n/* harmony export */   getEventsAtBlockIds: () => (/* binding */ getEventsAtBlockIds),\n/* harmony export */   getNetworkParameters: () => (/* binding */ getNetworkParameters),\n/* harmony export */   getNodeVersionInfo: () => (/* binding */ getNodeVersionInfo),\n/* harmony export */   getTransaction: () => (/* binding */ getTransaction),\n/* harmony export */   getTransactionStatus: () => (/* binding */ getTransactionStatus),\n/* harmony export */   initInteraction: () => (/* binding */ initInteraction),\n/* harmony export */   interaction: () => (/* binding */ interaction),\n/* harmony export */   invariant: () => (/* binding */ invariant),\n/* harmony export */   isBad: () => (/* binding */ isBad),\n/* harmony export */   isGetAccount: () => (/* binding */ isGetAccount),\n/* harmony export */   isGetBlock: () => (/* binding */ isGetBlock),\n/* harmony export */   isGetBlockHeader: () => (/* binding */ isGetBlockHeader),\n/* harmony export */   isGetCollection: () => (/* binding */ isGetCollection),\n/* harmony export */   isGetEvents: () => (/* binding */ isGetEvents),\n/* harmony export */   isGetNetworkParameters: () => (/* binding */ isGetNetworkParameters),\n/* harmony export */   isGetNodeVersionInfo: () => (/* binding */ isGetNodeVersionInfo),\n/* harmony export */   isGetTransaction: () => (/* binding */ isGetTransaction),\n/* harmony export */   isGetTransactionStatus: () => (/* binding */ isGetTransactionStatus),\n/* harmony export */   isOk: () => (/* binding */ isOk),\n/* harmony export */   isPing: () => (/* binding */ isPing),\n/* harmony export */   isScript: () => (/* binding */ isScript),\n/* harmony export */   isTransaction: () => (/* binding */ isTransaction),\n/* harmony export */   isUnknown: () => (/* binding */ isUnknown),\n/* harmony export */   limit: () => (/* binding */ limit),\n/* harmony export */   nodeVersionInfo: () => (/* binding */ nodeVersionInfo),\n/* harmony export */   param: () => (/* binding */ param),\n/* harmony export */   params: () => (/* binding */ params),\n/* harmony export */   payer: () => (/* binding */ payer),\n/* harmony export */   ping: () => (/* binding */ ping),\n/* harmony export */   pipe: () => (/* binding */ pipe),\n/* harmony export */   proposer: () => (/* binding */ proposer),\n/* harmony export */   put: () => (/* binding */ put),\n/* harmony export */   ref: () => (/* binding */ ref),\n/* harmony export */   resolve: () => (/* binding */ resolve),\n/* harmony export */   resolveAccounts: () => (/* binding */ resolveAccounts),\n/* harmony export */   resolveArguments: () => (/* binding */ resolveArguments),\n/* harmony export */   resolveCadence: () => (/* binding */ resolveCadence),\n/* harmony export */   resolveFinalNormalization: () => (/* binding */ resolveFinalNormalization),\n/* harmony export */   resolveProposerSequenceNumber: () => (/* binding */ resolveProposerSequenceNumber),\n/* harmony export */   resolveRefBlockId: () => (/* binding */ resolveRefBlockId),\n/* harmony export */   resolveSignatures: () => (/* binding */ resolveSignatures),\n/* harmony export */   resolveValidators: () => (/* binding */ resolveValidators),\n/* harmony export */   resolveVoucherIntercept: () => (/* binding */ resolveVoucherIntercept),\n/* harmony export */   response: () => (/* binding */ response),\n/* harmony export */   script: () => (/* binding */ script),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   subscribe: () => (/* binding */ subscribe),\n/* harmony export */   subscribeEvents: () => (/* binding */ subscribeEvents),\n/* harmony export */   subscribeRaw: () => (/* binding */ subscribeRaw),\n/* harmony export */   t: () => (/* reexport module object */ _onflow_types__WEBPACK_IMPORTED_MODULE_10__),\n/* harmony export */   transaction: () => (/* binding */ transaction),\n/* harmony export */   update: () => (/* binding */ update),\n/* harmony export */   validator: () => (/* binding */ validator),\n/* harmony export */   voucherIntercept: () => (/* binding */ voucherIntercept),\n/* harmony export */   voucherToTxId: () => (/* binding */ voucherToTxId),\n/* harmony export */   why: () => (/* binding */ why)\n/* harmony export */ });\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/./node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/typedefs */ \"(ssr)/./node_modules/@onflow/typedefs/dist/typedefs.module.js\");\n/* harmony import */ var _onflow_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @onflow/config */ \"(ssr)/./node_modules/@onflow/config/dist/config.module.js\");\n/* harmony import */ var _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onflow/rlp */ \"(ssr)/./node_modules/@onflow/rlp/dist/rlp.module.js\");\n/* harmony import */ var _onflow_util_address__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @onflow/util-address */ \"(ssr)/./node_modules/@onflow/util-address/dist/util-address.module.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _onflow_transport_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @onflow/transport-http */ \"(ssr)/./node_modules/@onflow/transport-http/dist/index.module.js\");\n/* harmony import */ var sha3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! sha3 */ \"(ssr)/./node_modules/sha3/index.js\");\n/* harmony import */ var _onflow_util_template__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @onflow/util-template */ \"(ssr)/./node_modules/@onflow/util-template/dist/template.module.js\");\n/* harmony import */ var _onflow_types__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @onflow/types */ \"(ssr)/./node_modules/@onflow/types/dist/types.module.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst ACCT = `{\n  \"kind\":\"${_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionResolverKind.ACCOUNT}\",\n  \"tempId\":null,\n  \"addr\":null,\n  \"keyId\":null,\n  \"sequenceNum\":null,\n  \"signature\":null,\n  \"signingFunction\":null,\n  \"resolve\":null,\n  \"role\": {\n    \"proposer\":false,\n    \"authorizer\":false,\n    \"payer\":false,\n    \"param\":false\n  }\n}`;\nconst ARG = `{\n  \"kind\":\"${_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionResolverKind.ARGUMENT}\",\n  \"tempId\":null,\n  \"value\":null,\n  \"asArgument\":null,\n  \"xform\":null,\n  \"resolve\": null,\n  \"resolveArgument\": null\n}`;\nconst IX = `{\n  \"tag\":\"${_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.UNKNOWN}\",\n  \"assigns\":{},\n  \"status\":\"${_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus.OK}\",\n  \"reason\":null,\n  \"accounts\":{},\n  \"params\":{},\n  \"arguments\":{},\n  \"message\": {\n    \"cadence\":null,\n    \"refBlock\":null,\n    \"computeLimit\":null,\n    \"proposer\":null,\n    \"payer\":null,\n    \"authorizations\":[],\n    \"params\":[],\n    \"arguments\":[]\n  },\n  \"proposer\":null,\n  \"authorizations\":[],\n  \"payer\":[],\n  \"events\": {\n    \"eventType\":null,\n    \"start\":null,\n    \"end\":null,\n    \"blockIds\":[]\n  },\n  \"subscribeEvents\": {\n    \"startBlockId\":null,\n    \"startHeight\":null,\n    \"eventTypes\":null,\n    \"addresses\":null,\n    \"contracts\":null,\n    \"heartbeatInterval\":null\n  },\n  \"transaction\": {\n    \"id\":null\n  },\n  \"block\": {\n    \"id\":null,\n    \"height\":null,\n    \"isSealed\":null\n  },\n  \"account\": {\n    \"addr\":null\n  },\n  \"collection\": {\n    \"id\":null\n  }\n}`;\nconst KEYS = new Set(Object.keys(JSON.parse(IX)));\n\n/**\n * Creates a new interaction object with default values.\n *\n * @returns A new interaction object initialized with default values\n */\nconst initInteraction = () => JSON.parse(IX);\n\n/**\n * Creates a new interaction object with default values.\n *\n * @deprecated Use initInteraction() instead. This function will be removed in a future version.\n *\n * @returns A new interaction object initialized with default values\n */\nconst interaction = () => {\n  _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n    pkg: \"FCL/SDK\",\n    message: `The interaction been deprecated from the Flow JS-SDK/FCL. use initInteraction instead`,\n    transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0010-deprecate-interaction\",\n    level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.LEVELS.warn\n  });\n  return initInteraction();\n};\n\n/**\n * Checks if a value is a number.\n *\n * @param d The value to check\n * @returns True if the value is a number, false otherwise\n *\n * @example\n * import { isNumber } from \"@onflow/sdk\"\n *\n * console.log(isNumber(42)); // true\n * console.log(isNumber(\"42\")); // false\n * console.log(isNumber(3.14)); // true\n * console.log(isNumber(null)); // false\n */\nconst isNumber$1 = d => typeof d === \"number\";\n\n/**\n * Checks if a value is an array.\n *\n * @param d The value to check\n * @returns True if the value is an array, false otherwise\n *\n * @example\n * import { isArray } from \"@onflow/sdk\"\n *\n * console.log(isArray([1, 2, 3])); // true\n * console.log(isArray(\"hello\")); // false\n * console.log(isArray({})); // false\n * console.log(isArray(null)); // false\n */\nconst isArray$1 = d => Array.isArray(d);\n\n/**\n * Checks if a value is an object (but not null).\n *\n * @param d The value to check\n * @returns True if the value is an object and not null, false otherwise\n *\n * @example\n * import { isObj } from \"@onflow/sdk\"\n *\n * console.log(isObj({})); // true\n * console.log(isObj({name: \"Alice\"})); // true\n * console.log(isObj(null)); // false\n * console.log(isObj(\"string\")); // false\n * console.log(isObj([])); // true (arrays are objects)\n */\nconst isObj = d => d !== null && typeof d === \"object\";\n\n/**\n * Checks if a value is null or undefined.\n *\n * @param d The value to check\n * @returns True if the value is null or undefined, false otherwise\n *\n * @example\n * import { isNull } from \"@onflow/sdk\"\n *\n * console.log(isNull(null)); // true\n * console.log(isNull(undefined)); // true\n * console.log(isNull(\"\")); // false\n * console.log(isNull(0)); // false\n * console.log(isNull(false)); // false\n */\nconst isNull = d => d == null;\n\n/**\n * Checks if a value is a function.\n *\n * @param d The value to check\n * @returns True if the value is a function, false otherwise\n *\n * @example\n * import { isFn } from \"@onflow/sdk\"\n *\n * console.log(isFn(() => {})); // true\n * console.log(isFn(function() {})); // true\n * console.log(isFn(\"function\")); // false\n * console.log(isFn({})); // false\n */\nconst isFn$3 = d => typeof d === \"function\";\n\n/**\n * Checks if an object is a valid interaction.\n *\n * @param ix The object to check\n * @returns True if the object is a valid interaction, false otherwise\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { isInteraction, initInteraction } from \"@onflow/sdk\"\n *\n * const interaction = initInteraction();\n * console.log(isInteraction(interaction)); // true\n * console.log(isInteraction({})); // false\n * console.log(isInteraction(null)); // false\n *\n * // Check if a builder result is a valid interaction\n * const built = await fcl.build([fcl.script`access(all) fun main(): Int { return 42 }`]);\n * console.log(isInteraction(built)); // true\n */\nconst isInteraction = ix => {\n  if (!isObj(ix) || isNull(ix) || isNumber$1(ix)) return false;\n  for (let key of KEYS) if (!ix.hasOwnProperty(key)) return false;\n  return true;\n};\n\n/**\n * Marks an interaction as successful and returns the interaction object.\n *\n * @param ix The interaction to mark as successful\n * @returns The interaction object with status set to OK\n *\n * @example\n * import { Ok, initInteraction } from \"@onflow/sdk\"\n *\n * const interaction = initInteraction();\n * const successfulInteraction = Ok(interaction);\n * console.log(successfulInteraction.status); // \"OK\"\n */\nconst Ok = ix => {\n  ix.status = _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus.OK;\n  return ix;\n};\n\n/**\n * Marks an interaction as failed with a specific reason and returns the interaction object.\n *\n * @param ix The interaction to mark as failed\n * @param reason The reason for the failure\n * @returns The interaction object with status set to BAD and reason set\n *\n * @example\n * import { Bad, initInteraction } from \"@onflow/sdk\"\n *\n * const interaction = initInteraction();\n * const failedInteraction = Bad(interaction, \"Invalid transaction signature\");\n * console.log(failedInteraction.status); // \"BAD\"\n * console.log(failedInteraction.reason); // \"Invalid transaction signature\"\n */\nconst Bad = (ix, reason) => {\n  ix.status = _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus.BAD;\n  ix.reason = reason;\n  return ix;\n};\nconst makeIx = wat => ix => {\n  ix.tag = wat;\n  return Ok(ix);\n};\nconst prepAccountKeyId = acct => {\n  if (acct.keyId == null) return acct;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!isNaN(parseInt(acct.keyId.toString())), \"account.keyId must be an integer\");\n  return {\n    ...acct,\n    keyId: parseInt(acct.keyId.toString())\n  };\n};\n/**\n * Creates a new account object with default values.\n *\n * @returns A new account object initialized with default values\n *\n * @example\n * import { initAccount } from \"@onflow/sdk\"\n *\n * const account = initAccount();\n * console.log(account.addr); // null\n * console.log(account.keyId); // null\n * console.log(account.role.proposer); // false\n *\n * // Typically used internally by other functions\n * // You'll more commonly use authorization() or prepAccount()\n */\nconst initAccount = () => JSON.parse(ACCT);\n\n/**\n * Prepares and configures an account for use in an interaction with a specific role.\n *\n * @param acct The account authorization function or account object\n * @param opts Configuration options including the role for the account\n * @returns A function that adds the prepared account to an interaction\n */\nconst prepAccount = function (acct) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return ix => {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(typeof acct === \"function\" || typeof acct === \"object\", \"prepAccount must be passed an authorization function or an account object\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(opts.role != null, \"Account must have a role\");\n    const ACCOUNT = initAccount();\n    const role = opts.role;\n    const tempId = (0,uuid__WEBPACK_IMPORTED_MODULE_11__[\"default\"])();\n    let account = {\n      ...acct\n    };\n    if (acct.authorization && isFn$3(acct.authorization)) account = {\n      resolve: acct.authorization\n    };\n    if (!acct.authorization && isFn$3(acct)) account = {\n      resolve: acct\n    };\n    const resolve = account.resolve;\n    if (resolve) {\n      account.resolve = function (acct) {\n        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          rest[_key - 1] = arguments[_key];\n        }\n        return [resolve, prepAccountKeyId].reduce(async (d, fn) => fn(await d, ...rest), acct);\n      };\n    }\n    account = prepAccountKeyId(account);\n    ix.accounts[tempId] = {\n      ...ACCOUNT,\n      tempId,\n      ...account,\n      role: {\n        ...ACCOUNT.role,\n        ...(typeof acct.role === \"object\" ? acct.role : {}),\n        ...(role ? {\n          [role]: true\n        } : {})\n      }\n    };\n    if (role === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole.AUTHORIZER) {\n      ix.authorizations.push(tempId);\n    } else if (role === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole.PAYER) {\n      ix.payer.push(tempId);\n    } else if (role) {\n      ix[role] = tempId;\n    }\n    return ix;\n  };\n};\n\n/**\n * Creates an argument resolver and adds it to an interaction.\n *\n * This function is typically used internally by the SDK to handle arguments in scripts and transactions.\n * For most use cases, you should use `fcl.arg()` instead of this function directly.\n *\n * @param arg The argument configuration object\n * @returns A function that adds the argument to an interaction\n *\n * @example\n * import { makeArgument, initInteraction } from \"@onflow/sdk\"\n * import * as fcl from \"@onflow/fcl\";\n *\n * const interaction = initInteraction();\n *\n * // Create an argument resolver (usually you'd use fcl.arg instead)\n * const argResolver = {\n *   value: 42,\n *   xform: fcl.t.Int,\n *   resolve: (value, xform) => ({ value, xform })\n * };\n *\n * // Add the argument to the interaction\n * makeArgument(argResolver)(interaction);\n *\n * console.log(interaction.message.arguments.length); // 1\n *\n * // Preferred way - use fcl.arg instead:\n * // fcl.args([fcl.arg(42, fcl.t.Int)])\n */\nconst makeArgument = arg => ix => {\n  let tempId = (0,uuid__WEBPACK_IMPORTED_MODULE_11__[\"default\"])();\n  ix.message.arguments.push(tempId);\n  ix.arguments[tempId] = JSON.parse(ARG);\n  ix.arguments[tempId].tempId = tempId;\n  ix.arguments[tempId].value = arg.value;\n  ix.arguments[tempId].asArgument = arg.asArgument;\n  ix.arguments[tempId].xform = arg.xform;\n  ix.arguments[tempId].resolve = arg.resolve;\n  ix.arguments[tempId].resolveArgument = isFn$3(arg.resolveArgument) ? arg.resolveArgument.bind(arg) : arg.resolveArgument;\n  return Ok(ix);\n};\nconst makeUnknown /*                 */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.UNKNOWN);\nconst makeScript /*                  */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.SCRIPT);\nconst makeTransaction /*             */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.TRANSACTION);\nconst makeGetTransactionStatus /*    */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_TRANSACTION_STATUS);\nconst makeGetTransaction /*          */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_TRANSACTION);\nconst makeGetAccount /*              */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_ACCOUNT);\nconst makeGetEvents /*               */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_EVENTS);\nconst makePing /*                    */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.PING);\nconst makeGetBlock /*                */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_BLOCK);\nconst makeGetBlockHeader /*          */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_BLOCK_HEADER);\nconst makeGetCollection /*           */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_COLLECTION);\nconst makeGetNetworkParameters /*    */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_NETWORK_PARAMETERS);\nconst makeSubscribeEvents /*         */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.SUBSCRIBE_EVENTS);\nconst makeGetNodeVerionInfo /*       */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_NODE_VERSION_INFO);\nconst is = wat => ix => ix.tag === wat;\nconst isUnknown /*                 */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.UNKNOWN);\nconst isScript /*                  */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.SCRIPT);\nconst isTransaction /*             */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.TRANSACTION);\nconst isGetTransactionStatus /*    */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_TRANSACTION_STATUS);\nconst isGetTransaction /*          */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_TRANSACTION);\nconst isGetAccount /*              */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_ACCOUNT);\nconst isGetEvents /*               */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_EVENTS);\nconst isPing /*                    */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.PING);\nconst isGetBlock /*                */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_BLOCK);\nconst isGetBlockHeader /*          */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_BLOCK_HEADER);\nconst isGetCollection /*           */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_COLLECTION);\nconst isGetNetworkParameters /*    */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_NETWORK_PARAMETERS);\nconst isGetNodeVersionInfo /*      */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_NODE_VERSION_INFO);\nconst isSubscribeEvents /*         */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.SUBSCRIBE_EVENTS);\n\n/**\n * Checks if an interaction has a successful status.\n *\n * @param ix The interaction to check\n * @returns True if the interaction status is OK, false otherwise\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { isOk } from \"@onflow/sdk\"\n *\n * // Check if a transaction was successful\n * const response = await fcl.send([\n *   fcl.transaction`transaction { prepare(account: AuthAccount) {} }`\n * ]);\n *\n * if (isOk(response)) {\n *   console.log(\"Transaction was successful\");\n * } else {\n *   console.log(\"Transaction failed\");\n * }\n */\nconst isOk /*  */ = ix => ix.status === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus.OK;\n\n/**\n * Checks if an interaction has a failed status.\n *\n * @param ix The interaction to check\n * @returns True if the interaction status is BAD, false otherwise\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { isBad, why } from \"@onflow/sdk\"\n *\n * const response = await fcl.send([\n *   fcl.transaction`transaction { prepare(account: AuthAccount) {} }`\n * ]);\n *\n * if (isBad(response)) {\n *   console.log(\"Transaction failed:\", why(response));\n * }\n */\nconst isBad /* */ = ix => ix.status === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus.BAD;\n\n/**\n * Returns the reason for an interaction failure.\n *\n * @param ix The interaction to get the failure reason from\n * @returns The reason string or undefined if no reason is set\n *\n * @example\n * import { Bad, why, initInteraction } from \"@onflow/sdk\"\n *\n * const interaction = Bad(initInteraction(), \"Network timeout\");\n * console.log(why(interaction)); // \"Network timeout\"\n *\n * // Used with error handling\n * if (isBad(response)) {\n *   console.error(\"Error occurred:\", why(response));\n * }\n */\nconst why /*   */ = ix => ix.reason;\n\n/**\n * Checks if an object is an account resolver.\n *\n * @param account The object to check\n * @returns True if the object is an account resolver, false otherwise\n *\n * @example\n * import { isAccount, authorization } from \"@onflow/sdk\"\n *\n * const authz = authorization(\"0x123\", signingFunction);\n * const accountResolver = { kind: \"ACCOUNT\", addr: \"0x123\" };\n * const regularObject = { name: \"test\" };\n *\n * console.log(isAccount(accountResolver)); // true\n * console.log(isAccount(regularObject)); // false\n */\nconst isAccount /*  */ = account => account.kind === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionResolverKind.ACCOUNT;\n\n/**\n * Checks if an object is an argument resolver.\n *\n * @param argument The object to check\n * @returns True if the object is an argument resolver, false otherwise\n *\n * @example\n * import { isArgument, arg } from \"@onflow/sdk\"\n *\n * const argumentResolver = { kind: \"ARGUMENT\", value: 42 };\n * const regularObject = { value: 42 };\n *\n * console.log(isArgument(argumentResolver)); // true\n * console.log(isArgument(regularObject)); // false\n *\n * // Check arguments in a script\n * const scriptArgs = [arg(10, t.Int), arg(\"hello\", t.String)];\n * scriptArgs.forEach(arg => {\n *   if (isArgument(arg)) {\n *     console.log(\"Valid argument:\", arg.value);\n *   }\n * });\n */\nconst isArgument /* */ = argument => argument.kind === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionResolverKind.ARGUMENT;\nconst hardMode = ix => {\n  for (let key of Object.keys(ix)) {\n    if (!KEYS.has(key)) throw new Error(`\"${key}\" is an invalid root level Interaction property.`);\n  }\n  return ix;\n};\nconst recPipe = async function (ix) {\n  let fns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  try {\n    ix = hardMode(await ix);\n    if (isBad(ix)) throw new Error(`Interaction Error: ${ix.reason}`);\n    if (!fns.length) return ix;\n    const [hd, ...rest] = fns;\n    const cur = await hd;\n    if (isFn$3(cur)) return recPipe(cur(ix), rest);\n    if (isNull(cur) || !cur) return recPipe(ix, rest);\n    if (isInteraction(cur)) return recPipe(cur, rest);\n    throw new Error(\"Invalid Interaction Composition\");\n  } catch (e) {\n    throw e;\n  }\n};\n\n/**\n * Async pipe function to compose interactions.\n *\n * The pipe function is the foundation for composing multiple interaction builder functions together.\n * It sequentially applies builder functions to an interaction, allowing for complex interaction construction.\n * Each function in the pipe receives the result of the previous function and can modify or validate the interaction.\n *\n * Pipe has two main forms:\n * 1. `pipe(builderFunctions)`: Returns a builder function\n * 2. `pipe(interaction, builderFunctions)`: Directly executes the pipe on an interaction\n *\n * @param fns Array of builder functions to apply\n * @returns An interaction builder function when called with just functions, or a Promise<Interaction> when called with an interaction and functions\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Using pipe to create a reusable builder\n * const myTransactionBuilder = fcl.pipe([\n *   fcl.transaction`\n *     transaction(amount: UFix64) {\n *       prepare(account: AuthAccount) {\n *         log(amount)\n *       }\n *     }\n *   `,\n *   fcl.args([fcl.arg(\"10.0\", fcl.t.UFix64)]),\n *   fcl.proposer(fcl.authz),\n *   fcl.payer(fcl.authz),\n *   fcl.authorizations([fcl.authz]),\n *   fcl.limit(100)\n * ]);\n *\n * // Use the builder\n * const interaction = await fcl.build([myTransactionBuilder]);\n *\n * // Pipe is used internally by build() and send()\n * await fcl.send([\n *   fcl.script`access(all) fun main(): Int { return 42 }`\n * ]); // This uses pipe internally\n */\n\nfunction pipe() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  const [arg1, arg2] = args;\n  if (isArray$1(arg1)) return d => pipe(d, arg1);\n  const ix = arg1;\n  const fns = arg2;\n  return recPipe(ix, fns);\n}\nconst identity$1 = function (v) {\n  return v;\n};\n\n/**\n * Gets a value from an interaction object using a dot-notation key path.\n *\n * @param ix The interaction object\n * @param key The dot-notation key path (e.g., \"message.arguments\")\n * @param fallback The fallback value if the key is not found\n * @returns The value at the key path or the fallback value\n *\n * @example\n * import { get, put, initInteraction } from \"@onflow/sdk\"\n *\n * const interaction = initInteraction();\n *\n * // Set a value first\n * put(\"user.name\", \"Alice\")(interaction);\n *\n * // Get the value\n * const userName = get(interaction, \"user.name\"); // \"Alice\"\n * const userAge = get(interaction, \"user.age\", 25); // 25 (fallback)\n *\n * // Get nested values\n * put(\"config.network.url\", \"https://access.mainnet.onflow.org\")(interaction);\n * const networkUrl = get(interaction, \"config.network.url\");\n */\nconst get = function (ix, key) {\n  let fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  return ix.assigns[key] == null ? fallback : ix.assigns[key];\n};\n\n/**\n * Sets a value in an interaction object using a dot-notation key path.\n *\n * @param key The dot-notation key path (e.g., \"message.arguments\")\n * @param value The value to set\n * @returns A function that takes an interaction and sets the value\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { put } from \"@onflow/sdk\"\n *\n * // Using put in a custom builder function\n * const setCustomData = (data) => put(\"custom.data\", data);\n *\n * await fcl.send([\n *   fcl.script`access(all) fun main(): String { return \"Hello\" }`,\n *   setCustomData({ userId: 123, timestamp: Date.now() })\n * ]);\n *\n * // Direct usage\n * const interaction = initInteraction();\n * put(\"network.endpoint\", \"https://access.mainnet.onflow.org\")(interaction);\n */\nconst put = (key, value) => ix => {\n  ix.assigns[key] = value;\n  return Ok(ix);\n};\n\n/**\n * Updates a value in an interaction object using a transformation function.\n *\n * @param key The dot-notation key path to update\n * @param fn The transformation function to apply to the existing value\n * @returns A function that takes an interaction and updates the value\n *\n * @example\n * import { update, put, initInteraction } from \"@onflow/sdk\"\n *\n * const interaction = initInteraction();\n *\n * // Set initial value\n * put(\"counter\", 0)(interaction);\n *\n * // Increment counter\n * const increment = update(\"counter\", (current) => (current || 0) + 1);\n * increment(interaction); // counter becomes 1\n * increment(interaction); // counter becomes 2\n *\n * // Update array\n * put(\"tags\", [\"flow\", \"blockchain\"])(interaction);\n * const addTag = update(\"tags\", (tags) => [...(tags || []), \"web3\"]);\n * addTag(interaction); // tags becomes [\"flow\", \"blockchain\", \"web3\"]\n */\nconst update = function (key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity$1;\n  return ix => {\n    ix.assigns[key] = fn(ix.assigns[key], ix);\n    return Ok(ix);\n  };\n};\n\n/**\n * Removes a property from an interaction object using a dot-notation key path.\n *\n * @param key The dot-notation key path to remove\n * @returns A function that takes an interaction and removes the property\n *\n * @example\n * import { destroy, put, get, initInteraction } from \"@onflow/sdk\"\n *\n * const interaction = initInteraction();\n *\n * // Set some values\n * put(\"user.name\", \"Alice\")(interaction);\n * put(\"user.email\", \"alice@example.com\")(interaction);\n * put(\"user.temp\", \"temporary data\")(interaction);\n *\n * console.log(get(interaction, \"user.temp\")); // \"temporary data\"\n *\n * // Remove temporary data\n * destroy(\"user.temp\")(interaction);\n *\n * console.log(get(interaction, \"user.temp\")); // undefined\n * console.log(get(interaction, \"user.name\")); // \"Alice\" (still exists)\n */\nconst destroy = key => ix => {\n  delete ix.assigns[key];\n  return Ok(ix);\n};\n\nvar ixModule = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Bad: Bad,\n  Ok: Ok,\n  destroy: destroy,\n  get: get,\n  initAccount: initAccount,\n  initInteraction: initInteraction,\n  interaction: interaction,\n  isAccount: isAccount,\n  isArgument: isArgument,\n  isArray: isArray$1,\n  isBad: isBad,\n  isFn: isFn$3,\n  isGetAccount: isGetAccount,\n  isGetBlock: isGetBlock,\n  isGetBlockHeader: isGetBlockHeader,\n  isGetCollection: isGetCollection,\n  isGetEvents: isGetEvents,\n  isGetNetworkParameters: isGetNetworkParameters,\n  isGetNodeVersionInfo: isGetNodeVersionInfo,\n  isGetTransaction: isGetTransaction,\n  isGetTransactionStatus: isGetTransactionStatus,\n  isInteraction: isInteraction,\n  isNull: isNull,\n  isNumber: isNumber$1,\n  isObj: isObj,\n  isOk: isOk,\n  isPing: isPing,\n  isScript: isScript,\n  isSubscribeEvents: isSubscribeEvents,\n  isTransaction: isTransaction,\n  isUnknown: isUnknown,\n  makeArgument: makeArgument,\n  makeGetAccount: makeGetAccount,\n  makeGetBlock: makeGetBlock,\n  makeGetBlockHeader: makeGetBlockHeader,\n  makeGetCollection: makeGetCollection,\n  makeGetEvents: makeGetEvents,\n  makeGetNetworkParameters: makeGetNetworkParameters,\n  makeGetNodeVerionInfo: makeGetNodeVerionInfo,\n  makeGetTransaction: makeGetTransaction,\n  makeGetTransactionStatus: makeGetTransactionStatus,\n  makePing: makePing,\n  makeScript: makeScript,\n  makeSubscribeEvents: makeSubscribeEvents,\n  makeTransaction: makeTransaction,\n  makeUnknown: makeUnknown,\n  pipe: pipe,\n  prepAccount: prepAccount,\n  put: put,\n  update: update,\n  why: why\n});\n\n/**\n * A builder function that creates an interaction from an array of builder functions.\n *\n * The build function takes an array of builder functions and applies them to create a complete interaction object. This is the foundation for constructing all interactions in Flow, whether they're scripts, transactions, or queries.\n *\n * Each builder function modifies specific parts of the interaction object, such as adding Cadence code, arguments, authorization details, or other configuration.\n *\n * @param fns The functions to apply to the interaction\n * @returns A promise of an interaction\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Build a script interaction\n * const scriptInteraction = await fcl.build([\n *   fcl.script`\n *     access(all) fun main(a: Int, b: Int): Int {\n *       return a + b\n *     }\n *   `,\n *   fcl.args([\n *     fcl.arg(1, fcl.t.Int),\n *     fcl.arg(2, fcl.t.Int)\n *   ])\n * ]);\n *\n * // Build a transaction interaction\n * const txInteraction = await fcl.build([\n *   fcl.transaction`\n *     transaction(name: String) {\n *       prepare(account: AuthAccount) {\n *         log(\"Hello, \" + name)\n *       }\n *     }\n *   `,\n *   fcl.args([fcl.arg(\"World\", fcl.t.String)]),\n *   fcl.proposer(proposerAuthz),\n *   fcl.payer(payerAuthz),\n *   fcl.authorizations([authorizerAuthz]),\n *   fcl.limit(100)\n * ]);\n */\nfunction build() {\n  let fns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return pipe(initInteraction(), fns);\n}\n\nconst DEFAULT_RESPONSE = {\n  tag: null,\n  transaction: null,\n  transactionStatus: null,\n  transactionId: null,\n  encodedData: null,\n  events: null,\n  event: null,\n  accountStatusEvent: null,\n  account: null,\n  block: null,\n  blockHeader: null,\n  blockDigest: null,\n  latestBlock: null,\n  collection: null,\n  networkParameters: null,\n  streamConnection: null,\n  heartbeat: null,\n  nodeVersionInfo: null\n};\n\n/**\n * Creates a default response object\n *\n * @returns A default response object\n *\n * @example\n * import { response } from \"@onflow/sdk\"\n *\n * // Create a default response object\n * const defaultResponse = response();\n * console.log(defaultResponse.transaction); // null\n * console.log(defaultResponse.account); // null\n * console.log(defaultResponse.block); // null\n *\n * // Typically used internally by the SDK to initialize responses\n * // You'll rarely need to use this directly in application code\n */\nconst response = () => ({\n  ...DEFAULT_RESPONSE\n});\n\n/**\n * A builder function that returns the interaction to get the latest block.\n *\n * Use with 'fcl.atBlockId()' and 'fcl.atBlockHeight()' when building the interaction to get information for older blocks.\n *\n * Consider using the pre-built interaction 'fcl.block(options)' if you do not need to pair with any other builders.\n *\n * Block ID is SHA3-256 hash of the entire block payload. This hash is stored as an ID field on any block response object (ie. response from 'GetLatestBlock').\n *\n * Block height expresses the height of the block on the chain. The latest block height increases by one for every valid block produced.\n *\n * @param isSealed If the latest block should be sealed or not. See block states\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * const latestSealedBlock = await fcl.send([\n *   fcl.getBlock(true) // isSealed = true\n * ]).then(fcl.decode);\n */\nfunction getBlock() {\n  let isSealed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return pipe([makeGetBlock, ix => {\n    ix.block.isSealed = isSealed;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * A builder function that returns the interaction to get an account by address.\n *\n * Consider using the pre-built interaction 'fcl.account(address)' if you do not need to pair with any other builders.\n *\n * Account address is a unique account identifier. Be mindful about the '0x' prefix, you should use the prefix as a default representation but be careful and safely handle user inputs without the prefix.\n *\n * @param address Address of the user account with or without a prefix (both formats are supported)\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // somewhere in an async function\n * // fcl.account is the same as this function\n * const getAccount = async (address) => {\n *   const account = await fcl.send([fcl.getAccount(address)]).then(fcl.decode);\n *   return account;\n * };\n */\nfunction getAccount(addr) {\n  return pipe([makeGetAccount, ix => {\n    ix.account.addr = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(addr);\n    return Ok(ix);\n  }]);\n}\n\n/**\n * Pipes a generic stream of data into a granular stream of decoded data.\n *\n * The data is decoded per channel and emitted in order. This function is particularly useful\n * for handling streaming responses from Flow Access API, such as event subscriptions or\n * real-time block updates. It ensures that data is properly decoded and emitted in the\n * correct order while maintaining the stream's event-driven nature.\n *\n * All topics for a given message will be emitted synchronously before moving on to the next\n * message. The internal queue ensures that data is emitted in order and avoids race conditions\n * when decoding.\n *\n * @param stream The raw stream connection to decode\n * @param decodeResponse Function to decode response data\n * @param customDecoders Optional custom decoders for specific data types\n * @returns A new stream connection with decoded data\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Create a subscription stream\n * const rawStream = await fcl.send([\n *   fcl.subscribeEvents({\n *     eventTypes: [\"flow.AccountCreated\"],\n *     startHeight: 0\n *   })\n * ]);\n *\n * // Decode the stream data\n * const decodedStream = fcl.decodeStream(\n *   rawStream,\n *   fcl.decodeResponse,\n *   {}\n * );\n *\n * // Listen for decoded events\n * decodedStream.on(\"events\", (events) => {\n *   events.forEach(event => {\n *     console.log(\"Decoded event:\", event);\n *   });\n * });\n *\n * decodedStream.on(\"error\", (error) => {\n *   console.error(\"Stream error:\", error);\n * });\n *\n * decodedStream.on(\"close\", () => {\n *   console.log(\"Stream closed\");\n * });\n */\nconst decodeStream = (stream, decodeResponse, customDecoders) => {\n  const newStream = new (events__WEBPACK_IMPORTED_MODULE_6___default())();\n  let queue = taskQueue();\n\n  // Data is separated by topic & the decoded data is emitted in order\n  // All topics for a given message will be emitted synchronously before moving on to the next message\n  // The streamReady promise ensures that the data is emitted in order and avoids race conditions when decoding\n  stream.on(\"data\", async data => {\n    const topics = Object.keys(data).filter(key => data[key] != null && key !== \"tag\");\n    let newDataPromise = Promise.all(topics.map(async channel => {\n      const partialResponse = {\n        [channel]: data[channel]\n      };\n      const message = await decodeResponse(partialResponse, customDecoders);\n      return {\n        channel,\n        message\n      };\n    }));\n    queue.push(async () => {\n      // Emit the new data\n      const newData = await newDataPromise;\n      newData.forEach(_ref => {\n        let {\n          channel,\n          message\n        } = _ref;\n        newStream.emit(channel, message);\n      });\n    });\n  });\n\n  // Relay events from the original stream\n  // These events are delivered in order as well so that the stream will\n  // not emit more data after it has announced a contradictory state\n  function relayEvent(event) {\n    stream.on(event, message => {\n      queue.push(async () => {\n        newStream.emit(event, message);\n      });\n    });\n  }\n  relayEvent(\"close\");\n  relayEvent(\"error\");\n  return {\n    on(channel, callback) {\n      newStream.on(channel, callback);\n      return this;\n    },\n    off(channel, callback) {\n      newStream.off(channel, callback);\n      return this;\n    },\n    close: () => {\n      stream.close();\n    }\n  };\n};\nfunction taskQueue() {\n  let queue = [];\n  let running = false;\n  async function run() {\n    if (running) return;\n    running = true;\n    while (queue.length > 0) {\n      const task = queue.shift();\n      await task?.();\n    }\n    running = false;\n  }\n  return {\n    push: task => {\n      queue.push(task);\n      run();\n    }\n  };\n}\n\nconst latestBlockDeprecationNotice = () => {\n  _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n    pkg: \"@onflow/decode\",\n    subject: \"Operating upon data of the latestBlock field of the response object\",\n    transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/decode/WARNINGS.md#0001-Deprecating-latestBlock-field\"\n  });\n};\nconst decodeImplicit = async i => i;\nconst decodeVoid = async () => null;\nconst decodeType = async type => {\n  return type.staticType;\n};\nconst decodeOptional = async (optional, decoders, stack) => optional ? await recurseDecode(optional, decoders, stack) : null;\nconst decodeArray = async (array, decoders, stack) => await Promise.all(array.map(v => new Promise(async res => res(await recurseDecode(v, decoders, [...stack, v.type])))));\nconst decodeDictionary = async (dictionary, decoders, stack) => await dictionary.reduce(async (acc, v) => {\n  acc = await acc;\n  acc[await recurseDecode(v.key, decoders, [...stack, v.key])] = await recurseDecode(v.value, decoders, [...stack, v.key]);\n  return acc;\n}, Promise.resolve({}));\nconst decodeComposite = async (composite, decoders, stack) => {\n  const decoded = await composite.fields.reduce(async (acc, v) => {\n    acc = await acc;\n    acc[v.name] = await recurseDecode(v.value, decoders, [...stack, v.name]);\n    return acc;\n  }, Promise.resolve({}));\n  const decoder = composite.id && decoderLookup(decoders, composite.id);\n  return decoder ? await decoder(decoded) : decoded;\n};\nconst decodeInclusiveRange = async (range, decoders, stack) => {\n  // Recursive decode for start, end, and step\n  // We don't do all fields just in case there are future API changes\n  // where fields added and are not Cadence values\n  const keys = [\"start\", \"end\", \"step\"];\n  const decoded = await Object.keys(range).reduce(async (acc, key) => {\n    acc = await acc;\n    if (keys.includes(key)) {\n      acc[key] = await recurseDecode(range[key], decoders, [...stack, key]);\n    }\n    return acc;\n  }, Promise.resolve({}));\n  return decoded;\n};\nconst defaultDecoders = {\n  UInt: decodeImplicit,\n  Int: decodeImplicit,\n  UInt8: decodeImplicit,\n  Int8: decodeImplicit,\n  UInt16: decodeImplicit,\n  Int16: decodeImplicit,\n  UInt32: decodeImplicit,\n  Int32: decodeImplicit,\n  UInt64: decodeImplicit,\n  Int64: decodeImplicit,\n  UInt128: decodeImplicit,\n  Int128: decodeImplicit,\n  UInt256: decodeImplicit,\n  Int256: decodeImplicit,\n  Word8: decodeImplicit,\n  Word16: decodeImplicit,\n  Word32: decodeImplicit,\n  Word64: decodeImplicit,\n  Word128: decodeImplicit,\n  Word256: decodeImplicit,\n  UFix64: decodeImplicit,\n  Fix64: decodeImplicit,\n  String: decodeImplicit,\n  Character: decodeImplicit,\n  Bool: decodeImplicit,\n  Address: decodeImplicit,\n  Void: decodeVoid,\n  Optional: decodeOptional,\n  Reference: decodeImplicit,\n  Array: decodeArray,\n  Dictionary: decodeDictionary,\n  Event: decodeComposite,\n  Resource: decodeComposite,\n  Struct: decodeComposite,\n  Enum: decodeComposite,\n  Type: decodeType,\n  Path: decodeImplicit,\n  Capability: decodeImplicit,\n  InclusiveRange: decodeInclusiveRange\n};\nconst decoderLookup = (decoders, lookup) => {\n  const found = Object.keys(decoders).find(decoder => {\n    if (/^\\/.*\\/$/.test(decoder)) {\n      const reg = new RegExp(decoder.substring(1, decoder.length - 1));\n      return reg.test(lookup);\n    }\n    return decoder === lookup;\n  });\n  return lookup && found && decoders[found];\n};\nconst recurseDecode = async (decodeInstructions, decoders, stack) => {\n  let decoder = decoderLookup(decoders, decodeInstructions.type);\n  if (!decoder) throw new Error(`Undefined Decoder Error: ${decodeInstructions.type}@${stack.join(\".\")}`);\n  return await decoder(decodeInstructions.value, decoders, stack);\n};\n\n/**\n * @description - Decodes a response from Flow into JSON\n * @param decodeInstructions - The response object from Flow\n * @param customDecoders - An object of custom decoders\n * @param stack - The stack of the current decoding\n * @returns - The decoded response\n */\nconst decode$1 = async function (decodeInstructions) {\n  let customDecoders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let stack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  // Filter out all default decoders which are overridden by a custom decoder regex\n  const filteredDecoders = Object.keys(defaultDecoders).filter(decoder => !Object.keys(customDecoders).find(customDecoder => new RegExp(customDecoder).test(decoder))).reduce((decoders, decoderKey) => {\n    decoders[decoderKey] = defaultDecoders[decoderKey];\n    return decoders;\n  }, customDecoders);\n  const decoders = {\n    ...filteredDecoders,\n    ...customDecoders\n  };\n  return recurseDecode(decodeInstructions, decoders, stack);\n};\n\n/**\n * Decodes a response from Flow into JSON\n *\n * @param response The response object from Flow\n * @param customDecoders An object of custom decoders\n * @returns The decoded response\n */\nconst decodeResponse = async function (response) {\n  let customDecoders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (response.encodedData) {\n    return decode$1(response.encodedData, customDecoders);\n  } else if (response.transactionStatus) {\n    return {\n      ...response.transactionStatus,\n      events: await Promise.all(response.transactionStatus.events.map(async function decodeEvents(e) {\n        return {\n          type: e.type,\n          transactionId: e.transactionId,\n          transactionIndex: e.transactionIndex,\n          eventIndex: e.eventIndex,\n          data: await decode$1(e.payload, customDecoders)\n        };\n      }))\n    };\n  } else if (response.transaction) {\n    return response.transaction;\n  } else if (response.events) {\n    return await Promise.all(response.events.map(async function decodeEvents(e) {\n      return {\n        blockId: e.blockId,\n        blockHeight: e.blockHeight,\n        blockTimestamp: e.blockTimestamp,\n        type: e.type,\n        transactionId: e.transactionId,\n        transactionIndex: e.transactionIndex,\n        eventIndex: e.eventIndex,\n        data: await decode$1(e.payload, customDecoders)\n      };\n    }));\n  } else if (response.event) {\n    const {\n      payload,\n      ...rest\n    } = response.event;\n    return {\n      ...rest,\n      data: await decode$1(payload, customDecoders)\n    };\n  } else if (response.accountStatusEvent) {\n    const {\n      payload,\n      ...rest\n    } = response.accountStatusEvent;\n    return {\n      ...rest,\n      data: await decode$1(payload, customDecoders)\n    };\n  } else if (response.account) {\n    return response.account;\n  } else if (response.block) {\n    return response.block;\n  } else if (response.blockHeader) {\n    return response.blockHeader;\n  } else if (response.blockDigest) {\n    return response.blockDigest;\n  } else if (response.latestBlock) {\n    latestBlockDeprecationNotice();\n    return response.latestBlock;\n  } else if (response.transactionId) {\n    return response.transactionId;\n  } else if (response.collection) {\n    return response.collection;\n  } else if (response.networkParameters) {\n    const prefixRegex = /^flow-/;\n    const rawChainId = response.networkParameters.chainId;\n    let formattedChainId;\n    if (rawChainId === \"flow-emulator\") {\n      formattedChainId = \"local\";\n    } else if (prefixRegex.test(rawChainId)) {\n      formattedChainId = rawChainId.replace(prefixRegex, \"\");\n    } else {\n      formattedChainId = rawChainId;\n    }\n    return {\n      chainId: formattedChainId\n    };\n  } else if (response.streamConnection) {\n    return decodeStream(response.streamConnection, decodeResponse, customDecoders);\n  } else if (response.heartbeat) {\n    return response.heartbeat;\n  } else if (response.nodeVersionInfo) {\n    return response.nodeVersionInfo;\n  }\n  return null;\n};\n\nclass SubscriptionsNotSupportedError extends Error {\n  constructor() {\n    super(`The current transport does not support subscriptions.  If you have provided a custom transport (e.g. via \\`sdk.transport\\` configuration), ensure that it implements the subscribe method.`);\n    this.name = \"SubscriptionsNotSupportedError\";\n  }\n}\n\n/**\n * Get the SDK transport object, either from the provided override or from the global config.\n *\n * The transport object handles communication with Flow Access Nodes, including sending transactions,\n * executing scripts, and managing subscriptions. This function resolves the transport configuration\n * from various sources with the following priority order:\n * 1. Provided override parameters\n * 2. Global SDK configuration\n * 3. Default HTTP transport\n *\n * @param override Override default configuration with custom transport or send function\n * @param override.send Custom send function for backwards compatibility with legacy configurations\n * @param override.transport Complete transport object with both send and subscribe capabilities\n * @returns The resolved SDK transport object with send and subscribe methods\n *\n * @throws {Error} When both transport and send options are provided simultaneously\n * @throws {SubscriptionsNotSupportedError} When attempting to subscribe using a legacy send-only transport\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { httpTransport } from \"@onflow/transport-http\";\n *\n * // Get default transport (usually HTTP transport)\n * const defaultTransport = await fcl.getTransport();\n *\n * // Override with custom transport\n * const customTransport = await fcl.getTransport({\n *   transport: httpTransport({\n *     accessNode: \"https://rest-mainnet.onflow.org\",\n *     timeout: 10000\n *   })\n * });\n */\nfunction getGlobalTransport(cfg) {\n  const transportOrSend = cfg[\"sdk.transport\"] || cfg[\"sdk.send\"] || _onflow_transport_http__WEBPACK_IMPORTED_MODULE_7__.httpTransport;\n\n  // Backwards compatibility with legacy send function\n  if (!isTransportObject(transportOrSend)) {\n    return {\n      send: transportOrSend,\n      subscribe: () => {\n        throw new SubscriptionsNotSupportedError();\n      }\n    };\n  }\n  return transportOrSend;\n}\nfunction isTransportObject(transport) {\n  return transport.send !== undefined && transport.subscribe !== undefined && typeof transport.send === \"function\" && typeof transport.subscribe === \"function\";\n}\n\nconst DEFAULT_COMPUTE_LIMIT = 10;\nlet cachedContext;\nasync function createGlobalContext() {\n  const globalConfig = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().all();\n  return {\n    get transport() {\n      return getGlobalTransport(globalConfig);\n    },\n    get accessNodeUrl() {\n      const accessNodeUrl = globalConfig[\"accessNode.api\"];\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!!accessNodeUrl, `Either opts.node or \"accessNode.api\" in config must be defined.`);\n      return accessNodeUrl;\n    },\n    get computeLimit() {\n      const computeLimit = globalConfig[\"fcl.limit\"];\n      if (!computeLimit) {\n        _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n          pkg: \"FCL/SDK\",\n          subject: \"The built-in default compute limit (DEFAULT_COMPUTE_LIMIT=10)\",\n          transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0009-deprecate-default-compute-limit\"\n        });\n        return DEFAULT_COMPUTE_LIMIT;\n      }\n      return computeLimit;\n    },\n    get customResolver() {\n      const customResolver = globalConfig[\"sdk.resolve\"];\n      return customResolver;\n    },\n    get customDecoders() {\n      return Object.fromEntries(Object.entries(globalConfig).filter(_ref => {\n        let [key] = _ref;\n        return key.startsWith(\"decoder.\");\n      }));\n    },\n    get contracts() {\n      return Object.fromEntries(Object.entries(globalConfig).filter(_ref2 => {\n        let [key] = _ref2;\n        return key.startsWith(\"system.contracts.\");\n      }).map(_ref3 => {\n        let [key, value] = _ref3;\n        return [key.replace(\"system.contracts.\", \"\"), value];\n      }));\n    },\n    get debug() {\n      return Object.fromEntries(Object.entries(globalConfig).filter(_ref4 => {\n        let [key] = _ref4;\n        return key.startsWith(\"debug.\");\n      }));\n    },\n    get legacyContractIdentifiers() {\n      return Object.fromEntries(Object.entries(globalConfig).filter(_ref5 => {\n        let [key] = _ref5;\n        return key.startsWith(\"0x\");\n      }));\n    }\n  };\n}\nasync function getGlobalContext() {\n  if (!cachedContext) {\n    // Watch for changes in the config and recreate the context if needed\n    (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().subscribe(() => {\n      cachedContext = createGlobalContext();\n    });\n\n    // Create the context for the first time\n    cachedContext = createGlobalContext();\n  }\n  return cachedContext instanceof Promise ? cachedContext : cachedContext;\n}\nfunction withGlobalContext(fn) {\n  return async function () {\n    const context = await getGlobalContext();\n    return fn(context)(...arguments);\n  };\n}\n\nconst isFn$2 = v => typeof v === \"function\";\nconst isString$1 = v => typeof v === \"string\";\nconst oldIdentifierPatternFn = () => /\\b(0x\\w+)\\b/g;\nfunction isOldIdentifierSyntax(cadence) {\n  return oldIdentifierPatternFn().test(cadence);\n}\nconst newIdentifierPatternFn = () => /import\\s+\"(\\w+)\"/g;\nfunction isNewIdentifierSyntax(cadence) {\n  return newIdentifierPatternFn().test(cadence);\n}\nfunction getContractIdentifierSyntaxMatches(cadence) {\n  return cadence.matchAll(newIdentifierPatternFn());\n}\nfunction createResolveCadence(context) {\n  return async function resolveCadence(ix) {\n    if (!isTransaction(ix) && !isScript(ix)) return ix;\n    var cadence = get(ix, \"ix.cadence\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(isFn$2(cadence) || isString$1(cadence), \"Cadence needs to be a function or a string.\");\n    if (isFn$2(cadence)) cadence = await cadence({});\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(isString$1(cadence), \"Cadence needs to be a string at this point.\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!isOldIdentifierSyntax(cadence) || !isNewIdentifierSyntax(cadence), \"Both account identifier and contract identifier syntax not simultaneously supported.\");\n    if (isOldIdentifierSyntax(cadence)) {\n      cadence = Object.entries(context.legacyContractIdentifiers || {}).reduce((cadence, _ref) => {\n        let [key, value] = _ref;\n        const regex = new RegExp(\"(\\\\b\" + key + \"\\\\b)\", \"g\");\n        return cadence.replace(regex, value);\n      }, cadence);\n    }\n    if (isNewIdentifierSyntax(cadence)) {\n      for (const [fullMatch, contractName] of getContractIdentifierSyntaxMatches(cadence)) {\n        const address = context.contracts[contractName] || null;\n        if (address) {\n          cadence = cadence.replace(fullMatch, `import ${contractName} from ${(0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(address)}`);\n        } else {\n          _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log({\n            title: \"Contract Placeholder not found\",\n            message: `Cannot find a value for contract placeholder ${contractName}. Please add to your flow.json or explicitly add it to the config 'contracts.*' namespace.`,\n            level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.LEVELS.warn\n          });\n        }\n      }\n    }\n\n    // We need to move this over in any case.\n    ix.message.cadence = cadence;\n    return ix;\n  };\n}\nconst resolveCadence = /* @__PURE__ */withGlobalContext(createResolveCadence);\n\nconst isFn$1 = v => typeof v === \"function\";\nfunction cast(arg) {\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(typeof arg.xform != null, `No type specified for argument: ${arg.value}`);\n  if (isFn$1(arg.xform)) return arg.xform(arg.value);\n  if (isFn$1(arg.xform.asArgument)) return arg.xform.asArgument(arg.value);\n\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(false, `Invalid Argument`, arg);\n}\nasync function handleArgResolution(arg) {\n  let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(depth > 0, `Argument Resolve Recursion Limit Exceeded for Arg: ${arg.tempId}`);\n  if (isFn$1(arg.resolveArgument)) {\n    const resolvedArg = await arg.resolveArgument();\n    return handleArgResolution(resolvedArg, depth - 1);\n  } else {\n    return arg;\n  }\n}\n\n/**\n * Resolves transaction arguments by evaluating argument functions and converting them to appropriate types.\n *\n * This function processes all arguments in a transaction or script interaction, calling their transform functions\n * to convert JavaScript values into Cadence-compatible argument formats that can be sent to the Flow network.\n *\n * The resolution process includes:\n * - Calling argument resolver functions if present\n * - Applying type transformations using the xform field\n * - Handling recursive argument resolution up to a depth limit\n *\n * @param ix The interaction object containing arguments to resolve\n * @returns The interaction with resolved arguments ready for network transmission\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Arguments are automatically resolved during send()\n * await fcl.send([\n *   fcl.script`\n *     access(all) fun main(amount: UFix64, recipient: Address): String {\n *       return \"Sending \".concat(amount.toString()).concat(\" to \").concat(recipient.toString())\n *     }\n *   `,\n *   fcl.args([\n *     fcl.arg(\"100.0\", fcl.t.UFix64),    // Will be resolved to Cadence UFix64\n *     fcl.arg(\"0x01\", fcl.t.Address)     // Will be resolved to Cadence Address\n *   ])\n * ]).then(fcl.decode);\n *\n * // The resolveArguments function handles the conversion automatically\n */\nasync function resolveArguments(ix) {\n  if (isTransaction(ix) || isScript(ix)) {\n    for (let [id, arg] of Object.entries(ix.arguments)) {\n      const res = await handleArgResolution(arg);\n      ix.arguments[id].asArgument = cast(res);\n    }\n  }\n  return ix;\n}\n\n/**\n * Encodes a transaction payload for signing.\n *\n * This function takes a transaction object and encodes it into a format suitable for signing.\n * The encoded payload contains all the transaction details except for the signatures.\n *\n * @param tx The transaction object to encode\n * @returns A hex-encoded string representing the transaction payload\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { encodeTransactionPayload } from \"@onflow/sdk\"\n *\n * // Build a transaction\n * const transaction = await fcl.build([\n *   fcl.transaction`\n *     transaction(amount: UFix64) {\n *       prepare(account: AuthAccount) {\n *         log(\"Transferring: \".concat(amount.toString()))\n *       }\n *     }\n *   `,\n *   fcl.args([fcl.arg(\"10.0\", fcl.t.UFix64)]),\n *   fcl.proposer(proposerAuthz),\n *   fcl.payer(payerAuthz),\n *   fcl.authorizations([authorizerAuthz]),\n *   fcl.limit(100)\n * ]);\n *\n * // Encode the transaction payload for signing\n * const encodedPayload = encodeTransactionPayload(transaction);\n * console.log(\"Encoded payload:\", encodedPayload);\n * // Returns a hex string like \"f90145b90140...\"\n */\nconst encodeTransactionPayload = tx => prependTransactionDomainTag(rlpEncode(preparePayload(tx)));\n\n/**\n * Encodes a complete transaction envelope including payload and signatures.\n *\n * This function encodes the full transaction including both the payload and all signatures.\n * This is the final step before submitting a transaction to the Flow network.\n *\n * @param tx The transaction object to encode\n * @returns A hex-encoded string representing the complete transaction envelope\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { encodeTransactionEnvelope } from \"@onflow/sdk\"\n *\n * // Assuming you have a fully built and signed transaction\n * const signedTransaction = await fcl.build([\n *   fcl.transaction`\n *     transaction {\n *       prepare(account: AuthAccount) {\n *         log(\"Hello, Flow!\")\n *       }\n *     }\n *   `,\n *   fcl.proposer(authz),\n *   fcl.payer(authz),\n *   fcl.authorizations([authz]),\n *   fcl.limit(100)\n * ]);\n *\n * // Add signatures to the transaction (this is usually done automatically)\n * // signedTransaction.payloadSigs = [...];\n * // signedTransaction.envelopeSigs = [...];\n *\n * // Encode the complete transaction envelope\n * const encodedEnvelope = encodeTransactionEnvelope(signedTransaction);\n * console.log(\"Encoded envelope:\", encodedEnvelope);\n * // Returns a hex string ready for network submission\n */\nconst encodeTransactionEnvelope = tx => prependTransactionDomainTag(rlpEncode(prepareEnvelope(tx)));\n\n/**\n * Encodes a transaction ID from a voucher by computing its hash.\n *\n * A voucher is an intermediary object that contains transaction details before final encoding.\n * This function computes the transaction ID that would result from submitting the transaction.\n *\n * @param voucher The voucher object containing transaction details\n * @returns A hex-encoded string representing the transaction ID\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { encodeTxIdFromVoucher } from \"@onflow/sdk\"\n *\n * // Create a voucher (usually done internally by FCL)\n * const voucher = {\n *   cadence: `\n *     transaction {\n *       prepare(account: AuthAccount) {\n *         log(\"Hello\")\n *       }\n *     }\n *   `,\n *   arguments: [],\n *   refBlock: \"abc123...\",\n *   computeLimit: 100,\n *   proposalKey: {\n *     address: \"0x123456789abcdef0\",\n *     keyId: 0,\n *     sequenceNum: 42\n *   },\n *   payer: \"0x123456789abcdef0\",\n *   authorizers: [\"0x123456789abcdef0\"],\n *   payloadSigs: [],\n *   envelopeSigs: []\n * };\n *\n * // Calculate the transaction ID\n * const txId = encodeTxIdFromVoucher(voucher);\n * console.log(\"Transaction ID:\", txId);\n * // Returns a transaction ID that can be used to track the transaction\n */\nconst encodeTxIdFromVoucher = voucher => sha3_256(rlpEncode(prepareVoucher(voucher)));\nconst rightPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(value.padEnd(pad * 2, \"0\"), \"hex\");\nconst leftPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(value.padStart(pad * 2, \"0\"), \"hex\");\nconst TRANSACTION_DOMAIN_TAG = rightPaddedHexBuffer(_onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(\"FLOW-V0.0-transaction\").toString(\"hex\"), 32).toString(\"hex\");\nconst prependTransactionDomainTag = tx => TRANSACTION_DOMAIN_TAG + tx;\nconst addressBuffer = addr => leftPaddedHexBuffer(addr, 8);\nconst blockBuffer = block => leftPaddedHexBuffer(block, 32);\nconst argumentToString = arg => _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(JSON.stringify(arg), \"utf8\");\nconst scriptBuffer = script => _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(script, \"utf8\");\nconst signatureBuffer = signature => _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(signature, \"hex\");\nconst rlpEncode = v => {\n  return (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.encode)(v).toString(\"hex\");\n};\nconst sha3_256 = msg => {\n  const sha = new sha3__WEBPACK_IMPORTED_MODULE_8__.SHA3(256);\n  sha.update(_onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(msg, \"hex\"));\n  return sha.digest().toString(\"hex\");\n};\nconst preparePayload = tx => {\n  validatePayload(tx);\n  return [scriptBuffer(tx.cadence || \"\"), tx.arguments.map(argumentToString), blockBuffer(tx.refBlock || \"\"), tx.computeLimit, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(tx.proposalKey.address || \"\")), tx.proposalKey.keyId, tx.proposalKey.sequenceNum, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(tx.payer)), tx.authorizers.map(authorizer => addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(authorizer)))];\n};\nconst prepareEnvelope = tx => {\n  validateEnvelope(tx);\n  return [preparePayload(tx), preparePayloadSignatures(tx)];\n};\nconst preparePayloadSignatures = tx => {\n  const signers = collectSigners(tx);\n  return tx.payloadSigs?.map(sig => {\n    return {\n      signerIndex: signers.get((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(sig.address)) || \"\",\n      keyId: sig.keyId,\n      sig: sig.sig\n    };\n  }).sort((a, b) => {\n    if (a.signerIndex > b.signerIndex) return 1;\n    if (a.signerIndex < b.signerIndex) return -1;\n    if (a.keyId > b.keyId) return 1;\n    if (a.keyId < b.keyId) return -1;\n    return 0;\n  }).map(sig => {\n    return [sig.signerIndex, sig.keyId, signatureBuffer(sig.sig)];\n  });\n};\nconst collectSigners = tx => {\n  const signers = new Map();\n  let i = 0;\n  const addSigner = addr => {\n    if (!signers.has(addr)) {\n      signers.set(addr, i);\n      i++;\n    }\n  };\n  if (tx.proposalKey.address) {\n    addSigner(tx.proposalKey.address);\n  }\n  addSigner(tx.payer);\n  tx.authorizers.forEach(addSigner);\n  return signers;\n};\nconst prepareVoucher = voucher => {\n  validateVoucher(voucher);\n  const signers = collectSigners(voucher);\n  const prepareSigs = sigs => {\n    return sigs.map(_ref => {\n      let {\n        address,\n        keyId,\n        sig\n      } = _ref;\n      return {\n        signerIndex: signers.get((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(address)) || \"\",\n        keyId,\n        sig\n      };\n    }).sort((a, b) => {\n      if (a.signerIndex > b.signerIndex) return 1;\n      if (a.signerIndex < b.signerIndex) return -1;\n      if (a.keyId > b.keyId) return 1;\n      if (a.keyId < b.keyId) return -1;\n      return 0;\n    }).map(sig => {\n      return [sig.signerIndex, sig.keyId, signatureBuffer(sig.sig)];\n    });\n  };\n  return [[scriptBuffer(voucher.cadence), voucher.arguments.map(argumentToString), blockBuffer(voucher.refBlock), voucher.computeLimit, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(voucher.proposalKey.address)), voucher.proposalKey.keyId, voucher.proposalKey.sequenceNum, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(voucher.payer)), voucher.authorizers.map(authorizer => addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(authorizer)))], prepareSigs(voucher.payloadSigs), prepareSigs(voucher.envelopeSigs)];\n};\nconst validatePayload = tx => {\n  payloadFields.forEach(field => checkField(tx, field));\n  proposalKeyFields.forEach(field => checkField(tx.proposalKey, field, \"proposalKey\"));\n};\nconst validateEnvelope = tx => {\n  payloadSigsFields.forEach(field => checkField(tx, field));\n  tx.payloadSigs?.forEach((sig, index) => {\n    payloadSigFields.forEach(field => checkField(sig, field, \"payloadSigs\", index));\n  });\n};\nconst validateVoucher = voucher => {\n  payloadFields.forEach(field => checkField(voucher, field));\n  proposalKeyFields.forEach(field => checkField(voucher.proposalKey, field, \"proposalKey\"));\n  payloadSigsFields.forEach(field => checkField(voucher, field));\n  voucher.payloadSigs.forEach((sig, index) => {\n    payloadSigFields.forEach(field => checkField(sig, field, \"payloadSigs\", index));\n  });\n  envelopeSigsFields.forEach(field => checkField(voucher, field));\n  voucher.envelopeSigs.forEach((sig, index) => {\n    envelopeSigFields.forEach(field => checkField(sig, field, \"envelopeSigs\", index));\n  });\n};\nconst isNumber = v => typeof v === \"number\";\nconst isString = v => typeof v === \"string\";\nconst isObject = v => v !== null && typeof v === \"object\";\nconst isArray = v => isObject(v) && v instanceof Array;\nconst payloadFields = [{\n  name: \"cadence\",\n  check: isString\n}, {\n  name: \"arguments\",\n  check: isArray\n}, {\n  name: \"refBlock\",\n  check: isString,\n  defaultVal: \"0\"\n}, {\n  name: \"computeLimit\",\n  check: isNumber\n}, {\n  name: \"proposalKey\",\n  check: isObject\n}, {\n  name: \"payer\",\n  check: isString\n}, {\n  name: \"authorizers\",\n  check: isArray\n}];\nconst proposalKeyFields = [{\n  name: \"address\",\n  check: isString\n}, {\n  name: \"keyId\",\n  check: isNumber\n}, {\n  name: \"sequenceNum\",\n  check: isNumber\n}];\nconst payloadSigsFields = [{\n  name: \"payloadSigs\",\n  check: isArray\n}];\nconst payloadSigFields = [{\n  name: \"address\",\n  check: isString\n}, {\n  name: \"keyId\",\n  check: isNumber\n}, {\n  name: \"sig\",\n  check: isString\n}];\nconst envelopeSigsFields = [{\n  name: \"envelopeSigs\",\n  check: isArray\n}];\nconst envelopeSigFields = [{\n  name: \"address\",\n  check: isString\n}, {\n  name: \"keyId\",\n  check: isNumber\n}, {\n  name: \"sig\",\n  check: isString\n}];\nconst checkField = (obj, field, base, index) => {\n  const {\n    name,\n    check,\n    defaultVal\n  } = field;\n  if (obj[name] == null && defaultVal != null) obj[name] = defaultVal;\n  if (obj[name] == null) throw missingFieldError(name, base, index);\n  if (!check(obj[name])) throw invalidFieldError(name, base, index);\n};\nconst printFieldName = (field, base, index) => {\n  if (!!base) return index == null ? `${base}.${field}` : `${base}.${index}.${field}`;\n  return field;\n};\nconst missingFieldError = (field, base, index) => new Error(`Missing field ${printFieldName(field, base, index)}`);\nconst invalidFieldError = (field, base, index) => new Error(`Invalid field ${printFieldName(field, base, index)}`);\n\n/**\n * Identifies signers for the transaction payload (authorizers + proposer, excluding payer).\n *\n * This function determines which accounts need to sign the transaction payload. Payload signers include\n * all authorizers and the proposer, but exclude the payer (who signs the envelope).\n *\n * @param ix The interaction object\n * @returns Array of account tempIds that need to sign the payload\n *\n * @example\n * import { findInsideSigners, initInteraction } from \"@onflow/sdk\"\n *\n * const interaction = initInteraction();\n * // Assume we have account tempIds: \"proposer-123\", \"auth-456\", \"payer-789\"\n * interaction.proposer = \"proposer-123\";\n * interaction.authorizations = [\"auth-456\"];\n * interaction.payer = \"payer-789\";\n *\n * const insideSigners = findInsideSigners(interaction);\n * console.log(insideSigners); // [\"auth-456\", \"proposer-123\"]\n * // Note: payer is excluded from payload signers\n */\nfunction findInsideSigners(ix) {\n  // Inside Signers Are: (authorizers + proposer) - payer\n  let inside = new Set(ix.authorizations);\n  if (ix.proposer) {\n    inside.add(ix.proposer);\n  }\n  if (Array.isArray(ix.payer)) {\n    ix.payer.forEach(p => inside.delete(p));\n  } else {\n    inside.delete(ix.payer);\n  }\n  return Array.from(inside);\n}\n\n/**\n * Identifies signers for the transaction envelope (payer accounts only).\n *\n * This function determines which accounts need to sign the transaction envelope. Envelope signers\n * are only the payer accounts, who are responsible for transaction fees.\n *\n * @param ix The interaction object\n * @returns Array of account tempIds that need to sign the envelope\n *\n * @example\n * import { findOutsideSigners, initInteraction } from \"@onflow/sdk\"\n *\n * const interaction = initInteraction();\n * interaction.proposer = \"proposer-123\";\n * interaction.authorizations = [\"auth-456\"];\n * interaction.payer = \"payer-789\";\n *\n * const outsideSigners = findOutsideSigners(interaction);\n * console.log(outsideSigners); // [\"payer-789\"]\n * // Only the payer signs the envelope\n *\n * // Multiple payers example\n * interaction.payer = [\"payer-789\", \"payer-abc\"];\n * const multiplePayerSigners = findOutsideSigners(interaction);\n * console.log(multiplePayerSigners); // [\"payer-789\", \"payer-abc\"]\n */\nfunction findOutsideSigners(ix) {\n  // Outside Signers Are: (payer)\n  let outside = new Set(Array.isArray(ix.payer) ? ix.payer : [ix.payer]);\n  return Array.from(outside);\n}\n\n/**\n * Creates a signable voucher object from an interaction for signing purposes.\n *\n * A voucher is a standardized representation of a transaction that contains all the necessary\n * information for signing and submitting to the Flow network. This function transforms an\n * interaction object into a voucher format.\n *\n * @param ix The interaction object containing transaction details\n * @returns A voucher object containing all transaction data and signatures\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { createSignableVoucher } from \"@onflow/sdk\"\n *\n * // Build a transaction interaction\n * const interaction = await fcl.build([\n *   fcl.transaction`\n *     transaction(amount: UFix64) {\n *       prepare(account: AuthAccount) {\n *         log(amount)\n *       }\n *     }\n *   `,\n *   fcl.args([fcl.arg(\"10.0\", fcl.t.UFix64)]),\n *   fcl.proposer(proposerAuthz),\n *   fcl.payer(payerAuthz),\n *   fcl.authorizations([authorizerAuthz]),\n *   fcl.limit(100)\n * ]);\n *\n * // Create a voucher for signing\n * const voucher = createSignableVoucher(interaction);\n * console.log(voucher.cadence); // The Cadence script\n * console.log(voucher.arguments); // The transaction arguments\n * console.log(voucher.proposalKey); // Proposer account details\n * console.log(voucher.authorizers); // List of authorizer addresses\n *\n * // The voucher can now be signed and submitted\n */\nconst createSignableVoucher = ix => {\n  const buildAuthorizers = () => {\n    const authorizations = ix.authorizations.map(cid => (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(ix.accounts[cid].addr)).reduce((prev, current) => {\n      return prev.find(item => item === current) ? prev : [...prev, current];\n    }, []);\n    return authorizations;\n  };\n  const buildInsideSigners = () => findInsideSigners(ix).map(id => ({\n    address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(ix.accounts[id].addr),\n    keyId: ix.accounts[id].keyId,\n    sig: ix.accounts[id].signature\n  }));\n  const buildOutsideSigners = () => findOutsideSigners(ix).map(id => ({\n    address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(ix.accounts[id].addr),\n    keyId: ix.accounts[id].keyId,\n    sig: ix.accounts[id].signature\n  }));\n  const proposalKey = ix.proposer ? {\n    address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(ix.accounts[ix.proposer].addr),\n    keyId: ix.accounts[ix.proposer].keyId,\n    sequenceNum: ix.accounts[ix.proposer].sequenceNum\n  } : {};\n  return {\n    cadence: ix.message.cadence,\n    refBlock: ix.message.refBlock || null,\n    computeLimit: ix.message.computeLimit,\n    arguments: ix.message.arguments.map(id => ix.arguments[id].asArgument),\n    proposalKey,\n    payer: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr),\n    authorizers: buildAuthorizers(),\n    payloadSigs: buildInsideSigners(),\n    envelopeSigs: buildOutsideSigners()\n  };\n};\n\n/**\n * Converts a voucher object to a transaction ID.\n *\n * This function computes the transaction ID by encoding and hashing the voucher.\n * The transaction ID can be used to track the transaction status on the Flow network.\n *\n * @param voucher The voucher object to convert\n * @returns A transaction ID string\n *\n * @example\n * import { voucherToTxId, createSignableVoucher } from \"@onflow/sdk\"\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Create a voucher from an interaction\n * const interaction = await fcl.build([\n *   fcl.transaction`\n *     transaction {\n *       prepare(account: AuthAccount) {\n *         log(\"Hello, Flow!\")\n *       }\n *     }\n *   `,\n *   fcl.proposer(authz),\n *   fcl.payer(authz),\n *   fcl.authorizations([authz])\n * ]);\n *\n * const voucher = createSignableVoucher(interaction);\n *\n * // Calculate the transaction ID\n * const txId = voucherToTxId(voucher);\n * console.log(\"Transaction ID:\", txId);\n * // Returns something like: \"a1b2c3d4e5f6789...\"\n *\n * // You can use this ID to track the transaction\n * const txStatus = await fcl.tx(txId).onceSealed();\n * console.log(\"Transaction status:\", txStatus);\n */\nconst voucherToTxId = voucher => {\n  return encodeTxIdFromVoucher(voucher);\n};\n\nconst MAX_DEPTH_LIMIT = 5;\nconst idof$1 = acct => `${(0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(acct.addr)}-${acct.keyId}`;\nconst isFn = v => v && (Object.prototype.toString.call(v) === \"[object Function]\" || \"function\" === typeof v || v instanceof Function);\nconst genAccountId = function () {\n  for (var _len = arguments.length, ids = new Array(_len), _key = 0; _key < _len; _key++) {\n    ids[_key] = arguments[_key];\n  }\n  return ids.join(\"-\");\n};\nvar ROLES = /*#__PURE__*/function (ROLES) {\n  ROLES[\"PAYER\"] = \"payer\";\n  ROLES[\"PROPOSER\"] = \"proposer\";\n  ROLES[\"AUTHORIZATIONS\"] = \"authorizations\";\n  return ROLES;\n}(ROLES || {});\nfunction debug$1() {\n  const SPACE = \" \";\n  const SPACE_COUNT_PER_INDENT = 4;\n  const DEBUG_MESSAGE = [];\n  return [function () {\n    let msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    DEBUG_MESSAGE.push(Array(indent * SPACE_COUNT_PER_INDENT).fill(SPACE).join(\"-\") + msg);\n  }, function () {\n    return DEBUG_MESSAGE.reduce((prev, curr) => prev + \"\\n\" + curr);\n  }];\n}\nfunction recurseFlatMap(el) {\n  let depthLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  if (depthLimit <= 0) return el;\n  if (!Array.isArray(el)) return el;\n  return recurseFlatMap(el.flatMap(e => e), depthLimit - 1);\n}\n\n/**\n * Builds a pre-signable object containing interaction data before signing.\n *\n * @param acct The account to create the pre-signable for\n * @param ix The interaction object containing transaction details\n * @returns A pre-signable object conforming to the FCL pre-signable standard\n */\nfunction buildPreSignable(acct, ix) {\n  try {\n    return {\n      f_type: \"PreSignable\",\n      f_vsn: \"1.0.1\",\n      roles: acct.role,\n      cadence: ix.message.cadence,\n      args: ix.message.arguments.map(d => ix.arguments[d].asArgument),\n      data: {},\n      interaction: ix,\n      voucher: createSignableVoucher(ix)\n    };\n  } catch (error) {\n    console.error(\"buildPreSignable\", error);\n    throw error;\n  }\n}\nasync function removeUnusedIxAccounts(ix, opts) {\n  const payerTempIds = Array.isArray(ix.payer) ? ix.payer : [ix.payer];\n  const authorizersTempIds = Array.isArray(ix.authorizations) ? ix.authorizations : [ix.authorizations];\n  const proposerTempIds = ix.proposer === null ? [] : Array.isArray(ix.proposer) ? ix.proposer : [ix.proposer];\n  const ixAccountKeys = Object.keys(ix.accounts);\n  const uniqueTempIds = [...new Set(payerTempIds.concat(authorizersTempIds, proposerTempIds))];\n  for (const ixAccountKey of ixAccountKeys) {\n    if (!uniqueTempIds.find(id => id === ixAccountKey)) {\n      delete ix.accounts[ixAccountKey];\n    }\n  }\n}\nfunction addAccountToIx(ix, newAccount) {\n  if (typeof newAccount.addr === \"string\" && (typeof newAccount.keyId === \"number\" || typeof newAccount.keyId === \"string\")) {\n    newAccount.tempId = idof$1(newAccount);\n  } else {\n    newAccount.tempId = newAccount.tempId || (0,uuid__WEBPACK_IMPORTED_MODULE_11__[\"default\"])();\n  }\n  const existingAccount = ix.accounts[newAccount.tempId] || newAccount;\n  if (!ix.accounts[newAccount.tempId]) {\n    ix.accounts[newAccount.tempId] = newAccount;\n  }\n  ix.accounts[newAccount.tempId].role.proposer = existingAccount.role.proposer || newAccount.role.proposer;\n  ix.accounts[newAccount.tempId].role.payer = existingAccount.role.payer || newAccount.role.payer;\n  ix.accounts[newAccount.tempId].role.authorizer = existingAccount.role.authorizer || newAccount.role.authorizer;\n  return ix.accounts[newAccount.tempId];\n}\nfunction uniqueAccountsFlatMap(accounts) {\n  const flatMapped = recurseFlatMap(accounts);\n  const seen = new Set();\n  const uniqueAccountsFlatMapped = flatMapped.map(account => {\n    const accountId = genAccountId(account.tempId, account.role.payer, account.role.proposer, account.role.authorizer, account.role.param);\n    if (seen.has(accountId)) return null;\n    seen.add(accountId);\n    return account;\n  }).filter(e => e !== null);\n  return uniqueAccountsFlatMapped;\n}\n\n// Resolve single account, returns new account tempIds (if they exist)\nasync function resolveSingleAccount(ix, currentAccountTempId) {\n  let depthLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MAX_DEPTH_LIMIT;\n  let {\n    debugLogger\n  } = arguments.length > 3 ? arguments[3] : undefined;\n  if (depthLimit <= 0) {\n    throw new Error(`recurseResolveAccount Error: Depth limit (${MAX_DEPTH_LIMIT}) reached. Ensure your authorization functions resolve to an account after ${MAX_DEPTH_LIMIT} resolves.`);\n  }\n  let account = ix.accounts[currentAccountTempId];\n  if (!account) return [[], false];\n  debugLogger(`account: ${account.tempId}`, Math.max(MAX_DEPTH_LIMIT - depthLimit, 0));\n  if (account?.resolve) {\n    if (isFn(account?.resolve)) {\n      debugLogger(`account: ${account.tempId} -- cache MISS`, Math.max(MAX_DEPTH_LIMIT - depthLimit, 0));\n      const {\n        resolve,\n        ...accountWithoutResolve\n      } = account;\n      let resolvedAccounts = await resolve(accountWithoutResolve, buildPreSignable(accountWithoutResolve, ix));\n      resolvedAccounts = Array.isArray(resolvedAccounts) ? resolvedAccounts : [resolvedAccounts];\n      let flatResolvedAccounts = recurseFlatMap(resolvedAccounts);\n      flatResolvedAccounts = flatResolvedAccounts.map(flatResolvedAccount => addAccountToIx(ix, flatResolvedAccount));\n      account.resolve = flatResolvedAccounts.map(flatResolvedAccount => flatResolvedAccount.tempId);\n      account = addAccountToIx(ix, account);\n      return [flatResolvedAccounts.map(flatResolvedAccount => flatResolvedAccount.tempId), true];\n    } else {\n      debugLogger(`account: ${account.tempId} -- cache HIT`, Math.max(MAX_DEPTH_LIMIT - depthLimit, 0));\n      return [account.resolve, false];\n    }\n  }\n  return [account.tempId ? [account.tempId] : [], false];\n}\nconst getAccountTempIDs = rawTempIds => {\n  if (rawTempIds === null) {\n    return [];\n  }\n  return Array.isArray(rawTempIds) ? rawTempIds : [rawTempIds];\n};\nasync function replaceRoles(ix, oldAccountTempId, newAccounts) {\n  // Replace roles in the interaction with any resolved accounts\n  // e.g. payer -> [oldAccountTempId, anotherId] => payer -> [newAccountTempId, anotherId]\n  for (let role of Object.values(ROLES)) {\n    if (role === ROLES.AUTHORIZATIONS || role === ROLES.PAYER) {\n      ix[role] = getAccountTempIDs(ix[role]).reduce((acc, acctTempId) => {\n        if (acctTempId === oldAccountTempId) {\n          return acc.concat(...newAccounts.filter(x => {\n            return role === ROLES.PAYER && x.role.payer || role === ROLES.AUTHORIZATIONS && x.role.authorizer;\n          }).map(acct => acct.tempId));\n        }\n        return acc.concat(acctTempId);\n      }, []);\n    } else if (role === ROLES.PROPOSER) {\n      const proposerAccts = newAccounts.filter(x => x.role.proposer);\n      if (proposerAccts.length > 1) {\n        throw new Error(`replaceRoles Error: Multiple proposer keys were resolved, but only one is allowed`);\n      }\n      ix[role] = proposerAccts[0]?.tempId ?? ix[role];\n    }\n  }\n}\nasync function resolveAccountsByIds(ix, accountTempIds) {\n  let depthLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MAX_DEPTH_LIMIT;\n  let {\n    debugLogger\n  } = arguments.length > 3 ? arguments[3] : undefined;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(ix && typeof ix === \"object\", \"resolveAccountType Error: ix not defined\");\n  let newTempIds = new Set();\n  for (let accountId of accountTempIds) {\n    let account = ix.accounts[accountId];\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(Boolean(account), `resolveAccountType Error: account not found`);\n    const [resolvedAccountTempIds, foundNewAccounts] = await resolveSingleAccount(ix, accountId, depthLimit, {\n      debugLogger\n    });\n\n    // If new accounts were resolved, add them to the set so they can be explored next iteration\n    if (foundNewAccounts) {\n      const resolvedAccounts = resolvedAccountTempIds.map(resolvedAccountTempId => ix.accounts[resolvedAccountTempId]);\n      const flatResolvedAccounts = uniqueAccountsFlatMap(resolvedAccounts);\n\n      // Add new tempIds to the set so they can be used next iteration\n      flatResolvedAccounts.forEach(x => newTempIds.add(x.tempId));\n\n      // Update any roles in the interaction based on the new accounts\n      replaceRoles(ix, accountId, flatResolvedAccounts);\n    }\n  }\n\n  // Ensure all payers are of the same account\n  let payerAddress;\n  for (const payerTempID of ix[ROLES.PAYER]) {\n    let pAcct = ix.accounts[payerTempID];\n    if (!payerAddress) payerAddress = pAcct.addr;else if (payerAddress !== pAcct.addr) {\n      throw new Error(\"resolveAccountType Error: payers from different accounts detected\");\n    }\n  }\n  return newTempIds;\n}\n\n/**\n * Resolves account authorization functions and validates account configurations for transactions.\n *\n * @param ix The interaction object containing accounts to resolve\n * @param opts Configuration options for resolution\n * @returns The interaction with resolved accounts\n */\nasync function resolveAccounts(ix) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (isTransaction(ix)) {\n    if (!Array.isArray(ix.payer)) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n        pkg: \"FCL\",\n        subject: '\"ix.payer\" must be an array. Support for ix.payer as a singular',\n        message: \"See changelog for more info.\"\n      });\n    }\n    let [debugLogger, getDebugMessage] = debug$1();\n    try {\n      // BFS, resolving one level of accounts at a time\n      let depthLimit = MAX_DEPTH_LIMIT;\n      let frontier = new Set([...getAccountTempIDs(ix[ROLES.PAYER]), ...getAccountTempIDs(ix[ROLES.PROPOSER]), ...getAccountTempIDs(ix[ROLES.AUTHORIZATIONS])]);\n      while (frontier.size > 0) {\n        if (depthLimit <= 0) {\n          throw new Error(`resolveAccounts Error: Depth limit (${MAX_DEPTH_LIMIT}) reached. Ensure your authorization functions resolve to an account after ${MAX_DEPTH_LIMIT} resolves.`);\n        }\n        frontier = await resolveAccountsByIds(ix, frontier, depthLimit, {\n          debugLogger\n        });\n        depthLimit--;\n      }\n      await removeUnusedIxAccounts(ix, {\n        debugLogger\n      });\n\n      // Ensure at least one account for each role is resolved (except for authorizations)\n      for (const role of Object.values(ROLES)) {\n        (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(getAccountTempIDs(ix[role]).length > 0 || role === ROLES.AUTHORIZATIONS, `resolveAccountType Error: no accounts for role \"${role}\" found`);\n      }\n      if (opts.enableDebug) {\n        console.debug(getDebugMessage());\n      }\n    } catch (error) {\n      console.error(\"=== SAD PANDA ===\\n\\n\", error, \"\\n\\n=== SAD PANDA ===\");\n      throw error;\n    }\n  }\n  return ix;\n}\n\n/**\n * Resolves signatures for a transaction by coordinating the signing process for inside and outside signers.\n *\n * @param ix The interaction object containing transaction details\n * @returns The interaction object with resolved signatures\n */\nasync function resolveSignatures(ix) {\n  if (isTransaction(ix)) {\n    try {\n      let insideSigners = findInsideSigners(ix);\n      const insidePayload = encodeTransactionPayload(prepForEncoding(ix));\n\n      // Promise.all could potentially break the flow if there are multiple inside signers trying to resolve at the same time\n      // causing multiple triggers of authz function that tries to render multiple auth iiframes/tabs/extensions\n      // as an alternative, use this:\n      // for(const insideSigner of insideSigners) {\n      //   await fetchSignature(ix, insidePayload)(insideSigner);\n      // }\n      await Promise.all(insideSigners.map(fetchSignature(ix, insidePayload)));\n      let outsideSigners = findOutsideSigners(ix);\n      const outsidePayload = encodeTransactionEnvelope({\n        ...prepForEncoding(ix),\n        payloadSigs: insideSigners.map(id => ({\n          address: ix.accounts[id].addr || \"\",\n          keyId: ix.accounts[id].keyId || 0,\n          sig: ix.accounts[id].signature || \"\"\n        }))\n      });\n\n      // Promise.all could potentially break the flow if there are multiple outside signers trying to resolve at the same time\n      // causing multiple triggers of authz function that tries to render multiple auth iframes/tabs/extensions\n      // as an alternative, use this:\n      // for(const outsideSigner of outsideSigners) {\n      //   await fetchSignature(ix, outsidePayload)(outsideSigner);\n      // }\n      await Promise.all(outsideSigners.map(fetchSignature(ix, outsidePayload)));\n    } catch (error) {\n      console.error(\"Signatures\", error, {\n        ix\n      });\n      throw error;\n    }\n  }\n  return ix;\n}\nfunction fetchSignature(ix, payload) {\n  return async function innerFetchSignature(id) {\n    const acct = ix.accounts[id];\n    if (acct.signature != null && acct.signature !== undefined) return;\n    const {\n      signature\n    } = await acct.signingFunction(buildSignable(acct, payload, ix));\n    ix.accounts[id].signature = signature;\n  };\n}\n\n/**\n * Builds a signable object that can be signed by an authorization function.\n *\n * @param acct The account to create the signable for\n * @param message The encoded message to be signed\n * @param ix The interaction object containing transaction details\n * @returns A signable object conforming to the FCL signable standard\n */\nfunction buildSignable(acct, message, ix) {\n  try {\n    return {\n      f_type: \"Signable\",\n      f_vsn: \"1.0.1\",\n      message,\n      addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(acct.addr),\n      keyId: acct.keyId,\n      roles: acct.role,\n      cadence: ix.message.cadence,\n      args: ix.message.arguments.map(d => ix.arguments[d].asArgument),\n      data: {},\n      interaction: ix,\n      voucher: createSignableVoucher(ix)\n    };\n  } catch (error) {\n    console.error(\"buildSignable\", error);\n    throw error;\n  }\n}\nfunction prepForEncoding(ix) {\n  const payerAddress = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)((Array.isArray(ix.payer) ? ix.accounts[ix.payer[0]] : ix.accounts[ix.payer]).addr || \"\");\n  const proposalKey = ix.proposer ? {\n    address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(ix.accounts[ix.proposer].addr) || \"\",\n    keyId: ix.accounts[ix.proposer].keyId || 0,\n    sequenceNum: ix.accounts[ix.proposer].sequenceNum || 0\n  } : {};\n  return {\n    cadence: ix.message.cadence,\n    refBlock: ix.message.refBlock,\n    computeLimit: ix.message.computeLimit,\n    arguments: ix.message.arguments.map(id => ix.arguments[id].asArgument),\n    proposalKey,\n    payer: payerAddress,\n    authorizers: ix.authorizations.map(cid => (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(ix.accounts[cid].addr) || \"\").reduce((prev, current) => {\n      return prev.find(item => item === current) ? prev : [...prev, current];\n    }, [])\n  };\n}\n\n/**\n * Executes validator functions that have been attached to an interaction to perform validation checks.\n *\n * @param ix The interaction object containing validators to execute\n * @returns The interaction after running all validators\n */\nasync function resolveValidators(ix) {\n  const validators = get(ix, \"ix.validators\", []);\n  return pipe(ix, validators.map(cb => ix => cb(ix, {\n    Ok,\n    Bad\n  })));\n}\n\n/**\n * Normalizes account addresses by removing the \"0x\" prefix from all account addresses in the interaction.\n *\n * @param ix The interaction object to normalize\n * @returns The interaction with normalized account addresses\n */\nasync function resolveFinalNormalization(ix) {\n  for (let key of Object.keys(ix.accounts)) {\n    ix.accounts[key].addr = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(ix.accounts[key].addr);\n  }\n  return ix;\n}\n\n/**\n * Resolves voucher intercept functions by calling them with the current voucher.\n *\n * @param ix The interaction object to resolve voucher intercepts for\n * @returns The interaction after voucher intercept processing\n */\nasync function resolveVoucherIntercept(ix) {\n  const fn = get(ix, \"ix.voucher-intercept\");\n  if (isFn$3(fn)) {\n    await fn(createSignableVoucher(ix));\n  }\n  return ix;\n}\n\nfunction createResolveComputeLimit(context) {\n  return async function resolveComputeLimit(ix) {\n    if (isTransaction(ix)) {\n      ix.message.computeLimit = ix.message.computeLimit || context.computeLimit;\n    }\n    return ix;\n  };\n}\n\nconst noop = v => v;\nconst debug = function (key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  return async ix => {\n    const accts = ix => [\"\\nAccounts:\", {\n      proposer: ix.proposer,\n      authorizations: ix.authorizations,\n      payer: ix.payer\n    }, \"\\n\\nDetails:\", ix.accounts].filter(Boolean);\n    const log = function () {\n      for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n        msg[_key] = arguments[_key];\n      }\n      console.log(`debug[${key}] ---\\n`, ...msg, \"\\n\\n\\n---\");\n    };\n    if (await _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.get(`debug.${key}`)) await fn(ix, log, accts);\n    return ix;\n  };\n};\nfunction createResolve(context) {\n  const resolve = async ix => pipe([createResolveCadence(context), debug(\"cadence\", (ix, log) => log(ix.message.cadence)), createResolveComputeLimit(context), debug(\"compute limit\", (ix, log) => log(ix.message.computeLimit)), resolveArguments, debug(\"arguments\", (ix, log) => log(ix.message.arguments, ix.message)), resolveAccounts, debug(\"accounts\", (ix, log, accts) => log(...accts(ix))), /* special */createExecFetchRef(context), /* special */createExecFetchSequenceNumber(context), resolveSignatures, debug(\"signatures\", (ix, log, accts) => log(...accts(ix))), resolveFinalNormalization, resolveValidators, resolveVoucherIntercept, debug(\"resolved\", (ix, log) => log(ix))])(ix);\n  return resolve;\n}\n\n/**\n * Resolves an interaction by applying a series of resolvers in sequence.\n *\n * This is the main resolver function that takes a built interaction and prepares it\n * for submission to the Flow blockchain by applying all necessary resolvers.\n *\n * The resolve function uses a pipeline approach, applying each resolver in sequence\n * to transform the interaction from its initial built state to a fully resolved state\n * ready for transmission to the Flow Access API.\n *\n * @param interaction The interaction object to resolve\n * @returns A promise that resolves to the fully resolved interaction\n * @example\n * import { resolve, build, script } from \"@onflow/sdk\"\n *\n * const interaction = await build([\n *   script`\n *     access(all) fun main(): String {\n *       return \"Hello, World!\"\n *     }\n *   `\n * ])\n *\n * const resolved = await resolve(interaction)\n */\nconst resolve = /* @__PURE__ */withGlobalContext(createResolve);\nfunction createExecFetchRef(context) {\n  return async function execFetchRef(ix) {\n    if (isTransaction(ix) && ix.message.refBlock == null) {\n      const sendFn = context.transport.send;\n      ix.message.refBlock = (await sendFn(build([getBlock()]), {\n        response,\n        Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer,\n        ix: ixModule\n      }, {\n        get node() {\n          return context.accessNodeUrl;\n        }\n      }).then(decodeResponse)).id;\n    }\n    return ix;\n  };\n}\nfunction createExecFetchSequenceNumber(context) {\n  return async function execFetchSequenceNumber(ix) {\n    if (isTransaction(ix)) {\n      var acct = Object.values(ix.accounts).find(a => a.role.proposer);\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(acct !== undefined, `Transactions require a proposer`);\n      if (acct && acct.sequenceNum == null) {\n        const sendFn = context.transport.send;\n        ix.accounts[acct.tempId].sequenceNum = await sendFn(await build([getAccount(acct.addr)]), {\n          response,\n          Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer,\n          ix: ixModule\n        }, {\n          get node() {\n            return context.accessNodeUrl;\n          }\n        }).then(decodeResponse).then(acctResponse => acctResponse.keys).then(keys => keys.find(key => key.index === acct.keyId)).then(key => key.sequenceNumber);\n      }\n    }\n    return ix;\n  };\n}\n\nfunction createSend(context) {\n  async function send() {\n    let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const transport = opts.transport || context.transport;\n    const sendFn = transport.send?.bind?.(transport);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!!sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n    const resolveFn = opts.resolve || context.customResolver || createResolve(context);\n    opts.node = opts.node || context.accessNodeUrl;\n    if (Array.isArray(args)) args = pipe(initInteraction(), args);\n    return sendFn(await resolveFn(args), {\n      response,\n      ix: ixModule,\n      Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer\n    }, opts);\n  }\n  return send;\n}\n\n/**\n * Sends arbitrary scripts, transactions, and requests to Flow.\n *\n * This method consumes an array of builders that are to be resolved and sent. The builders required to be included in the array depend on the interaction that is being built.\n *\n * WARNING: Must be used in conjunction with 'fcl.decode(response)' to get back correct keys and all values in JSON.\n *\n * @param args An array of builders (functions that take an interaction object and return a new interaction object)\n * @param opts Additional optional options for the request\n * @param opts.node Custom node endpoint to use for this request\n * @param opts.resolve Custom resolve function to use for processing the interaction\n * @returns A promise that resolves to a ResponseObject containing the data returned from the chain. Should always be decoded with fcl.decode() to get back appropriate JSON keys and values.\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // a script only needs to resolve the arguments to the script\n * const response = await fcl.send([fcl.script`${script}`, fcl.args(args)]);\n * // note: response values are encoded, call await fcl.decode(response) to get JSON\n *\n * // a transaction requires multiple 'builders' that need to be resolved prior to being sent to the chain - such as setting the authorizations.\n * const response = await fcl.send([\n *   fcl.transaction`\n *     ${transaction}\n *   `,\n *   fcl.args(args),\n *   fcl.proposer(proposer),\n *   fcl.authorizations(authorizations),\n *   fcl.payer(payer),\n *   fcl.limit(9999)\n * ]);\n * // note: response contains several values\n */\nconst send = /* @__PURE__ */withGlobalContext(createSend);\n\nfunction createSubscribeRawAsync(contextPromise) {\n  /**\n   * Subscribe to a topic without decoding the data.\n   * @param params - The parameters for the subscription.\n   * @param opts - Additional options for the subscription.\n   * @returns A promise that resolves once the subscription is active.\n   */\n  function subscribeRaw(_ref) {\n    let {\n      topic,\n      args,\n      onData,\n      onError\n    } = _ref;\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    async function subscribe() {\n      try {\n        const context = await contextPromise;\n        const transport = opts.transport || context.transport;\n        const node = opts.node || context.accessNodeUrl;\n        (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!!node, `SDK Send Error: Either opts.node or \"accessNode.api\" in config must be defined.`);\n\n        // Subscribe using the resolved transport\n        return transport.subscribe({\n          topic,\n          args,\n          onData,\n          onError\n        }, {\n          node,\n          ...opts\n        });\n      } catch (e) {\n        onError(e instanceof Error ? e : new Error(String(e)));\n        return;\n      }\n    }\n    let subscriptionPromise = subscribe();\n    return {\n      unsubscribe: () => {\n        subscriptionPromise.then(sub => sub?.unsubscribe?.());\n      }\n    };\n  }\n  return subscribeRaw;\n}\nfunction createSubscribeRaw(context) {\n  return createSubscribeRawAsync(context);\n}\n\n/**\n * Subscribe to a topic without decoding the data.\n *\n * This function creates a raw subscription to Flow blockchain data streams without automatic decoding.\n * It's useful when you need more control over data processing or want to handle raw responses directly.\n * For most use cases, consider using the `subscribe()` function instead which provides automatic decoding.\n *\n * Available topics include: `events`, `blocks`, `block_headers`, `block_digests`, `transaction_statuses`, `account_statuses`.\n *\n * @param params The parameters for the subscription including topic, arguments, and callbacks\n * @param params.topic The subscription topic (e.g., 'events', 'blocks', 'transaction_statuses')\n * @param params.args Parameters specific to the topic (e.g., event types, block height, transaction ID)\n * @param params.onData Callback function called with raw data when new messages are received\n * @param params.onError Callback function called if an error occurs during the subscription\n * @param opts Additional options for the subscription\n * @param opts.node Custom node endpoint to be used for the subscription\n * @param opts.transport Custom transport implementation for handling the connection\n * @returns A subscription object with an unsubscribe method\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { SubscriptionTopic } from \"@onflow/sdk\";\n *\n * // Subscribe to raw event data without automatic decoding\n * const rawSubscription = fcl.subscribeRaw({\n *   topic: SubscriptionTopic.EVENTS,\n *   args: {\n *     eventTypes: [\"A.7e60df042a9c0868.FlowToken.TokensWithdrawn\"]\n *   },\n *   onData: (rawData) => {\n *     console.log(\"Raw event data:\", rawData);\n *     // Handle raw data manually - no automatic decoding\n *   },\n *   onError: (error) => {\n *     console.error(\"Raw subscription error:\", error);\n *   }\n * });\n *\n * // Subscribe to raw block data\n * const blockSubscription = fcl.subscribeRaw({\n *   topic: SubscriptionTopic.BLOCKS,\n *   args: {\n *     blockStatus: \"finalized\"\n *   },\n *   onData: (rawBlock) => {\n *     console.log(\"Raw block data:\", rawBlock);\n *   },\n *   onError: (error) => {\n *     console.error(\"Error:\", error);\n *   }\n * });\n *\n * // Unsubscribe when done\n * rawSubscription.unsubscribe();\n */\nfunction subscribeRaw(_ref2) {\n  let {\n    topic,\n    args,\n    onData,\n    onError\n  } = _ref2;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const contextPromise = getGlobalContext();\n  return createSubscribeRawAsync(contextPromise)({\n    topic,\n    args,\n    onData,\n    onError\n  }, opts);\n}\n\nfunction createSubscribeAsync(contextPromise) {\n  /**\n   * Subscribe to a topic and decode the data.\n   * @param params - The parameters for the subscription.\n   * @param opts - Additional options for the subscription.\n   * @returns A promise that resolves when the subscription is active.\n   */\n  function subscribe(_ref) {\n    let {\n      topic,\n      args,\n      onData,\n      onError\n    } = _ref;\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const sub = createSubscribeRawAsync(contextPromise)({\n      topic,\n      args,\n      onData: data => {\n        decodeResponse(data).then(onData).catch(e => {\n          onError(new Error(`Failed to decode response: ${e.message}`));\n          sub?.unsubscribe?.();\n        });\n      },\n      onError\n    }, opts);\n    return sub;\n  }\n  return subscribe;\n}\nfunction createSubscribe(context) {\n  return createSubscribeAsync(context);\n}\n\n/**\n * Subscribe to real-time data from the Flow blockchain and automatically decode the responses.\n *\n * This is a utility function used for subscribing to real-time data from the WebSocket Streaming API. Data returned will be automatically decoded via the 'decode' function.\n *\n * Available topics include: `events`, `blocks`, `block_headers`, `block_digests`, `transaction_statuses`, `account_statuses`.\n *\n * @param params The parameters for the subscription including topic, arguments, and callbacks\n * @param params.topic The subscription topic (e.g., 'events', 'blocks', 'transaction_statuses')\n * @param params.args Parameters specific to the topic (e.g., event types, block height, transaction ID)\n * @param params.onData Callback function called with decoded data when new messages are received\n * @param params.onError Callback function called if an error occurs during the subscription\n * @param opts Additional options for the subscription\n * @param opts.node Custom node endpoint to be used for the subscription\n * @param opts.transport Custom transport implementation for handling the connection\n * @returns A subscription object that allows you to manage the subscription (e.g., to unsubscribe later)\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { SubscriptionTopic } from \"@onflow/sdk\";\n *\n * // Subscribe to events\n * const subscription = fcl.subscribe({\n *   topic: SubscriptionTopic.EVENTS,\n *   args: {\n *     eventTypes: [\"A.7e60df042a9c0868.FlowToken.TokensWithdrawn\"]\n *   },\n *   onData: (events) => {\n *     console.log(\"Received events:\", events);\n *   },\n *   onError: (error) => {\n *     console.error(\"Subscription error:\", error);\n *   }\n * });\n *\n * // Subscribe to blocks\n * const blockSubscription = fcl.subscribe({\n *   topic: SubscriptionTopic.BLOCKS,\n *   args: {\n *     blockStatus: \"finalized\"\n *   },\n *   onData: (block) => {\n *     console.log(\"New block:\", block);\n *   },\n *   onError: (error) => {\n *     console.error(\"Block subscription error:\", error);\n *   }\n * });\n *\n * // Later, to unsubscribe:\n * subscription.unsubscribe();\n * blockSubscription.unsubscribe();\n */\nfunction subscribe(_ref2) {\n  let {\n    topic,\n    args,\n    onData,\n    onError\n  } = _ref2;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const contextPromise = getGlobalContext();\n  const sub = createSubscribeRawAsync(contextPromise)({\n    topic,\n    args,\n    onData: data => {\n      decodeResponse(data).then(onData).catch(e => {\n        onError(new Error(`Failed to decode response: ${e.message}`));\n        sub?.unsubscribe?.();\n      });\n    },\n    onError\n  }, opts);\n  return sub;\n}\n\nfunction createDecode(context) {\n  async function decode(response) {\n    return decodeResponse(response, context.customDecoders);\n  }\n  return decode;\n}\n\n/**\n * Decodes the response from 'fcl.send()' into the appropriate JSON representation of any values returned from Cadence code.\n *\n * The response from Flow contains encoded values that need to be decoded into JavaScript types. This function handles that conversion, including complex types like structs, arrays, and dictionaries.\n *\n * @param response Should be the response returned from 'fcl.send([...])'\n * @returns A JSON representation of the raw string response depending on the cadence code executed. The return value can be a single value and type or an object with multiple types.\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Simple script to add 2 numbers\n * const response = await fcl.send([\n *   fcl.script`\n *     access(all) fun main(int1: Int, int2: Int): Int {\n *       return int1 + int2\n *     }\n *   `,\n *   fcl.args([fcl.arg(1, fcl.t.Int), fcl.arg(2, fcl.t.Int)])\n * ]);\n *\n * const decoded = await fcl.decode(response);\n * console.log(decoded); // 3\n * console.log(typeof decoded); // \"number\"\n *\n * // Complex return types\n * const complexResponse = await fcl.send([\n *   fcl.script`\n *     access(all) fun main(): {String: Int} {\n *       return {\"foo\": 1, \"bar\": 2}\n *     }\n *   `\n * ]);\n *\n * const complexDecoded = await fcl.decode(complexResponse);\n * console.log(complexDecoded); // {foo: 1, bar: 2}\n */\nconst decode = /* @__PURE__ */withGlobalContext(createDecode);\n\nconst findPayloadSigners = voucher => {\n  // Payload Signers Are: (authorizers + proposer) - payer\n  const payload = new Set(voucher.authorizers);\n  payload.add(voucher.proposalKey.address);\n  payload.delete(voucher.payer);\n  return Array.from(payload).map(addr => (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(addr));\n};\nconst findEnvelopeSigners = voucher => {\n  // Envelope Signers Are: (payer)\n  const envelope = new Set([voucher.payer]);\n  return Array.from(envelope).map(addr => (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(addr));\n};\nclass UnableToDetermineMessageEncodingTypeForSignerAddress extends Error {\n  constructor(signerAddress) {\n    const msg = `\n        Encode Message From Signable Error: Unable to determine message encoding for signer addresss: ${signerAddress}. \n        Please ensure the address: ${signerAddress} is intended to sign the given transaction as specified by the transaction signable.\n      `.trim();\n    super(msg);\n    this.name = \"Unable To Determine Message Encoding For Signer Addresss\";\n  }\n}\n\n/**\n * Encodes a message from a signable object for a specific signer address.\n *\n * This function determines whether the signer should sign the transaction payload or envelope\n * based on their role in the transaction (authorizer, proposer, or payer), then encodes the\n * appropriate message for signing.\n *\n * Payload signers include authorizers and proposers (but not payers)\n * Envelope signers include only payers\n *\n * The encoded message is what gets signed by the account's private key to create the transaction signature.\n *\n * @param signable The signable object containing transaction data and voucher\n * @param signerAddress The address of the signer to encode the message for\n * @returns An encoded message string suitable for signing with the account's private key\n *\n * @throws {UnableToDetermineMessageEncodingTypeForSignerAddress} When the signer address is not found in authorizers, proposer, or payer roles\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // This function is typically used internally by authorization functions\n * // when implementing custom wallet connectors or signing flows\n *\n * const signable = {\n *   voucher: {\n *     cadence: \"transaction { prepare(acct: AuthAccount) {} }\",\n *     authorizers: [\"0x01\"],\n *     proposalKey: { address: \"0x01\", keyId: 0, sequenceNum: 42 },\n *     payer: \"0x02\",\n *     refBlock: \"a1b2c3\",\n *     computeLimit: 100,\n *     arguments: [],\n *     payloadSigs: []\n *   }\n * };\n *\n * // For an authorizer (payload signer)\n * const authorizerMessage = fcl.encodeMessageFromSignable(signable, \"0x01\");\n * console.log(\"Authorizer signs:\", authorizerMessage);\n *\n * // For a payer (envelope signer)\n * const payerMessage = fcl.encodeMessageFromSignable(signable, \"0x02\");\n * console.log(\"Payer signs:\", payerMessage);\n */\nconst encodeMessageFromSignable = (signable, signerAddress) => {\n  let payloadSigners = findPayloadSigners(signable.voucher);\n  let envelopeSigners = findEnvelopeSigners(signable.voucher);\n  const isPayloadSigner = payloadSigners.includes((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(signerAddress));\n  const isEnvelopeSigner = envelopeSigners.includes((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(signerAddress));\n  if (!isPayloadSigner && !isEnvelopeSigner) {\n    throw new UnableToDetermineMessageEncodingTypeForSignerAddress(signerAddress);\n  }\n  const message = {\n    cadence: signable.voucher.cadence,\n    refBlock: signable.voucher.refBlock,\n    computeLimit: signable.voucher.computeLimit,\n    arguments: signable.voucher.arguments,\n    proposalKey: {\n      ...signable.voucher.proposalKey,\n      address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(signable.voucher.proposalKey.address)\n    },\n    payer: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(signable.voucher.payer),\n    authorizers: signable.voucher.authorizers.map(_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix),\n    payloadSigs: signable.voucher.payloadSigs.map(ps => ({\n      ...ps,\n      address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(ps.address)\n    }))\n  };\n  return isPayloadSigner ? encodeTransactionPayload(message) : encodeTransactionEnvelope(message);\n};\n\n/**\n * A builder function that adds a validator to a transaction.\n *\n * Validators are functions that run during transaction building to check for invalid configurations or parameters.\n * They help catch errors early before submitting transactions to the network, preventing failed transactions\n * and wasted compute costs.\n *\n * @param cb The validator function that takes an interaction and returns it (or throws an error if invalid)\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Custom validator to ensure account has sufficient balance\n * const validateBalance = (ix) => {\n *   if (ix.message.computeLimit > 1000) {\n *     throw new Error(\"Compute limit too high for this account\");\n *   }\n *   return ix;\n * };\n *\n * await fcl.send([\n *   fcl.transaction`\n *     transaction {\n *       prepare(account: AuthAccount) {\n *         // Transaction logic\n *       }\n *     }\n *   `,\n *   fcl.validator(validateBalance),\n *   fcl.limit(500) // This will pass validation\n * ]);\n */\nfunction validator(cb) {\n  return update(\"ix.validators\", validators => Array.isArray(validators) ? [...validators, cb] : [cb]);\n}\n\n/**\n * A builder function that returns a partial interaction to a block at a specific height.\n *\n * Use with other interactions like 'fcl.getBlock()' to get a full interaction at the specified block height.\n *\n * Block height expresses the height of the block on the chain. The latest block height increases by one for every valid block produced.\n *\n * @param height The height of the block to execute the interaction at\n * @returns A partial interaction to be paired with another interaction such as 'fcl.getBlock()' or 'fcl.getAccount()'\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get block at specific height\n * await fcl.send([fcl.getBlock(), fcl.atBlockHeight(123)]).then(fcl.decode);\n *\n * // Get account at specific block height\n * await fcl.send([\n *   fcl.getAccount(\"0x1d007d755706c469\"),\n *   fcl.atBlockHeight(12345)\n * ]).then(fcl.decode);\n *\n * // Execute script at specific block height\n * await fcl.send([\n *   fcl.script`\n *     access(all) fun main(): UFix64 {\n *       return getCurrentBlock().height\n *     }\n *   `,\n *   fcl.atBlockHeight(100)\n * ]).then(fcl.decode);\n */\nfunction atBlockHeight(height) {\n  return pipe([ix => {\n    ix.block.height = height;\n    return ix;\n  }, validator(ix => {\n    if (typeof ix.block.isSealed === \"boolean\") throw new Error(\"Unable to specify both block height and isSealed.\");\n    if (ix.block.id) throw new Error(\"Unable to specify both block height and block id.\");\n    return ix;\n  })]);\n}\n\n/**\n * A builder function that returns a partial interaction to a block at a specific block ID.\n *\n * Use with other interactions like 'fcl.getBlock()' to get a full interaction at the specified block ID.\n *\n * Block ID is SHA3-256 hash of the entire block payload. This hash is stored as an ID field on any block response object (ie. response from 'GetLatestBlock').\n *\n * @param id The ID of the block to execute the interaction at\n * @returns A partial interaction to be paired with another interaction such as 'fcl.getBlock()' or 'fcl.getAccount()'\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get block by ID\n * await fcl.send([fcl.getBlock(), fcl.atBlockId(\"23232323232\")]).then(fcl.decode);\n *\n * // Get account at specific block ID\n * await fcl.send([\n *   fcl.getAccount(\"0x1d007d755706c469\"),\n *   fcl.atBlockId(\"9dda5f281897389b99f103a1c6b180eec9dac870de846449a302103ce38453f3\")\n * ]).then(fcl.decode);\n *\n * // Execute script at specific block\n * await fcl.send([\n *   fcl.script`\n *     access(all) fun main(): UFix64 {\n *       return getCurrentBlock().timestamp\n *     }\n *   `,\n *   fcl.atBlockId(\"a1b2c3d4e5f6\")\n * ]).then(fcl.decode);\n */\nfunction atBlockId(id) {\n  return pipe([ix => {\n    ix.block.id = id;\n    return Ok(ix);\n  }, validator((ix, _ref) => {\n    let {\n      Ok,\n      Bad\n    } = _ref;\n    if (isGetAccount(ix)) return Bad(ix, \"Unable to specify a block id with a Get Account interaction.\");\n    if (typeof ix.block.isSealed === \"boolean\") return Bad(ix, \"Unable to specify both block id and isSealed.\");\n    if (ix.block.height) return Bad(ix, \"Unable to specify both block id and block height.\");\n    return Ok(ix);\n  })]);\n}\n\n/**\n * A builder function that returns a partial interaction to query the latest block with the given finality state.\n *\n * Use with other interactions like 'fcl.getBlock()' to get the latest block information.\n * Block finality determines whether you get the latest executed block or the latest sealed block.\n *\n * - Executed blocks (soft-finality): Latest block that has been executed but may not be final\n * - Sealed blocks (hard-finality): Latest block that has been sealed and is considered final\n *\n * @param isSealed Block finality state, defaults to latest executed block (\"soft-finality\"), set to true for sealed blocks (\"hard-finality\")\n * @returns A function that processes a partial interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get latest executed block (soft finality)\n * await fcl.send([fcl.getBlock(), fcl.atLatestBlock()]).then(fcl.decode);\n *\n * // Get latest sealed block (hard finality)\n * await fcl.send([fcl.getBlock(), fcl.atLatestBlock(true)]).then(fcl.decode);\n *\n * // Get account from latest sealed block\n * await fcl.send([\n *   fcl.getAccount(\"0x1d007d755706c469\"),\n *   fcl.atLatestBlock(true)\n * ]).then(fcl.decode);\n *\n * // Execute script against latest executed block\n * await fcl.send([\n *   fcl.script`\n *     access(all) fun main(): UFix64 {\n *       return getCurrentBlock().height\n *     }\n *   `,\n *   fcl.atLatestBlock()\n * ]).then(fcl.decode);\n */\nfunction atLatestBlock() {\n  let isSealed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return pipe([ix => {\n    ix.block.isSealed = isSealed;\n    return ix;\n  }, validator(ix => {\n    if (ix.block.id) throw new Error(\"Unable to specify both block finality and block id.\");\n    if (ix.block.height) throw new Error(\"Unable to specify both block finality and block height.\");\n    return ix;\n  })]);\n}\n\nfunction createAccount(context) {\n  async function account(address) {\n    let {\n      height,\n      id,\n      isSealed\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let opts = arguments.length > 2 ? arguments[2] : undefined;\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!(id && height || id && isSealed || height && isSealed), `Method: account -- Only one of the following parameters can be provided: id, height, isSealed`);\n\n    // Get account by ID\n    if (id) return await createSend(context)([getAccount(address), atBlockId(id)], opts).then(decodeResponse);\n\n    // Get account by height\n    if (height) return await createSend(context)([getAccount(address), atBlockHeight(height)], opts).then(decodeResponse);\n\n    // Get account by latest block\n    return await createSend(context)([getAccount(address), atLatestBlock(isSealed ?? false)], opts).then(decodeResponse);\n  }\n  return account;\n}\n\n/**\n * Retrieve any account from Flow network's latest block or from a specified block height.\n *\n * Account address is a unique account identifier. Be mindful about the '0x' prefix, you should use the prefix as a default representation but be careful and safely handle user inputs without the prefix.\n *\n * An account includes the following data:\n * - Address: the account address.\n * - Balance: balance of the account.\n * - Contracts: list of contracts deployed to the account.\n * - Keys: list of keys associated with the account.\n *\n * @param address Address of the account\n * @param queryOptions Query parameters\n * @param queryOptions.height Block height to query\n * @param queryOptions.id Block ID to query\n * @param queryOptions.isSealed Block finality\n * @param opts Optional parameters\n * @returns A promise that resolves to an Account object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get account from latest block height\n * const account = await fcl.account(\"0x1d007d755706c469\");\n * console.log(\"Address:\", account.address);\n * console.log(\"Balance:\", account.balance);\n * console.log(\"Keys:\", account.keys);\n * console.log(\"Contracts:\", Object.keys(account.contracts));\n *\n * // Get account at a specific block height\n * const historicalAccount = await fcl.account(\"0x1d007d755706c469\", {\n *   height: 12345\n * });\n *\n * // Get account at a specific block ID\n * const accountAtBlock = await fcl.account(\"0x1d007d755706c469\", {\n *   id: \"9dda5f281897389b99f103a1c6b180eec9dac870de846449a302103ce38453f3\"\n * });\n *\n * // Get account from sealed block\n * const sealedAccount = await fcl.account(\"0x1d007d755706c469\", {\n *   isSealed: true\n * });\n *\n * // Alternative using builder pattern\n * fcl.send([\n *   fcl.getAccount(\"0x1d007d755706c469\"),\n *   fcl.atBlockHeight(123)\n * ]).then(fcl.decode);\n */\nconst account = /* @__PURE__ */withGlobalContext(createAccount);\n\nfunction createBlock(context) {\n  async function block() {\n    let {\n      sealed = false,\n      id,\n      height\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!(sealed && id || sealed && height), `Method: block -- Cannot pass \"sealed\" with \"id\" or \"height\"`);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!(id && height), `Method: block -- Cannot pass \"id\" and \"height\" simultaneously`);\n\n    // Get block by ID\n    if (id) return await createSend(context)([getBlock(), atBlockId(id)], opts).then(decodeResponse);\n\n    // Get block by height\n    if (height) return await createSend(context)([getBlock(), atBlockHeight(height)], opts).then(decodeResponse);\n\n    // Get latest block\n    return await createSend(context)([getBlock(sealed)], opts).then(decodeResponse);\n  }\n  return block;\n}\n\n/**\n * Query the network for block by id, height or get the latest block.\n *\n * Block ID is SHA3-256 hash of the entire block payload. This hash is stored as an ID field on any block response object (ie. response from `GetLatestBlock`).\n *\n * Block height expresses the height of the block on the chain. The latest block height increases by one for every valid block produced.\n *\n * @param queryOptions Query parameters\n * @param queryOptions.sealed Whether to query for a sealed block\n * @param queryOptions.height Block height to query\n * @param queryOptions.id Block ID to query\n * @param opts Optional parameters\n * @returns A promise that resolves to a Block object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get latest block\n * const latestBlock = await fcl.block(); // Get the latest finalized block\n * const latestSealedBlock = await fcl.block({sealed: true}); // Get the latest sealed block\n *\n * // Get block by ID (uses builder function)\n * await fcl.send([fcl.getBlock(), fcl.atBlockId(\"23232323232\")]).then(fcl.decode);\n *\n * // Get block at height (uses builder function)\n * await fcl.send([fcl.getBlock(), fcl.atBlockHeight(123)]).then(fcl.decode)\n */\nconst block = /* @__PURE__ */withGlobalContext(createBlock);\n\n/**\n * A builder function for the Get Node Version Info interaction.\n *\n * Creates an interaction to retrieve version information from the connected Flow Access Node.\n * This includes details about the node's software version, protocol version, and spork information.\n *\n * Consider using the pre-built interaction 'fcl.nodeVersionInfo()' if you do not need to pair with any other builders.\n *\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get node version information using builder\n * const versionInfo = await fcl.send([\n *   fcl.getNodeVersionInfo()\n * ]).then(fcl.decode);\n *\n * console.log(\"Node version:\", versionInfo.semver);\n * console.log(\"Protocol version:\", versionInfo.protocol_version);\n * console.log(\"Spork ID:\", versionInfo.spork_id);\n *\n * // Use with other builders if needed\n * const interaction = await fcl.build([\n *   fcl.getNodeVersionInfo()\n *   // other builders can be added here\n * ]);\n */\nfunction getNodeVersionInfo() {\n  return pipe([makeGetNodeVerionInfo, ix => {\n    return Ok(ix);\n  }]);\n}\n\n/**\n * Retrieve version information from the connected Flow Access Node.\n *\n * This function returns detailed information about the Flow node's version, including the protocol version, spork information, and node-specific details. This is useful for debugging, compatibility checks, and understanding the network state.\n *\n * @param opts Optional parameters for the request\n * @returns A promise that resolves to a block response\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get node version information\n * const versionInfo = await fcl.nodeVersionInfo();\n * console.log(versionInfo);\n * // {\n * //   semver: \"v0.37.13\",\n * //   commit: \"12345abcd\",\n * //   spork_id: \"mainnet-23\",\n * //   protocol_version: \"2.13.10\",\n * //   spork_root_block_height: \"88483760\",\n * //   node_root_block_height: \"88483760\"\n * // }\n *\n * // Check compatibility\n * const info = await fcl.nodeVersionInfo();\n * if (info.protocol_version.startsWith(\"2.13\")) {\n *   console.log(\"Compatible with current protocol version\");\n * }\n */\nasync function nodeVersionInfo() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return await send([getNodeVersionInfo()], opts).then(decodeResponse);\n}\n\n/**\n * An object that contains all the information needed for FCL to sign a message with the user's signature.\n * Note: These values are destructed from the payload object in the first argument of a signing function.\n */\n\n/**\n * The object that contains all the information needed by FCL to authorize a user's transaction.\n */\n\n/**\n * A signing function consumes a payload and produces a signature for a transaction.\n * This function is always async.\n * Only write your own signing function if you are writing your own custom authorization function.\n */\n\n/**\n * A utility builder to set the authorizations on a transaction.\n *\n * Authorizations define the accounts that are responsible for paying the transaction fees and providing signatures for the transaction.\n * You can have multiple authorizers in a single transaction (multi-signature transactions).\n *\n * Read more about [transaction roles](https://docs.onflow.org/concepts/transaction-signing/) and [signing transactions](https://docs.onflow.org/concepts/accounts-and-keys/).\n *\n * @param ax An array of authorization functions that produce account authorization details\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Single authorizer (most common case)\n * await fcl.mutate({\n *   cadence: `\n *     transaction {\n *       prepare(acct: AuthAccount) {\n *         log(\"Hello from: \".concat(acct.address.toString()))\n *       }\n *     }\n *   `,\n *   authorizations: [fcl.authz] // Current user authorization\n * });\n *\n * // Multiple authorizers - both accounts must approve\n * await fcl.mutate({\n *   cadence: `\n *     transaction {\n *       prepare(acct1: AuthAccount, acct2: AuthAccount) {\n *         log(\"Transaction signed by both accounts\")\n *       }\n *     }\n *   `,\n *   authorizations: [userOneAuthz, userTwoAuthz]\n * });\n *\n * // Using builder pattern\n * await fcl.send([\n *   fcl.transaction`\n *     transaction {\n *       prepare(acct: AuthAccount) {\n *         acct.save(\"Hello, World!\", to: /storage/greeting)\n *       }\n *     }\n *   `,\n *   fcl.authorizations([fcl.authz]),\n *   fcl.proposer(fcl.authz),\n *   fcl.payer(fcl.authz),\n *   fcl.limit(100)\n * ]);\n */\nfunction authorizations() {\n  let ax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return pipe(ax.map(authz => {\n    return prepAccount(authz, {\n      role: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole.AUTHORIZER\n    });\n  }));\n}\n\n/**\n * Creates an authorization function for use in transactions.\n *\n * An authorization function must produce the information of the user that is going to sign and a signing function to use the information to produce a signature.\n *\n * Read more about [authorization functions](https://docs.onflow.org/fcl/reference/authorization-function/) and [transaction roles](https://docs.onflow.org/concepts/transaction-signing/).\n *\n * @param addr The address of the account that will sign the transaction\n * @param signingFunction A function that produces signatures for the account\n * @param keyId The index of the key to use for signing (optional)\n * @param sequenceNum The sequence number for the account key (optional)\n * @returns A partial interaction account object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n * import { ec as EC } from \"elliptic\";\n *\n * // Create a signing function\n * const signingFunction = ({ message }) => {\n *   // Your signing logic here\n *   return {\n *     addr: \"0x123456789abcdef0\",\n *     keyId: 0,\n *     signature: \"your_signature_here\"\n *   };\n * };\n *\n * // Create authorization\n * const authz = fcl.authorization(\n *   \"0x123456789abcdef0\", // account address\n *   signingFunction,     // signing function\n *   0,                   // key ID\n *   42                   // sequence number\n * );\n *\n * // Use in transaction\n * await fcl.mutate({\n *   cadence: `transaction { prepare(acct: AuthAccount) {} }`,\n *   proposer: authz,\n *   payer: authz,\n *   authorizations: [authz]\n * });\n */\nfunction authorization(addr, signingFunction, keyId, sequenceNum) {\n  return {\n    addr,\n    signingFunction,\n    keyId,\n    sequenceNum\n  };\n}\n\n/**\n * A builder function that returns the interaction to get events.\n *\n * Events are emitted by Cadence code during transaction execution and provide insights into what happened during execution.\n * This function queries for events of a specific type within a range of block heights.\n *\n * @param eventType The type of event to get (e.g., \"A.1654653399040a61.FlowToken.TokensWithdrawn\")\n * @param start The start block height to query from\n * @param end The end block height to query to\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get FlowToken transfer events from blocks 1000 to 2000\n * const events = await fcl.send([\n *   fcl.getEvents(\"A.1654653399040a61.FlowToken.TokensDeposited\", 1000, 2000)\n * ]).then(fcl.decode);\n *\n * console.log(\"Found events:\", events.length);\n * events.forEach(event => {\n *   console.log(\"Event data:\", event.data);\n *   console.log(\"Transaction ID:\", event.transactionId);\n * });\n */\nfunction getEvents(eventType, start, end) {\n  return pipe([makeGetEvents, ix => {\n    ix.events.eventType = eventType;\n    ix.events.start = start;\n    ix.events.end = end;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * A builder function that returns all instances of a particular event (by name) within a height range.\n *\n * The block range provided must be from the current spork.\n *\n * The block range provided must be 250 blocks or lower per request.\n *\n * Event type is a string that follow a standard format: A.{AccountAddress}.{ContractName}.{EventName}\n *\n * Please read more about [events in the documentation](https://docs.onflow.org/cadence/language/events/).\n *\n * Block height range expresses the height of the start and end block in the chain.\n *\n * @param eventType The type of event to get\n * @param startHeight The height of the block to start looking for events (inclusive)\n * @param endHeight The height of the block to stop looking for events (inclusive)\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get events at block height range\n * await fcl\n *   .send([\n *     fcl.getEventsAtBlockHeightRange(\n *       \"A.7e60df042a9c0868.FlowToken.TokensWithdrawn\", // event name\n *       35580624, // block to start looking for events at\n *       35580624 // block to stop looking for events at\n *     ),\n *   ])\n *   .then(fcl.decode);\n */\nfunction getEventsAtBlockHeightRange(eventType, startHeight, endHeight) {\n  return pipe([makeGetEvents, ix => {\n    ix.events.eventType = eventType;\n    ix.events.start = startHeight;\n    ix.events.end = endHeight;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * A builder function that returns all instances of a particular event (by name) within a set of blocks, specified by block ids.\n *\n * The block range provided must be from the current spork.\n *\n * Event type is a string that follow a standard format: A.{AccountAddress}.{ContractName}.{EventName}\n *\n * Please read more about [events in the documentation](https://docs.onflow.org/cadence/language/events/).\n *\n * @param eventType The type of event to get\n * @param blockIds The ids of the blocks to scan for events\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * const events = await fcl.send([\n *   fcl.getEventsAtBlockIds(\"A.7e60df042a9c0868.FlowToken.TokensWithdrawn\", [\n *     \"c4f239d49e96d1e5fbcf1f31027a6e582e8c03fcd9954177b7723fdb03d938c7\",\n *     \"5dbaa85922eb194a3dc463c946cc01c866f2ff2b88f3e59e21c0d8d00113273f\"\n *   ])\n * ]).then(fcl.decode);\n */\nfunction getEventsAtBlockIds(eventType, blockIds) {\n  return pipe([makeGetEvents, ix => {\n    ix.events.eventType = eventType;\n    ix.events.blockIds = blockIds;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * A builder function that returns the interaction to get a block header.\n *\n * A block header contains metadata about a block without the full transaction details, making it more\n * lightweight than fetching the entire block. This is useful when you only need block metadata like\n * timestamp, height, parent hash, etc.\n *\n * Use with 'fcl.atBlockId()' and 'fcl.atBlockHeight()' when building the interaction to get headers for specific blocks.\n *\n * @param isSealed Block finality state, true for sealed blocks, false for finalized blocks, null for latest\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get latest sealed block header\n * const sealedHeader = await fcl.send([\n *   fcl.getBlockHeader(true)\n * ]).then(fcl.decode);\n *\n * console.log(\"Block height:\", sealedHeader.height);\n * console.log(\"Block timestamp:\", sealedHeader.timestamp);\n * console.log(\"Parent block ID:\", sealedHeader.parentId);\n *\n * // Get header for specific block\n * const blockHeader = await fcl.send([\n *   fcl.getBlockHeader(),\n *   fcl.atBlockHeight(12345)\n * ]).then(fcl.decode);\n *\n * // Get latest finalized block header\n * const finalizedHeader = await fcl.send([\n *   fcl.getBlockHeader(false)\n * ]).then(fcl.decode);\n */\nfunction getBlockHeader() {\n  let isSealed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return pipe([makeGetBlockHeader, ix => {\n    ix.block.isSealed = isSealed;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * A builder function that returns a collection containing a list of transaction IDs by its collection ID.\n *\n * A collection is a batch of transactions that have been included in a block. Each collection has a unique ID\n * which is the SHA3-256 hash of the collection payload. Collections are used to group related transactions\n * together for more efficient processing by the network.\n *\n * The collection ID provided must be from the current spork. Collections from past sporks are currently unavailable.\n *\n * @param collectionID The ID of the collection to retrieve\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get a collection and see what transactions it contains\n * const collection = await fcl.send([\n *   fcl.getCollection(\"cccdb0c67d015dc7f6444e8f62a3244ed650215ed66b90603006c70c5ef1f6e5\")\n * ]).then(fcl.decode);\n *\n * console.log(\"Collection ID:\", collection.id);\n * console.log(\"Transaction IDs:\", collection.transactionIds);\n * console.log(\"Total transactions:\", collection.transactionIds.length);\n *\n * // Process each transaction in the collection\n * for (const txId of collection.transactionIds) {\n *   const transaction = await fcl.send([\n *     fcl.getTransaction(txId)\n *   ]).then(fcl.decode);\n *   console.log(\"Transaction:\", transaction);\n * }\n */\nfunction getCollection() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return pipe([makeGetCollection, ix => {\n    ix.collection.id = id;\n    return ix;\n  }]);\n}\n\n/**\n * A builder function that returns the status of transaction.\n *\n * The transaction id provided must be from the current spork.\n *\n * Consider using 'fcl.tx(id)' instead of calling this method directly for real-time transaction monitoring.\n *\n * @param transactionId The id of the transaction to get the status of\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * const status = await fcl.send([\n *   fcl.getTransactionStatus(\"9dda5f281897389b99f103a1c6b180eec9dac870de846449a302103ce38453f3\")\n * ]).then(fcl.decode);\n */\nfunction getTransactionStatus(transactionId) {\n  return pipe([makeGetTransactionStatus, ix => {\n    ix.transaction.id = transactionId;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * A builder function that returns the interaction to get a transaction by id.\n *\n * Transaction id is a hash of the encoded transaction payload and can be calculated before submitting the transaction to the network.\n * Transaction status represents the state of a transaction in the blockchain. Status can change until it is finalized.\n *\n * The transaction id provided must be from the current spork.\n *\n * Consider using 'fcl.tx(id).onceExecuted()' instead of calling this method directly for real-time transaction monitoring.\n *\n * @param transactionId The id of the transaction to get\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * const tx = await fcl.send([\n *   fcl.getTransaction(\"9dda5f281897389b99f103a1c6b180eec9dac870de846449a302103ce38453f3\")\n * ]).then(fcl.decode);\n */\nfunction getTransaction(id) {\n  return pipe([makeGetTransaction, ix => {\n    ix.transaction.id = id;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * A builder function that returns the interaction to get network parameters.\n *\n * Network parameters contain important configuration information about the Flow network,\n * including the chain ID, which is essential for signing transactions correctly.\n * This information is crucial for ensuring transactions are submitted to the correct network.\n *\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Get network parameters to verify chain ID\n * const params = await fcl.send([\n *   fcl.getNetworkParameters()\n * ]).then(fcl.decode);\n *\n * console.log(\"Chain ID:\", params.chainId);\n * console.log(\"Network:\", params.name);\n *\n * // Use this to verify you're connected to the right network\n * if (params.chainId === \"flow-mainnet\") {\n *   console.log(\"Connected to Flow Mainnet\");\n * } else if (params.chainId === \"flow-testnet\") {\n *   console.log(\"Connected to Flow Testnet\");\n * }\n */\nfunction getNetworkParameters() {\n  return pipe([makeGetNetworkParameters, ix => {\n    return Ok(ix);\n  }]);\n}\n\n/**\n * A utility builder to set the compute limit on a transaction.\n *\n * The compute limit is the maximum amount of computation that can be performed during transaction execution.\n * Setting an appropriate compute limit helps prevent infinite loops and ensures predictable transaction costs.\n *\n * Read more about [computation cost](https://docs.onflow.org/concepts/fees/#computation-cost) and [transaction fees](https://docs.onflow.org/concepts/fees/).\n *\n * @param limit The maximum amount of computation for the transaction\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * await fcl.mutate({\n *   cadence: `\n *     transaction {\n *       prepare(account: AuthAccount) {\n *         // Complex transaction logic here\n *       }\n *     }\n *   `,\n *   limit: 1000 // Set compute limit to 1000\n * });\n *\n * // Using builder pattern\n * await fcl.send([\n *   fcl.transaction`\n *     transaction {\n *       prepare(account: AuthAccount) {\n *         // Transaction logic\n *       }\n *     }\n *   `,\n *   fcl.limit(9999) // Set higher limit for complex operations\n * ]);\n */\nfunction limit(limit) {\n  return ix => {\n    ix.message.computeLimit = limit;\n    return ix;\n  };\n}\n\n/**\n * A utility builder to be used with other builders to pass in arguments with a value and supported type.\n *\n * A transaction can accept zero or more arguments that are passed into the Cadence script. The arguments on the transaction must match the number and order declared in the Cadence script.\n * This function returns a Partial Interaction that contains the arguments and types passed in. This alone is a partial and incomplete interaction.\n *\n * @param ax An array of argument objects created with fcl.arg()\n * @returns A Partial Interaction object containing the arguments and types passed in\n *\n * @example\n * import * as fcl from \"@onflow/fcl\"\n *\n * await fcl.mutate({\n *   cadence: `\n *     transaction(amount: UFix64, to: Address) {\n *       prepare(signer: AuthAccount) {\n *         // transaction logic\n *       }\n *     }\n *   `,\n *   args: (arg, t) => [\n *     arg(\"10.0\", t.UFix64), // Will be the first argument `amount: UFix64`\n *     arg(\"0xba1132bc08f82fe2\", t.Address), // Will be the second argument `to: Address`\n *   ],\n * })\n */\nfunction args(ax) {\n  return pipe(ax.map(makeArgument));\n}\n\n/**\n * A utility builder to be used with fcl.args[...] to create FCL supported arguments for interactions.\n *\n * Arguments are used to pass data to Cadence scripts and transactions. The arguments must match the number and order declared in the Cadence script.\n * This function creates an ArgumentObject that holds the value and type passed in.\n *\n * @param value Any value that you are looking to pass to other builders\n * @param xform A type supported by Flow (FType descriptor)\n * @returns An ArgumentObject that holds the value and type passed in\n *\n * @example\n * import * as fcl from \"@onflow/fcl\"\n *\n * const result = await fcl.query({\n *   cadence: `\n *     access(all) fun main(a: Int, b: Int, addr: Address): Int {\n *       log(addr)\n *       return a + b\n *     }\n *   `,\n *   args: (arg, t) => [\n *     arg(7, t.Int), // a: Int\n *     arg(6, t.Int), // b: Int\n *     arg(\"0xba1132bc08f82fe2\", t.Address), // addr: Address\n *   ],\n * });\n */\nfunction arg(value, xform) {\n  return {\n    value,\n    xform\n  };\n}\n\n/**\n * A builder function that adds the proposer to a transaction.\n *\n * The proposer is responsible for providing the proposal key and paying the network fee for the transaction.\n * The proposer key is used to specify the sequence number and prevent replay attacks.\n *\n * Every transaction requires exactly one proposer.\n *\n * Read more about [transaction roles](https://docs.onflow.org/concepts/transaction-signing/#proposer) and [signing transactions](https://docs.onflow.org/concepts/accounts-and-keys/).\n *\n * @param authz The authorization object for the proposer\n * @returns A function that takes an interaction object and returns a new interaction object with the proposer added\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Using the current user as proposer\n * await fcl.mutate({\n *   cadence: `\n *     transaction {\n *       prepare(account: AuthAccount) {\n *         log(\"Hello from proposer!\")\n *       }\n *     }\n *   `,\n *   proposer: fcl.authz\n * });\n *\n * // Using builder pattern\n * await fcl.send([\n *   fcl.transaction`\n *     transaction {\n *       prepare(account: AuthAccount) {\n *         log(\"Transaction executed\")\n *       }\n *     }\n *   `,\n *   fcl.proposer(proposerAuthz),\n *   fcl.payer(payerAuthz),\n *   fcl.authorizations([authorizerAuthz]),\n *   fcl.limit(100)\n * ]);\n */\nfunction proposer(authz) {\n  return prepAccount(authz, {\n    role: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole.PROPOSER\n  });\n}\n\n/**\n * A builder function that adds payer account(s) to a transaction.\n *\n * Every transaction requires at least one payer.\n *\n * The payer is the account that pays the transaction fee for executing the transaction on the network.\n * The payer account must have sufficient Flow tokens to cover the transaction fees.\n *\n * Read more about [transaction roles](https://docs.onflow.org/concepts/transaction-signing/#payer) and [transaction fees](https://docs.onflow.org/concepts/fees/).\n *\n * @param ax An account address or an array of account addresses\n * @returns A function that takes an interaction object and returns a new interaction object with the payer(s) added\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Using current user as payer (most common case)\n * await fcl.mutate({\n *   cadence: `\n *     transaction {\n *       prepare(acct: AuthAccount) {\n *         log(\"Transaction fees paid by: \".concat(acct.address.toString()))\n *       }\n *     }\n *   `,\n *   payer: fcl.authz // Current user as payer\n * });\n *\n * // Using custom payer with builder pattern\n * await fcl.send([\n *   fcl.transaction`\n *     transaction {\n *       prepare(acct: AuthAccount) {\n *         // Transaction logic\n *       }\n *     }\n *   `,\n *   fcl.proposer(fcl.authz),        // Current user as proposer\n *   fcl.authorizations([fcl.authz]), // Current user as authorizer\n *   fcl.payer(customPayerAuthz)     // Custom payer pays fees\n * ]);\n *\n * // Multiple payers (advanced use case)\n * await fcl.send([\n *   fcl.transaction`\n *     transaction {\n *       prepare(acct: AuthAccount) {\n *         // Transaction logic\n *       }\n *     }\n *   `,\n *   fcl.payer([payerAuthz1, payerAuthz2]) // Multiple payers split fees\n * ]);\n */\nfunction payer() {\n  let ax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  if (!Array.isArray(ax)) ax = [ax];\n  return pipe(ax.map(authz => {\n    return prepAccount(authz, {\n      role: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole.PAYER\n    });\n  }));\n}\n\n/**\n * A builder function that creates a ping interaction to test connectivity to the Flow Access Node.\n *\n * The ping interaction is a simple way to test if the Flow Access Node is reachable and responding. This is useful for health checks, connectivity testing, and debugging network issues.\n *\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Simple ping to test connectivity\n * try {\n *   const response = await fcl.send([fcl.ping()]);\n *   console.log(\"Access Node is reachable\");\n * } catch (error) {\n *   console.error(\"Access Node is not reachable:\", error);\n * }\n *\n * // Use ping for health checks\n * const healthCheck = async () => {\n *   try {\n *     await fcl.send([fcl.ping()]);\n *     return { status: \"healthy\", timestamp: new Date().toISOString() };\n *   } catch (error) {\n *     return { status: \"unhealthy\", error: error.message, timestamp: new Date().toISOString() };\n *   }\n * };\n *\n * const health = await healthCheck();\n * console.log(\"Health status:\", health);\n */\nfunction ping() {\n  return makePing;\n}\n\n/**\n * A builder function that sets the reference block for a transaction.\n *\n * The reference block specifies an expiration window (measured in blocks) during which a transaction is considered valid by the network.\n * A transaction will be rejected if it is submitted past its expiry block. Flow calculates transaction expiry using the reference block field.\n *\n * @param refBlock The reference block ID\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Set specific reference block for transaction\n * await fcl.send([\n *   fcl.transaction`\n *     transaction {\n *       prepare(account: AuthAccount) {\n *         log(\"Transaction with custom reference block\")\n *       }\n *     }\n *   `,\n *   fcl.ref(\"a1b2c3d4e5f6789...\"), // Custom reference block ID\n *   fcl.proposer(fcl.authz),\n *   fcl.payer(fcl.authz),\n *   fcl.authorizations([fcl.authz]),\n *   fcl.limit(100)\n * ]);\n *\n * // Usually, you don't need to set reference block manually\n * // as FCL will automatically set it to the latest block\n */\nfunction ref(refBlock) {\n  return pipe([ix => {\n    ix.message.refBlock = refBlock;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * A builder function that creates a script interaction. Scripts allow you to write arbitrary non-mutating Cadence code on the Flow blockchain and return data.\n *\n * You can learn more about [Cadence here](https://cadence-lang.org/docs/language), but we are now only interested in executing the script code and getting back the data.\n *\n * We can execute a script using the latest state of the Flow blockchain or we can choose to execute the script at a specific time in history defined by a block height or block ID.\n *\n * Block ID is SHA3-256 hash of the entire block payload, but you can get that value from the block response properties.\n *\n * Block height expresses the height of the block in the chain.\n *\n * @param args The arguments to pass to the template\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * const result = await fcl.query({\n *   cadence: `\n *     access(all) fun main(a: Int, b: Int, addr: Address): Int {\n *       log(addr)\n *       return a + b\n *     }\n *   `,\n *   args: (arg, t) => [\n *     arg(7, t.Int), // a: Int\n *     arg(6, t.Int), // b: Int\n *     arg(\"0xba1132bc08f82fe2\", t.Address), // addr: Address\n *   ],\n * });\n *\n * console.log(result); // 13\n */\nfunction script() {\n  return pipe([makeScript, put(\"ix.cadence\", (0,_onflow_util_template__WEBPACK_IMPORTED_MODULE_9__.template)(...arguments))]);\n}\n\nconst DEFAULT_SCRIPT_ACCOUNTS = [];\nconst DEFAULT_REF = null;\n\n/**\n * A template builder to use a Cadence transaction for an interaction. FCL \"mutate\" does the work of building, signing, and sending a transaction behind the scenes.\n *\n * Flow supports great flexibility when it comes to transaction signing, we can define multiple authorizers (multi-sig transactions) and have different payer account than proposer.\n *\n * @param args The arguments to pass to the template\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\"\n *\n * // Basic transaction usage\n * await fcl.mutate({\n *   cadence: `\n *     transaction(a: Int) {\n *       prepare(acct: &Account) {\n *         log(acct)\n *         log(a)\n *       }\n *     }\n *   `,\n *   args: (arg, t) => [\n *     arg(6, t.Int)\n *   ],\n *   limit: 50\n * })\n *\n * // Single party, single signature\n * // Proposer, payer and authorizer are the same account\n * await fcl.mutate({\n *   cadence: `\n *     transaction {\n *       prepare(acct: &Account) {}\n *     }\n *   `,\n *   authz: currentUser, // Optional. Will default to currentUser if not provided.\n *   limit: 50,\n * })\n *\n * // Multiple parties\n * // Proposer and authorizer are the same account, but different payer\n * await fcl.mutate({\n *   cadence: `\n *     transaction {\n *       prepare(acct: &Account) {}\n *     }\n *   `,\n *   proposer: authzFn,\n *   payer: authzTwoFn,\n *   authorizations: [authzFn],\n *   limit: 50,\n * })\n */\nfunction transaction() {\n  return pipe([makeTransaction, put(\"ix.cadence\", (0,_onflow_util_template__WEBPACK_IMPORTED_MODULE_9__.template)(...arguments)), ix => {\n    ix.message.refBlock = ix.message.refBlock || DEFAULT_REF;\n    ix.authorizations = ix.authorizations || DEFAULT_SCRIPT_ACCOUNTS;\n    return Ok(ix);\n  }]);\n}\n\nfunction invariant() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (args.length > 1) {\n    const [predicate, message] = args;\n    return invariant((ix, _ref) => {\n      let {\n        Ok,\n        Bad\n      } = _ref;\n      return predicate ? Ok(ix) : Bad(ix, message);\n    });\n  }\n  const [fn] = args;\n  return ix => fn(ix, {\n    Ok,\n    Bad\n  });\n}\n\n/**\n * A builder function that intercepts and modifies a voucher.\n *\n * This function is useful for debugging, logging, or making modifications to\n * the transaction data. The voucher contains all the transaction details in their final form.\n *\n * @param fn The function to intercept and potentially modify the voucher\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Intercept voucher for logging\n * await fcl.send([\n *   fcl.transaction`\n *     transaction {\n *       prepare(account: AuthAccount) {\n *         log(\"Transaction executed\")\n *       }\n *     }\n *   `,\n *   fcl.voucherIntercept((voucher) => {\n *     console.log(\"Voucher details:\", {\n *       cadence: voucher.cadence,\n *       proposalKey: voucher.proposalKey,\n *       payer: voucher.payer,\n *       authorizers: voucher.authorizers,\n *       computeLimit: voucher.computeLimit\n *     });\n *   }),\n *   fcl.proposer(fcl.authz),\n *   fcl.payer(fcl.authz),\n *   fcl.authorizations([fcl.authz])\n * ]);\n */\nfunction voucherIntercept(fn) {\n  return put(\"ix.voucher-intercept\", fn);\n}\n\n/**\n * Subscribe to events with the given filter and parameters.\n *\n * Creates a subscription to listen for real-time events from the Flow blockchain. This function configures\n * the subscription parameters for filtering specific events based on type, addresses, contracts, and other criteria.\n *\n * Events are emitted by Cadence code during transaction execution and provide insights into what happened.\n * Subscriptions allow you to listen for these events in real-time without polling.\n *\n * @param filter The filter configuration for the event subscription\n * @param filter.startBlockId Optional block ID to start subscription from\n * @param filter.startHeight Optional block height to start subscription from\n * @param filter.eventTypes Array of event types to filter for\n * @param filter.addresses Array of account addresses to filter events from\n * @param filter.contracts Array of contract names to filter events from\n * @param filter.heartbeatInterval Interval for heartbeat messages in milliseconds\n * @returns A function that processes an interaction object\n *\n * @example\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Subscribe to FlowToken transfer events\n * const subscription = await fcl.send([\n *   fcl.subscribeEvents({\n *     eventTypes: [\n *       \"A.1654653399040a61.FlowToken.TokensWithdrawn\",\n *       \"A.1654653399040a61.FlowToken.TokensDeposited\"\n *     ],\n *     startHeight: 1000000, // Start from specific block height\n *     heartbeatInterval: 3000 // 3 second heartbeat\n *   })\n * ]);\n *\n * // Subscribe to events from specific contracts\n * const contractSubscription = await fcl.send([\n *   fcl.subscribeEvents({\n *     contracts: [\"FlowToken\", \"FungibleToken\"],\n *     addresses: [\"0x1654653399040a61\"]\n *   })\n * ]);\n *\n * // Handle the subscription data elsewhere using fcl.subscribe()\n */\nfunction subscribeEvents(_ref) {\n  let {\n    startBlockId,\n    startHeight,\n    eventTypes,\n    addresses,\n    contracts,\n    heartbeatInterval\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!(startBlockId && startHeight), `SDK Subscribe Events Error: Cannot set both startBlockId and startHeight.`);\n  return pipe([makeSubscribeEvents, ix => {\n    ix.subscribeEvents.startBlockId = startBlockId ?? null;\n    ix.subscribeEvents.startHeight = startHeight ?? null;\n    ix.subscribeEvents.eventTypes = eventTypes ?? null;\n    ix.subscribeEvents.addresses = addresses ?? null;\n    ix.subscribeEvents.contracts = contracts ?? null;\n    ix.subscribeEvents.heartbeatInterval = heartbeatInterval ?? null;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * Resolves the sequence number for the proposer account by querying the blockchain.\n *\n * @param config Configuration containing the node endpoint\n * @returns A function that resolves the proposer sequence number for an interaction\n */\nconst resolveProposerSequenceNumber = _ref => {\n  let {\n    node\n  } = _ref;\n  return async ix => {\n    if (!isTransaction(ix)) return Ok(ix);\n    if (ix.accounts[ix.proposer].sequenceNum) return Ok(ix);\n    const sendFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.first([\"sdk.transport\", \"sdk.send\"], _onflow_transport_http__WEBPACK_IMPORTED_MODULE_7__.send);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n    const response$1 = await sendFn(await build([getAccount(ix.accounts[ix.proposer].addr)]), {\n      response: response,\n      Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer,\n      ix: ixModule\n    }, {\n      node\n    });\n    const decoded = await decodeResponse(response$1);\n    ix.accounts[ix.proposer].sequenceNum = decoded.keys[ix.accounts[ix.proposer].keyId].sequenceNumber;\n    return Ok(ix);\n  };\n};\n\nasync function getRefId(opts) {\n  const node = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().get(\"accessNode.api\");\n  const sendFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.first([\"sdk.transport\", \"sdk.send\"], _onflow_transport_http__WEBPACK_IMPORTED_MODULE_7__.send);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n  var ix;\n  ix = await pipe(initInteraction(), [getBlock()]);\n  ix = await sendFn(ix, {\n    response,\n    Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer,\n    ix: ixModule\n  }, {\n    node\n  });\n  ix = await decodeResponse(ix);\n  return ix.id;\n}\n\n/**\n * Resolves the reference block ID for a transaction by querying the latest block from the network.\n *\n * @param opts Optional configuration parameters\n * @returns A function that resolves the reference block ID for an interaction\n */\nfunction resolveRefBlockId(opts) {\n  return async ix => {\n    if (!isTransaction(ix)) return Ok(ix);\n    if (ix.message.refBlock) return Ok(ix);\n    ix.message.refBlock = await getRefId();\n    return Ok(ix);\n  };\n}\n\nfunction mockAccountResponse(ix) {\n  let numberOfKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(ix.account, \"mockAccountResponse(ix) -- ix.account is missing\", ix);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(ix.account.addr, \"mockAccountResponse(ix) -- ix.account.addr is missing\", ix);\n  const address = ix.account.addr;\n  return {\n    account: {\n      addr: address,\n      keys: Array.from({\n        length: numberOfKeys\n      }, (_, i) => ({\n        index: i,\n        sequenceNumber: 42\n      }))\n    }\n  };\n}\nfunction mockGetBlockResponse(ix) {\n  return {\n    tag: \"GET_BLOCK\",\n    block: {\n      id: \"32\"\n    }\n  };\n}\nconst identity = v => v;\nfunction mockSend() {\n  let fallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : identity;\n  return async function execSend(ix) {\n    ix = await ix;\n    switch (true) {\n      case isGetAccount(ix):\n        return mockAccountResponse(ix);\n      case isGetBlock(ix):\n        return mockGetBlockResponse();\n      default:\n        return fallback(ix);\n    }\n  };\n}\n\n/**\n * Generates a unique identifier for an account based on its address and key ID.\n *\n * @param acct The account object\n * @returns A string identifier in the format \"address-keyId\"\n */\nconst idof = acct => `${(0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(acct.addr)}-${acct.keyId}`;\n\n/**\n * Generates a test signature string for an account.\n *\n * @param opts Partial account object containing address and keyId\n * @returns A test signature string in the format \"SIGNATURE.address.keyId\"\n */\nfunction sig(opts) {\n  return [\"SIGNATURE\", opts.addr, opts.keyId].join(\".\");\n}\n/**\n * Creates a test authorization function for testing transactions.\n *\n * @param opts Optional configuration including custom signing function\n * @returns An authorization function that can be used in tests\n */\nfunction authzFn() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (account) {\n    const acct = {\n      ...account,\n      ...opts,\n      resolve: null,\n      signingFunction: opts.signingFunction || account.signingFunction || fallbackSigningFunction\n    };\n    return acct;\n    function fallbackSigningFunction(_signable) {\n      return {\n        addr: acct.addr,\n        keyId: acct.keyId,\n        signature: sig(acct)\n      };\n    }\n  };\n}\n/**\n * Creates a test authorization resolver that can be used for testing account resolution.\n *\n * @param opts Optional configuration including temporary ID\n * @returns A function that returns an account with resolve capability\n */\nfunction authzResolve() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (account) {\n    const {\n      tempId,\n      ...rest\n    } = opts;\n    return {\n      ...account,\n      tempId: tempId || \"WITH_RESOLVE\",\n      resolve: authzFn(rest)\n    };\n  };\n}\nconst ROLE = {\n  proposer: false,\n  authorizer: false,\n  payer: false\n};\n/**\n * Creates a test authorization resolver that handles multiple accounts with different roles.\n *\n * @param opts Configuration including authorizations array and optional proposer/payer\n * @returns A function that returns an account with multi-role resolve capability\n */\nfunction authzResolveMany() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    authorizations: []\n  };\n  return function (account) {\n    const tempId = opts.tempId || \"AUTHZ_RESOLVE_MANY\";\n    return {\n      ...account,\n      tempId,\n      resolve: () => [opts.proposer && authzFn(opts.proposer)({\n        role: {\n          ...ROLE,\n          proposer: true\n        }\n      }), ...opts.authorizations.map(authzFn).map(d => d({\n        role: {\n          ...ROLE,\n          authorizer: true\n        }\n      })), opts.payer && authzFn(opts.payer)({\n        role: {\n          ...ROLE,\n          payer: true\n        }\n      })].filter(Boolean)\n    };\n  };\n}\n\n/**\n * Creates a deep test authorization resolver with nested resolution for complex testing scenarios.\n *\n * @param opts Configuration including authorizations array and optional proposer/payer\n * @param depth The depth of nesting for the resolver (default: 1)\n * @returns A function that returns an account with deep nested resolve capability\n */\nfunction authzDeepResolveMany() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    authorizations: []\n  };\n  let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return function (account) {\n    const tempId = opts.tempId || \"AUTHZ_DEEP_RESOLVE_MANY\";\n    return {\n      ...account,\n      tempId,\n      resolve: depth > 0 ? authzDeepResolveMany(opts, depth - 1)(account).resolve : authzResolveMany(opts)(account).resolve\n    };\n  };\n}\n\n/**\n * Runs a set of functions on an interaction\n *\n * This is a utility function for testing that builds and resolves an interaction with the provided builder functions.\n * It automatically adds a reference block and then resolves the interaction for testing purposes.\n *\n * @param fns An array of functions to run on the interaction\n * @returns A promise that resolves to the resolved interaction\n *\n * @example\n * import { run } from \"@onflow/sdk\"\n * import * as fcl from \"@onflow/fcl\";\n *\n * // Test a simple script interaction\n * const result = await run([\n *   fcl.script`\n *     access(all) fun main(): Int {\n *       return 42\n *     }\n *   `\n * ]);\n *\n * console.log(result.cadence); // The Cadence script\n * console.log(result.tag); // \"SCRIPT\"\n *\n * // Test a transaction with arguments\n * const txResult = await run([\n *   fcl.transaction`\n *     transaction(amount: UFix64) {\n *       prepare(account: AuthAccount) {\n *         log(amount)\n *       }\n *     }\n *   `,\n *   fcl.args([fcl.arg(\"10.0\", fcl.t.UFix64)])\n * ]);\n *\n * console.log(txResult.message.arguments); // The resolved arguments\n */\nconst run = function () {\n  let fns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return build([ref(\"123\"), ...fns]).then(resolve);\n};\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  authzDeepResolveMany: authzDeepResolveMany,\n  authzFn: authzFn,\n  authzResolve: authzResolve,\n  authzResolveMany: authzResolveMany,\n  idof: idof,\n  mockSend: mockSend,\n  run: run,\n  sig: sig\n});\n\nconst VERSION = \"1.10.0\";\n\nconst flowMainnet = {\n  \"flow.network\": \"mainnet\",\n  \"accessNode.api\": \"https://rest-mainnet.onflow.org\",\n  \"discovery.wallet\": \"https://fcl-discovery.onflow.org/authn\"\n};\nconst flowTestnet = {\n  \"flow.network\": \"testnet\",\n  \"accessNode.api\": \"https://rest-testnet.onflow.org\",\n  \"discovery.wallet\": \"https://fcl-discovery.onflow.org/testnet/authn\"\n};\nconst flowEmulator = {\n  \"flow.network\": \"local\",\n  \"accessNode.api\": \"http://127.0.0.1:8888\",\n  \"discovery.wallet\": \"http://localhost:8701/fcl/authn\"\n};\n\n/**\n * Options for configuring the SDK client.\n */\n\n/**\n * Creates a new SDK context with the provided configuration.\n */\nfunction createContext(_ref) {\n  let {\n    accessNodeUrl,\n    transport,\n    computeLimit,\n    customResolver,\n    customDecoders = {},\n    contracts = {}\n  } = _ref;\n  if (!transport) {\n    throw new Error(\"Transport must be provided to create SDK context\");\n  }\n\n  // Ensure transport is an instance of SdkTransport\n  if (typeof transport.send !== \"function\") {\n    throw new Error(\"Invalid transport provided, must implement send method\");\n  }\n  if (typeof transport.subscribe !== \"function\") {\n    throw new Error(\"Invalid transport provided, must implement subscribe method\");\n  }\n  if (!accessNodeUrl) {\n    throw new Error(\"Access node must be provided to create SDK context\");\n  }\n  if (typeof accessNodeUrl !== \"string\") {\n    throw new Error(\"Access node must be a string URL\");\n  }\n  if (typeof computeLimit !== \"number\" || computeLimit <= 0) {\n    throw new Error(\"Compute limit must be a positive number\");\n  }\n  return {\n    transport,\n    accessNodeUrl,\n    computeLimit,\n    customResolver,\n    customDecoders,\n    debug: {},\n    contracts,\n    legacyContractIdentifiers: {}\n  };\n}\n\n/**\n * Creates an SDK client with the provided options.\n * @param options - Configuration options for the SDK client.\n * @returns A client object with methods to interact with the Flow blockchain.\n * @example\n * const client = createSdkClient({\n *  accessNodeUrl: \"https://rest-mainnet.onflow.org\",\n *  transport: myTransport,\n *  computeLimit: 1000,\n * })\n * client.send([myScript, myTransaction])\n *   .then(client.decode)\n *   .catch(error => console.error(\"Error sending request:\", error))\n */\nfunction createSdkClient(options) {\n  const context = createContext(options);\n  return {\n    send: createSend(context),\n    subscribe: createSubscribe(context),\n    subscribeRaw: createSubscribeRaw(context),\n    account: createAccount(context),\n    block: createBlock(context),\n    resolve: createResolve(context),\n    decode: createDecode(context)\n  };\n}\n\n/**\n * Legacy function for setting parameters on an interaction.\n *\n * @deprecated This function has been removed. Use `args` instead.\n *\n * @param params The parameters to set\n */\nconst params = params => _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n  pkg: \"FCL/SDK\",\n  message: `The params builder has been removed from the Flow JS-SDK/FCL.`,\n  transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\",\n  level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.LEVELS.error\n});\n\n/**\n * Legacy function for setting a single parameter on an interaction.\n *\n * @deprecated This function has been removed. Use `arg` instead.\n *\n * @param params The parameter to set\n */\nconst param = params => _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n  pkg: \"FCL/SDK\",\n  message: `The param builder has been removed from the Flow JS-SDK/FCL.`,\n  transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\",\n  level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.LEVELS.error\n});\n\n\n//# sourceMappingURL=sdk.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/sdk/dist/sdk.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/native.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/native.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  randomUUID: (crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID)\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy9zZGsvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9uYXRpdmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRCO0FBQzVCLGlFQUFlO0FBQ2YsY0FBYywwREFBaUI7QUFDL0IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aGNoYWluLWFwcC8uL25vZGVfbW9kdWxlcy9Ab25mbG93L3Nkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25hdGl2ZS5qcz9iZGJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmFuZG9tVVVJRDogY3J5cHRvLnJhbmRvbVVVSURcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/native.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/regex.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/regex.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy9zZGsvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9yZWdleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxHQUFHLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aGNoYWluLWFwcC8uL25vZGVfbW9kdWxlcy9Ab25mbG93L3Nkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JlZ2V4LmpzPzRiNzYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/regex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/rng.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/rng.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy9zZGsvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9ybmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRCO0FBQzVCLHVDQUF1Qzs7QUFFdkM7QUFDZTtBQUNmO0FBQ0EsSUFBSSw0REFBcUI7QUFDekI7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvc2RrL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzP2ZkMTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuY29uc3Qgcm5kczhQb29sID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTsgLy8gIyBvZiByYW5kb20gdmFsdWVzIHRvIHByZS1hbGxvY2F0ZVxuXG5sZXQgcG9vbFB0ciA9IHJuZHM4UG9vbC5sZW5ndGg7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIGlmIChwb29sUHRyID4gcm5kczhQb29sLmxlbmd0aCAtIDE2KSB7XG4gICAgY3J5cHRvLnJhbmRvbUZpbGxTeW5jKHJuZHM4UG9vbCk7XG4gICAgcG9vbFB0ciA9IDA7XG4gIH1cblxuICByZXR1cm4gcm5kczhQb29sLnNsaWNlKHBvb2xQdHIsIHBvb2xQdHIgKz0gMTYpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/rng.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/stringify.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/stringify.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy9zZGsvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zdHJpbmdpZnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPLHdEQUFRO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlFQUFlLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGhjaGFpbi1hcHAvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy9zZGsvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zdHJpbmdpZnkuanM/OGFiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxuY29uc3QgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHJldHVybiBieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICBjb25zdCB1dWlkID0gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0KTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/v4.js":
/*!************************************************************************!*\
  !*** ./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/v4.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n\nfunction v4(options, buf, offset) {\n  if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n    return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy9zZGsvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlDO0FBQ047QUFDc0I7O0FBRWpEO0FBQ0EsTUFBTSxrREFBTTtBQUNaLFdBQVcsa0RBQU07QUFDakI7O0FBRUE7QUFDQSxpREFBaUQsK0NBQUcsS0FBSzs7QUFFekQ7QUFDQSxtQ0FBbUM7O0FBRW5DO0FBQ0E7O0FBRUEsb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFNBQVMsOERBQWU7QUFDeEI7O0FBRUEsaUVBQWUsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aGNoYWluLWFwcC8uL25vZGVfbW9kdWxlcy9Ab25mbG93L3Nkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y0LmpzPzc1OTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/v4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/validate.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/validate.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/regex.js\");\n\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy9zZGsvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92YWxpZGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQjs7QUFFL0I7QUFDQSxxQ0FBcUMsaURBQUs7QUFDMUM7O0FBRUEsaUVBQWUsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aGNoYWluLWFwcC8uL25vZGVfbW9kdWxlcy9Ab25mbG93L3Nkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZhbGlkYXRlLmpzP2Q0ODIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJFR0VYIGZyb20gJy4vcmVnZXguanMnO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/sdk/node_modules/uuid/dist/esm-node/validate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/transport-http/dist/index.module.js":
/*!******************************************************************!*\
  !*** ./node_modules/@onflow/transport-http/dist/index.module.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTTPRequestError: () => (/* binding */ HTTPRequestError),\n/* harmony export */   WebsocketError: () => (/* binding */ WebsocketError),\n/* harmony export */   connectSubscribeEvents: () => (/* binding */ connectSubscribeEvents),\n/* harmony export */   httpTransport: () => (/* binding */ httpTransport),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   sendExecuteScript: () => (/* binding */ sendExecuteScript),\n/* harmony export */   sendGetAccount: () => (/* binding */ sendGetAccount),\n/* harmony export */   sendGetBlock: () => (/* binding */ sendGetBlock),\n/* harmony export */   sendGetBlockHeader: () => (/* binding */ sendGetBlockHeader),\n/* harmony export */   sendGetCollection: () => (/* binding */ sendGetCollection),\n/* harmony export */   sendGetEvents: () => (/* binding */ sendGetEvents),\n/* harmony export */   sendGetNetworkParameters: () => (/* binding */ sendGetNetworkParameters),\n/* harmony export */   sendGetNodeVersionInfo: () => (/* binding */ sendGetNodeVersionInfo),\n/* harmony export */   sendGetTransaction: () => (/* binding */ sendGetTransaction),\n/* harmony export */   sendGetTransactionStatus: () => (/* binding */ sendGetTransactionStatus),\n/* harmony export */   sendPing: () => (/* binding */ sendPing),\n/* harmony export */   sendTransaction: () => (/* binding */ sendTransaction)\n/* harmony export */ });\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var _onflow_rlp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/rlp */ \"(ssr)/./node_modules/@onflow/rlp/dist/rlp.module.js\");\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/./node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _onflow_util_address__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onflow/util-address */ \"(ssr)/./node_modules/@onflow/util-address/dist/util-address.module.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! isomorphic-ws */ \"(ssr)/./node_modules/isomorphic-ws/node.js\");\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(isomorphic_ws__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @onflow/typedefs */ \"(ssr)/./node_modules/@onflow/typedefs/dist/typedefs.module.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\nfunction safeParseJSON(data) {\n  try {\n    return JSON.parse(data);\n  } catch {\n    return null;\n  }\n}\n\n/**\n * This file was taken from the Axios project and modified to work with TypeScript/ES6 modules.\n *\n * The original file can be found on GitHub:\n * https://github.com/axios/axios/blob/fe7d09bb08fa1c0e414956b7fc760c80459b0a43/lib/helpers/combineURLs.js\n *\n * The original license is included below:\n *\n * Copyright (c) 2014 Matt Zabriskie\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param baseURL The base URL\n * @param relativeURL The relative URL\n * @returns The combined URL\n */\nfunction combineURLs(baseURL, relativeURL) {\n  return relativeURL ? baseURL.replace(/\\/+$/, \"\") + \"/\" + relativeURL.replace(/^\\/+/, \"\") : baseURL;\n}\n\nconst AbortController = globalThis.AbortController || __webpack_require__(/*! abort-controller */ \"(ssr)/./node_modules/abort-controller/dist/abort-controller.js\");\nclass HTTPRequestError extends Error {\n  constructor(_ref) {\n    let {\n      error,\n      hostname,\n      path,\n      method,\n      requestBody,\n      responseBody,\n      responseStatusText,\n      statusCode\n    } = _ref;\n    const msg = `\n      HTTP Request Error: An error occurred when interacting with the Access API.\n      ${error ? `error=${error}` : \"\"}\n      ${hostname ? `hostname=${hostname}` : \"\"}\n      ${path ? `path=${path}` : \"\"}\n      ${method ? `method=${method}` : \"\"}\n      ${requestBody ? `requestBody=${requestBody}` : \"\"}\n      ${responseBody ? `responseBody=${responseBody}` : \"\"}\n      ${responseStatusText ? `responseStatusText=${responseStatusText}` : \"\"}\n      ${statusCode ? `statusCode=${statusCode}` : \"\"}\n    `;\n    super(msg);\n    this.name = \"HTTP Request Error\";\n    this.statusCode = statusCode;\n    this.errorMessage = error;\n  }\n}\n\n/**\n * Creates an HTTP Request to be sent to a REST Access API via Fetch API.\n *\n * @param {object} options - Options for the HTTP Request\n * @param {String} options.hostname - Access API Hostname\n * @param {String} options.path - Path to the resource on the Access API\n * @param {String} options.method - HTTP Method\n * @param {object} options.body - HTTP Request Body\n * @param {object} [options.headers] - HTTP Request Headers\n * @param {boolean} [options.enableRequestLogging=true] - Enable/Disable request logging\n * @param {number} [options.retryLimit=5] - Number of times to retry request\n * @param {number} [options.retryIntervalMs=1000] - Time in milliseconds to wait before retrying request\n * @param {number} [options.timeoutLimit=30000] - Time in milliseconds to wait before timing out request\n *\n * @returns JSON object response from Access API.\n */\nasync function httpRequest(_ref2) {\n  let {\n    hostname,\n    path,\n    method,\n    body,\n    headers,\n    retryLimit = 5,\n    retryIntervalMs = 1000,\n    timeoutLimit = 30000,\n    enableRequestLogging = true\n  } = _ref2;\n  const bodyJSON = body ? JSON.stringify(body) : null;\n  function makeRequest() {\n    const controller = new AbortController();\n    const fetchTimeout = setTimeout(() => {\n      controller.abort();\n    }, timeoutLimit);\n    return cross_fetch__WEBPACK_IMPORTED_MODULE_3___default()(combineURLs(hostname, path).toString(), {\n      method: method,\n      body: bodyJSON,\n      headers,\n      signal: controller.signal\n    }).then(async res => {\n      if (res.ok) {\n        return res.json();\n      }\n      const responseText = await res.text().catch(() => null);\n      const response = safeParseJSON(responseText);\n      throw new HTTPRequestError({\n        error: response?.message,\n        hostname,\n        path,\n        method,\n        requestBody: bodyJSON,\n        responseBody: responseText,\n        responseStatusText: res.statusText,\n        statusCode: res.status\n      });\n    }).catch(async e => {\n      if (e instanceof HTTPRequestError) {\n        throw e;\n      }\n      if (e.name === \"AbortError\") {\n        throw e;\n      }\n\n      // Show AN error for all network errors\n      if (enableRequestLogging) {\n        await _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log({\n          title: \"Access Node Error\",\n          message: `The provided access node ${hostname} does not appear to be a valid REST/HTTP access node.\n  Please verify that you are not unintentionally using a GRPC access node.\n  See more here: https://docs.onflow.org/fcl/reference/sdk-guidelines/#connect`,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.error\n        });\n      }\n      throw new HTTPRequestError({\n        error: e?.message,\n        hostname,\n        path,\n        method,\n        requestBody: bodyJSON\n      });\n    }).finally(() => {\n      clearTimeout(fetchTimeout);\n    });\n  }\n  async function requestLoop() {\n    let retryAttempt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    try {\n      const resp = await makeRequest();\n      return resp;\n    } catch (error) {\n      const retryStatusCodes = [408, 429, 500, 502, 503, 504];\n      if (error.name === \"AbortError\" || retryStatusCodes.includes(error.statusCode)) {\n        return await new Promise((resolve, reject) => {\n          if (retryAttempt < retryLimit) {\n            if (enableRequestLogging) {\n              console.warn(`Access node unavailable, retrying in ${retryIntervalMs} ms...`);\n            }\n            setTimeout(() => {\n              resolve(requestLoop(retryAttempt + 1));\n            }, retryIntervalMs);\n          } else {\n            reject(error);\n          }\n        });\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  // Keep retrying request until server available or max attempts exceeded\n  return await requestLoop();\n}\n\nasync function sendExecuteScriptAtBlockIDRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/scripts?block_id=${ix.block.id}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))\n    }\n  });\n  return constructResponse$5(ix, context, res);\n}\nasync function sendExecuteScriptAtBlockHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/scripts?block_height=${ix.block.height}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))\n    }\n  });\n  return constructResponse$5(ix, context, res);\n}\nasync function sendExecuteScriptAtLatestBlockRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/scripts?block_height=${ix.block.isSealed ? \"sealed\" : \"final\"}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))\n    }\n  });\n  return constructResponse$5(ix, context, res);\n}\nfunction constructResponse$5(ix, context, res) {\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.encodedData = JSON.parse(context.Buffer.from(res, \"base64\").toString());\n  return ret;\n}\nasync function sendExecuteScript(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Execute Script Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Execute Script Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Execute Script Error: context.Buffer must be defined.`);\n  ix = await ix;\n  if (ix.block.id) {\n    return await sendExecuteScriptAtBlockIDRequest(ix, context, opts);\n  } else if (ix.block.height) {\n    return await sendExecuteScriptAtBlockHeightRequest(ix, context, opts);\n  } else {\n    return await sendExecuteScriptAtLatestBlockRequest(ix, context, opts);\n  }\n}\n\nconst HashAlgorithmIDs = {\n  SHA2_256: 1,\n  SHA2_384: 2,\n  SHA3_256: 3,\n  SHA3_384: 4,\n  KMAC128_BLS_BLS12_381: 5\n};\nconst SignatureAlgorithmIDs = {\n  ECDSA_P256: 1,\n  ECDSA_secp256k1: 2,\n  BLS_BLS12_381: 3\n};\nasync function sendGetAccountAtBlockHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/accounts/${ix.account.addr}?block_height=${ix.block.height}&expand=contracts,keys`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$4(ix, context, res);\n}\nasync function sendGetAccountAtLatestBlockRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/accounts/${ix.account.addr}?block_height=${ix.block.isSealed ? \"sealed\" : \"final\"}&expand=contracts,keys`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$4(ix, context, res);\n}\nfunction constructResponse$4(ix, context, res) {\n  let ret = context.response();\n  ret.tag = ix.tag;\n  const unwrapContracts = contracts => {\n    const c = {};\n    if (!contracts) return c;\n    for (let key of Object.keys(contracts)) {\n      c[key] = context.Buffer.from(contracts[key], \"base64\").toString();\n    }\n    return c;\n  };\n  ret.account = {\n    address: res.address,\n    balance: Number(res.balance),\n    code: \"\",\n    contracts: unwrapContracts(res.contracts),\n    keys: res.keys?.map(key => ({\n      index: Number(key.index),\n      publicKey: key.public_key.replace(/^0x/, \"\"),\n      signAlgo: SignatureAlgorithmIDs[key.signing_algorithm],\n      signAlgoString: key.signing_algorithm,\n      hashAlgo: HashAlgorithmIDs[key.hashing_algorithm],\n      hashAlgoString: key.hashing_algorithm,\n      sequenceNumber: Number(key.sequence_number),\n      weight: Number(key.weight),\n      revoked: key.revoked\n    })) ?? []\n  };\n  return ret;\n}\nasync function sendGetAccount(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Account Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Account Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Account Error: context.Buffer must be defined.`);\n  ix = await ix;\n  if (ix.block.height !== null) {\n    return await sendGetAccountAtBlockHeightRequest(ix, context, opts);\n  } else {\n    return await sendGetAccountAtLatestBlockRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetBlockHeaderByIDRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks/${ix.block.id}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$3(ix, context, res);\n}\nasync function sendGetBlockHeaderByHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${ix.block.height}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$3(ix, context, res);\n}\nasync function sendGetLatestBlockHeaderRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const height = ix.block?.isSealed ? \"sealed\" : \"final\";\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${height}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$3(ix, context, res);\n}\nfunction constructResponse$3(ix, context, res) {\n  const block = res.length ? res[0] : null;\n  const ret = context.response();\n  ret.tag = ix.tag;\n  ret.blockHeader = {\n    id: block.header.id,\n    parentId: block.header.parent_id,\n    height: Number(block.header.height),\n    timestamp: block.header.timestamp\n  };\n  return ret;\n}\nasync function sendGetBlockHeader(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Block Header Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Block Header Error: context.response must be defined.`);\n  ix = await ix;\n  const interactionHasBlockID = ix.block.id !== null;\n  const interactionHasBlockHeight = ix.block.height !== null;\n  if (interactionHasBlockID) {\n    return await sendGetBlockHeaderByIDRequest(ix, context, opts);\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockHeaderByHeightRequest(ix, context, opts);\n  } else {\n    return await sendGetLatestBlockHeaderRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetBlockByIDRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks/${ix.block.id}?expand=payload`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$2(ix, context, res);\n}\nasync function sendGetBlockByHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${ix.block.height}&expand=payload`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$2(ix, context, res);\n}\nasync function sendGetBlockRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const height = ix.block?.isSealed ? \"sealed\" : \"final\";\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${height}&expand=payload`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$2(ix, context, res);\n}\nfunction constructResponse$2(ix, context, res) {\n  const block = res.length ? res[0] : null;\n  const ret = context.response();\n  ret.tag = ix.tag;\n  ret.block = {\n    id: block.header.id,\n    parentId: block.header.parent_id,\n    height: Number(block.header.height),\n    timestamp: block.header.timestamp,\n    parentVoterSignature: block.header.parent_voter_signature,\n    collectionGuarantees: block.payload.collection_guarantees.map(collectionGuarantee => ({\n      collectionId: collectionGuarantee.collection_id,\n      signerIds: collectionGuarantee.signer_ids\n    })),\n    blockSeals: block.payload.block_seals.map(blockSeal => ({\n      blockId: blockSeal.block_id,\n      executionReceiptId: blockSeal.result_id\n    }))\n  };\n  return ret;\n}\nasync function sendGetBlock(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Block Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Block Error: context.response must be defined.`);\n  ix = await ix;\n  const interactionHasBlockID = ix.block.id !== null;\n  const interactionHasBlockHeight = ix.block.height !== null;\n  if (interactionHasBlockID) {\n    return await sendGetBlockByIDRequest(ix, context, opts);\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockByHeightRequest(ix, context, opts);\n  } else {\n    return await sendGetBlockRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetCollection(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Collection Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Collection Error: context.response must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/collections/${ix.collection.id}?expand=transactions`,\n    method: \"GET\",\n    body: null\n  });\n  const ret = context.response();\n  ret.tag = ix.tag;\n  ret.collection = {\n    id: res.id,\n    transactionIds: res.transactions.map(transaction => transaction.id)\n  };\n  return ret;\n}\n\nasync function sendGetEventsForHeightRangeRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/events?type=${ix.events.eventType}&start_height=${ix.events.start}&end_height=${ix.events.end}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$1(ix, context, res);\n}\nasync function sendGetEventsForBlockIDsRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/events?type=${ix.events.eventType}&block_ids=${ix.events.blockIds.join(\",\")}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$1(ix, context, res);\n}\nfunction constructResponse$1(ix, context, res) {\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.events = [];\n  res.forEach(block => block.events ? block.events.forEach(event => ret.events.push({\n    blockId: block.block_id,\n    blockHeight: Number(block.block_height),\n    blockTimestamp: block.block_timestamp,\n    type: event.type,\n    transactionId: event.transaction_id,\n    transactionIndex: Number(event.transaction_index),\n    eventIndex: Number(event.event_index),\n    payload: JSON.parse(context.Buffer.from(event.payload, \"base64\").toString())\n  })) : null);\n  return ret;\n}\nasync function sendGetEvents(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Events Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Events Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Events Error: context.Buffer must be defined.`);\n  ix = await ix;\n  const interactionContainsBlockHeightRange = ix.events.start !== null;\n  const interactionContainsBlockIDsList = Array.isArray(ix.events.blockIds) && ix.events.blockIds.length > 0;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(interactionContainsBlockHeightRange || interactionContainsBlockIDsList, \"SendGetEventsError: Unable to determine which get events request to send. Either a block height range, or block IDs must be specified.\");\n  if (interactionContainsBlockHeightRange) {\n    return await sendGetEventsForHeightRangeRequest(ix, context, opts);\n  } else {\n    return await sendGetEventsForBlockIDsRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetTransaction(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Transaction Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Transaction Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Transaction Error: context.Buffer must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/transactions/${ix.transaction.id}`,\n    method: \"GET\",\n    body: null\n  });\n  const unwrapKey = key => ({\n    address: key.address,\n    keyId: Number(key.key_index),\n    sequenceNumber: Number(key.sequence_number)\n  });\n  const unwrapSignature = sig => ({\n    address: sig.address,\n    keyId: Number(sig.key_index),\n    signature: sig.signature\n  });\n  const unwrapArg = arg => JSON.parse(context.Buffer.from(arg, \"base64\").toString());\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.transaction = {\n    script: context.Buffer.from(res.script, \"base64\").toString(),\n    args: [...res.arguments.map(unwrapArg)],\n    referenceBlockId: res.reference_block_id,\n    gasLimit: Number(res.gas_limit),\n    payer: res.payer,\n    proposalKey: res.proposal_key ? unwrapKey(res.proposal_key) : res.proposal_key,\n    authorizers: res.authorizers,\n    payloadSignatures: [...res.payload_signatures.map(unwrapSignature)],\n    envelopeSignatures: [...res.envelope_signatures.map(unwrapSignature)]\n  };\n  return ret;\n}\n\nconst STATUS_MAP$1 = {\n  UNKNOWN: 0,\n  PENDING: 1,\n  FINALIZED: 2,\n  EXECUTED: 3,\n  SEALED: 4,\n  EXPIRED: 5\n};\nasync function sendGetTransactionStatus(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Transaction Status Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Transaction Status Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Transaction Status Error: context.Buffer must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/transaction_results/${ix.transaction.id}`,\n    method: \"GET\",\n    body: null\n  });\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.transactionStatus = {\n    blockId: res.block_id,\n    status: STATUS_MAP$1[res.status.toUpperCase()] || \"\",\n    statusString: res.status.toUpperCase(),\n    statusCode: res.status_code,\n    errorMessage: res.error_message,\n    events: res.events.map(event => ({\n      type: event.type,\n      transactionId: event.transaction_id,\n      transactionIndex: Number(event.transaction_index),\n      eventIndex: Number(event.event_index),\n      payload: JSON.parse(context.Buffer.from(event.payload, \"base64\").toString())\n    }))\n  };\n  return ret;\n}\n\nasync function sendPing(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(Boolean(opts.node), `SDK Send Ping Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(Boolean(context.response), `SDK Send Ping Error: context.response must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  await httpRequest$1({\n    hostname: opts.node,\n    path: \"/v1/blocks?height=sealed\",\n    method: \"GET\",\n    body: null\n  });\n  let ret = typeof context?.response === \"function\" ? context.response() : {};\n  ret.tag = ix.tag;\n  return ret;\n}\n\nconst idof = acct => `${withPrefix(acct.addr)}-${acct.keyId}`;\nasync function sendTransaction(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Transaction Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Transaction Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Transaction Error: context.Buffer must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n\n  // Apply Non Payer Signatures to Payload Signatures\n  let payloadSignatures = [];\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (!acct.role.payer && acct.signature != null) {\n        const signature = {\n          address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(acct.addr),\n          key_index: String(acct.keyId),\n          signature: context.Buffer.from(acct.signature, \"hex\").toString(\"base64\")\n        };\n        if (!payloadSignatures.find(existingSignature => existingSignature.address === signature.address && existingSignature.key_index === signature.key_index && existingSignature.signature === signature.signature)) {\n          payloadSignatures.push(signature);\n        }\n      }\n    } catch (error) {\n      console.error(\"SDK HTTP Send Error: Trouble applying payload signature\", {\n        acct,\n        ix\n      });\n      throw error;\n    }\n  }\n\n  // Apply Payer Signatures to Envelope Signatures\n  let envelopeSignatures = {};\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (acct.role.payer && acct.signature != null) {\n        let id = acct.tempId || idof(acct);\n        envelopeSignatures[id] = envelopeSignatures[id] || {\n          address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(acct.addr),\n          key_index: String(acct.keyId),\n          signature: context.Buffer.from(acct.signature, \"hex\").toString(\"base64\")\n        };\n      }\n    } catch (error) {\n      console.error(\"SDK HTTP Send Error: Trouble applying envelope signature\", {\n        acct,\n        ix\n      });\n      throw error;\n    }\n  }\n  envelopeSignatures = Object.values(envelopeSignatures);\n  var t1 = Date.now();\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/transactions`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: [...ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))],\n      reference_block_id: ix.message.refBlock ? ix.message.refBlock : null,\n      gas_limit: String(ix.message.computeLimit),\n      payer: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr),\n      proposal_key: {\n        address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(ix.accounts[ix.proposer].addr),\n        key_index: String(ix.accounts[ix.proposer].keyId),\n        sequence_number: String(ix.accounts[ix.proposer].sequenceNum)\n      },\n      authorizers: ix.authorizations.map(tempId => ix.accounts[tempId].addr).reduce((prev, current) => {\n        return prev.find(item => item === current) ? prev : [...prev, current];\n      }, []).map(_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix),\n      payload_signatures: payloadSignatures,\n      envelope_signatures: envelopeSignatures\n    }\n  });\n  var t2 = Date.now();\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.transactionId = res.id;\n  if (typeof window !== \"undefined\" && typeof CustomEvent !== \"undefined\") {\n    window.dispatchEvent(new CustomEvent(\"FLOW::TX\", {\n      detail: {\n        txId: ret.transactionId,\n        delta: t2 - t1\n      }\n    }));\n  }\n  return ret;\n}\n\nasync function sendGetNetworkParameters(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Network Parameters Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Network Parameters Error: context.response must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/network/parameters`,\n    method: \"GET\",\n    body: null,\n    enableRequestLogging: opts.enableRequestLogging ?? true\n  });\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.networkParameters = {\n    chainId: res.chain_id\n  };\n  return ret;\n}\n\nasync function sendGetNodeVersionInfo(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Node Version Info Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Node Verison Info Error: context.response must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/node_version_info`,\n    method: \"GET\"\n  });\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.nodeVersionInfo = {\n    semver: res.semver,\n    commit: res.commit,\n    sporkId: res.spork_id,\n    protocolVersion: parseInt(res.protocol_version),\n    sporkRootBlockHeight: parseInt(res.spork_root_block_height),\n    nodeRootBlockHeight: parseInt(res.node_root_block_height)\n  };\n  return ret;\n}\n\nconst WebSocket = (isomorphic_ws__WEBPACK_IMPORTED_MODULE_6___default());\n\nclass WebsocketError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      reason,\n      message,\n      wasClean\n    } = _ref;\n    const msg = `\n      connectWs: connection closed with error${message ? `: ${message}` : \"\"}\n      ${code ? `code: ${code}` : \"\"}\n      ${reason ? `reason: ${reason}` : \"\"}\n      ${wasClean ? `wasClean: ${wasClean}` : \"\"}\n    `;\n    super(msg);\n    this.name = \"WebsocketError\";\n    this.code = code;\n    this.reason = reason;\n    this.wasClean = false;\n  }\n}\nfunction connectWs(_ref2) {\n  let {\n    hostname,\n    path,\n    params,\n    getParams,\n    retryLimit = 5,\n    retryIntervalMs = 1000\n  } = _ref2;\n  if (getParams && params) {\n    throw new Error(\"connectWs: cannot specify both params and getParams\");\n  }\n  let outputEmitter = new events__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();\n  let retryCount = 0;\n  const resolveParams = getParams || (() => params);\n  let close = () => {};\n  (function connect() {\n    let userClosed = false;\n    let hasOpened = false;\n\n    // Build a websocket connection with correct protocol & params\n    const url = buildConnectionUrl(hostname, path, resolveParams());\n    const ws = new WebSocket(url);\n    ws.onmessage = function (e) {\n      const data = safeParseJSON(e.data);\n      if (data) {\n        outputEmitter.emit(\"data\", data);\n      } else {\n        outputEmitter.emit(\"error\", new WebsocketError({\n          message: \"invalid JSON data\"\n        }));\n        this.close();\n      }\n    };\n    ws.onclose = function (e) {\n      if (userClosed) {\n        outputEmitter.emit(\"close\");\n        outputEmitter.removeAllListeners();\n        return;\n      }\n      if (!hasOpened) {\n        if (retryCount < retryLimit) {\n          retryCount++;\n          setTimeout(connect, retryIntervalMs);\n        } else {\n          outputEmitter.emit(\"error\", new WebsocketError({\n            wasClean: e.wasClean,\n            code: e.code,\n            reason: e.reason,\n            message: \"failed to connect\"\n          }));\n\n          // Emit close event on next tick so that the error event is emitted first\n          setTimeout(() => {\n            outputEmitter.emit(\"close\");\n            outputEmitter.removeAllListeners();\n          });\n        }\n      } else {\n        // If the connection was established before closing, attempt to reconnect\n        setTimeout(connect, retryIntervalMs);\n      }\n    };\n    ws.onopen = function () {\n      hasOpened = true;\n      retryCount = 0;\n    };\n    close = () => {\n      userClosed = true;\n      ws.close();\n    };\n  })();\n  return {\n    on(event, listener) {\n      outputEmitter.on(event, listener);\n      return this;\n    },\n    off(event, listener) {\n      outputEmitter.off(event, listener);\n      return this;\n    },\n    close() {\n      close();\n    }\n  };\n}\nfunction buildConnectionUrl(hostname, path, params) {\n  const url = new URL(path || \"\", hostname);\n  if (url.protocol === \"https:\") {\n    url.protocol = \"wss:\";\n  } else if (url.protocol === \"http:\") {\n    url.protocol = \"ws:\";\n  }\n  Object.entries(params || {}).forEach(_ref3 => {\n    let [key, value] = _ref3;\n    if (value) {\n      let formattedValue;\n      if (Array.isArray(value)) {\n        formattedValue = value.join(\",\");\n      } else {\n        formattedValue = value.toString();\n      }\n      url.searchParams.append(key, formattedValue);\n    }\n  });\n  return url.toString();\n}\n\nfunction constructData(ix, context, data) {\n  const response = context.response();\n  response.tag = ix.tag;\n  response.events = data.Events?.length > 0 ? data.Events.map(event => ({\n    blockId: data.BlockID,\n    blockHeight: Number(data.Height),\n    blockTimestamp: data.BlockTimestamp,\n    type: event.Type,\n    transactionId: event.TransactionID,\n    transactionIndex: Number(event.TransactionIndex),\n    eventIndex: Number(event.EventIndex),\n    payload: JSON.parse(context.Buffer.from(event.Payload, \"base64\").toString())\n  })) : null;\n  response.heartbeat = {\n    blockId: data.BlockID,\n    blockHeight: Number(data.Height),\n    blockTimestamp: data.BlockTimestamp\n  };\n  return response;\n}\nfunction constructResponse(ix, context, stream) {\n  const response = context.response();\n  response.tag = ix.tag;\n  response.streamConnection = stream;\n  return response;\n}\nasync function connectSubscribeEvents(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Events Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Events Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Events Error: context.Buffer must be defined.`);\n  const resolvedIx = await ix;\n  const connectWs$1 = opts.connectWs || connectWs;\n  const outputEmitter = new events__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();\n  let lastBlockHeight = null;\n\n  // Connect to the websocket & provide reconnection parameters\n  const connection = connectWs$1({\n    hostname: opts.node,\n    path: `/v1/subscribe_events`,\n    getParams: () => {\n      const params = {\n        event_types: resolvedIx.subscribeEvents?.eventTypes,\n        addresses: resolvedIx.subscribeEvents?.addresses,\n        contracts: resolvedIx.subscribeEvents?.contracts,\n        heartbeat_interval: resolvedIx.subscribeEvents?.heartbeatInterval\n      };\n\n      // If the lastBlockId is set, use it to resume the stream\n      if (lastBlockHeight) {\n        params.start_height = lastBlockHeight + 1;\n      } else {\n        params.start_block_id = resolvedIx.subscribeEvents?.startBlockId;\n        params.start_height = resolvedIx.subscribeEvents?.startHeight;\n      }\n      return params;\n    }\n  });\n\n  // Map the connection to a formatted response stream\n  connection.on(\"data\", data => {\n    const responseData = constructData(resolvedIx, context, data);\n    lastBlockHeight = responseData.heartbeat.blockHeight;\n    outputEmitter.emit(\"data\", responseData);\n  });\n  connection.on(\"error\", error => {\n    outputEmitter.emit(\"error\", error);\n  });\n  connection.on(\"close\", () => {\n    outputEmitter.emit(\"close\");\n  });\n  const responseStream = {\n    on(event, listener) {\n      outputEmitter.on(event, listener);\n      return this;\n    },\n    off(event, listener) {\n      outputEmitter.off(event, listener);\n      return this;\n    },\n    close() {\n      connection.close();\n    }\n  };\n  return constructResponse(resolvedIx, context, responseStream);\n}\n\nconst send = async function (ix, context) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(Boolean(opts?.node), `SDK Send Error: Either opts.node or \"accessNode.api\" in config must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(Boolean(context.ix), `SDK Send Error: context.ix must be defined.`);\n  ix = await ix;\n\n  // prettier-ignore\n  switch (true) {\n    case context.ix.isTransaction(ix):\n      return opts.sendTransaction ? opts.sendTransaction(ix, context, opts) : sendTransaction(ix, context, opts);\n    case context.ix.isGetTransactionStatus(ix):\n      return opts.sendGetTransactionStatus ? opts.sendGetTransactionStatus(ix, context, opts) : sendGetTransactionStatus(ix, context, opts);\n    case context.ix.isGetTransaction(ix):\n      return opts.sendGetTransaction ? opts.sendGetTransaction(ix, context, opts) : sendGetTransaction(ix, context, opts);\n    case context.ix.isScript(ix):\n      return opts.sendExecuteScript ? opts.sendExecuteScript(ix, context, opts) : sendExecuteScript(ix, context, opts);\n    case context.ix.isGetAccount(ix):\n      return opts.sendGetAccount ? opts.sendGetAccount(ix, context, opts) : sendGetAccount(ix, context, opts);\n    case context.ix.isGetEvents(ix):\n      return opts.sendGetEvents ? opts.sendGetEvents(ix, context, opts) : sendGetEvents(ix, context, opts);\n    case context.ix.isSubscribeEvents?.(ix):\n      return opts.connectSubscribeEvents ? opts.connectSubscribeEvents(ix, context, opts) : connectSubscribeEvents(ix, context, opts);\n    case context.ix.isGetBlock(ix):\n      return opts.sendGetBlock ? opts.sendGetBlock(ix, context, opts) : sendGetBlock(ix, context, opts);\n    case context.ix.isGetBlockHeader(ix):\n      return opts.sendGetBlockHeader ? opts.sendGetBlockHeader(ix, context, opts) : sendGetBlockHeader(ix, context, opts);\n    case context.ix.isGetCollection(ix):\n      return opts.sendGetCollection ? opts.sendGetCollection(ix, context, opts) : sendGetCollection(ix, context, opts);\n    case context.ix.isPing(ix):\n      return opts.sendPing ? opts.sendPing(ix, context, opts) : sendPing(ix, context, opts);\n    case context.ix.isGetNetworkParameters(ix):\n      return opts.sendGetNetworkParameters ? opts.sendGetNetworkParameters(ix, context, opts) : sendGetNetworkParameters(ix, context, opts);\n    case context.ix.isGetNodeVersionInfo?.(ix):\n      return opts.sendGetNodeVersionInfo ? opts.sendGetNodeVersionInfo(ix, context, opts) : sendGetNodeVersionInfo(ix, context, opts);\n    default:\n      return ix;\n  }\n};\n\nlet Action = /*#__PURE__*/function (Action) {\n  Action[\"LIST_SUBSCRIPTIONS\"] = \"list_subscriptions\";\n  Action[\"SUBSCRIBE\"] = \"subscribe\";\n  Action[\"UNSUBSCRIBE\"] = \"unsubscribe\";\n  return Action;\n}({});\nclass SocketError extends Error {\n  constructor(code, message) {\n    super(message);\n    this.name = \"SocketError\";\n    this.code = code;\n  }\n  static fromMessage(error) {\n    return new SocketError(error.code, error.message);\n  }\n}\n\nconst WS_OPEN = 1;\nclass SubscriptionManager {\n  counter = 0;\n  socket = null;\n  subscriptions = [];\n  reconnectAttempts = 0;\n  connectPromise = null;\n  closeConnection = null;\n  constructor(handlers, config) {\n    this.config = {\n      ...config,\n      reconnectOptions: {\n        initialReconnectDelay: 500,\n        reconnectAttempts: 5,\n        maxReconnectDelay: 5000,\n        ...config.reconnectOptions\n      }\n    };\n    this.handlers = handlers;\n  }\n  subscribe(opts) {\n    const idPromise = this._subscribe(opts);\n    return {\n      unsubscribe: () => {\n        // Unsubscribe when the ID is available\n        idPromise.then(id => id && this.unsubscribe(id));\n      }\n    };\n  }\n  async _subscribe(opts) {\n    // Get the data provider for the topic\n    const topicHandler = this.getHandler(opts.topic);\n    const subscriber = topicHandler.createSubscriber(opts.args, opts.onData, opts.onError);\n    let sub = null;\n    try {\n      // Connect the socket if it's not already open\n      await this.connect();\n\n      // Track the subscription locally\n      sub = {\n        id: String(this.counter++),\n        topic: opts.topic,\n        subscriber: subscriber\n      };\n      this.subscriptions.push(sub);\n\n      // Send the subscribe message\n      const response = await this.sendSubscribe(sub);\n      if (response.error) {\n        throw new Error(`Failed to subscribe to topic ${sub.topic}`, {\n          cause: SocketError.fromMessage(response.error)\n        });\n      }\n    } catch (e) {\n      // Unsubscribe if there was an error\n      subscriber.onError(e instanceof Error ? e : new Error(String(e)));\n      if (sub) this.unsubscribe(sub.id);\n      return null;\n    }\n    return sub.id;\n  }\n  unsubscribe(id) {\n    // Get the subscription\n    const sub = this.subscriptions.find(sub => sub.id === id);\n    if (!sub) return;\n\n    // Remove the subscription\n    this.subscriptions = this.subscriptions.filter(sub => sub.id !== id);\n\n    // Close the socket if there are no more subscriptions\n    if (this.subscriptions.length === 0) {\n      this.closeConnection?.();\n      return;\n    }\n\n    // Otherwise, the unsubscribe message\n    this.sendUnsubscribe(sub).catch(e => {\n      console.error(`Error while unsubscribing from topic: ${e}`);\n    });\n  }\n\n  // Lazy connect to the socket when the first subscription is made\n  async connect() {\n    if (this.connectPromise) {\n      return this.connectPromise;\n    }\n    this.connectPromise = new Promise((resolve, reject) => {\n      // If the socket is already open, do nothing\n      if (this.socket?.readyState === WS_OPEN) {\n        resolve();\n        return;\n      }\n      this.socket = new WebSocket(this.config.node);\n      const onMessage = event => {\n        const message = JSON.parse(event.data);\n\n        // Error message\n        if (\"action\" in message && message.error) {\n          const sub = this.subscriptions.find(sub => sub.id === message.subscription_id);\n          if (sub) {\n            sub.subscriber.onError(new Error(`Failed to subscribe to topic ${sub.topic}: ${message.error.message}`));\n            // Remove the subscription\n            this.subscriptions = this.subscriptions.filter(sub => sub.id !== message.subscription_id);\n          }\n          return;\n        }\n        const sub = this.subscriptions.find(sub => sub.id === message.subscription_id);\n        if (sub) {\n          if (!(\"action\" in message) && message.subscription_id === sub.id) {\n            sub.subscriber.onData(message.payload);\n          }\n        }\n      };\n      const onClose = () => {\n        this.handleSocketError(new Error(\"WebSocket closed\")).then(() => {\n          resolve();\n        }).catch(e => {\n          reject(e);\n        });\n      };\n      const onOpen = () => {\n        resolve();\n      };\n      this.socket.addEventListener(\"message\", onMessage);\n      this.socket.addEventListener(\"close\", onClose);\n      this.socket.addEventListener(\"open\", onOpen);\n      this.closeConnection = () => {\n        this.socket?.removeEventListener(\"message\", onMessage);\n        this.socket?.removeEventListener(\"close\", onClose);\n        this.socket?.removeEventListener(\"open\", onOpen);\n        this.socket?.close();\n        this.socket = null;\n        this.closeConnection = null;\n        this.connectPromise = null;\n      };\n    });\n    return this.connectPromise;\n  }\n  async handleSocketError(error) {\n    // Cleanup the connection\n    this.closeConnection?.();\n\n    // Validate the number of reconnection attempts\n    if (++this.reconnectAttempts >= this.config.reconnectOptions.reconnectAttempts) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log({\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.error,\n        title: \"WebSocket Error\",\n        message: `Failed to reconnect to the server after ${this.reconnectAttempts + 1} attempts: ${error}`\n      });\n      this.subscriptions.forEach(sub => {\n        sub.subscriber.onError(new Error(`Failed to reconnect to the server after ${this.reconnectAttempts + 1} attempts: ${error}`));\n      });\n      this.subscriptions = [];\n      this.reconnectAttempts = 0;\n      throw error;\n    } else {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log({\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.warn,\n        title: \"WebSocket Error\",\n        message: `WebSocket error, reconnecting in ${this.backoffInterval}ms: ${error}`\n      });\n\n      // Delay the reconnection\n      await new Promise(resolve => setTimeout(resolve, this.backoffInterval));\n\n      // Try to reconnect\n      await this.connect();\n\n      // Restore subscriptions\n      await Promise.all(this.subscriptions.map(async sub => {\n        await this.sendSubscribe(sub).catch(e => {\n          sub.subscriber.onError(new Error(`Failed to restore subscription: ${e}`));\n          // Remove the subscription\n          this.subscriptions = this.subscriptions.filter(s => s.id !== sub.id);\n        });\n      }));\n      this.reconnectAttempts = 0;\n    }\n  }\n  async sendSubscribe(sub) {\n    // Send the subscription message\n    const request = {\n      action: Action.SUBSCRIBE,\n      topic: sub.topic,\n      arguments: sub.subscriber.getConnectionArgs(),\n      subscription_id: String(sub.id)\n    };\n    const response = await this.request(request);\n    if (response.error) {\n      throw new Error(`Failed to subscribe to topic ${sub.topic}`, {\n        cause: SocketError.fromMessage(response.error)\n      });\n    }\n    return response;\n  }\n  async sendUnsubscribe(sub) {\n    // Send the unsubscribe message if the subscription has a remote id\n    const request = {\n      action: Action.UNSUBSCRIBE,\n      subscription_id: sub.id\n    };\n    this.socket?.send(JSON.stringify(request));\n    const response = await this.request(request);\n    if (response.error) {\n      throw new Error(`Failed to unsubscribe from topic ${sub.topic}`, {\n        cause: SocketError.fromMessage(response.error)\n      });\n    }\n    return response;\n  }\n  async request(request) {\n    let cleanup = () => {};\n    return await new Promise((resolve, reject) => {\n      if (!this.socket) {\n        reject(new Error(\"WebSocket is not connected\"));\n        return;\n      }\n\n      // Set the cleanup function to remove the event listeners\n      cleanup = () => {\n        this.socket?.removeEventListener(\"error\", onError);\n        this.socket?.removeEventListener(\"message\", onMessage);\n        this.socket?.removeEventListener(\"close\", onClose);\n      };\n\n      // Bind event listeners\n      this.socket.addEventListener(\"error\", onError);\n      this.socket.addEventListener(\"message\", onMessage);\n      this.socket.addEventListener(\"close\", onClose);\n\n      // Send the request\n      this.socket.send(JSON.stringify(request));\n      function onError(e) {\n        reject(new Error(`WebSocket error: ${e}`));\n      }\n      function onClose() {\n        reject(new Error(\"WebSocket closed\"));\n      }\n      function onMessage(event) {\n        const data = JSON.parse(event.data);\n        if (data.subscription_id === request.subscription_id) {\n          resolve(data);\n        }\n      }\n    }).finally(() => {\n      cleanup();\n    });\n  }\n  getHandler(topic) {\n    const handler = this.handlers.find(handler => handler.topic === topic);\n    if (!handler) {\n      throw new Error(`No handler found for topic ${topic}`);\n    }\n    return handler;\n  }\n\n  /**\n   * Calculate the backoff interval for reconnection attempts\n   * @returns The backoff interval in milliseconds\n   */\n  get backoffInterval() {\n    return Math.min(this.config.reconnectOptions.maxReconnectDelay, this.config.reconnectOptions.initialReconnectDelay * 2 ** this.reconnectAttempts);\n  }\n}\n\nfunction createSubscriptionHandler(handler) {\n  return handler;\n}\n\nconst blocksHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.BLOCKS,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(data) {\n        // Parse the raw data\n        const parsedData = {\n          block: {\n            id: data.header.id,\n            parentId: data.header.parent_id,\n            height: Number(data.header.height),\n            timestamp: data.header.timestamp,\n            parentVoterSignature: data.header.parent_voter_signature,\n            collectionGuarantees: data.payload.collection_guarantees.map(guarantee => ({\n              collectionId: guarantee.collection_id,\n              signerIds: guarantee.signer_indices\n            })),\n            blockSeals: data.payload.block_seals.map(seal => ({\n              blockId: seal.block_id,\n              executionReceiptId: seal.result_id\n            }))\n          }\n        };\n\n        // Update the resume args\n        resumeArgs = {\n          blockStatus: resumeArgs.blockStatus,\n          startBlockHeight: Number(BigInt(data.header.height) + BigInt(1))\n        };\n        onData(parsedData);\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        let encodedArgs = {\n          block_status: resumeArgs.blockStatus\n        };\n        if (\"startBlockHeight\" in resumeArgs && resumeArgs.startBlockHeight) {\n          return {\n            ...encodedArgs,\n            start_block_height: String(resumeArgs.startBlockHeight)\n          };\n        }\n        if (\"startBlockId\" in resumeArgs && resumeArgs.startBlockId) {\n          return {\n            ...encodedArgs,\n            start_block_id: resumeArgs.startBlockId\n          };\n        }\n        return encodedArgs;\n      }\n    };\n  }\n});\n\nconst blockHeadersHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.BLOCK_HEADERS,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(data) {\n        // Parse the raw data\n        const parsedData = {\n          blockHeader: {\n            id: data.id,\n            parentId: data.parent_id,\n            height: Number(data.height),\n            timestamp: data.timestamp,\n            parentVoterSignature: data.parent_voter_signature\n          }\n        };\n\n        // Update the resume args\n        resumeArgs = {\n          blockStatus: resumeArgs.blockStatus,\n          startBlockHeight: Number(BigInt(data.height) + BigInt(1))\n        };\n        onData(parsedData);\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        let encodedArgs = {\n          block_status: resumeArgs.blockStatus\n        };\n        if (\"startBlockHeight\" in resumeArgs && resumeArgs.startBlockHeight) {\n          return {\n            ...encodedArgs,\n            start_block_height: resumeArgs.startBlockHeight\n          };\n        }\n        if (\"startBlockId\" in resumeArgs && resumeArgs.startBlockId) {\n          return {\n            ...encodedArgs,\n            start_block_id: resumeArgs.startBlockId\n          };\n        }\n        return encodedArgs;\n      }\n    };\n  }\n});\n\nconst blockDigestsHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.BLOCK_DIGESTS,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(data) {\n        // Parse the raw data\n        const parsedData = {\n          blockDigest: {\n            id: data.block_id,\n            height: Number(data.height),\n            timestamp: data.timestamp\n          }\n        };\n\n        // Update the resume args\n        resumeArgs = {\n          blockStatus: resumeArgs.blockStatus,\n          startBlockId: String(BigInt(data.height) + BigInt(1))\n        };\n        onData(parsedData);\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        let encodedArgs = {\n          block_status: resumeArgs.blockStatus\n        };\n        if (\"startBlockHeight\" in resumeArgs && resumeArgs.startBlockHeight) {\n          return {\n            ...encodedArgs,\n            start_block_height: resumeArgs.startBlockHeight\n          };\n        }\n        if (\"startBlockId\" in resumeArgs && resumeArgs.startBlockId) {\n          return {\n            ...encodedArgs,\n            start_block_id: resumeArgs.startBlockId\n          };\n        }\n        return encodedArgs;\n      }\n    };\n  }\n});\n\nconst accountStatusesHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.ACCOUNT_STATUSES,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(rawData) {\n        const data = [];\n        for (const [address, events] of Object.entries(rawData.account_events)) {\n          for (const event of events) {\n            // Parse the raw data\n            const parsedData = {\n              accountStatusEvent: {\n                accountAddress: address,\n                blockId: rawData.block_id,\n                blockHeight: Number(rawData.height),\n                type: event.type,\n                transactionId: event.transaction_id,\n                transactionIndex: Number(event.transaction_index),\n                eventIndex: Number(event.event_index),\n                payload: JSON.parse(Buffer.from(event.payload, \"base64\").toString())\n              }\n            };\n            data.push(parsedData);\n          }\n\n          // Sort the messages by increasing message index\n          data.sort((a, b) => {\n            const txIndexDiff = a.accountStatusEvent.transactionIndex - b.accountStatusEvent.transactionIndex;\n            if (txIndexDiff !== 0) return txIndexDiff;\n            return a.accountStatusEvent.eventIndex - b.accountStatusEvent.eventIndex;\n          });\n\n          // Emit the messages\n          for (const message of data) {\n            onData(message);\n          }\n\n          // Update the resume args\n          resumeArgs = {\n            ...resumeArgs,\n            startBlockHeight: Number(BigInt(rawData.height) + BigInt(1)),\n            startBlockId: undefined\n          };\n        }\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        let encodedArgs = {\n          event_types: resumeArgs.eventTypes,\n          addresses: resumeArgs.addresses,\n          account_addresses: resumeArgs.accountAddresses\n        };\n        if (\"startBlockHeight\" in resumeArgs && resumeArgs.startBlockHeight) {\n          return {\n            ...encodedArgs,\n            start_block_height: resumeArgs.startBlockHeight\n          };\n        }\n        if (\"startBlockId\" in resumeArgs && resumeArgs.startBlockId) {\n          return {\n            ...encodedArgs,\n            start_block_id: resumeArgs.startBlockId\n          };\n        }\n        return encodedArgs;\n      }\n    };\n  }\n});\n\nconst STATUS_MAP = {\n  UNKNOWN: 0,\n  PENDING: 1,\n  FINALIZED: 2,\n  EXECUTED: 3,\n  SEALED: 4,\n  EXPIRED: 5\n};\nconst transactionStatusesHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.TRANSACTION_STATUSES,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(data) {\n        // Parse the raw data\n        const parsedData = {\n          transactionStatus: {\n            blockId: data.transaction_result.block_id,\n            status: STATUS_MAP[data.transaction_result.status.toUpperCase()],\n            statusString: data.transaction_result.status.toUpperCase(),\n            statusCode: data.transaction_result.status_code,\n            errorMessage: data.transaction_result.error_message,\n            events: data.transaction_result.events.map(event => ({\n              type: event.type,\n              transactionId: event.transaction_id,\n              transactionIndex: Number(event.transaction_index),\n              eventIndex: Number(event.event_index),\n              payload: JSON.parse(buffer__WEBPACK_IMPORTED_MODULE_8__.Buffer.from(event.payload, \"base64\").toString())\n            }))\n          }\n        };\n        onData(parsedData);\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        return {\n          tx_id: resumeArgs.transactionId\n        };\n      }\n    };\n  }\n});\n\nconst eventsHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.EVENTS,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(rawData) {\n        for (const event of rawData.events) {\n          // Parse the raw data\n          const result = {\n            event: {\n              blockId: rawData.block_id,\n              blockHeight: Number(rawData.block_height),\n              blockTimestamp: rawData.block_timestamp,\n              type: event.type,\n              transactionId: event.transaction_id,\n              transactionIndex: Number(event.transaction_index),\n              eventIndex: Number(event.event_index),\n              payload: JSON.parse(Buffer.from(event.payload, \"base64\").toString())\n            }\n          };\n          onData(result);\n        }\n\n        // Update the resume args\n        resumeArgs = {\n          ...resumeArgs,\n          startHeight: Number(BigInt(rawData.block_height) + BigInt(1)),\n          startBlockId: undefined\n        };\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        let encodedArgs = {\n          event_types: resumeArgs.eventTypes,\n          addresses: resumeArgs.addresses,\n          contracts: resumeArgs.contracts\n        };\n        if (\"startBlockHeight\" in resumeArgs && resumeArgs.startBlockHeight) {\n          return {\n            ...encodedArgs,\n            start_block_height: resumeArgs.startBlockHeight\n          };\n        }\n        if (\"startBlockId\" in resumeArgs && resumeArgs.startBlockId) {\n          return {\n            ...encodedArgs,\n            start_block_id: resumeArgs.startBlockId\n          };\n        }\n        return encodedArgs;\n      }\n    };\n  }\n});\n\nconst SUBSCRIPTION_HANDLERS = [blocksHandler, blockHeadersHandler, blockDigestsHandler, accountStatusesHandler, transactionStatusesHandler, eventsHandler];\n\n// Map of SubscriptionManager instances by access node URL\nlet subscriptionManagerMap = new Map();\nfunction subscribe(_ref, opts) {\n  let {\n    topic,\n    args,\n    onData,\n    onError\n  } = _ref;\n  // Get the SubscriptionManager instance for the access node, or create a new one\n  const node = getWsUrl(opts.node);\n  const manager = subscriptionManagerMap.get(node) || new SubscriptionManager(SUBSCRIPTION_HANDLERS, {\n    node\n  });\n  subscriptionManagerMap.set(node, manager);\n  return manager.subscribe({\n    topic,\n    args,\n    onData: onData,\n    onError\n  });\n}\nfunction getWsUrl(node) {\n  const url = new URL(combineURLs(node, \"/v1/ws\"));\n  if (url.protocol === \"https:\") {\n    url.protocol = \"wss:\";\n  } else if (url.protocol === \"http:\") {\n    url.protocol = \"ws:\";\n  }\n  return url.toString();\n}\n\nconst httpTransport = {\n  send,\n  subscribe\n};\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy90cmFuc3BvcnQtaHR0cC9kaXN0L2luZGV4Lm1vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBbUQ7QUFDOUI7QUFDeUI7QUFDTDtBQUNTO0FBQ1o7QUFDQztBQUNjO0FBQ1Q7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0RBQXNELG1CQUFPLENBQUMsd0ZBQWtCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLFFBQVEsaUJBQWlCLE1BQU07QUFDL0IsUUFBUSx1QkFBdUIsU0FBUztBQUN4QyxRQUFRLGVBQWUsS0FBSztBQUM1QixRQUFRLG1CQUFtQixPQUFPO0FBQ2xDLFFBQVEsNkJBQTZCLFlBQVk7QUFDakQsUUFBUSwrQkFBK0IsYUFBYTtBQUNwRCxRQUFRLDJDQUEyQyxtQkFBbUI7QUFDdEUsUUFBUSwyQkFBMkIsV0FBVztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFdBQVcsa0RBQWM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLG9EQUFVO0FBQ3hCO0FBQ0EsK0NBQStDLFVBQVU7QUFDekQ7QUFDQTtBQUNBLGlCQUFpQix1REFBYTtBQUM5QixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLGlCQUFpQjtBQUNwRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxZQUFZO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGdCQUFnQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx1Q0FBdUM7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxpRUFBUztBQUNYLEVBQUUsaUVBQVM7QUFDWCxFQUFFLGlFQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixnQkFBZ0IsZ0JBQWdCLGdCQUFnQjtBQUMxRTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixnQkFBZ0IsZ0JBQWdCLHVDQUF1QztBQUNqRztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsaUVBQVM7QUFDWCxFQUFFLGlFQUFTO0FBQ1gsRUFBRSxpRUFBUztBQUNYO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixnQkFBZ0I7QUFDL0M7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixPQUFPO0FBQ3RDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsaUVBQVM7QUFDWCxFQUFFLGlFQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixnQkFBZ0I7QUFDL0M7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixPQUFPO0FBQ3RDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLGlFQUFTO0FBQ1gsRUFBRSxpRUFBUztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsaUVBQVM7QUFDWCxFQUFFLGlFQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGlCQUFpQjtBQUM5QztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsb0JBQW9CLGdCQUFnQixnQkFBZ0IsY0FBYyxjQUFjO0FBQzdHO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG9CQUFvQixhQUFhLDZCQUE2QjtBQUMzRjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxpRUFBUztBQUNYLEVBQUUsaUVBQVM7QUFDWCxFQUFFLGlFQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsRUFBRSxpRUFBUztBQUNYO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsaUVBQVM7QUFDWCxFQUFFLGlFQUFTO0FBQ1gsRUFBRSxpRUFBUztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtCQUFrQjtBQUNoRDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLGlFQUFTO0FBQ1gsRUFBRSxpRUFBUztBQUNYLEVBQUUsaUVBQVM7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxrQkFBa0I7QUFDdkQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLGlFQUFTO0FBQ1gsRUFBRSxpRUFBUztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0Isc0JBQXNCLEdBQUcsV0FBVztBQUM1RDtBQUNBO0FBQ0E7QUFDQSxFQUFFLGlFQUFTO0FBQ1gsRUFBRSxpRUFBUztBQUNYLEVBQUUsaUVBQVM7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixnRUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdFQUFVO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxnRUFBVTtBQUN2QjtBQUNBLGlCQUFpQixnRUFBVTtBQUMzQjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPLFVBQVUsNERBQVU7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLGlFQUFTO0FBQ1gsRUFBRSxpRUFBUztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRSxpRUFBUztBQUNYLEVBQUUsaUVBQVM7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixzREFBVTs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSwrQ0FBK0MsZUFBZSxRQUFRO0FBQ3RFLFFBQVEsZ0JBQWdCLEtBQUs7QUFDN0IsUUFBUSxvQkFBb0IsT0FBTztBQUNuQyxRQUFRLHdCQUF3QixTQUFTO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixnREFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLGlFQUFTO0FBQ1gsRUFBRSxpRUFBUztBQUNYLEVBQUUsaUVBQVM7QUFDWDtBQUNBO0FBQ0EsNEJBQTRCLGdEQUFZO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUUsaUVBQVM7QUFDWCxFQUFFLGlFQUFTO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxHQUFHO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELFVBQVU7QUFDbEU7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZEQUE2RCxFQUFFO0FBQy9ELEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLFVBQVUsSUFBSSxzQkFBc0I7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU0sb0RBQVU7QUFDaEIsZUFBZSx1REFBYTtBQUM1QjtBQUNBLDREQUE0RCw0QkFBNEIsWUFBWSxNQUFNO0FBQzFHLE9BQU87QUFDUDtBQUNBLG9GQUFvRiw0QkFBNEIsWUFBWSxNQUFNO0FBQ2xJLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sTUFBTSxvREFBVTtBQUNoQixlQUFlLHVEQUFhO0FBQzVCO0FBQ0EscURBQXFELHFCQUFxQixNQUFNLE1BQU07QUFDdEYsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLEVBQUU7QUFDaEY7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsVUFBVTtBQUNoRTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsVUFBVTtBQUNwRTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLEVBQUU7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsTUFBTTtBQUMxRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLCtEQUFpQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsU0FBUywrREFBaUI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQSxTQUFTLCtEQUFpQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsU0FBUywrREFBaUI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsK0RBQWlCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDBDQUFRO0FBQzFDLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQSxTQUFTLCtEQUFpQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFMlQ7QUFDM1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGhjaGFpbi1hcHAvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy90cmFuc3BvcnQtaHR0cC9kaXN0L2luZGV4Lm1vZHVsZS5qcz8yOWYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0BvbmZsb3cvdXRpbC1pbnZhcmlhbnQnO1xuaW1wb3J0ICdAb25mbG93L3JscCc7XG5pbXBvcnQgKiBhcyBsb2dnZXIgZnJvbSAnQG9uZmxvdy91dGlsLWxvZ2dlcic7XG5pbXBvcnQgZmV0Y2hUcmFuc3BvcnQgZnJvbSAnY3Jvc3MtZmV0Y2gnO1xuaW1wb3J0IHsgc2Fuc1ByZWZpeCB9IGZyb20gJ0BvbmZsb3cvdXRpbC1hZGRyZXNzJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgX1dlYlNvY2tldCBmcm9tICdpc29tb3JwaGljLXdzJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvblRvcGljIH0gZnJvbSAnQG9uZmxvdy90eXBlZGVmcyc7XG5pbXBvcnQgeyBCdWZmZXIgYXMgQnVmZmVyJDEgfSBmcm9tICdidWZmZXInO1xuXG5mdW5jdGlvbiBzYWZlUGFyc2VKU09OKGRhdGEpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGZpbGUgd2FzIHRha2VuIGZyb20gdGhlIEF4aW9zIHByb2plY3QgYW5kIG1vZGlmaWVkIHRvIHdvcmsgd2l0aCBUeXBlU2NyaXB0L0VTNiBtb2R1bGVzLlxuICpcbiAqIFRoZSBvcmlnaW5hbCBmaWxlIGNhbiBiZSBmb3VuZCBvbiBHaXRIdWI6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvYmxvYi9mZTdkMDliYjA4ZmExYzBlNDE0OTU2YjdmYzc2MGM4MDQ1OWIwYTQzL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzXG4gKlxuICogVGhlIG9yaWdpbmFsIGxpY2Vuc2UgaXMgaW5jbHVkZWQgYmVsb3c6XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IE1hdHQgWmFicmlza2llXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTCA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCBcIlwiKSArIFwiL1wiICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCBcIlwiKSA6IGJhc2VVUkw7XG59XG5cbmNvbnN0IEFib3J0Q29udHJvbGxlciA9IGdsb2JhbFRoaXMuQWJvcnRDb250cm9sbGVyIHx8IHJlcXVpcmUoXCJhYm9ydC1jb250cm9sbGVyXCIpO1xuY2xhc3MgSFRUUFJlcXVlc3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoX3JlZikge1xuICAgIGxldCB7XG4gICAgICBlcnJvcixcbiAgICAgIGhvc3RuYW1lLFxuICAgICAgcGF0aCxcbiAgICAgIG1ldGhvZCxcbiAgICAgIHJlcXVlc3RCb2R5LFxuICAgICAgcmVzcG9uc2VCb2R5LFxuICAgICAgcmVzcG9uc2VTdGF0dXNUZXh0LFxuICAgICAgc3RhdHVzQ29kZVxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IG1zZyA9IGBcbiAgICAgIEhUVFAgUmVxdWVzdCBFcnJvcjogQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBBY2Nlc3MgQVBJLlxuICAgICAgJHtlcnJvciA/IGBlcnJvcj0ke2Vycm9yfWAgOiBcIlwifVxuICAgICAgJHtob3N0bmFtZSA/IGBob3N0bmFtZT0ke2hvc3RuYW1lfWAgOiBcIlwifVxuICAgICAgJHtwYXRoID8gYHBhdGg9JHtwYXRofWAgOiBcIlwifVxuICAgICAgJHttZXRob2QgPyBgbWV0aG9kPSR7bWV0aG9kfWAgOiBcIlwifVxuICAgICAgJHtyZXF1ZXN0Qm9keSA/IGByZXF1ZXN0Qm9keT0ke3JlcXVlc3RCb2R5fWAgOiBcIlwifVxuICAgICAgJHtyZXNwb25zZUJvZHkgPyBgcmVzcG9uc2VCb2R5PSR7cmVzcG9uc2VCb2R5fWAgOiBcIlwifVxuICAgICAgJHtyZXNwb25zZVN0YXR1c1RleHQgPyBgcmVzcG9uc2VTdGF0dXNUZXh0PSR7cmVzcG9uc2VTdGF0dXNUZXh0fWAgOiBcIlwifVxuICAgICAgJHtzdGF0dXNDb2RlID8gYHN0YXR1c0NvZGU9JHtzdGF0dXNDb2RlfWAgOiBcIlwifVxuICAgIGA7XG4gICAgc3VwZXIobXNnKTtcbiAgICB0aGlzLm5hbWUgPSBcIkhUVFAgUmVxdWVzdCBFcnJvclwiO1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBlcnJvcjtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gSFRUUCBSZXF1ZXN0IHRvIGJlIHNlbnQgdG8gYSBSRVNUIEFjY2VzcyBBUEkgdmlhIEZldGNoIEFQSS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBIVFRQIFJlcXVlc3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmhvc3RuYW1lIC0gQWNjZXNzIEFQSSBIb3N0bmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMucGF0aCAtIFBhdGggdG8gdGhlIHJlc291cmNlIG9uIHRoZSBBY2Nlc3MgQVBJXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5tZXRob2QgLSBIVFRQIE1ldGhvZFxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMuYm9keSAtIEhUVFAgUmVxdWVzdCBCb2R5XG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuaGVhZGVyc10gLSBIVFRQIFJlcXVlc3QgSGVhZGVyc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5lbmFibGVSZXF1ZXN0TG9nZ2luZz10cnVlXSAtIEVuYWJsZS9EaXNhYmxlIHJlcXVlc3QgbG9nZ2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnJldHJ5TGltaXQ9NV0gLSBOdW1iZXIgb2YgdGltZXMgdG8gcmV0cnkgcmVxdWVzdFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnJldHJ5SW50ZXJ2YWxNcz0xMDAwXSAtIFRpbWUgaW4gbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHJldHJ5aW5nIHJlcXVlc3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy50aW1lb3V0TGltaXQ9MzAwMDBdIC0gVGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgdGltaW5nIG91dCByZXF1ZXN0XG4gKlxuICogQHJldHVybnMgSlNPTiBvYmplY3QgcmVzcG9uc2UgZnJvbSBBY2Nlc3MgQVBJLlxuICovXG5hc3luYyBmdW5jdGlvbiBodHRwUmVxdWVzdChfcmVmMikge1xuICBsZXQge1xuICAgIGhvc3RuYW1lLFxuICAgIHBhdGgsXG4gICAgbWV0aG9kLFxuICAgIGJvZHksXG4gICAgaGVhZGVycyxcbiAgICByZXRyeUxpbWl0ID0gNSxcbiAgICByZXRyeUludGVydmFsTXMgPSAxMDAwLFxuICAgIHRpbWVvdXRMaW1pdCA9IDMwMDAwLFxuICAgIGVuYWJsZVJlcXVlc3RMb2dnaW5nID0gdHJ1ZVxuICB9ID0gX3JlZjI7XG4gIGNvbnN0IGJvZHlKU09OID0gYm9keSA/IEpTT04uc3RyaW5naWZ5KGJvZHkpIDogbnVsbDtcbiAgZnVuY3Rpb24gbWFrZVJlcXVlc3QoKSB7XG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBjb25zdCBmZXRjaFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB9LCB0aW1lb3V0TGltaXQpO1xuICAgIHJldHVybiBmZXRjaFRyYW5zcG9ydChjb21iaW5lVVJMcyhob3N0bmFtZSwgcGF0aCkudG9TdHJpbmcoKSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICBib2R5OiBib2R5SlNPTixcbiAgICAgIGhlYWRlcnMsXG4gICAgICBzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsXG4gICAgfSkudGhlbihhc3luYyByZXMgPT4ge1xuICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHJlcy50ZXh0KCkuY2F0Y2goKCkgPT4gbnVsbCk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHNhZmVQYXJzZUpTT04ocmVzcG9uc2VUZXh0KTtcbiAgICAgIHRocm93IG5ldyBIVFRQUmVxdWVzdEVycm9yKHtcbiAgICAgICAgZXJyb3I6IHJlc3BvbnNlPy5tZXNzYWdlLFxuICAgICAgICBob3N0bmFtZSxcbiAgICAgICAgcGF0aCxcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICByZXF1ZXN0Qm9keTogYm9keUpTT04sXG4gICAgICAgIHJlc3BvbnNlQm9keTogcmVzcG9uc2VUZXh0LFxuICAgICAgICByZXNwb25zZVN0YXR1c1RleHQ6IHJlcy5zdGF0dXNUZXh0LFxuICAgICAgICBzdGF0dXNDb2RlOiByZXMuc3RhdHVzXG4gICAgICB9KTtcbiAgICB9KS5jYXRjaChhc3luYyBlID0+IHtcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgSFRUUFJlcXVlc3RFcnJvcikge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgICAgaWYgKGUubmFtZSA9PT0gXCJBYm9ydEVycm9yXCIpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cblxuICAgICAgLy8gU2hvdyBBTiBlcnJvciBmb3IgYWxsIG5ldHdvcmsgZXJyb3JzXG4gICAgICBpZiAoZW5hYmxlUmVxdWVzdExvZ2dpbmcpIHtcbiAgICAgICAgYXdhaXQgbG9nZ2VyLmxvZyh7XG4gICAgICAgICAgdGl0bGU6IFwiQWNjZXNzIE5vZGUgRXJyb3JcIixcbiAgICAgICAgICBtZXNzYWdlOiBgVGhlIHByb3ZpZGVkIGFjY2VzcyBub2RlICR7aG9zdG5hbWV9IGRvZXMgbm90IGFwcGVhciB0byBiZSBhIHZhbGlkIFJFU1QvSFRUUCBhY2Nlc3Mgbm9kZS5cbiAgUGxlYXNlIHZlcmlmeSB0aGF0IHlvdSBhcmUgbm90IHVuaW50ZW50aW9uYWxseSB1c2luZyBhIEdSUEMgYWNjZXNzIG5vZGUuXG4gIFNlZSBtb3JlIGhlcmU6IGh0dHBzOi8vZG9jcy5vbmZsb3cub3JnL2ZjbC9yZWZlcmVuY2Uvc2RrLWd1aWRlbGluZXMvI2Nvbm5lY3RgLFxuICAgICAgICAgIGxldmVsOiBsb2dnZXIuTEVWRUxTLmVycm9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEhUVFBSZXF1ZXN0RXJyb3Ioe1xuICAgICAgICBlcnJvcjogZT8ubWVzc2FnZSxcbiAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgIHBhdGgsXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcmVxdWVzdEJvZHk6IGJvZHlKU09OXG4gICAgICB9KTtcbiAgICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChmZXRjaFRpbWVvdXQpO1xuICAgIH0pO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3RMb29wKCkge1xuICAgIGxldCByZXRyeUF0dGVtcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBtYWtlUmVxdWVzdCgpO1xuICAgICAgcmV0dXJuIHJlc3A7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IHJldHJ5U3RhdHVzQ29kZXMgPSBbNDA4LCA0MjksIDUwMCwgNTAyLCA1MDMsIDUwNF07XG4gICAgICBpZiAoZXJyb3IubmFtZSA9PT0gXCJBYm9ydEVycm9yXCIgfHwgcmV0cnlTdGF0dXNDb2Rlcy5pbmNsdWRlcyhlcnJvci5zdGF0dXNDb2RlKSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGlmIChyZXRyeUF0dGVtcHQgPCByZXRyeUxpbWl0KSB7XG4gICAgICAgICAgICBpZiAoZW5hYmxlUmVxdWVzdExvZ2dpbmcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBBY2Nlc3Mgbm9kZSB1bmF2YWlsYWJsZSwgcmV0cnlpbmcgaW4gJHtyZXRyeUludGVydmFsTXN9IG1zLi4uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXF1ZXN0TG9vcChyZXRyeUF0dGVtcHQgKyAxKSk7XG4gICAgICAgICAgICB9LCByZXRyeUludGVydmFsTXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBLZWVwIHJldHJ5aW5nIHJlcXVlc3QgdW50aWwgc2VydmVyIGF2YWlsYWJsZSBvciBtYXggYXR0ZW1wdHMgZXhjZWVkZWRcbiAgcmV0dXJuIGF3YWl0IHJlcXVlc3RMb29wKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbmRFeGVjdXRlU2NyaXB0QXRCbG9ja0lEUmVxdWVzdChpeCwgY29udGV4dCwgb3B0cykge1xuICBjb25zdCBodHRwUmVxdWVzdCQxID0gb3B0cy5odHRwUmVxdWVzdCB8fCBodHRwUmVxdWVzdDtcbiAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFJlcXVlc3QkMSh7XG4gICAgaG9zdG5hbWU6IG9wdHMubm9kZSxcbiAgICBwYXRoOiBgL3YxL3NjcmlwdHM/YmxvY2tfaWQ9JHtpeC5ibG9jay5pZH1gLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keToge1xuICAgICAgc2NyaXB0OiBjb250ZXh0LkJ1ZmZlci5mcm9tKGl4Lm1lc3NhZ2UuY2FkZW5jZSkudG9TdHJpbmcoXCJiYXNlNjRcIiksXG4gICAgICBhcmd1bWVudHM6IGl4Lm1lc3NhZ2UuYXJndW1lbnRzLm1hcChhcmcgPT4gY29udGV4dC5CdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShpeC5hcmd1bWVudHNbYXJnXS5hc0FyZ3VtZW50KSkudG9TdHJpbmcoXCJiYXNlNjRcIikpXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNvbnN0cnVjdFJlc3BvbnNlJDUoaXgsIGNvbnRleHQsIHJlcyk7XG59XG5hc3luYyBmdW5jdGlvbiBzZW5kRXhlY3V0ZVNjcmlwdEF0QmxvY2tIZWlnaHRSZXF1ZXN0KGl4LCBjb250ZXh0LCBvcHRzKSB7XG4gIGNvbnN0IGh0dHBSZXF1ZXN0JDEgPSBvcHRzLmh0dHBSZXF1ZXN0IHx8IGh0dHBSZXF1ZXN0O1xuICBjb25zdCByZXMgPSBhd2FpdCBodHRwUmVxdWVzdCQxKHtcbiAgICBob3N0bmFtZTogb3B0cy5ub2RlLFxuICAgIHBhdGg6IGAvdjEvc2NyaXB0cz9ibG9ja19oZWlnaHQ9JHtpeC5ibG9jay5oZWlnaHR9YCxcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IHtcbiAgICAgIHNjcmlwdDogY29udGV4dC5CdWZmZXIuZnJvbShpeC5tZXNzYWdlLmNhZGVuY2UpLnRvU3RyaW5nKFwiYmFzZTY0XCIpLFxuICAgICAgYXJndW1lbnRzOiBpeC5tZXNzYWdlLmFyZ3VtZW50cy5tYXAoYXJnID0+IGNvbnRleHQuQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoaXguYXJndW1lbnRzW2FyZ10uYXNBcmd1bWVudCkpLnRvU3RyaW5nKFwiYmFzZTY0XCIpKVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjb25zdHJ1Y3RSZXNwb25zZSQ1KGl4LCBjb250ZXh0LCByZXMpO1xufVxuYXN5bmMgZnVuY3Rpb24gc2VuZEV4ZWN1dGVTY3JpcHRBdExhdGVzdEJsb2NrUmVxdWVzdChpeCwgY29udGV4dCwgb3B0cykge1xuICBjb25zdCBodHRwUmVxdWVzdCQxID0gb3B0cy5odHRwUmVxdWVzdCB8fCBodHRwUmVxdWVzdDtcbiAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFJlcXVlc3QkMSh7XG4gICAgaG9zdG5hbWU6IG9wdHMubm9kZSxcbiAgICBwYXRoOiBgL3YxL3NjcmlwdHM/YmxvY2tfaGVpZ2h0PSR7aXguYmxvY2suaXNTZWFsZWQgPyBcInNlYWxlZFwiIDogXCJmaW5hbFwifWAsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiB7XG4gICAgICBzY3JpcHQ6IGNvbnRleHQuQnVmZmVyLmZyb20oaXgubWVzc2FnZS5jYWRlbmNlKS50b1N0cmluZyhcImJhc2U2NFwiKSxcbiAgICAgIGFyZ3VtZW50czogaXgubWVzc2FnZS5hcmd1bWVudHMubWFwKGFyZyA9PiBjb250ZXh0LkJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KGl4LmFyZ3VtZW50c1thcmddLmFzQXJndW1lbnQpKS50b1N0cmluZyhcImJhc2U2NFwiKSlcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY29uc3RydWN0UmVzcG9uc2UkNShpeCwgY29udGV4dCwgcmVzKTtcbn1cbmZ1bmN0aW9uIGNvbnN0cnVjdFJlc3BvbnNlJDUoaXgsIGNvbnRleHQsIHJlcykge1xuICBsZXQgcmV0ID0gY29udGV4dC5yZXNwb25zZSgpO1xuICByZXQudGFnID0gaXgudGFnO1xuICByZXQuZW5jb2RlZERhdGEgPSBKU09OLnBhcnNlKGNvbnRleHQuQnVmZmVyLmZyb20ocmVzLCBcImJhc2U2NFwiKS50b1N0cmluZygpKTtcbiAgcmV0dXJuIHJldDtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNlbmRFeGVjdXRlU2NyaXB0KGl4KSB7XG4gIGxldCBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICBpbnZhcmlhbnQob3B0cy5ub2RlLCBgU0RLIFNlbmQgRXhlY3V0ZSBTY3JpcHQgRXJyb3I6IG9wdHMubm9kZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGludmFyaWFudChjb250ZXh0LnJlc3BvbnNlLCBgU0RLIFNlbmQgRXhlY3V0ZSBTY3JpcHQgRXJyb3I6IGNvbnRleHQucmVzcG9uc2UgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBpbnZhcmlhbnQoY29udGV4dC5CdWZmZXIsIGBTREsgU2VuZCBFeGVjdXRlIFNjcmlwdCBFcnJvcjogY29udGV4dC5CdWZmZXIgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBpeCA9IGF3YWl0IGl4O1xuICBpZiAoaXguYmxvY2suaWQpIHtcbiAgICByZXR1cm4gYXdhaXQgc2VuZEV4ZWN1dGVTY3JpcHRBdEJsb2NrSURSZXF1ZXN0KGl4LCBjb250ZXh0LCBvcHRzKTtcbiAgfSBlbHNlIGlmIChpeC5ibG9jay5oZWlnaHQpIHtcbiAgICByZXR1cm4gYXdhaXQgc2VuZEV4ZWN1dGVTY3JpcHRBdEJsb2NrSGVpZ2h0UmVxdWVzdChpeCwgY29udGV4dCwgb3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGF3YWl0IHNlbmRFeGVjdXRlU2NyaXB0QXRMYXRlc3RCbG9ja1JlcXVlc3QoaXgsIGNvbnRleHQsIG9wdHMpO1xuICB9XG59XG5cbmNvbnN0IEhhc2hBbGdvcml0aG1JRHMgPSB7XG4gIFNIQTJfMjU2OiAxLFxuICBTSEEyXzM4NDogMixcbiAgU0hBM18yNTY6IDMsXG4gIFNIQTNfMzg0OiA0LFxuICBLTUFDMTI4X0JMU19CTFMxMl8zODE6IDVcbn07XG5jb25zdCBTaWduYXR1cmVBbGdvcml0aG1JRHMgPSB7XG4gIEVDRFNBX1AyNTY6IDEsXG4gIEVDRFNBX3NlY3AyNTZrMTogMixcbiAgQkxTX0JMUzEyXzM4MTogM1xufTtcbmFzeW5jIGZ1bmN0aW9uIHNlbmRHZXRBY2NvdW50QXRCbG9ja0hlaWdodFJlcXVlc3QoaXgsIGNvbnRleHQsIG9wdHMpIHtcbiAgY29uc3QgaHR0cFJlcXVlc3QkMSA9IG9wdHMuaHR0cFJlcXVlc3QgfHwgaHR0cFJlcXVlc3Q7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGh0dHBSZXF1ZXN0JDEoe1xuICAgIGhvc3RuYW1lOiBvcHRzLm5vZGUsXG4gICAgcGF0aDogYC92MS9hY2NvdW50cy8ke2l4LmFjY291bnQuYWRkcn0/YmxvY2tfaGVpZ2h0PSR7aXguYmxvY2suaGVpZ2h0fSZleHBhbmQ9Y29udHJhY3RzLGtleXNgLFxuICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICBib2R5OiBudWxsXG4gIH0pO1xuICByZXR1cm4gY29uc3RydWN0UmVzcG9uc2UkNChpeCwgY29udGV4dCwgcmVzKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNlbmRHZXRBY2NvdW50QXRMYXRlc3RCbG9ja1JlcXVlc3QoaXgsIGNvbnRleHQsIG9wdHMpIHtcbiAgY29uc3QgaHR0cFJlcXVlc3QkMSA9IG9wdHMuaHR0cFJlcXVlc3QgfHwgaHR0cFJlcXVlc3Q7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGh0dHBSZXF1ZXN0JDEoe1xuICAgIGhvc3RuYW1lOiBvcHRzLm5vZGUsXG4gICAgcGF0aDogYC92MS9hY2NvdW50cy8ke2l4LmFjY291bnQuYWRkcn0/YmxvY2tfaGVpZ2h0PSR7aXguYmxvY2suaXNTZWFsZWQgPyBcInNlYWxlZFwiIDogXCJmaW5hbFwifSZleHBhbmQ9Y29udHJhY3RzLGtleXNgLFxuICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICBib2R5OiBudWxsXG4gIH0pO1xuICByZXR1cm4gY29uc3RydWN0UmVzcG9uc2UkNChpeCwgY29udGV4dCwgcmVzKTtcbn1cbmZ1bmN0aW9uIGNvbnN0cnVjdFJlc3BvbnNlJDQoaXgsIGNvbnRleHQsIHJlcykge1xuICBsZXQgcmV0ID0gY29udGV4dC5yZXNwb25zZSgpO1xuICByZXQudGFnID0gaXgudGFnO1xuICBjb25zdCB1bndyYXBDb250cmFjdHMgPSBjb250cmFjdHMgPT4ge1xuICAgIGNvbnN0IGMgPSB7fTtcbiAgICBpZiAoIWNvbnRyYWN0cykgcmV0dXJuIGM7XG4gICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKGNvbnRyYWN0cykpIHtcbiAgICAgIGNba2V5XSA9IGNvbnRleHQuQnVmZmVyLmZyb20oY29udHJhY3RzW2tleV0sIFwiYmFzZTY0XCIpLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBjO1xuICB9O1xuICByZXQuYWNjb3VudCA9IHtcbiAgICBhZGRyZXNzOiByZXMuYWRkcmVzcyxcbiAgICBiYWxhbmNlOiBOdW1iZXIocmVzLmJhbGFuY2UpLFxuICAgIGNvZGU6IFwiXCIsXG4gICAgY29udHJhY3RzOiB1bndyYXBDb250cmFjdHMocmVzLmNvbnRyYWN0cyksXG4gICAga2V5czogcmVzLmtleXM/Lm1hcChrZXkgPT4gKHtcbiAgICAgIGluZGV4OiBOdW1iZXIoa2V5LmluZGV4KSxcbiAgICAgIHB1YmxpY0tleToga2V5LnB1YmxpY19rZXkucmVwbGFjZSgvXjB4LywgXCJcIiksXG4gICAgICBzaWduQWxnbzogU2lnbmF0dXJlQWxnb3JpdGhtSURzW2tleS5zaWduaW5nX2FsZ29yaXRobV0sXG4gICAgICBzaWduQWxnb1N0cmluZzoga2V5LnNpZ25pbmdfYWxnb3JpdGhtLFxuICAgICAgaGFzaEFsZ286IEhhc2hBbGdvcml0aG1JRHNba2V5Lmhhc2hpbmdfYWxnb3JpdGhtXSxcbiAgICAgIGhhc2hBbGdvU3RyaW5nOiBrZXkuaGFzaGluZ19hbGdvcml0aG0sXG4gICAgICBzZXF1ZW5jZU51bWJlcjogTnVtYmVyKGtleS5zZXF1ZW5jZV9udW1iZXIpLFxuICAgICAgd2VpZ2h0OiBOdW1iZXIoa2V5LndlaWdodCksXG4gICAgICByZXZva2VkOiBrZXkucmV2b2tlZFxuICAgIH0pKSA/PyBbXVxuICB9O1xuICByZXR1cm4gcmV0O1xufVxuYXN5bmMgZnVuY3Rpb24gc2VuZEdldEFjY291bnQoaXgpIHtcbiAgbGV0IGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICBsZXQgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIGludmFyaWFudChvcHRzLm5vZGUsIGBTREsgU2VuZCBHZXQgQWNjb3VudCBFcnJvcjogb3B0cy5ub2RlIG11c3QgYmUgZGVmaW5lZC5gKTtcbiAgaW52YXJpYW50KGNvbnRleHQucmVzcG9uc2UsIGBTREsgU2VuZCBHZXQgQWNjb3VudCBFcnJvcjogY29udGV4dC5yZXNwb25zZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGludmFyaWFudChjb250ZXh0LkJ1ZmZlciwgYFNESyBTZW5kIEdldCBBY2NvdW50IEVycm9yOiBjb250ZXh0LkJ1ZmZlciBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGl4ID0gYXdhaXQgaXg7XG4gIGlmIChpeC5ibG9jay5oZWlnaHQgIT09IG51bGwpIHtcbiAgICByZXR1cm4gYXdhaXQgc2VuZEdldEFjY291bnRBdEJsb2NrSGVpZ2h0UmVxdWVzdChpeCwgY29udGV4dCwgb3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGF3YWl0IHNlbmRHZXRBY2NvdW50QXRMYXRlc3RCbG9ja1JlcXVlc3QoaXgsIGNvbnRleHQsIG9wdHMpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbmRHZXRCbG9ja0hlYWRlckJ5SURSZXF1ZXN0KGl4LCBjb250ZXh0LCBvcHRzKSB7XG4gIGNvbnN0IGh0dHBSZXF1ZXN0JDEgPSBvcHRzLmh0dHBSZXF1ZXN0IHx8IGh0dHBSZXF1ZXN0O1xuICBjb25zdCByZXMgPSBhd2FpdCBodHRwUmVxdWVzdCQxKHtcbiAgICBob3N0bmFtZTogb3B0cy5ub2RlLFxuICAgIHBhdGg6IGAvdjEvYmxvY2tzLyR7aXguYmxvY2suaWR9YCxcbiAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgYm9keTogbnVsbFxuICB9KTtcbiAgcmV0dXJuIGNvbnN0cnVjdFJlc3BvbnNlJDMoaXgsIGNvbnRleHQsIHJlcyk7XG59XG5hc3luYyBmdW5jdGlvbiBzZW5kR2V0QmxvY2tIZWFkZXJCeUhlaWdodFJlcXVlc3QoaXgsIGNvbnRleHQsIG9wdHMpIHtcbiAgY29uc3QgaHR0cFJlcXVlc3QkMSA9IG9wdHMuaHR0cFJlcXVlc3QgfHwgaHR0cFJlcXVlc3Q7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGh0dHBSZXF1ZXN0JDEoe1xuICAgIGhvc3RuYW1lOiBvcHRzLm5vZGUsXG4gICAgcGF0aDogYC92MS9ibG9ja3M/aGVpZ2h0PSR7aXguYmxvY2suaGVpZ2h0fWAsXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGJvZHk6IG51bGxcbiAgfSk7XG4gIHJldHVybiBjb25zdHJ1Y3RSZXNwb25zZSQzKGl4LCBjb250ZXh0LCByZXMpO1xufVxuYXN5bmMgZnVuY3Rpb24gc2VuZEdldExhdGVzdEJsb2NrSGVhZGVyUmVxdWVzdChpeCwgY29udGV4dCwgb3B0cykge1xuICBjb25zdCBodHRwUmVxdWVzdCQxID0gb3B0cy5odHRwUmVxdWVzdCB8fCBodHRwUmVxdWVzdDtcbiAgY29uc3QgaGVpZ2h0ID0gaXguYmxvY2s/LmlzU2VhbGVkID8gXCJzZWFsZWRcIiA6IFwiZmluYWxcIjtcbiAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFJlcXVlc3QkMSh7XG4gICAgaG9zdG5hbWU6IG9wdHMubm9kZSxcbiAgICBwYXRoOiBgL3YxL2Jsb2Nrcz9oZWlnaHQ9JHtoZWlnaHR9YCxcbiAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgYm9keTogbnVsbFxuICB9KTtcbiAgcmV0dXJuIGNvbnN0cnVjdFJlc3BvbnNlJDMoaXgsIGNvbnRleHQsIHJlcyk7XG59XG5mdW5jdGlvbiBjb25zdHJ1Y3RSZXNwb25zZSQzKGl4LCBjb250ZXh0LCByZXMpIHtcbiAgY29uc3QgYmxvY2sgPSByZXMubGVuZ3RoID8gcmVzWzBdIDogbnVsbDtcbiAgY29uc3QgcmV0ID0gY29udGV4dC5yZXNwb25zZSgpO1xuICByZXQudGFnID0gaXgudGFnO1xuICByZXQuYmxvY2tIZWFkZXIgPSB7XG4gICAgaWQ6IGJsb2NrLmhlYWRlci5pZCxcbiAgICBwYXJlbnRJZDogYmxvY2suaGVhZGVyLnBhcmVudF9pZCxcbiAgICBoZWlnaHQ6IE51bWJlcihibG9jay5oZWFkZXIuaGVpZ2h0KSxcbiAgICB0aW1lc3RhbXA6IGJsb2NrLmhlYWRlci50aW1lc3RhbXBcbiAgfTtcbiAgcmV0dXJuIHJldDtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNlbmRHZXRCbG9ja0hlYWRlcihpeCkge1xuICBsZXQgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIGxldCBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgaW52YXJpYW50KG9wdHMubm9kZSwgYFNESyBTZW5kIEdldCBCbG9jayBIZWFkZXIgRXJyb3I6IG9wdHMubm9kZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGludmFyaWFudChjb250ZXh0LnJlc3BvbnNlLCBgU0RLIFNlbmQgR2V0IEJsb2NrIEhlYWRlciBFcnJvcjogY29udGV4dC5yZXNwb25zZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGl4ID0gYXdhaXQgaXg7XG4gIGNvbnN0IGludGVyYWN0aW9uSGFzQmxvY2tJRCA9IGl4LmJsb2NrLmlkICE9PSBudWxsO1xuICBjb25zdCBpbnRlcmFjdGlvbkhhc0Jsb2NrSGVpZ2h0ID0gaXguYmxvY2suaGVpZ2h0ICE9PSBudWxsO1xuICBpZiAoaW50ZXJhY3Rpb25IYXNCbG9ja0lEKSB7XG4gICAgcmV0dXJuIGF3YWl0IHNlbmRHZXRCbG9ja0hlYWRlckJ5SURSZXF1ZXN0KGl4LCBjb250ZXh0LCBvcHRzKTtcbiAgfSBlbHNlIGlmIChpbnRlcmFjdGlvbkhhc0Jsb2NrSGVpZ2h0KSB7XG4gICAgcmV0dXJuIGF3YWl0IHNlbmRHZXRCbG9ja0hlYWRlckJ5SGVpZ2h0UmVxdWVzdChpeCwgY29udGV4dCwgb3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGF3YWl0IHNlbmRHZXRMYXRlc3RCbG9ja0hlYWRlclJlcXVlc3QoaXgsIGNvbnRleHQsIG9wdHMpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbmRHZXRCbG9ja0J5SURSZXF1ZXN0KGl4LCBjb250ZXh0LCBvcHRzKSB7XG4gIGNvbnN0IGh0dHBSZXF1ZXN0JDEgPSBvcHRzLmh0dHBSZXF1ZXN0IHx8IGh0dHBSZXF1ZXN0O1xuICBjb25zdCByZXMgPSBhd2FpdCBodHRwUmVxdWVzdCQxKHtcbiAgICBob3N0bmFtZTogb3B0cy5ub2RlLFxuICAgIHBhdGg6IGAvdjEvYmxvY2tzLyR7aXguYmxvY2suaWR9P2V4cGFuZD1wYXlsb2FkYCxcbiAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgYm9keTogbnVsbFxuICB9KTtcbiAgcmV0dXJuIGNvbnN0cnVjdFJlc3BvbnNlJDIoaXgsIGNvbnRleHQsIHJlcyk7XG59XG5hc3luYyBmdW5jdGlvbiBzZW5kR2V0QmxvY2tCeUhlaWdodFJlcXVlc3QoaXgsIGNvbnRleHQsIG9wdHMpIHtcbiAgY29uc3QgaHR0cFJlcXVlc3QkMSA9IG9wdHMuaHR0cFJlcXVlc3QgfHwgaHR0cFJlcXVlc3Q7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGh0dHBSZXF1ZXN0JDEoe1xuICAgIGhvc3RuYW1lOiBvcHRzLm5vZGUsXG4gICAgcGF0aDogYC92MS9ibG9ja3M/aGVpZ2h0PSR7aXguYmxvY2suaGVpZ2h0fSZleHBhbmQ9cGF5bG9hZGAsXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGJvZHk6IG51bGxcbiAgfSk7XG4gIHJldHVybiBjb25zdHJ1Y3RSZXNwb25zZSQyKGl4LCBjb250ZXh0LCByZXMpO1xufVxuYXN5bmMgZnVuY3Rpb24gc2VuZEdldEJsb2NrUmVxdWVzdChpeCwgY29udGV4dCwgb3B0cykge1xuICBjb25zdCBodHRwUmVxdWVzdCQxID0gb3B0cy5odHRwUmVxdWVzdCB8fCBodHRwUmVxdWVzdDtcbiAgY29uc3QgaGVpZ2h0ID0gaXguYmxvY2s/LmlzU2VhbGVkID8gXCJzZWFsZWRcIiA6IFwiZmluYWxcIjtcbiAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFJlcXVlc3QkMSh7XG4gICAgaG9zdG5hbWU6IG9wdHMubm9kZSxcbiAgICBwYXRoOiBgL3YxL2Jsb2Nrcz9oZWlnaHQ9JHtoZWlnaHR9JmV4cGFuZD1wYXlsb2FkYCxcbiAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgYm9keTogbnVsbFxuICB9KTtcbiAgcmV0dXJuIGNvbnN0cnVjdFJlc3BvbnNlJDIoaXgsIGNvbnRleHQsIHJlcyk7XG59XG5mdW5jdGlvbiBjb25zdHJ1Y3RSZXNwb25zZSQyKGl4LCBjb250ZXh0LCByZXMpIHtcbiAgY29uc3QgYmxvY2sgPSByZXMubGVuZ3RoID8gcmVzWzBdIDogbnVsbDtcbiAgY29uc3QgcmV0ID0gY29udGV4dC5yZXNwb25zZSgpO1xuICByZXQudGFnID0gaXgudGFnO1xuICByZXQuYmxvY2sgPSB7XG4gICAgaWQ6IGJsb2NrLmhlYWRlci5pZCxcbiAgICBwYXJlbnRJZDogYmxvY2suaGVhZGVyLnBhcmVudF9pZCxcbiAgICBoZWlnaHQ6IE51bWJlcihibG9jay5oZWFkZXIuaGVpZ2h0KSxcbiAgICB0aW1lc3RhbXA6IGJsb2NrLmhlYWRlci50aW1lc3RhbXAsXG4gICAgcGFyZW50Vm90ZXJTaWduYXR1cmU6IGJsb2NrLmhlYWRlci5wYXJlbnRfdm90ZXJfc2lnbmF0dXJlLFxuICAgIGNvbGxlY3Rpb25HdWFyYW50ZWVzOiBibG9jay5wYXlsb2FkLmNvbGxlY3Rpb25fZ3VhcmFudGVlcy5tYXAoY29sbGVjdGlvbkd1YXJhbnRlZSA9PiAoe1xuICAgICAgY29sbGVjdGlvbklkOiBjb2xsZWN0aW9uR3VhcmFudGVlLmNvbGxlY3Rpb25faWQsXG4gICAgICBzaWduZXJJZHM6IGNvbGxlY3Rpb25HdWFyYW50ZWUuc2lnbmVyX2lkc1xuICAgIH0pKSxcbiAgICBibG9ja1NlYWxzOiBibG9jay5wYXlsb2FkLmJsb2NrX3NlYWxzLm1hcChibG9ja1NlYWwgPT4gKHtcbiAgICAgIGJsb2NrSWQ6IGJsb2NrU2VhbC5ibG9ja19pZCxcbiAgICAgIGV4ZWN1dGlvblJlY2VpcHRJZDogYmxvY2tTZWFsLnJlc3VsdF9pZFxuICAgIH0pKVxuICB9O1xuICByZXR1cm4gcmV0O1xufVxuYXN5bmMgZnVuY3Rpb24gc2VuZEdldEJsb2NrKGl4KSB7XG4gIGxldCBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICBpbnZhcmlhbnQob3B0cy5ub2RlLCBgU0RLIFNlbmQgR2V0IEJsb2NrIEVycm9yOiBvcHRzLm5vZGUgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBpbnZhcmlhbnQoY29udGV4dC5yZXNwb25zZSwgYFNESyBTZW5kIEdldCBCbG9jayBFcnJvcjogY29udGV4dC5yZXNwb25zZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGl4ID0gYXdhaXQgaXg7XG4gIGNvbnN0IGludGVyYWN0aW9uSGFzQmxvY2tJRCA9IGl4LmJsb2NrLmlkICE9PSBudWxsO1xuICBjb25zdCBpbnRlcmFjdGlvbkhhc0Jsb2NrSGVpZ2h0ID0gaXguYmxvY2suaGVpZ2h0ICE9PSBudWxsO1xuICBpZiAoaW50ZXJhY3Rpb25IYXNCbG9ja0lEKSB7XG4gICAgcmV0dXJuIGF3YWl0IHNlbmRHZXRCbG9ja0J5SURSZXF1ZXN0KGl4LCBjb250ZXh0LCBvcHRzKTtcbiAgfSBlbHNlIGlmIChpbnRlcmFjdGlvbkhhc0Jsb2NrSGVpZ2h0KSB7XG4gICAgcmV0dXJuIGF3YWl0IHNlbmRHZXRCbG9ja0J5SGVpZ2h0UmVxdWVzdChpeCwgY29udGV4dCwgb3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGF3YWl0IHNlbmRHZXRCbG9ja1JlcXVlc3QoaXgsIGNvbnRleHQsIG9wdHMpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbmRHZXRDb2xsZWN0aW9uKGl4KSB7XG4gIGxldCBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICBpbnZhcmlhbnQob3B0cy5ub2RlLCBgU0RLIFNlbmQgR2V0IENvbGxlY3Rpb24gRXJyb3I6IG9wdHMubm9kZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGludmFyaWFudChjb250ZXh0LnJlc3BvbnNlLCBgU0RLIFNlbmQgR2V0IENvbGxlY3Rpb24gRXJyb3I6IGNvbnRleHQucmVzcG9uc2UgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBjb25zdCBodHRwUmVxdWVzdCQxID0gb3B0cy5odHRwUmVxdWVzdCB8fCBodHRwUmVxdWVzdDtcbiAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFJlcXVlc3QkMSh7XG4gICAgaG9zdG5hbWU6IG9wdHMubm9kZSxcbiAgICBwYXRoOiBgL3YxL2NvbGxlY3Rpb25zLyR7aXguY29sbGVjdGlvbi5pZH0/ZXhwYW5kPXRyYW5zYWN0aW9uc2AsXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGJvZHk6IG51bGxcbiAgfSk7XG4gIGNvbnN0IHJldCA9IGNvbnRleHQucmVzcG9uc2UoKTtcbiAgcmV0LnRhZyA9IGl4LnRhZztcbiAgcmV0LmNvbGxlY3Rpb24gPSB7XG4gICAgaWQ6IHJlcy5pZCxcbiAgICB0cmFuc2FjdGlvbklkczogcmVzLnRyYW5zYWN0aW9ucy5tYXAodHJhbnNhY3Rpb24gPT4gdHJhbnNhY3Rpb24uaWQpXG4gIH07XG4gIHJldHVybiByZXQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbmRHZXRFdmVudHNGb3JIZWlnaHRSYW5nZVJlcXVlc3QoaXgsIGNvbnRleHQsIG9wdHMpIHtcbiAgY29uc3QgaHR0cFJlcXVlc3QkMSA9IG9wdHMuaHR0cFJlcXVlc3QgfHwgaHR0cFJlcXVlc3Q7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGh0dHBSZXF1ZXN0JDEoe1xuICAgIGhvc3RuYW1lOiBvcHRzLm5vZGUsXG4gICAgcGF0aDogYC92MS9ldmVudHM/dHlwZT0ke2l4LmV2ZW50cy5ldmVudFR5cGV9JnN0YXJ0X2hlaWdodD0ke2l4LmV2ZW50cy5zdGFydH0mZW5kX2hlaWdodD0ke2l4LmV2ZW50cy5lbmR9YCxcbiAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgYm9keTogbnVsbFxuICB9KTtcbiAgcmV0dXJuIGNvbnN0cnVjdFJlc3BvbnNlJDEoaXgsIGNvbnRleHQsIHJlcyk7XG59XG5hc3luYyBmdW5jdGlvbiBzZW5kR2V0RXZlbnRzRm9yQmxvY2tJRHNSZXF1ZXN0KGl4LCBjb250ZXh0LCBvcHRzKSB7XG4gIGNvbnN0IGh0dHBSZXF1ZXN0JDEgPSBvcHRzLmh0dHBSZXF1ZXN0IHx8IGh0dHBSZXF1ZXN0O1xuICBjb25zdCByZXMgPSBhd2FpdCBodHRwUmVxdWVzdCQxKHtcbiAgICBob3N0bmFtZTogb3B0cy5ub2RlLFxuICAgIHBhdGg6IGAvdjEvZXZlbnRzP3R5cGU9JHtpeC5ldmVudHMuZXZlbnRUeXBlfSZibG9ja19pZHM9JHtpeC5ldmVudHMuYmxvY2tJZHMuam9pbihcIixcIil9YCxcbiAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgYm9keTogbnVsbFxuICB9KTtcbiAgcmV0dXJuIGNvbnN0cnVjdFJlc3BvbnNlJDEoaXgsIGNvbnRleHQsIHJlcyk7XG59XG5mdW5jdGlvbiBjb25zdHJ1Y3RSZXNwb25zZSQxKGl4LCBjb250ZXh0LCByZXMpIHtcbiAgbGV0IHJldCA9IGNvbnRleHQucmVzcG9uc2UoKTtcbiAgcmV0LnRhZyA9IGl4LnRhZztcbiAgcmV0LmV2ZW50cyA9IFtdO1xuICByZXMuZm9yRWFjaChibG9jayA9PiBibG9jay5ldmVudHMgPyBibG9jay5ldmVudHMuZm9yRWFjaChldmVudCA9PiByZXQuZXZlbnRzLnB1c2goe1xuICAgIGJsb2NrSWQ6IGJsb2NrLmJsb2NrX2lkLFxuICAgIGJsb2NrSGVpZ2h0OiBOdW1iZXIoYmxvY2suYmxvY2tfaGVpZ2h0KSxcbiAgICBibG9ja1RpbWVzdGFtcDogYmxvY2suYmxvY2tfdGltZXN0YW1wLFxuICAgIHR5cGU6IGV2ZW50LnR5cGUsXG4gICAgdHJhbnNhY3Rpb25JZDogZXZlbnQudHJhbnNhY3Rpb25faWQsXG4gICAgdHJhbnNhY3Rpb25JbmRleDogTnVtYmVyKGV2ZW50LnRyYW5zYWN0aW9uX2luZGV4KSxcbiAgICBldmVudEluZGV4OiBOdW1iZXIoZXZlbnQuZXZlbnRfaW5kZXgpLFxuICAgIHBheWxvYWQ6IEpTT04ucGFyc2UoY29udGV4dC5CdWZmZXIuZnJvbShldmVudC5wYXlsb2FkLCBcImJhc2U2NFwiKS50b1N0cmluZygpKVxuICB9KSkgOiBudWxsKTtcbiAgcmV0dXJuIHJldDtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNlbmRHZXRFdmVudHMoaXgpIHtcbiAgbGV0IGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICBsZXQgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIGludmFyaWFudChvcHRzLm5vZGUsIGBTREsgU2VuZCBHZXQgRXZlbnRzIEVycm9yOiBvcHRzLm5vZGUgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBpbnZhcmlhbnQoY29udGV4dC5yZXNwb25zZSwgYFNESyBTZW5kIEdldCBFdmVudHMgRXJyb3I6IGNvbnRleHQucmVzcG9uc2UgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBpbnZhcmlhbnQoY29udGV4dC5CdWZmZXIsIGBTREsgU2VuZCBHZXQgRXZlbnRzIEVycm9yOiBjb250ZXh0LkJ1ZmZlciBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGl4ID0gYXdhaXQgaXg7XG4gIGNvbnN0IGludGVyYWN0aW9uQ29udGFpbnNCbG9ja0hlaWdodFJhbmdlID0gaXguZXZlbnRzLnN0YXJ0ICE9PSBudWxsO1xuICBjb25zdCBpbnRlcmFjdGlvbkNvbnRhaW5zQmxvY2tJRHNMaXN0ID0gQXJyYXkuaXNBcnJheShpeC5ldmVudHMuYmxvY2tJZHMpICYmIGl4LmV2ZW50cy5ibG9ja0lkcy5sZW5ndGggPiAwO1xuICBpbnZhcmlhbnQoaW50ZXJhY3Rpb25Db250YWluc0Jsb2NrSGVpZ2h0UmFuZ2UgfHwgaW50ZXJhY3Rpb25Db250YWluc0Jsb2NrSURzTGlzdCwgXCJTZW5kR2V0RXZlbnRzRXJyb3I6IFVuYWJsZSB0byBkZXRlcm1pbmUgd2hpY2ggZ2V0IGV2ZW50cyByZXF1ZXN0IHRvIHNlbmQuIEVpdGhlciBhIGJsb2NrIGhlaWdodCByYW5nZSwgb3IgYmxvY2sgSURzIG11c3QgYmUgc3BlY2lmaWVkLlwiKTtcbiAgaWYgKGludGVyYWN0aW9uQ29udGFpbnNCbG9ja0hlaWdodFJhbmdlKSB7XG4gICAgcmV0dXJuIGF3YWl0IHNlbmRHZXRFdmVudHNGb3JIZWlnaHRSYW5nZVJlcXVlc3QoaXgsIGNvbnRleHQsIG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhd2FpdCBzZW5kR2V0RXZlbnRzRm9yQmxvY2tJRHNSZXF1ZXN0KGl4LCBjb250ZXh0LCBvcHRzKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBzZW5kR2V0VHJhbnNhY3Rpb24oaXgpIHtcbiAgbGV0IGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICBsZXQgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIGludmFyaWFudChvcHRzLm5vZGUsIGBTREsgU2VuZCBHZXQgVHJhbnNhY3Rpb24gRXJyb3I6IG9wdHMubm9kZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGludmFyaWFudChjb250ZXh0LnJlc3BvbnNlLCBgU0RLIFNlbmQgR2V0IFRyYW5zYWN0aW9uIEVycm9yOiBjb250ZXh0LnJlc3BvbnNlIG11c3QgYmUgZGVmaW5lZC5gKTtcbiAgaW52YXJpYW50KGNvbnRleHQuQnVmZmVyLCBgU0RLIFNlbmQgR2V0IFRyYW5zYWN0aW9uIEVycm9yOiBjb250ZXh0LkJ1ZmZlciBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGNvbnN0IGh0dHBSZXF1ZXN0JDEgPSBvcHRzLmh0dHBSZXF1ZXN0IHx8IGh0dHBSZXF1ZXN0O1xuICBpeCA9IGF3YWl0IGl4O1xuICBjb25zdCByZXMgPSBhd2FpdCBodHRwUmVxdWVzdCQxKHtcbiAgICBob3N0bmFtZTogb3B0cy5ub2RlLFxuICAgIHBhdGg6IGAvdjEvdHJhbnNhY3Rpb25zLyR7aXgudHJhbnNhY3Rpb24uaWR9YCxcbiAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgYm9keTogbnVsbFxuICB9KTtcbiAgY29uc3QgdW53cmFwS2V5ID0ga2V5ID0+ICh7XG4gICAgYWRkcmVzczoga2V5LmFkZHJlc3MsXG4gICAga2V5SWQ6IE51bWJlcihrZXkua2V5X2luZGV4KSxcbiAgICBzZXF1ZW5jZU51bWJlcjogTnVtYmVyKGtleS5zZXF1ZW5jZV9udW1iZXIpXG4gIH0pO1xuICBjb25zdCB1bndyYXBTaWduYXR1cmUgPSBzaWcgPT4gKHtcbiAgICBhZGRyZXNzOiBzaWcuYWRkcmVzcyxcbiAgICBrZXlJZDogTnVtYmVyKHNpZy5rZXlfaW5kZXgpLFxuICAgIHNpZ25hdHVyZTogc2lnLnNpZ25hdHVyZVxuICB9KTtcbiAgY29uc3QgdW53cmFwQXJnID0gYXJnID0+IEpTT04ucGFyc2UoY29udGV4dC5CdWZmZXIuZnJvbShhcmcsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKCkpO1xuICBsZXQgcmV0ID0gY29udGV4dC5yZXNwb25zZSgpO1xuICByZXQudGFnID0gaXgudGFnO1xuICByZXQudHJhbnNhY3Rpb24gPSB7XG4gICAgc2NyaXB0OiBjb250ZXh0LkJ1ZmZlci5mcm9tKHJlcy5zY3JpcHQsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKCksXG4gICAgYXJnczogWy4uLnJlcy5hcmd1bWVudHMubWFwKHVud3JhcEFyZyldLFxuICAgIHJlZmVyZW5jZUJsb2NrSWQ6IHJlcy5yZWZlcmVuY2VfYmxvY2tfaWQsXG4gICAgZ2FzTGltaXQ6IE51bWJlcihyZXMuZ2FzX2xpbWl0KSxcbiAgICBwYXllcjogcmVzLnBheWVyLFxuICAgIHByb3Bvc2FsS2V5OiByZXMucHJvcG9zYWxfa2V5ID8gdW53cmFwS2V5KHJlcy5wcm9wb3NhbF9rZXkpIDogcmVzLnByb3Bvc2FsX2tleSxcbiAgICBhdXRob3JpemVyczogcmVzLmF1dGhvcml6ZXJzLFxuICAgIHBheWxvYWRTaWduYXR1cmVzOiBbLi4ucmVzLnBheWxvYWRfc2lnbmF0dXJlcy5tYXAodW53cmFwU2lnbmF0dXJlKV0sXG4gICAgZW52ZWxvcGVTaWduYXR1cmVzOiBbLi4ucmVzLmVudmVsb3BlX3NpZ25hdHVyZXMubWFwKHVud3JhcFNpZ25hdHVyZSldXG4gIH07XG4gIHJldHVybiByZXQ7XG59XG5cbmNvbnN0IFNUQVRVU19NQVAkMSA9IHtcbiAgVU5LTk9XTjogMCxcbiAgUEVORElORzogMSxcbiAgRklOQUxJWkVEOiAyLFxuICBFWEVDVVRFRDogMyxcbiAgU0VBTEVEOiA0LFxuICBFWFBJUkVEOiA1XG59O1xuYXN5bmMgZnVuY3Rpb24gc2VuZEdldFRyYW5zYWN0aW9uU3RhdHVzKGl4KSB7XG4gIGxldCBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICBpbnZhcmlhbnQob3B0cy5ub2RlLCBgU0RLIFNlbmQgR2V0IFRyYW5zYWN0aW9uIFN0YXR1cyBFcnJvcjogb3B0cy5ub2RlIG11c3QgYmUgZGVmaW5lZC5gKTtcbiAgaW52YXJpYW50KGNvbnRleHQucmVzcG9uc2UsIGBTREsgU2VuZCBHZXQgVHJhbnNhY3Rpb24gU3RhdHVzIEVycm9yOiBjb250ZXh0LnJlc3BvbnNlIG11c3QgYmUgZGVmaW5lZC5gKTtcbiAgaW52YXJpYW50KGNvbnRleHQuQnVmZmVyLCBgU0RLIFNlbmQgR2V0IFRyYW5zYWN0aW9uIFN0YXR1cyBFcnJvcjogY29udGV4dC5CdWZmZXIgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBjb25zdCBodHRwUmVxdWVzdCQxID0gb3B0cy5odHRwUmVxdWVzdCB8fCBodHRwUmVxdWVzdDtcbiAgaXggPSBhd2FpdCBpeDtcbiAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFJlcXVlc3QkMSh7XG4gICAgaG9zdG5hbWU6IG9wdHMubm9kZSxcbiAgICBwYXRoOiBgL3YxL3RyYW5zYWN0aW9uX3Jlc3VsdHMvJHtpeC50cmFuc2FjdGlvbi5pZH1gLFxuICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICBib2R5OiBudWxsXG4gIH0pO1xuICBsZXQgcmV0ID0gY29udGV4dC5yZXNwb25zZSgpO1xuICByZXQudGFnID0gaXgudGFnO1xuICByZXQudHJhbnNhY3Rpb25TdGF0dXMgPSB7XG4gICAgYmxvY2tJZDogcmVzLmJsb2NrX2lkLFxuICAgIHN0YXR1czogU1RBVFVTX01BUCQxW3Jlcy5zdGF0dXMudG9VcHBlckNhc2UoKV0gfHwgXCJcIixcbiAgICBzdGF0dXNTdHJpbmc6IHJlcy5zdGF0dXMudG9VcHBlckNhc2UoKSxcbiAgICBzdGF0dXNDb2RlOiByZXMuc3RhdHVzX2NvZGUsXG4gICAgZXJyb3JNZXNzYWdlOiByZXMuZXJyb3JfbWVzc2FnZSxcbiAgICBldmVudHM6IHJlcy5ldmVudHMubWFwKGV2ZW50ID0+ICh7XG4gICAgICB0eXBlOiBldmVudC50eXBlLFxuICAgICAgdHJhbnNhY3Rpb25JZDogZXZlbnQudHJhbnNhY3Rpb25faWQsXG4gICAgICB0cmFuc2FjdGlvbkluZGV4OiBOdW1iZXIoZXZlbnQudHJhbnNhY3Rpb25faW5kZXgpLFxuICAgICAgZXZlbnRJbmRleDogTnVtYmVyKGV2ZW50LmV2ZW50X2luZGV4KSxcbiAgICAgIHBheWxvYWQ6IEpTT04ucGFyc2UoY29udGV4dC5CdWZmZXIuZnJvbShldmVudC5wYXlsb2FkLCBcImJhc2U2NFwiKS50b1N0cmluZygpKVxuICAgIH0pKVxuICB9O1xuICByZXR1cm4gcmV0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZW5kUGluZyhpeCkge1xuICBsZXQgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIGxldCBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgaW52YXJpYW50KEJvb2xlYW4ob3B0cy5ub2RlKSwgYFNESyBTZW5kIFBpbmcgRXJyb3I6IG9wdHMubm9kZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGludmFyaWFudChCb29sZWFuKGNvbnRleHQucmVzcG9uc2UpLCBgU0RLIFNlbmQgUGluZyBFcnJvcjogY29udGV4dC5yZXNwb25zZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGNvbnN0IGh0dHBSZXF1ZXN0JDEgPSBvcHRzLmh0dHBSZXF1ZXN0IHx8IGh0dHBSZXF1ZXN0O1xuICBhd2FpdCBodHRwUmVxdWVzdCQxKHtcbiAgICBob3N0bmFtZTogb3B0cy5ub2RlLFxuICAgIHBhdGg6IFwiL3YxL2Jsb2Nrcz9oZWlnaHQ9c2VhbGVkXCIsXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGJvZHk6IG51bGxcbiAgfSk7XG4gIGxldCByZXQgPSB0eXBlb2YgY29udGV4dD8ucmVzcG9uc2UgPT09IFwiZnVuY3Rpb25cIiA/IGNvbnRleHQucmVzcG9uc2UoKSA6IHt9O1xuICByZXQudGFnID0gaXgudGFnO1xuICByZXR1cm4gcmV0O1xufVxuXG5jb25zdCBpZG9mID0gYWNjdCA9PiBgJHt3aXRoUHJlZml4KGFjY3QuYWRkcil9LSR7YWNjdC5rZXlJZH1gO1xuYXN5bmMgZnVuY3Rpb24gc2VuZFRyYW5zYWN0aW9uKGl4KSB7XG4gIGxldCBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICBpbnZhcmlhbnQob3B0cy5ub2RlLCBgU0RLIFNlbmQgVHJhbnNhY3Rpb24gRXJyb3I6IG9wdHMubm9kZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGludmFyaWFudChjb250ZXh0LnJlc3BvbnNlLCBgU0RLIFNlbmQgVHJhbnNhY3Rpb24gRXJyb3I6IGNvbnRleHQucmVzcG9uc2UgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBpbnZhcmlhbnQoY29udGV4dC5CdWZmZXIsIGBTREsgU2VuZCBUcmFuc2FjdGlvbiBFcnJvcjogY29udGV4dC5CdWZmZXIgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBjb25zdCBodHRwUmVxdWVzdCQxID0gb3B0cy5odHRwUmVxdWVzdCB8fCBodHRwUmVxdWVzdDtcbiAgaXggPSBhd2FpdCBpeDtcblxuICAvLyBBcHBseSBOb24gUGF5ZXIgU2lnbmF0dXJlcyB0byBQYXlsb2FkIFNpZ25hdHVyZXNcbiAgbGV0IHBheWxvYWRTaWduYXR1cmVzID0gW107XG4gIGZvciAobGV0IGFjY3Qgb2YgT2JqZWN0LnZhbHVlcyhpeC5hY2NvdW50cykpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFhY2N0LnJvbGUucGF5ZXIgJiYgYWNjdC5zaWduYXR1cmUgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSB7XG4gICAgICAgICAgYWRkcmVzczogc2Fuc1ByZWZpeChhY2N0LmFkZHIpLFxuICAgICAgICAgIGtleV9pbmRleDogU3RyaW5nKGFjY3Qua2V5SWQpLFxuICAgICAgICAgIHNpZ25hdHVyZTogY29udGV4dC5CdWZmZXIuZnJvbShhY2N0LnNpZ25hdHVyZSwgXCJoZXhcIikudG9TdHJpbmcoXCJiYXNlNjRcIilcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFwYXlsb2FkU2lnbmF0dXJlcy5maW5kKGV4aXN0aW5nU2lnbmF0dXJlID0+IGV4aXN0aW5nU2lnbmF0dXJlLmFkZHJlc3MgPT09IHNpZ25hdHVyZS5hZGRyZXNzICYmIGV4aXN0aW5nU2lnbmF0dXJlLmtleV9pbmRleCA9PT0gc2lnbmF0dXJlLmtleV9pbmRleCAmJiBleGlzdGluZ1NpZ25hdHVyZS5zaWduYXR1cmUgPT09IHNpZ25hdHVyZS5zaWduYXR1cmUpKSB7XG4gICAgICAgICAgcGF5bG9hZFNpZ25hdHVyZXMucHVzaChzaWduYXR1cmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJTREsgSFRUUCBTZW5kIEVycm9yOiBUcm91YmxlIGFwcGx5aW5nIHBheWxvYWQgc2lnbmF0dXJlXCIsIHtcbiAgICAgICAgYWNjdCxcbiAgICAgICAgaXhcbiAgICAgIH0pO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLy8gQXBwbHkgUGF5ZXIgU2lnbmF0dXJlcyB0byBFbnZlbG9wZSBTaWduYXR1cmVzXG4gIGxldCBlbnZlbG9wZVNpZ25hdHVyZXMgPSB7fTtcbiAgZm9yIChsZXQgYWNjdCBvZiBPYmplY3QudmFsdWVzKGl4LmFjY291bnRzKSkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoYWNjdC5yb2xlLnBheWVyICYmIGFjY3Quc2lnbmF0dXJlICE9IG51bGwpIHtcbiAgICAgICAgbGV0IGlkID0gYWNjdC50ZW1wSWQgfHwgaWRvZihhY2N0KTtcbiAgICAgICAgZW52ZWxvcGVTaWduYXR1cmVzW2lkXSA9IGVudmVsb3BlU2lnbmF0dXJlc1tpZF0gfHwge1xuICAgICAgICAgIGFkZHJlc3M6IHNhbnNQcmVmaXgoYWNjdC5hZGRyKSxcbiAgICAgICAgICBrZXlfaW5kZXg6IFN0cmluZyhhY2N0LmtleUlkKSxcbiAgICAgICAgICBzaWduYXR1cmU6IGNvbnRleHQuQnVmZmVyLmZyb20oYWNjdC5zaWduYXR1cmUsIFwiaGV4XCIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJTREsgSFRUUCBTZW5kIEVycm9yOiBUcm91YmxlIGFwcGx5aW5nIGVudmVsb3BlIHNpZ25hdHVyZVwiLCB7XG4gICAgICAgIGFjY3QsXG4gICAgICAgIGl4XG4gICAgICB9KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuICBlbnZlbG9wZVNpZ25hdHVyZXMgPSBPYmplY3QudmFsdWVzKGVudmVsb3BlU2lnbmF0dXJlcyk7XG4gIHZhciB0MSA9IERhdGUubm93KCk7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGh0dHBSZXF1ZXN0JDEoe1xuICAgIGhvc3RuYW1lOiBvcHRzLm5vZGUsXG4gICAgcGF0aDogYC92MS90cmFuc2FjdGlvbnNgLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keToge1xuICAgICAgc2NyaXB0OiBjb250ZXh0LkJ1ZmZlci5mcm9tKGl4Lm1lc3NhZ2UuY2FkZW5jZSkudG9TdHJpbmcoXCJiYXNlNjRcIiksXG4gICAgICBhcmd1bWVudHM6IFsuLi5peC5tZXNzYWdlLmFyZ3VtZW50cy5tYXAoYXJnID0+IGNvbnRleHQuQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoaXguYXJndW1lbnRzW2FyZ10uYXNBcmd1bWVudCkpLnRvU3RyaW5nKFwiYmFzZTY0XCIpKV0sXG4gICAgICByZWZlcmVuY2VfYmxvY2tfaWQ6IGl4Lm1lc3NhZ2UucmVmQmxvY2sgPyBpeC5tZXNzYWdlLnJlZkJsb2NrIDogbnVsbCxcbiAgICAgIGdhc19saW1pdDogU3RyaW5nKGl4Lm1lc3NhZ2UuY29tcHV0ZUxpbWl0KSxcbiAgICAgIHBheWVyOiBzYW5zUHJlZml4KGl4LmFjY291bnRzW0FycmF5LmlzQXJyYXkoaXgucGF5ZXIpID8gaXgucGF5ZXJbMF0gOiBpeC5wYXllcl0uYWRkciksXG4gICAgICBwcm9wb3NhbF9rZXk6IHtcbiAgICAgICAgYWRkcmVzczogc2Fuc1ByZWZpeChpeC5hY2NvdW50c1tpeC5wcm9wb3Nlcl0uYWRkciksXG4gICAgICAgIGtleV9pbmRleDogU3RyaW5nKGl4LmFjY291bnRzW2l4LnByb3Bvc2VyXS5rZXlJZCksXG4gICAgICAgIHNlcXVlbmNlX251bWJlcjogU3RyaW5nKGl4LmFjY291bnRzW2l4LnByb3Bvc2VyXS5zZXF1ZW5jZU51bSlcbiAgICAgIH0sXG4gICAgICBhdXRob3JpemVyczogaXguYXV0aG9yaXphdGlvbnMubWFwKHRlbXBJZCA9PiBpeC5hY2NvdW50c1t0ZW1wSWRdLmFkZHIpLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4ge1xuICAgICAgICByZXR1cm4gcHJldi5maW5kKGl0ZW0gPT4gaXRlbSA9PT0gY3VycmVudCkgPyBwcmV2IDogWy4uLnByZXYsIGN1cnJlbnRdO1xuICAgICAgfSwgW10pLm1hcChzYW5zUHJlZml4KSxcbiAgICAgIHBheWxvYWRfc2lnbmF0dXJlczogcGF5bG9hZFNpZ25hdHVyZXMsXG4gICAgICBlbnZlbG9wZV9zaWduYXR1cmVzOiBlbnZlbG9wZVNpZ25hdHVyZXNcbiAgICB9XG4gIH0pO1xuICB2YXIgdDIgPSBEYXRlLm5vdygpO1xuICBsZXQgcmV0ID0gY29udGV4dC5yZXNwb25zZSgpO1xuICByZXQudGFnID0gaXgudGFnO1xuICByZXQudHJhbnNhY3Rpb25JZCA9IHJlcy5pZDtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIEN1c3RvbUV2ZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiRkxPVzo6VFhcIiwge1xuICAgICAgZGV0YWlsOiB7XG4gICAgICAgIHR4SWQ6IHJldC50cmFuc2FjdGlvbklkLFxuICAgICAgICBkZWx0YTogdDIgLSB0MVxuICAgICAgfVxuICAgIH0pKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZW5kR2V0TmV0d29ya1BhcmFtZXRlcnMoaXgpIHtcbiAgbGV0IGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICBsZXQgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIGludmFyaWFudChvcHRzLm5vZGUsIGBTREsgU2VuZCBHZXQgTmV0d29yayBQYXJhbWV0ZXJzIEVycm9yOiBvcHRzLm5vZGUgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBpbnZhcmlhbnQoY29udGV4dC5yZXNwb25zZSwgYFNESyBTZW5kIEdldCBOZXR3b3JrIFBhcmFtZXRlcnMgRXJyb3I6IGNvbnRleHQucmVzcG9uc2UgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBjb25zdCBodHRwUmVxdWVzdCQxID0gb3B0cy5odHRwUmVxdWVzdCB8fCBodHRwUmVxdWVzdDtcbiAgaXggPSBhd2FpdCBpeDtcbiAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFJlcXVlc3QkMSh7XG4gICAgaG9zdG5hbWU6IG9wdHMubm9kZSxcbiAgICBwYXRoOiBgL3YxL25ldHdvcmsvcGFyYW1ldGVyc2AsXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGJvZHk6IG51bGwsXG4gICAgZW5hYmxlUmVxdWVzdExvZ2dpbmc6IG9wdHMuZW5hYmxlUmVxdWVzdExvZ2dpbmcgPz8gdHJ1ZVxuICB9KTtcbiAgbGV0IHJldCA9IGNvbnRleHQucmVzcG9uc2UoKTtcbiAgcmV0LnRhZyA9IGl4LnRhZztcbiAgcmV0Lm5ldHdvcmtQYXJhbWV0ZXJzID0ge1xuICAgIGNoYWluSWQ6IHJlcy5jaGFpbl9pZFxuICB9O1xuICByZXR1cm4gcmV0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZW5kR2V0Tm9kZVZlcnNpb25JbmZvKGl4KSB7XG4gIGxldCBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICBpbnZhcmlhbnQob3B0cy5ub2RlLCBgU0RLIFNlbmQgR2V0IE5vZGUgVmVyc2lvbiBJbmZvIEVycm9yOiBvcHRzLm5vZGUgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBpbnZhcmlhbnQoY29udGV4dC5yZXNwb25zZSwgYFNESyBTZW5kIEdldCBOb2RlIFZlcmlzb24gSW5mbyBFcnJvcjogY29udGV4dC5yZXNwb25zZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGNvbnN0IGh0dHBSZXF1ZXN0JDEgPSBvcHRzLmh0dHBSZXF1ZXN0IHx8IGh0dHBSZXF1ZXN0O1xuICBpeCA9IGF3YWl0IGl4O1xuICBjb25zdCByZXMgPSBhd2FpdCBodHRwUmVxdWVzdCQxKHtcbiAgICBob3N0bmFtZTogb3B0cy5ub2RlLFxuICAgIHBhdGg6IGAvdjEvbm9kZV92ZXJzaW9uX2luZm9gLFxuICAgIG1ldGhvZDogXCJHRVRcIlxuICB9KTtcbiAgbGV0IHJldCA9IGNvbnRleHQucmVzcG9uc2UoKTtcbiAgcmV0LnRhZyA9IGl4LnRhZztcbiAgcmV0Lm5vZGVWZXJzaW9uSW5mbyA9IHtcbiAgICBzZW12ZXI6IHJlcy5zZW12ZXIsXG4gICAgY29tbWl0OiByZXMuY29tbWl0LFxuICAgIHNwb3JrSWQ6IHJlcy5zcG9ya19pZCxcbiAgICBwcm90b2NvbFZlcnNpb246IHBhcnNlSW50KHJlcy5wcm90b2NvbF92ZXJzaW9uKSxcbiAgICBzcG9ya1Jvb3RCbG9ja0hlaWdodDogcGFyc2VJbnQocmVzLnNwb3JrX3Jvb3RfYmxvY2tfaGVpZ2h0KSxcbiAgICBub2RlUm9vdEJsb2NrSGVpZ2h0OiBwYXJzZUludChyZXMubm9kZV9yb290X2Jsb2NrX2hlaWdodClcbiAgfTtcbiAgcmV0dXJuIHJldDtcbn1cblxuY29uc3QgV2ViU29ja2V0ID0gX1dlYlNvY2tldDtcblxuY2xhc3MgV2Vic29ja2V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgY29kZSxcbiAgICAgIHJlYXNvbixcbiAgICAgIG1lc3NhZ2UsXG4gICAgICB3YXNDbGVhblxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IG1zZyA9IGBcbiAgICAgIGNvbm5lY3RXczogY29ubmVjdGlvbiBjbG9zZWQgd2l0aCBlcnJvciR7bWVzc2FnZSA/IGA6ICR7bWVzc2FnZX1gIDogXCJcIn1cbiAgICAgICR7Y29kZSA/IGBjb2RlOiAke2NvZGV9YCA6IFwiXCJ9XG4gICAgICAke3JlYXNvbiA/IGByZWFzb246ICR7cmVhc29ufWAgOiBcIlwifVxuICAgICAgJHt3YXNDbGVhbiA/IGB3YXNDbGVhbjogJHt3YXNDbGVhbn1gIDogXCJcIn1cbiAgICBgO1xuICAgIHN1cGVyKG1zZyk7XG4gICAgdGhpcy5uYW1lID0gXCJXZWJzb2NrZXRFcnJvclwiO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgdGhpcy53YXNDbGVhbiA9IGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBjb25uZWN0V3MoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBob3N0bmFtZSxcbiAgICBwYXRoLFxuICAgIHBhcmFtcyxcbiAgICBnZXRQYXJhbXMsXG4gICAgcmV0cnlMaW1pdCA9IDUsXG4gICAgcmV0cnlJbnRlcnZhbE1zID0gMTAwMFxuICB9ID0gX3JlZjI7XG4gIGlmIChnZXRQYXJhbXMgJiYgcGFyYW1zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiY29ubmVjdFdzOiBjYW5ub3Qgc3BlY2lmeSBib3RoIHBhcmFtcyBhbmQgZ2V0UGFyYW1zXCIpO1xuICB9XG4gIGxldCBvdXRwdXRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBsZXQgcmV0cnlDb3VudCA9IDA7XG4gIGNvbnN0IHJlc29sdmVQYXJhbXMgPSBnZXRQYXJhbXMgfHwgKCgpID0+IHBhcmFtcyk7XG4gIGxldCBjbG9zZSA9ICgpID0+IHt9O1xuICAoZnVuY3Rpb24gY29ubmVjdCgpIHtcbiAgICBsZXQgdXNlckNsb3NlZCA9IGZhbHNlO1xuICAgIGxldCBoYXNPcGVuZWQgPSBmYWxzZTtcblxuICAgIC8vIEJ1aWxkIGEgd2Vic29ja2V0IGNvbm5lY3Rpb24gd2l0aCBjb3JyZWN0IHByb3RvY29sICYgcGFyYW1zXG4gICAgY29uc3QgdXJsID0gYnVpbGRDb25uZWN0aW9uVXJsKGhvc3RuYW1lLCBwYXRoLCByZXNvbHZlUGFyYW1zKCkpO1xuICAgIGNvbnN0IHdzID0gbmV3IFdlYlNvY2tldCh1cmwpO1xuICAgIHdzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zdCBkYXRhID0gc2FmZVBhcnNlSlNPTihlLmRhdGEpO1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgb3V0cHV0RW1pdHRlci5lbWl0KFwiZGF0YVwiLCBkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dEVtaXR0ZXIuZW1pdChcImVycm9yXCIsIG5ldyBXZWJzb2NrZXRFcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogXCJpbnZhbGlkIEpTT04gZGF0YVwiXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgd3Mub25jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAodXNlckNsb3NlZCkge1xuICAgICAgICBvdXRwdXRFbWl0dGVyLmVtaXQoXCJjbG9zZVwiKTtcbiAgICAgICAgb3V0cHV0RW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFoYXNPcGVuZWQpIHtcbiAgICAgICAgaWYgKHJldHJ5Q291bnQgPCByZXRyeUxpbWl0KSB7XG4gICAgICAgICAgcmV0cnlDb3VudCsrO1xuICAgICAgICAgIHNldFRpbWVvdXQoY29ubmVjdCwgcmV0cnlJbnRlcnZhbE1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRwdXRFbWl0dGVyLmVtaXQoXCJlcnJvclwiLCBuZXcgV2Vic29ja2V0RXJyb3Ioe1xuICAgICAgICAgICAgd2FzQ2xlYW46IGUud2FzQ2xlYW4sXG4gICAgICAgICAgICBjb2RlOiBlLmNvZGUsXG4gICAgICAgICAgICByZWFzb246IGUucmVhc29uLFxuICAgICAgICAgICAgbWVzc2FnZTogXCJmYWlsZWQgdG8gY29ubmVjdFwiXG4gICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgLy8gRW1pdCBjbG9zZSBldmVudCBvbiBuZXh0IHRpY2sgc28gdGhhdCB0aGUgZXJyb3IgZXZlbnQgaXMgZW1pdHRlZCBmaXJzdFxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgb3V0cHV0RW1pdHRlci5lbWl0KFwiY2xvc2VcIik7XG4gICAgICAgICAgICBvdXRwdXRFbWl0dGVyLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgY29ubmVjdGlvbiB3YXMgZXN0YWJsaXNoZWQgYmVmb3JlIGNsb3NpbmcsIGF0dGVtcHQgdG8gcmVjb25uZWN0XG4gICAgICAgIHNldFRpbWVvdXQoY29ubmVjdCwgcmV0cnlJbnRlcnZhbE1zKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhc09wZW5lZCA9IHRydWU7XG4gICAgICByZXRyeUNvdW50ID0gMDtcbiAgICB9O1xuICAgIGNsb3NlID0gKCkgPT4ge1xuICAgICAgdXNlckNsb3NlZCA9IHRydWU7XG4gICAgICB3cy5jbG9zZSgpO1xuICAgIH07XG4gIH0pKCk7XG4gIHJldHVybiB7XG4gICAgb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICBvdXRwdXRFbWl0dGVyLm9uKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIG9mZihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgIG91dHB1dEVtaXR0ZXIub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGNsb3NlKCkge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBidWlsZENvbm5lY3Rpb25VcmwoaG9zdG5hbWUsIHBhdGgsIHBhcmFtcykge1xuICBjb25zdCB1cmwgPSBuZXcgVVJMKHBhdGggfHwgXCJcIiwgaG9zdG5hbWUpO1xuICBpZiAodXJsLnByb3RvY29sID09PSBcImh0dHBzOlwiKSB7XG4gICAgdXJsLnByb3RvY29sID0gXCJ3c3M6XCI7XG4gIH0gZWxzZSBpZiAodXJsLnByb3RvY29sID09PSBcImh0dHA6XCIpIHtcbiAgICB1cmwucHJvdG9jb2wgPSBcIndzOlwiO1xuICB9XG4gIE9iamVjdC5lbnRyaWVzKHBhcmFtcyB8fCB7fSkuZm9yRWFjaChfcmVmMyA9PiB7XG4gICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYzO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgbGV0IGZvcm1hdHRlZFZhbHVlO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGZvcm1hdHRlZFZhbHVlID0gdmFsdWUuam9pbihcIixcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JtYXR0ZWRWYWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIGZvcm1hdHRlZFZhbHVlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdERhdGEoaXgsIGNvbnRleHQsIGRhdGEpIHtcbiAgY29uc3QgcmVzcG9uc2UgPSBjb250ZXh0LnJlc3BvbnNlKCk7XG4gIHJlc3BvbnNlLnRhZyA9IGl4LnRhZztcbiAgcmVzcG9uc2UuZXZlbnRzID0gZGF0YS5FdmVudHM/Lmxlbmd0aCA+IDAgPyBkYXRhLkV2ZW50cy5tYXAoZXZlbnQgPT4gKHtcbiAgICBibG9ja0lkOiBkYXRhLkJsb2NrSUQsXG4gICAgYmxvY2tIZWlnaHQ6IE51bWJlcihkYXRhLkhlaWdodCksXG4gICAgYmxvY2tUaW1lc3RhbXA6IGRhdGEuQmxvY2tUaW1lc3RhbXAsXG4gICAgdHlwZTogZXZlbnQuVHlwZSxcbiAgICB0cmFuc2FjdGlvbklkOiBldmVudC5UcmFuc2FjdGlvbklELFxuICAgIHRyYW5zYWN0aW9uSW5kZXg6IE51bWJlcihldmVudC5UcmFuc2FjdGlvbkluZGV4KSxcbiAgICBldmVudEluZGV4OiBOdW1iZXIoZXZlbnQuRXZlbnRJbmRleCksXG4gICAgcGF5bG9hZDogSlNPTi5wYXJzZShjb250ZXh0LkJ1ZmZlci5mcm9tKGV2ZW50LlBheWxvYWQsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKCkpXG4gIH0pKSA6IG51bGw7XG4gIHJlc3BvbnNlLmhlYXJ0YmVhdCA9IHtcbiAgICBibG9ja0lkOiBkYXRhLkJsb2NrSUQsXG4gICAgYmxvY2tIZWlnaHQ6IE51bWJlcihkYXRhLkhlaWdodCksXG4gICAgYmxvY2tUaW1lc3RhbXA6IGRhdGEuQmxvY2tUaW1lc3RhbXBcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuZnVuY3Rpb24gY29uc3RydWN0UmVzcG9uc2UoaXgsIGNvbnRleHQsIHN0cmVhbSkge1xuICBjb25zdCByZXNwb25zZSA9IGNvbnRleHQucmVzcG9uc2UoKTtcbiAgcmVzcG9uc2UudGFnID0gaXgudGFnO1xuICByZXNwb25zZS5zdHJlYW1Db25uZWN0aW9uID0gc3RyZWFtO1xuICByZXR1cm4gcmVzcG9uc2U7XG59XG5hc3luYyBmdW5jdGlvbiBjb25uZWN0U3Vic2NyaWJlRXZlbnRzKGl4KSB7XG4gIGxldCBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICBpbnZhcmlhbnQob3B0cy5ub2RlLCBgU0RLIFNlbmQgR2V0IEV2ZW50cyBFcnJvcjogb3B0cy5ub2RlIG11c3QgYmUgZGVmaW5lZC5gKTtcbiAgaW52YXJpYW50KGNvbnRleHQucmVzcG9uc2UsIGBTREsgU2VuZCBHZXQgRXZlbnRzIEVycm9yOiBjb250ZXh0LnJlc3BvbnNlIG11c3QgYmUgZGVmaW5lZC5gKTtcbiAgaW52YXJpYW50KGNvbnRleHQuQnVmZmVyLCBgU0RLIFNlbmQgR2V0IEV2ZW50cyBFcnJvcjogY29udGV4dC5CdWZmZXIgbXVzdCBiZSBkZWZpbmVkLmApO1xuICBjb25zdCByZXNvbHZlZEl4ID0gYXdhaXQgaXg7XG4gIGNvbnN0IGNvbm5lY3RXcyQxID0gb3B0cy5jb25uZWN0V3MgfHwgY29ubmVjdFdzO1xuICBjb25zdCBvdXRwdXRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBsZXQgbGFzdEJsb2NrSGVpZ2h0ID0gbnVsbDtcblxuICAvLyBDb25uZWN0IHRvIHRoZSB3ZWJzb2NrZXQgJiBwcm92aWRlIHJlY29ubmVjdGlvbiBwYXJhbWV0ZXJzXG4gIGNvbnN0IGNvbm5lY3Rpb24gPSBjb25uZWN0V3MkMSh7XG4gICAgaG9zdG5hbWU6IG9wdHMubm9kZSxcbiAgICBwYXRoOiBgL3YxL3N1YnNjcmliZV9ldmVudHNgLFxuICAgIGdldFBhcmFtczogKCkgPT4ge1xuICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICBldmVudF90eXBlczogcmVzb2x2ZWRJeC5zdWJzY3JpYmVFdmVudHM/LmV2ZW50VHlwZXMsXG4gICAgICAgIGFkZHJlc3NlczogcmVzb2x2ZWRJeC5zdWJzY3JpYmVFdmVudHM/LmFkZHJlc3NlcyxcbiAgICAgICAgY29udHJhY3RzOiByZXNvbHZlZEl4LnN1YnNjcmliZUV2ZW50cz8uY29udHJhY3RzLFxuICAgICAgICBoZWFydGJlYXRfaW50ZXJ2YWw6IHJlc29sdmVkSXguc3Vic2NyaWJlRXZlbnRzPy5oZWFydGJlYXRJbnRlcnZhbFxuICAgICAgfTtcblxuICAgICAgLy8gSWYgdGhlIGxhc3RCbG9ja0lkIGlzIHNldCwgdXNlIGl0IHRvIHJlc3VtZSB0aGUgc3RyZWFtXG4gICAgICBpZiAobGFzdEJsb2NrSGVpZ2h0KSB7XG4gICAgICAgIHBhcmFtcy5zdGFydF9oZWlnaHQgPSBsYXN0QmxvY2tIZWlnaHQgKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zLnN0YXJ0X2Jsb2NrX2lkID0gcmVzb2x2ZWRJeC5zdWJzY3JpYmVFdmVudHM/LnN0YXJ0QmxvY2tJZDtcbiAgICAgICAgcGFyYW1zLnN0YXJ0X2hlaWdodCA9IHJlc29sdmVkSXguc3Vic2NyaWJlRXZlbnRzPy5zdGFydEhlaWdodDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfVxuICB9KTtcblxuICAvLyBNYXAgdGhlIGNvbm5lY3Rpb24gdG8gYSBmb3JtYXR0ZWQgcmVzcG9uc2Ugc3RyZWFtXG4gIGNvbm5lY3Rpb24ub24oXCJkYXRhXCIsIGRhdGEgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IGNvbnN0cnVjdERhdGEocmVzb2x2ZWRJeCwgY29udGV4dCwgZGF0YSk7XG4gICAgbGFzdEJsb2NrSGVpZ2h0ID0gcmVzcG9uc2VEYXRhLmhlYXJ0YmVhdC5ibG9ja0hlaWdodDtcbiAgICBvdXRwdXRFbWl0dGVyLmVtaXQoXCJkYXRhXCIsIHJlc3BvbnNlRGF0YSk7XG4gIH0pO1xuICBjb25uZWN0aW9uLm9uKFwiZXJyb3JcIiwgZXJyb3IgPT4ge1xuICAgIG91dHB1dEVtaXR0ZXIuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgfSk7XG4gIGNvbm5lY3Rpb24ub24oXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgb3V0cHV0RW1pdHRlci5lbWl0KFwiY2xvc2VcIik7XG4gIH0pO1xuICBjb25zdCByZXNwb25zZVN0cmVhbSA9IHtcbiAgICBvbihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgIG91dHB1dEVtaXR0ZXIub24oZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgb3V0cHV0RW1pdHRlci5vZmYoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgY2xvc2UoKSB7XG4gICAgICBjb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gY29uc3RydWN0UmVzcG9uc2UocmVzb2x2ZWRJeCwgY29udGV4dCwgcmVzcG9uc2VTdHJlYW0pO1xufVxuXG5jb25zdCBzZW5kID0gYXN5bmMgZnVuY3Rpb24gKGl4LCBjb250ZXh0KSB7XG4gIGxldCBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgaW52YXJpYW50KEJvb2xlYW4ob3B0cz8ubm9kZSksIGBTREsgU2VuZCBFcnJvcjogRWl0aGVyIG9wdHMubm9kZSBvciBcImFjY2Vzc05vZGUuYXBpXCIgaW4gY29uZmlnIG11c3QgYmUgZGVmaW5lZC5gKTtcbiAgaW52YXJpYW50KEJvb2xlYW4oY29udGV4dC5peCksIGBTREsgU2VuZCBFcnJvcjogY29udGV4dC5peCBtdXN0IGJlIGRlZmluZWQuYCk7XG4gIGl4ID0gYXdhaXQgaXg7XG5cbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgY29udGV4dC5peC5pc1RyYW5zYWN0aW9uKGl4KTpcbiAgICAgIHJldHVybiBvcHRzLnNlbmRUcmFuc2FjdGlvbiA/IG9wdHMuc2VuZFRyYW5zYWN0aW9uKGl4LCBjb250ZXh0LCBvcHRzKSA6IHNlbmRUcmFuc2FjdGlvbihpeCwgY29udGV4dCwgb3B0cyk7XG4gICAgY2FzZSBjb250ZXh0Lml4LmlzR2V0VHJhbnNhY3Rpb25TdGF0dXMoaXgpOlxuICAgICAgcmV0dXJuIG9wdHMuc2VuZEdldFRyYW5zYWN0aW9uU3RhdHVzID8gb3B0cy5zZW5kR2V0VHJhbnNhY3Rpb25TdGF0dXMoaXgsIGNvbnRleHQsIG9wdHMpIDogc2VuZEdldFRyYW5zYWN0aW9uU3RhdHVzKGl4LCBjb250ZXh0LCBvcHRzKTtcbiAgICBjYXNlIGNvbnRleHQuaXguaXNHZXRUcmFuc2FjdGlvbihpeCk6XG4gICAgICByZXR1cm4gb3B0cy5zZW5kR2V0VHJhbnNhY3Rpb24gPyBvcHRzLnNlbmRHZXRUcmFuc2FjdGlvbihpeCwgY29udGV4dCwgb3B0cykgOiBzZW5kR2V0VHJhbnNhY3Rpb24oaXgsIGNvbnRleHQsIG9wdHMpO1xuICAgIGNhc2UgY29udGV4dC5peC5pc1NjcmlwdChpeCk6XG4gICAgICByZXR1cm4gb3B0cy5zZW5kRXhlY3V0ZVNjcmlwdCA/IG9wdHMuc2VuZEV4ZWN1dGVTY3JpcHQoaXgsIGNvbnRleHQsIG9wdHMpIDogc2VuZEV4ZWN1dGVTY3JpcHQoaXgsIGNvbnRleHQsIG9wdHMpO1xuICAgIGNhc2UgY29udGV4dC5peC5pc0dldEFjY291bnQoaXgpOlxuICAgICAgcmV0dXJuIG9wdHMuc2VuZEdldEFjY291bnQgPyBvcHRzLnNlbmRHZXRBY2NvdW50KGl4LCBjb250ZXh0LCBvcHRzKSA6IHNlbmRHZXRBY2NvdW50KGl4LCBjb250ZXh0LCBvcHRzKTtcbiAgICBjYXNlIGNvbnRleHQuaXguaXNHZXRFdmVudHMoaXgpOlxuICAgICAgcmV0dXJuIG9wdHMuc2VuZEdldEV2ZW50cyA/IG9wdHMuc2VuZEdldEV2ZW50cyhpeCwgY29udGV4dCwgb3B0cykgOiBzZW5kR2V0RXZlbnRzKGl4LCBjb250ZXh0LCBvcHRzKTtcbiAgICBjYXNlIGNvbnRleHQuaXguaXNTdWJzY3JpYmVFdmVudHM/LihpeCk6XG4gICAgICByZXR1cm4gb3B0cy5jb25uZWN0U3Vic2NyaWJlRXZlbnRzID8gb3B0cy5jb25uZWN0U3Vic2NyaWJlRXZlbnRzKGl4LCBjb250ZXh0LCBvcHRzKSA6IGNvbm5lY3RTdWJzY3JpYmVFdmVudHMoaXgsIGNvbnRleHQsIG9wdHMpO1xuICAgIGNhc2UgY29udGV4dC5peC5pc0dldEJsb2NrKGl4KTpcbiAgICAgIHJldHVybiBvcHRzLnNlbmRHZXRCbG9jayA/IG9wdHMuc2VuZEdldEJsb2NrKGl4LCBjb250ZXh0LCBvcHRzKSA6IHNlbmRHZXRCbG9jayhpeCwgY29udGV4dCwgb3B0cyk7XG4gICAgY2FzZSBjb250ZXh0Lml4LmlzR2V0QmxvY2tIZWFkZXIoaXgpOlxuICAgICAgcmV0dXJuIG9wdHMuc2VuZEdldEJsb2NrSGVhZGVyID8gb3B0cy5zZW5kR2V0QmxvY2tIZWFkZXIoaXgsIGNvbnRleHQsIG9wdHMpIDogc2VuZEdldEJsb2NrSGVhZGVyKGl4LCBjb250ZXh0LCBvcHRzKTtcbiAgICBjYXNlIGNvbnRleHQuaXguaXNHZXRDb2xsZWN0aW9uKGl4KTpcbiAgICAgIHJldHVybiBvcHRzLnNlbmRHZXRDb2xsZWN0aW9uID8gb3B0cy5zZW5kR2V0Q29sbGVjdGlvbihpeCwgY29udGV4dCwgb3B0cykgOiBzZW5kR2V0Q29sbGVjdGlvbihpeCwgY29udGV4dCwgb3B0cyk7XG4gICAgY2FzZSBjb250ZXh0Lml4LmlzUGluZyhpeCk6XG4gICAgICByZXR1cm4gb3B0cy5zZW5kUGluZyA/IG9wdHMuc2VuZFBpbmcoaXgsIGNvbnRleHQsIG9wdHMpIDogc2VuZFBpbmcoaXgsIGNvbnRleHQsIG9wdHMpO1xuICAgIGNhc2UgY29udGV4dC5peC5pc0dldE5ldHdvcmtQYXJhbWV0ZXJzKGl4KTpcbiAgICAgIHJldHVybiBvcHRzLnNlbmRHZXROZXR3b3JrUGFyYW1ldGVycyA/IG9wdHMuc2VuZEdldE5ldHdvcmtQYXJhbWV0ZXJzKGl4LCBjb250ZXh0LCBvcHRzKSA6IHNlbmRHZXROZXR3b3JrUGFyYW1ldGVycyhpeCwgY29udGV4dCwgb3B0cyk7XG4gICAgY2FzZSBjb250ZXh0Lml4LmlzR2V0Tm9kZVZlcnNpb25JbmZvPy4oaXgpOlxuICAgICAgcmV0dXJuIG9wdHMuc2VuZEdldE5vZGVWZXJzaW9uSW5mbyA/IG9wdHMuc2VuZEdldE5vZGVWZXJzaW9uSW5mbyhpeCwgY29udGV4dCwgb3B0cykgOiBzZW5kR2V0Tm9kZVZlcnNpb25JbmZvKGl4LCBjb250ZXh0LCBvcHRzKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGl4O1xuICB9XG59O1xuXG5sZXQgQWN0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChBY3Rpb24pIHtcbiAgQWN0aW9uW1wiTElTVF9TVUJTQ1JJUFRJT05TXCJdID0gXCJsaXN0X3N1YnNjcmlwdGlvbnNcIjtcbiAgQWN0aW9uW1wiU1VCU0NSSUJFXCJdID0gXCJzdWJzY3JpYmVcIjtcbiAgQWN0aW9uW1wiVU5TVUJTQ1JJQkVcIl0gPSBcInVuc3Vic2NyaWJlXCI7XG4gIHJldHVybiBBY3Rpb247XG59KHt9KTtcbmNsYXNzIFNvY2tldEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihjb2RlLCBtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJTb2NrZXRFcnJvclwiO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gIH1cbiAgc3RhdGljIGZyb21NZXNzYWdlKGVycm9yKSB7XG4gICAgcmV0dXJuIG5ldyBTb2NrZXRFcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcbiAgfVxufVxuXG5jb25zdCBXU19PUEVOID0gMTtcbmNsYXNzIFN1YnNjcmlwdGlvbk1hbmFnZXIge1xuICBjb3VudGVyID0gMDtcbiAgc29ja2V0ID0gbnVsbDtcbiAgc3Vic2NyaXB0aW9ucyA9IFtdO1xuICByZWNvbm5lY3RBdHRlbXB0cyA9IDA7XG4gIGNvbm5lY3RQcm9taXNlID0gbnVsbDtcbiAgY2xvc2VDb25uZWN0aW9uID0gbnVsbDtcbiAgY29uc3RydWN0b3IoaGFuZGxlcnMsIGNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgLi4uY29uZmlnLFxuICAgICAgcmVjb25uZWN0T3B0aW9uczoge1xuICAgICAgICBpbml0aWFsUmVjb25uZWN0RGVsYXk6IDUwMCxcbiAgICAgICAgcmVjb25uZWN0QXR0ZW1wdHM6IDUsXG4gICAgICAgIG1heFJlY29ubmVjdERlbGF5OiA1MDAwLFxuICAgICAgICAuLi5jb25maWcucmVjb25uZWN0T3B0aW9uc1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5oYW5kbGVycyA9IGhhbmRsZXJzO1xuICB9XG4gIHN1YnNjcmliZShvcHRzKSB7XG4gICAgY29uc3QgaWRQcm9taXNlID0gdGhpcy5fc3Vic2NyaWJlKG9wdHMpO1xuICAgIHJldHVybiB7XG4gICAgICB1bnN1YnNjcmliZTogKCkgPT4ge1xuICAgICAgICAvLyBVbnN1YnNjcmliZSB3aGVuIHRoZSBJRCBpcyBhdmFpbGFibGVcbiAgICAgICAgaWRQcm9taXNlLnRoZW4oaWQgPT4gaWQgJiYgdGhpcy51bnN1YnNjcmliZShpZCkpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgYXN5bmMgX3N1YnNjcmliZShvcHRzKSB7XG4gICAgLy8gR2V0IHRoZSBkYXRhIHByb3ZpZGVyIGZvciB0aGUgdG9waWNcbiAgICBjb25zdCB0b3BpY0hhbmRsZXIgPSB0aGlzLmdldEhhbmRsZXIob3B0cy50b3BpYyk7XG4gICAgY29uc3Qgc3Vic2NyaWJlciA9IHRvcGljSGFuZGxlci5jcmVhdGVTdWJzY3JpYmVyKG9wdHMuYXJncywgb3B0cy5vbkRhdGEsIG9wdHMub25FcnJvcik7XG4gICAgbGV0IHN1YiA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIC8vIENvbm5lY3QgdGhlIHNvY2tldCBpZiBpdCdzIG5vdCBhbHJlYWR5IG9wZW5cbiAgICAgIGF3YWl0IHRoaXMuY29ubmVjdCgpO1xuXG4gICAgICAvLyBUcmFjayB0aGUgc3Vic2NyaXB0aW9uIGxvY2FsbHlcbiAgICAgIHN1YiA9IHtcbiAgICAgICAgaWQ6IFN0cmluZyh0aGlzLmNvdW50ZXIrKyksXG4gICAgICAgIHRvcGljOiBvcHRzLnRvcGljLFxuICAgICAgICBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyXG4gICAgICB9O1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goc3ViKTtcblxuICAgICAgLy8gU2VuZCB0aGUgc3Vic2NyaWJlIG1lc3NhZ2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5zZW5kU3Vic2NyaWJlKHN1Yik7XG4gICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gc3Vic2NyaWJlIHRvIHRvcGljICR7c3ViLnRvcGljfWAsIHtcbiAgICAgICAgICBjYXVzZTogU29ja2V0RXJyb3IuZnJvbU1lc3NhZ2UocmVzcG9uc2UuZXJyb3IpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFVuc3Vic2NyaWJlIGlmIHRoZXJlIHdhcyBhbiBlcnJvclxuICAgICAgc3Vic2NyaWJlci5vbkVycm9yKGUgaW5zdGFuY2VvZiBFcnJvciA/IGUgOiBuZXcgRXJyb3IoU3RyaW5nKGUpKSk7XG4gICAgICBpZiAoc3ViKSB0aGlzLnVuc3Vic2NyaWJlKHN1Yi5pZCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHN1Yi5pZDtcbiAgfVxuICB1bnN1YnNjcmliZShpZCkge1xuICAgIC8vIEdldCB0aGUgc3Vic2NyaXB0aW9uXG4gICAgY29uc3Qgc3ViID0gdGhpcy5zdWJzY3JpcHRpb25zLmZpbmQoc3ViID0+IHN1Yi5pZCA9PT0gaWQpO1xuICAgIGlmICghc3ViKSByZXR1cm47XG5cbiAgICAvLyBSZW1vdmUgdGhlIHN1YnNjcmlwdGlvblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5maWx0ZXIoc3ViID0+IHN1Yi5pZCAhPT0gaWQpO1xuXG4gICAgLy8gQ2xvc2UgdGhlIHNvY2tldCBpZiB0aGVyZSBhcmUgbm8gbW9yZSBzdWJzY3JpcHRpb25zXG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuY2xvc2VDb25uZWN0aW9uPy4oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIHRoZSB1bnN1YnNjcmliZSBtZXNzYWdlXG4gICAgdGhpcy5zZW5kVW5zdWJzY3JpYmUoc3ViKS5jYXRjaChlID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHdoaWxlIHVuc3Vic2NyaWJpbmcgZnJvbSB0b3BpYzogJHtlfWApO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gTGF6eSBjb25uZWN0IHRvIHRoZSBzb2NrZXQgd2hlbiB0aGUgZmlyc3Qgc3Vic2NyaXB0aW9uIGlzIG1hZGVcbiAgYXN5bmMgY29ubmVjdCgpIHtcbiAgICBpZiAodGhpcy5jb25uZWN0UHJvbWlzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdFByb21pc2U7XG4gICAgfVxuICAgIHRoaXMuY29ubmVjdFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBJZiB0aGUgc29ja2V0IGlzIGFscmVhZHkgb3BlbiwgZG8gbm90aGluZ1xuICAgICAgaWYgKHRoaXMuc29ja2V0Py5yZWFkeVN0YXRlID09PSBXU19PUEVOKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zb2NrZXQgPSBuZXcgV2ViU29ja2V0KHRoaXMuY29uZmlnLm5vZGUpO1xuICAgICAgY29uc3Qgb25NZXNzYWdlID0gZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcblxuICAgICAgICAvLyBFcnJvciBtZXNzYWdlXG4gICAgICAgIGlmIChcImFjdGlvblwiIGluIG1lc3NhZ2UgJiYgbWVzc2FnZS5lcnJvcikge1xuICAgICAgICAgIGNvbnN0IHN1YiA9IHRoaXMuc3Vic2NyaXB0aW9ucy5maW5kKHN1YiA9PiBzdWIuaWQgPT09IG1lc3NhZ2Uuc3Vic2NyaXB0aW9uX2lkKTtcbiAgICAgICAgICBpZiAoc3ViKSB7XG4gICAgICAgICAgICBzdWIuc3Vic2NyaWJlci5vbkVycm9yKG5ldyBFcnJvcihgRmFpbGVkIHRvIHN1YnNjcmliZSB0byB0b3BpYyAke3N1Yi50b3BpY306ICR7bWVzc2FnZS5lcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMuZmlsdGVyKHN1YiA9PiBzdWIuaWQgIT09IG1lc3NhZ2Uuc3Vic2NyaXB0aW9uX2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN1YiA9IHRoaXMuc3Vic2NyaXB0aW9ucy5maW5kKHN1YiA9PiBzdWIuaWQgPT09IG1lc3NhZ2Uuc3Vic2NyaXB0aW9uX2lkKTtcbiAgICAgICAgaWYgKHN1Yikge1xuICAgICAgICAgIGlmICghKFwiYWN0aW9uXCIgaW4gbWVzc2FnZSkgJiYgbWVzc2FnZS5zdWJzY3JpcHRpb25faWQgPT09IHN1Yi5pZCkge1xuICAgICAgICAgICAgc3ViLnN1YnNjcmliZXIub25EYXRhKG1lc3NhZ2UucGF5bG9hZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3Qgb25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVTb2NrZXRFcnJvcihuZXcgRXJyb3IoXCJXZWJTb2NrZXQgY2xvc2VkXCIpKS50aGVuKCgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgY29uc3Qgb25PcGVuID0gKCkgPT4ge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25NZXNzYWdlKTtcbiAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCBvbkNsb3NlKTtcbiAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsIG9uT3Blbik7XG4gICAgICB0aGlzLmNsb3NlQ29ubmVjdGlvbiA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zb2NrZXQ/LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uTWVzc2FnZSk7XG4gICAgICAgIHRoaXMuc29ja2V0Py5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xvc2VcIiwgb25DbG9zZSk7XG4gICAgICAgIHRoaXMuc29ja2V0Py5yZW1vdmVFdmVudExpc3RlbmVyKFwib3BlblwiLCBvbk9wZW4pO1xuICAgICAgICB0aGlzLnNvY2tldD8uY2xvc2UoKTtcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBudWxsO1xuICAgICAgICB0aGlzLmNsb3NlQ29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuY29ubmVjdFByb21pc2UgPSBudWxsO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0UHJvbWlzZTtcbiAgfVxuICBhc3luYyBoYW5kbGVTb2NrZXRFcnJvcihlcnJvcikge1xuICAgIC8vIENsZWFudXAgdGhlIGNvbm5lY3Rpb25cbiAgICB0aGlzLmNsb3NlQ29ubmVjdGlvbj8uKCk7XG5cbiAgICAvLyBWYWxpZGF0ZSB0aGUgbnVtYmVyIG9mIHJlY29ubmVjdGlvbiBhdHRlbXB0c1xuICAgIGlmICgrK3RoaXMucmVjb25uZWN0QXR0ZW1wdHMgPj0gdGhpcy5jb25maWcucmVjb25uZWN0T3B0aW9ucy5yZWNvbm5lY3RBdHRlbXB0cykge1xuICAgICAgbG9nZ2VyLmxvZyh7XG4gICAgICAgIGxldmVsOiBsb2dnZXIuTEVWRUxTLmVycm9yLFxuICAgICAgICB0aXRsZTogXCJXZWJTb2NrZXQgRXJyb3JcIixcbiAgICAgICAgbWVzc2FnZTogYEZhaWxlZCB0byByZWNvbm5lY3QgdG8gdGhlIHNlcnZlciBhZnRlciAke3RoaXMucmVjb25uZWN0QXR0ZW1wdHMgKyAxfSBhdHRlbXB0czogJHtlcnJvcn1gXG4gICAgICB9KTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YiA9PiB7XG4gICAgICAgIHN1Yi5zdWJzY3JpYmVyLm9uRXJyb3IobmV3IEVycm9yKGBGYWlsZWQgdG8gcmVjb25uZWN0IHRvIHRoZSBzZXJ2ZXIgYWZ0ZXIgJHt0aGlzLnJlY29ubmVjdEF0dGVtcHRzICsgMX0gYXR0ZW1wdHM6ICR7ZXJyb3J9YCkpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMgPSAwO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci5sb2coe1xuICAgICAgICBsZXZlbDogbG9nZ2VyLkxFVkVMUy53YXJuLFxuICAgICAgICB0aXRsZTogXCJXZWJTb2NrZXQgRXJyb3JcIixcbiAgICAgICAgbWVzc2FnZTogYFdlYlNvY2tldCBlcnJvciwgcmVjb25uZWN0aW5nIGluICR7dGhpcy5iYWNrb2ZmSW50ZXJ2YWx9bXM6ICR7ZXJyb3J9YFxuICAgICAgfSk7XG5cbiAgICAgIC8vIERlbGF5IHRoZSByZWNvbm5lY3Rpb25cbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCB0aGlzLmJhY2tvZmZJbnRlcnZhbCkpO1xuXG4gICAgICAvLyBUcnkgdG8gcmVjb25uZWN0XG4gICAgICBhd2FpdCB0aGlzLmNvbm5lY3QoKTtcblxuICAgICAgLy8gUmVzdG9yZSBzdWJzY3JpcHRpb25zXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLnN1YnNjcmlwdGlvbnMubWFwKGFzeW5jIHN1YiA9PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2VuZFN1YnNjcmliZShzdWIpLmNhdGNoKGUgPT4ge1xuICAgICAgICAgIHN1Yi5zdWJzY3JpYmVyLm9uRXJyb3IobmV3IEVycm9yKGBGYWlsZWQgdG8gcmVzdG9yZSBzdWJzY3JpcHRpb246ICR7ZX1gKSk7XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzdWJzY3JpcHRpb25cbiAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMuZmlsdGVyKHMgPT4gcy5pZCAhPT0gc3ViLmlkKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG4gICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHRzID0gMDtcbiAgICB9XG4gIH1cbiAgYXN5bmMgc2VuZFN1YnNjcmliZShzdWIpIHtcbiAgICAvLyBTZW5kIHRoZSBzdWJzY3JpcHRpb24gbWVzc2FnZVxuICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICBhY3Rpb246IEFjdGlvbi5TVUJTQ1JJQkUsXG4gICAgICB0b3BpYzogc3ViLnRvcGljLFxuICAgICAgYXJndW1lbnRzOiBzdWIuc3Vic2NyaWJlci5nZXRDb25uZWN0aW9uQXJncygpLFxuICAgICAgc3Vic2NyaXB0aW9uX2lkOiBTdHJpbmcoc3ViLmlkKVxuICAgIH07XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnJlcXVlc3QocmVxdWVzdCk7XG4gICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBzdWJzY3JpYmUgdG8gdG9waWMgJHtzdWIudG9waWN9YCwge1xuICAgICAgICBjYXVzZTogU29ja2V0RXJyb3IuZnJvbU1lc3NhZ2UocmVzcG9uc2UuZXJyb3IpXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG4gIGFzeW5jIHNlbmRVbnN1YnNjcmliZShzdWIpIHtcbiAgICAvLyBTZW5kIHRoZSB1bnN1YnNjcmliZSBtZXNzYWdlIGlmIHRoZSBzdWJzY3JpcHRpb24gaGFzIGEgcmVtb3RlIGlkXG4gICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgIGFjdGlvbjogQWN0aW9uLlVOU1VCU0NSSUJFLFxuICAgICAgc3Vic2NyaXB0aW9uX2lkOiBzdWIuaWRcbiAgICB9O1xuICAgIHRoaXMuc29ja2V0Py5zZW5kKEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucmVxdWVzdChyZXF1ZXN0KTtcbiAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHVuc3Vic2NyaWJlIGZyb20gdG9waWMgJHtzdWIudG9waWN9YCwge1xuICAgICAgICBjYXVzZTogU29ja2V0RXJyb3IuZnJvbU1lc3NhZ2UocmVzcG9uc2UuZXJyb3IpXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG4gIGFzeW5jIHJlcXVlc3QocmVxdWVzdCkge1xuICAgIGxldCBjbGVhbnVwID0gKCkgPT4ge307XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICghdGhpcy5zb2NrZXQpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIldlYlNvY2tldCBpcyBub3QgY29ubmVjdGVkXCIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgdGhlIGNsZWFudXAgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgIGNsZWFudXAgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc29ja2V0Py5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgb25FcnJvcik7XG4gICAgICAgIHRoaXMuc29ja2V0Py5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbk1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnNvY2tldD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsIG9uQ2xvc2UpO1xuICAgICAgfTtcblxuICAgICAgLy8gQmluZCBldmVudCBsaXN0ZW5lcnNcbiAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBvbkVycm9yKTtcbiAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uTWVzc2FnZSk7XG4gICAgICB0aGlzLnNvY2tldC5hZGRFdmVudExpc3RlbmVyKFwiY2xvc2VcIiwgb25DbG9zZSk7XG5cbiAgICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICAgIHRoaXMuc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkocmVxdWVzdCkpO1xuICAgICAgZnVuY3Rpb24gb25FcnJvcihlKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFdlYlNvY2tldCBlcnJvcjogJHtlfWApKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG9uQ2xvc2UoKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJXZWJTb2NrZXQgY2xvc2VkXCIpKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG9uTWVzc2FnZShldmVudCkge1xuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgICAgaWYgKGRhdGEuc3Vic2NyaXB0aW9uX2lkID09PSByZXF1ZXN0LnN1YnNjcmlwdGlvbl9pZCkge1xuICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICB9KTtcbiAgfVxuICBnZXRIYW5kbGVyKHRvcGljKSB7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuaGFuZGxlcnMuZmluZChoYW5kbGVyID0+IGhhbmRsZXIudG9waWMgPT09IHRvcGljKTtcbiAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gaGFuZGxlciBmb3VuZCBmb3IgdG9waWMgJHt0b3BpY31gKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRsZXI7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBiYWNrb2ZmIGludGVydmFsIGZvciByZWNvbm5lY3Rpb24gYXR0ZW1wdHNcbiAgICogQHJldHVybnMgVGhlIGJhY2tvZmYgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzXG4gICAqL1xuICBnZXQgYmFja29mZkludGVydmFsKCkge1xuICAgIHJldHVybiBNYXRoLm1pbih0aGlzLmNvbmZpZy5yZWNvbm5lY3RPcHRpb25zLm1heFJlY29ubmVjdERlbGF5LCB0aGlzLmNvbmZpZy5yZWNvbm5lY3RPcHRpb25zLmluaXRpYWxSZWNvbm5lY3REZWxheSAqIDIgKiogdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uSGFuZGxlcihoYW5kbGVyKSB7XG4gIHJldHVybiBoYW5kbGVyO1xufVxuXG5jb25zdCBibG9ja3NIYW5kbGVyID0gY3JlYXRlU3Vic2NyaXB0aW9uSGFuZGxlcih7XG4gIHRvcGljOiBTdWJzY3JpcHRpb25Ub3BpYy5CTE9DS1MsXG4gIGNyZWF0ZVN1YnNjcmliZXI6IChpbml0aWFsQXJncywgb25EYXRhLCBvbkVycm9yKSA9PiB7XG4gICAgbGV0IHJlc3VtZUFyZ3MgPSB7XG4gICAgICAuLi5pbml0aWFsQXJnc1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRGF0YShkYXRhKSB7XG4gICAgICAgIC8vIFBhcnNlIHRoZSByYXcgZGF0YVxuICAgICAgICBjb25zdCBwYXJzZWREYXRhID0ge1xuICAgICAgICAgIGJsb2NrOiB7XG4gICAgICAgICAgICBpZDogZGF0YS5oZWFkZXIuaWQsXG4gICAgICAgICAgICBwYXJlbnRJZDogZGF0YS5oZWFkZXIucGFyZW50X2lkLFxuICAgICAgICAgICAgaGVpZ2h0OiBOdW1iZXIoZGF0YS5oZWFkZXIuaGVpZ2h0KSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogZGF0YS5oZWFkZXIudGltZXN0YW1wLFxuICAgICAgICAgICAgcGFyZW50Vm90ZXJTaWduYXR1cmU6IGRhdGEuaGVhZGVyLnBhcmVudF92b3Rlcl9zaWduYXR1cmUsXG4gICAgICAgICAgICBjb2xsZWN0aW9uR3VhcmFudGVlczogZGF0YS5wYXlsb2FkLmNvbGxlY3Rpb25fZ3VhcmFudGVlcy5tYXAoZ3VhcmFudGVlID0+ICh7XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25JZDogZ3VhcmFudGVlLmNvbGxlY3Rpb25faWQsXG4gICAgICAgICAgICAgIHNpZ25lcklkczogZ3VhcmFudGVlLnNpZ25lcl9pbmRpY2VzXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBibG9ja1NlYWxzOiBkYXRhLnBheWxvYWQuYmxvY2tfc2VhbHMubWFwKHNlYWwgPT4gKHtcbiAgICAgICAgICAgICAgYmxvY2tJZDogc2VhbC5ibG9ja19pZCxcbiAgICAgICAgICAgICAgZXhlY3V0aW9uUmVjZWlwdElkOiBzZWFsLnJlc3VsdF9pZFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVzdW1lIGFyZ3NcbiAgICAgICAgcmVzdW1lQXJncyA9IHtcbiAgICAgICAgICBibG9ja1N0YXR1czogcmVzdW1lQXJncy5ibG9ja1N0YXR1cyxcbiAgICAgICAgICBzdGFydEJsb2NrSGVpZ2h0OiBOdW1iZXIoQmlnSW50KGRhdGEuaGVhZGVyLmhlaWdodCkgKyBCaWdJbnQoMSkpXG4gICAgICAgIH07XG4gICAgICAgIG9uRGF0YShwYXJzZWREYXRhKTtcbiAgICAgIH0sXG4gICAgICBvbkVycm9yKGVycm9yKSB7XG4gICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgfSxcbiAgICAgIGdldENvbm5lY3Rpb25BcmdzKCkge1xuICAgICAgICBsZXQgZW5jb2RlZEFyZ3MgPSB7XG4gICAgICAgICAgYmxvY2tfc3RhdHVzOiByZXN1bWVBcmdzLmJsb2NrU3RhdHVzXG4gICAgICAgIH07XG4gICAgICAgIGlmIChcInN0YXJ0QmxvY2tIZWlnaHRcIiBpbiByZXN1bWVBcmdzICYmIHJlc3VtZUFyZ3Muc3RhcnRCbG9ja0hlaWdodCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5lbmNvZGVkQXJncyxcbiAgICAgICAgICAgIHN0YXJ0X2Jsb2NrX2hlaWdodDogU3RyaW5nKHJlc3VtZUFyZ3Muc3RhcnRCbG9ja0hlaWdodClcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChcInN0YXJ0QmxvY2tJZFwiIGluIHJlc3VtZUFyZ3MgJiYgcmVzdW1lQXJncy5zdGFydEJsb2NrSWQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZW5jb2RlZEFyZ3MsXG4gICAgICAgICAgICBzdGFydF9ibG9ja19pZDogcmVzdW1lQXJncy5zdGFydEJsb2NrSWRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmNvZGVkQXJncztcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgYmxvY2tIZWFkZXJzSGFuZGxlciA9IGNyZWF0ZVN1YnNjcmlwdGlvbkhhbmRsZXIoe1xuICB0b3BpYzogU3Vic2NyaXB0aW9uVG9waWMuQkxPQ0tfSEVBREVSUyxcbiAgY3JlYXRlU3Vic2NyaWJlcjogKGluaXRpYWxBcmdzLCBvbkRhdGEsIG9uRXJyb3IpID0+IHtcbiAgICBsZXQgcmVzdW1lQXJncyA9IHtcbiAgICAgIC4uLmluaXRpYWxBcmdzXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgb25EYXRhKGRhdGEpIHtcbiAgICAgICAgLy8gUGFyc2UgdGhlIHJhdyBkYXRhXG4gICAgICAgIGNvbnN0IHBhcnNlZERhdGEgPSB7XG4gICAgICAgICAgYmxvY2tIZWFkZXI6IHtcbiAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgICAgcGFyZW50SWQ6IGRhdGEucGFyZW50X2lkLFxuICAgICAgICAgICAgaGVpZ2h0OiBOdW1iZXIoZGF0YS5oZWlnaHQpLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBkYXRhLnRpbWVzdGFtcCxcbiAgICAgICAgICAgIHBhcmVudFZvdGVyU2lnbmF0dXJlOiBkYXRhLnBhcmVudF92b3Rlcl9zaWduYXR1cmVcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVXBkYXRlIHRoZSByZXN1bWUgYXJnc1xuICAgICAgICByZXN1bWVBcmdzID0ge1xuICAgICAgICAgIGJsb2NrU3RhdHVzOiByZXN1bWVBcmdzLmJsb2NrU3RhdHVzLFxuICAgICAgICAgIHN0YXJ0QmxvY2tIZWlnaHQ6IE51bWJlcihCaWdJbnQoZGF0YS5oZWlnaHQpICsgQmlnSW50KDEpKVxuICAgICAgICB9O1xuICAgICAgICBvbkRhdGEocGFyc2VkRGF0YSk7XG4gICAgICB9LFxuICAgICAgb25FcnJvcihlcnJvcikge1xuICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgIH0sXG4gICAgICBnZXRDb25uZWN0aW9uQXJncygpIHtcbiAgICAgICAgbGV0IGVuY29kZWRBcmdzID0ge1xuICAgICAgICAgIGJsb2NrX3N0YXR1czogcmVzdW1lQXJncy5ibG9ja1N0YXR1c1xuICAgICAgICB9O1xuICAgICAgICBpZiAoXCJzdGFydEJsb2NrSGVpZ2h0XCIgaW4gcmVzdW1lQXJncyAmJiByZXN1bWVBcmdzLnN0YXJ0QmxvY2tIZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZW5jb2RlZEFyZ3MsXG4gICAgICAgICAgICBzdGFydF9ibG9ja19oZWlnaHQ6IHJlc3VtZUFyZ3Muc3RhcnRCbG9ja0hlaWdodFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwic3RhcnRCbG9ja0lkXCIgaW4gcmVzdW1lQXJncyAmJiByZXN1bWVBcmdzLnN0YXJ0QmxvY2tJZCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5lbmNvZGVkQXJncyxcbiAgICAgICAgICAgIHN0YXJ0X2Jsb2NrX2lkOiByZXN1bWVBcmdzLnN0YXJ0QmxvY2tJZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuY29kZWRBcmdzO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuXG5jb25zdCBibG9ja0RpZ2VzdHNIYW5kbGVyID0gY3JlYXRlU3Vic2NyaXB0aW9uSGFuZGxlcih7XG4gIHRvcGljOiBTdWJzY3JpcHRpb25Ub3BpYy5CTE9DS19ESUdFU1RTLFxuICBjcmVhdGVTdWJzY3JpYmVyOiAoaW5pdGlhbEFyZ3MsIG9uRGF0YSwgb25FcnJvcikgPT4ge1xuICAgIGxldCByZXN1bWVBcmdzID0ge1xuICAgICAgLi4uaW5pdGlhbEFyZ3NcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBvbkRhdGEoZGF0YSkge1xuICAgICAgICAvLyBQYXJzZSB0aGUgcmF3IGRhdGFcbiAgICAgICAgY29uc3QgcGFyc2VkRGF0YSA9IHtcbiAgICAgICAgICBibG9ja0RpZ2VzdDoge1xuICAgICAgICAgICAgaWQ6IGRhdGEuYmxvY2tfaWQsXG4gICAgICAgICAgICBoZWlnaHQ6IE51bWJlcihkYXRhLmhlaWdodCksXG4gICAgICAgICAgICB0aW1lc3RhbXA6IGRhdGEudGltZXN0YW1wXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVzdW1lIGFyZ3NcbiAgICAgICAgcmVzdW1lQXJncyA9IHtcbiAgICAgICAgICBibG9ja1N0YXR1czogcmVzdW1lQXJncy5ibG9ja1N0YXR1cyxcbiAgICAgICAgICBzdGFydEJsb2NrSWQ6IFN0cmluZyhCaWdJbnQoZGF0YS5oZWlnaHQpICsgQmlnSW50KDEpKVxuICAgICAgICB9O1xuICAgICAgICBvbkRhdGEocGFyc2VkRGF0YSk7XG4gICAgICB9LFxuICAgICAgb25FcnJvcihlcnJvcikge1xuICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgIH0sXG4gICAgICBnZXRDb25uZWN0aW9uQXJncygpIHtcbiAgICAgICAgbGV0IGVuY29kZWRBcmdzID0ge1xuICAgICAgICAgIGJsb2NrX3N0YXR1czogcmVzdW1lQXJncy5ibG9ja1N0YXR1c1xuICAgICAgICB9O1xuICAgICAgICBpZiAoXCJzdGFydEJsb2NrSGVpZ2h0XCIgaW4gcmVzdW1lQXJncyAmJiByZXN1bWVBcmdzLnN0YXJ0QmxvY2tIZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZW5jb2RlZEFyZ3MsXG4gICAgICAgICAgICBzdGFydF9ibG9ja19oZWlnaHQ6IHJlc3VtZUFyZ3Muc3RhcnRCbG9ja0hlaWdodFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwic3RhcnRCbG9ja0lkXCIgaW4gcmVzdW1lQXJncyAmJiByZXN1bWVBcmdzLnN0YXJ0QmxvY2tJZCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5lbmNvZGVkQXJncyxcbiAgICAgICAgICAgIHN0YXJ0X2Jsb2NrX2lkOiByZXN1bWVBcmdzLnN0YXJ0QmxvY2tJZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuY29kZWRBcmdzO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuXG5jb25zdCBhY2NvdW50U3RhdHVzZXNIYW5kbGVyID0gY3JlYXRlU3Vic2NyaXB0aW9uSGFuZGxlcih7XG4gIHRvcGljOiBTdWJzY3JpcHRpb25Ub3BpYy5BQ0NPVU5UX1NUQVRVU0VTLFxuICBjcmVhdGVTdWJzY3JpYmVyOiAoaW5pdGlhbEFyZ3MsIG9uRGF0YSwgb25FcnJvcikgPT4ge1xuICAgIGxldCByZXN1bWVBcmdzID0ge1xuICAgICAgLi4uaW5pdGlhbEFyZ3NcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBvbkRhdGEocmF3RGF0YSkge1xuICAgICAgICBjb25zdCBkYXRhID0gW107XG4gICAgICAgIGZvciAoY29uc3QgW2FkZHJlc3MsIGV2ZW50c10gb2YgT2JqZWN0LmVudHJpZXMocmF3RGF0YS5hY2NvdW50X2V2ZW50cykpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICAgICAgLy8gUGFyc2UgdGhlIHJhdyBkYXRhXG4gICAgICAgICAgICBjb25zdCBwYXJzZWREYXRhID0ge1xuICAgICAgICAgICAgICBhY2NvdW50U3RhdHVzRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICBhY2NvdW50QWRkcmVzczogYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBibG9ja0lkOiByYXdEYXRhLmJsb2NrX2lkLFxuICAgICAgICAgICAgICAgIGJsb2NrSGVpZ2h0OiBOdW1iZXIocmF3RGF0YS5oZWlnaHQpLFxuICAgICAgICAgICAgICAgIHR5cGU6IGV2ZW50LnR5cGUsXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25JZDogZXZlbnQudHJhbnNhY3Rpb25faWQsXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25JbmRleDogTnVtYmVyKGV2ZW50LnRyYW5zYWN0aW9uX2luZGV4KSxcbiAgICAgICAgICAgICAgICBldmVudEluZGV4OiBOdW1iZXIoZXZlbnQuZXZlbnRfaW5kZXgpLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IEpTT04ucGFyc2UoQnVmZmVyLmZyb20oZXZlbnQucGF5bG9hZCwgXCJiYXNlNjRcIikudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRhdGEucHVzaChwYXJzZWREYXRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTb3J0IHRoZSBtZXNzYWdlcyBieSBpbmNyZWFzaW5nIG1lc3NhZ2UgaW5kZXhcbiAgICAgICAgICBkYXRhLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHR4SW5kZXhEaWZmID0gYS5hY2NvdW50U3RhdHVzRXZlbnQudHJhbnNhY3Rpb25JbmRleCAtIGIuYWNjb3VudFN0YXR1c0V2ZW50LnRyYW5zYWN0aW9uSW5kZXg7XG4gICAgICAgICAgICBpZiAodHhJbmRleERpZmYgIT09IDApIHJldHVybiB0eEluZGV4RGlmZjtcbiAgICAgICAgICAgIHJldHVybiBhLmFjY291bnRTdGF0dXNFdmVudC5ldmVudEluZGV4IC0gYi5hY2NvdW50U3RhdHVzRXZlbnQuZXZlbnRJbmRleDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIEVtaXQgdGhlIG1lc3NhZ2VzXG4gICAgICAgICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIGRhdGEpIHtcbiAgICAgICAgICAgIG9uRGF0YShtZXNzYWdlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBVcGRhdGUgdGhlIHJlc3VtZSBhcmdzXG4gICAgICAgICAgcmVzdW1lQXJncyA9IHtcbiAgICAgICAgICAgIC4uLnJlc3VtZUFyZ3MsXG4gICAgICAgICAgICBzdGFydEJsb2NrSGVpZ2h0OiBOdW1iZXIoQmlnSW50KHJhd0RhdGEuaGVpZ2h0KSArIEJpZ0ludCgxKSksXG4gICAgICAgICAgICBzdGFydEJsb2NrSWQ6IHVuZGVmaW5lZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkVycm9yKGVycm9yKSB7XG4gICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgfSxcbiAgICAgIGdldENvbm5lY3Rpb25BcmdzKCkge1xuICAgICAgICBsZXQgZW5jb2RlZEFyZ3MgPSB7XG4gICAgICAgICAgZXZlbnRfdHlwZXM6IHJlc3VtZUFyZ3MuZXZlbnRUeXBlcyxcbiAgICAgICAgICBhZGRyZXNzZXM6IHJlc3VtZUFyZ3MuYWRkcmVzc2VzLFxuICAgICAgICAgIGFjY291bnRfYWRkcmVzc2VzOiByZXN1bWVBcmdzLmFjY291bnRBZGRyZXNzZXNcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFwic3RhcnRCbG9ja0hlaWdodFwiIGluIHJlc3VtZUFyZ3MgJiYgcmVzdW1lQXJncy5zdGFydEJsb2NrSGVpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmVuY29kZWRBcmdzLFxuICAgICAgICAgICAgc3RhcnRfYmxvY2tfaGVpZ2h0OiByZXN1bWVBcmdzLnN0YXJ0QmxvY2tIZWlnaHRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChcInN0YXJ0QmxvY2tJZFwiIGluIHJlc3VtZUFyZ3MgJiYgcmVzdW1lQXJncy5zdGFydEJsb2NrSWQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZW5jb2RlZEFyZ3MsXG4gICAgICAgICAgICBzdGFydF9ibG9ja19pZDogcmVzdW1lQXJncy5zdGFydEJsb2NrSWRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmNvZGVkQXJncztcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgU1RBVFVTX01BUCA9IHtcbiAgVU5LTk9XTjogMCxcbiAgUEVORElORzogMSxcbiAgRklOQUxJWkVEOiAyLFxuICBFWEVDVVRFRDogMyxcbiAgU0VBTEVEOiA0LFxuICBFWFBJUkVEOiA1XG59O1xuY29uc3QgdHJhbnNhY3Rpb25TdGF0dXNlc0hhbmRsZXIgPSBjcmVhdGVTdWJzY3JpcHRpb25IYW5kbGVyKHtcbiAgdG9waWM6IFN1YnNjcmlwdGlvblRvcGljLlRSQU5TQUNUSU9OX1NUQVRVU0VTLFxuICBjcmVhdGVTdWJzY3JpYmVyOiAoaW5pdGlhbEFyZ3MsIG9uRGF0YSwgb25FcnJvcikgPT4ge1xuICAgIGxldCByZXN1bWVBcmdzID0ge1xuICAgICAgLi4uaW5pdGlhbEFyZ3NcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBvbkRhdGEoZGF0YSkge1xuICAgICAgICAvLyBQYXJzZSB0aGUgcmF3IGRhdGFcbiAgICAgICAgY29uc3QgcGFyc2VkRGF0YSA9IHtcbiAgICAgICAgICB0cmFuc2FjdGlvblN0YXR1czoge1xuICAgICAgICAgICAgYmxvY2tJZDogZGF0YS50cmFuc2FjdGlvbl9yZXN1bHQuYmxvY2tfaWQsXG4gICAgICAgICAgICBzdGF0dXM6IFNUQVRVU19NQVBbZGF0YS50cmFuc2FjdGlvbl9yZXN1bHQuc3RhdHVzLnRvVXBwZXJDYXNlKCldLFxuICAgICAgICAgICAgc3RhdHVzU3RyaW5nOiBkYXRhLnRyYW5zYWN0aW9uX3Jlc3VsdC5zdGF0dXMudG9VcHBlckNhc2UoKSxcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IGRhdGEudHJhbnNhY3Rpb25fcmVzdWx0LnN0YXR1c19jb2RlLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBkYXRhLnRyYW5zYWN0aW9uX3Jlc3VsdC5lcnJvcl9tZXNzYWdlLFxuICAgICAgICAgICAgZXZlbnRzOiBkYXRhLnRyYW5zYWN0aW9uX3Jlc3VsdC5ldmVudHMubWFwKGV2ZW50ID0+ICh7XG4gICAgICAgICAgICAgIHR5cGU6IGV2ZW50LnR5cGUsXG4gICAgICAgICAgICAgIHRyYW5zYWN0aW9uSWQ6IGV2ZW50LnRyYW5zYWN0aW9uX2lkLFxuICAgICAgICAgICAgICB0cmFuc2FjdGlvbkluZGV4OiBOdW1iZXIoZXZlbnQudHJhbnNhY3Rpb25faW5kZXgpLFxuICAgICAgICAgICAgICBldmVudEluZGV4OiBOdW1iZXIoZXZlbnQuZXZlbnRfaW5kZXgpLFxuICAgICAgICAgICAgICBwYXlsb2FkOiBKU09OLnBhcnNlKEJ1ZmZlciQxLmZyb20oZXZlbnQucGF5bG9hZCwgXCJiYXNlNjRcIikudG9TdHJpbmcoKSlcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgb25EYXRhKHBhcnNlZERhdGEpO1xuICAgICAgfSxcbiAgICAgIG9uRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICB9LFxuICAgICAgZ2V0Q29ubmVjdGlvbkFyZ3MoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHhfaWQ6IHJlc3VtZUFyZ3MudHJhbnNhY3Rpb25JZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuXG5jb25zdCBldmVudHNIYW5kbGVyID0gY3JlYXRlU3Vic2NyaXB0aW9uSGFuZGxlcih7XG4gIHRvcGljOiBTdWJzY3JpcHRpb25Ub3BpYy5FVkVOVFMsXG4gIGNyZWF0ZVN1YnNjcmliZXI6IChpbml0aWFsQXJncywgb25EYXRhLCBvbkVycm9yKSA9PiB7XG4gICAgbGV0IHJlc3VtZUFyZ3MgPSB7XG4gICAgICAuLi5pbml0aWFsQXJnc1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRGF0YShyYXdEYXRhKSB7XG4gICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgcmF3RGF0YS5ldmVudHMpIHtcbiAgICAgICAgICAvLyBQYXJzZSB0aGUgcmF3IGRhdGFcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICBldmVudDoge1xuICAgICAgICAgICAgICBibG9ja0lkOiByYXdEYXRhLmJsb2NrX2lkLFxuICAgICAgICAgICAgICBibG9ja0hlaWdodDogTnVtYmVyKHJhd0RhdGEuYmxvY2tfaGVpZ2h0KSxcbiAgICAgICAgICAgICAgYmxvY2tUaW1lc3RhbXA6IHJhd0RhdGEuYmxvY2tfdGltZXN0YW1wLFxuICAgICAgICAgICAgICB0eXBlOiBldmVudC50eXBlLFxuICAgICAgICAgICAgICB0cmFuc2FjdGlvbklkOiBldmVudC50cmFuc2FjdGlvbl9pZCxcbiAgICAgICAgICAgICAgdHJhbnNhY3Rpb25JbmRleDogTnVtYmVyKGV2ZW50LnRyYW5zYWN0aW9uX2luZGV4KSxcbiAgICAgICAgICAgICAgZXZlbnRJbmRleDogTnVtYmVyKGV2ZW50LmV2ZW50X2luZGV4KSxcbiAgICAgICAgICAgICAgcGF5bG9hZDogSlNPTi5wYXJzZShCdWZmZXIuZnJvbShldmVudC5wYXlsb2FkLCBcImJhc2U2NFwiKS50b1N0cmluZygpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgb25EYXRhKHJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgdGhlIHJlc3VtZSBhcmdzXG4gICAgICAgIHJlc3VtZUFyZ3MgPSB7XG4gICAgICAgICAgLi4ucmVzdW1lQXJncyxcbiAgICAgICAgICBzdGFydEhlaWdodDogTnVtYmVyKEJpZ0ludChyYXdEYXRhLmJsb2NrX2hlaWdodCkgKyBCaWdJbnQoMSkpLFxuICAgICAgICAgIHN0YXJ0QmxvY2tJZDogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgb25FcnJvcihlcnJvcikge1xuICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgIH0sXG4gICAgICBnZXRDb25uZWN0aW9uQXJncygpIHtcbiAgICAgICAgbGV0IGVuY29kZWRBcmdzID0ge1xuICAgICAgICAgIGV2ZW50X3R5cGVzOiByZXN1bWVBcmdzLmV2ZW50VHlwZXMsXG4gICAgICAgICAgYWRkcmVzc2VzOiByZXN1bWVBcmdzLmFkZHJlc3NlcyxcbiAgICAgICAgICBjb250cmFjdHM6IHJlc3VtZUFyZ3MuY29udHJhY3RzXG4gICAgICAgIH07XG4gICAgICAgIGlmIChcInN0YXJ0QmxvY2tIZWlnaHRcIiBpbiByZXN1bWVBcmdzICYmIHJlc3VtZUFyZ3Muc3RhcnRCbG9ja0hlaWdodCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5lbmNvZGVkQXJncyxcbiAgICAgICAgICAgIHN0YXJ0X2Jsb2NrX2hlaWdodDogcmVzdW1lQXJncy5zdGFydEJsb2NrSGVpZ2h0XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJzdGFydEJsb2NrSWRcIiBpbiByZXN1bWVBcmdzICYmIHJlc3VtZUFyZ3Muc3RhcnRCbG9ja0lkKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmVuY29kZWRBcmdzLFxuICAgICAgICAgICAgc3RhcnRfYmxvY2tfaWQ6IHJlc3VtZUFyZ3Muc3RhcnRCbG9ja0lkXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5jb2RlZEFyZ3M7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IFNVQlNDUklQVElPTl9IQU5ETEVSUyA9IFtibG9ja3NIYW5kbGVyLCBibG9ja0hlYWRlcnNIYW5kbGVyLCBibG9ja0RpZ2VzdHNIYW5kbGVyLCBhY2NvdW50U3RhdHVzZXNIYW5kbGVyLCB0cmFuc2FjdGlvblN0YXR1c2VzSGFuZGxlciwgZXZlbnRzSGFuZGxlcl07XG5cbi8vIE1hcCBvZiBTdWJzY3JpcHRpb25NYW5hZ2VyIGluc3RhbmNlcyBieSBhY2Nlc3Mgbm9kZSBVUkxcbmxldCBzdWJzY3JpcHRpb25NYW5hZ2VyTWFwID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gc3Vic2NyaWJlKF9yZWYsIG9wdHMpIHtcbiAgbGV0IHtcbiAgICB0b3BpYyxcbiAgICBhcmdzLFxuICAgIG9uRGF0YSxcbiAgICBvbkVycm9yXG4gIH0gPSBfcmVmO1xuICAvLyBHZXQgdGhlIFN1YnNjcmlwdGlvbk1hbmFnZXIgaW5zdGFuY2UgZm9yIHRoZSBhY2Nlc3Mgbm9kZSwgb3IgY3JlYXRlIGEgbmV3IG9uZVxuICBjb25zdCBub2RlID0gZ2V0V3NVcmwob3B0cy5ub2RlKTtcbiAgY29uc3QgbWFuYWdlciA9IHN1YnNjcmlwdGlvbk1hbmFnZXJNYXAuZ2V0KG5vZGUpIHx8IG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKFNVQlNDUklQVElPTl9IQU5ETEVSUywge1xuICAgIG5vZGVcbiAgfSk7XG4gIHN1YnNjcmlwdGlvbk1hbmFnZXJNYXAuc2V0KG5vZGUsIG1hbmFnZXIpO1xuICByZXR1cm4gbWFuYWdlci5zdWJzY3JpYmUoe1xuICAgIHRvcGljLFxuICAgIGFyZ3MsXG4gICAgb25EYXRhOiBvbkRhdGEsXG4gICAgb25FcnJvclxuICB9KTtcbn1cbmZ1bmN0aW9uIGdldFdzVXJsKG5vZGUpIHtcbiAgY29uc3QgdXJsID0gbmV3IFVSTChjb21iaW5lVVJMcyhub2RlLCBcIi92MS93c1wiKSk7XG4gIGlmICh1cmwucHJvdG9jb2wgPT09IFwiaHR0cHM6XCIpIHtcbiAgICB1cmwucHJvdG9jb2wgPSBcIndzczpcIjtcbiAgfSBlbHNlIGlmICh1cmwucHJvdG9jb2wgPT09IFwiaHR0cDpcIikge1xuICAgIHVybC5wcm90b2NvbCA9IFwid3M6XCI7XG4gIH1cbiAgcmV0dXJuIHVybC50b1N0cmluZygpO1xufVxuXG5jb25zdCBodHRwVHJhbnNwb3J0ID0ge1xuICBzZW5kLFxuICBzdWJzY3JpYmVcbn07XG5cbmV4cG9ydCB7IEhUVFBSZXF1ZXN0RXJyb3IsIFdlYnNvY2tldEVycm9yLCBjb25uZWN0U3Vic2NyaWJlRXZlbnRzLCBodHRwVHJhbnNwb3J0LCBzZW5kLCBzZW5kRXhlY3V0ZVNjcmlwdCwgc2VuZEdldEFjY291bnQsIHNlbmRHZXRCbG9jaywgc2VuZEdldEJsb2NrSGVhZGVyLCBzZW5kR2V0Q29sbGVjdGlvbiwgc2VuZEdldEV2ZW50cywgc2VuZEdldE5ldHdvcmtQYXJhbWV0ZXJzLCBzZW5kR2V0Tm9kZVZlcnNpb25JbmZvLCBzZW5kR2V0VHJhbnNhY3Rpb24sIHNlbmRHZXRUcmFuc2FjdGlvblN0YXR1cywgc2VuZFBpbmcsIHNlbmRUcmFuc2FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/transport-http/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/typedefs/dist/typedefs.module.js":
/*!***************************************************************!*\
  !*** ./node_modules/@onflow/typedefs/dist/typedefs.module.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FvmErrorCode: () => (/* binding */ FvmErrorCode),\n/* harmony export */   HashAlgorithm: () => (/* binding */ HashAlgorithm),\n/* harmony export */   InteractionResolverKind: () => (/* binding */ InteractionResolverKind),\n/* harmony export */   InteractionStatus: () => (/* binding */ InteractionStatus),\n/* harmony export */   InteractionTag: () => (/* binding */ InteractionTag),\n/* harmony export */   SignatureAlgorithm: () => (/* binding */ SignatureAlgorithm),\n/* harmony export */   SubscriptionTopic: () => (/* binding */ SubscriptionTopic),\n/* harmony export */   TransactionExecutionStatus: () => (/* binding */ TransactionExecutionStatus),\n/* harmony export */   TransactionRole: () => (/* binding */ TransactionRole)\n/* harmony export */ });\n/**\n * Represents different types of interactions with the Flow blockchain\n */\nvar InteractionTag = /*#__PURE__*/function (InteractionTag) {\n  InteractionTag[\"UNKNOWN\"] = \"UNKNOWN\";\n  InteractionTag[\"SCRIPT\"] = \"SCRIPT\";\n  InteractionTag[\"TRANSACTION\"] = \"TRANSACTION\";\n  InteractionTag[\"GET_TRANSACTION_STATUS\"] = \"GET_TRANSACTION_STATUS\";\n  InteractionTag[\"GET_ACCOUNT\"] = \"GET_ACCOUNT\";\n  InteractionTag[\"GET_EVENTS\"] = \"GET_EVENTS\";\n  InteractionTag[\"PING\"] = \"PING\";\n  InteractionTag[\"GET_TRANSACTION\"] = \"GET_TRANSACTION\";\n  InteractionTag[\"GET_BLOCK\"] = \"GET_BLOCK\";\n  InteractionTag[\"GET_BLOCK_HEADER\"] = \"GET_BLOCK_HEADER\";\n  InteractionTag[\"GET_COLLECTION\"] = \"GET_COLLECTION\";\n  InteractionTag[\"GET_NETWORK_PARAMETERS\"] = \"GET_NETWORK_PARAMETERS\";\n  InteractionTag[\"SUBSCRIBE_EVENTS\"] = \"SUBSCRIBE_EVENTS\";\n  InteractionTag[\"GET_NODE_VERSION_INFO\"] = \"GET_NODE_VERSION_INFO\";\n  return InteractionTag;\n}({});\n\n/**\n * Status of an interaction with the Flow blockchain\n */\nvar InteractionStatus = /*#__PURE__*/function (InteractionStatus) {\n  InteractionStatus[\"BAD\"] = \"BAD\";\n  InteractionStatus[\"OK\"] = \"OK\";\n  return InteractionStatus;\n}({});\n\n/**\n * Represents different roles in a transaction\n */\nvar TransactionRole = /*#__PURE__*/function (TransactionRole) {\n  TransactionRole[\"AUTHORIZER\"] = \"authorizer\";\n  TransactionRole[\"PAYER\"] = \"payer\";\n  TransactionRole[\"PROPOSER\"] = \"proposer\";\n  return TransactionRole;\n}({});\n\n/**\n * Represents different kinds of interaction resolvers\n */\nvar InteractionResolverKind = /*#__PURE__*/function (InteractionResolverKind) {\n  InteractionResolverKind[\"ARGUMENT\"] = \"ARGUMENT\";\n  InteractionResolverKind[\"ACCOUNT\"] = \"ACCOUNT\";\n  return InteractionResolverKind;\n}({});\n\n/**\n * Error codes defined by the Flow Virtual Machine (FVM) for various types of errors that can occur during transaction execution\n */\nvar FvmErrorCode = /*#__PURE__*/function (FvmErrorCode) {\n  FvmErrorCode[FvmErrorCode[\"UNKNOWN_ERROR\"] = -1] = \"UNKNOWN_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"TX_VALIDATION_ERROR\"] = 1000] = \"TX_VALIDATION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_TX_BYTE_SIZE_ERROR\"] = 1001] = \"INVALID_TX_BYTE_SIZE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_REFERENCE_BLOCK_ERROR\"] = 1002] = \"INVALID_REFERENCE_BLOCK_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"EXPIRED_TRANSACTION_ERROR\"] = 1003] = \"EXPIRED_TRANSACTION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_SCRIPT_ERROR\"] = 1004] = \"INVALID_SCRIPT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_GAS_LIMIT_ERROR\"] = 1005] = \"INVALID_GAS_LIMIT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_PROPOSAL_SIGNATURE_ERROR\"] = 1006] = \"INVALID_PROPOSAL_SIGNATURE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_PROPOSAL_SEQ_NUMBER_ERROR\"] = 1007] = \"INVALID_PROPOSAL_SEQ_NUMBER_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_PAYLOAD_SIGNATURE_ERROR\"] = 1008] = \"INVALID_PAYLOAD_SIGNATURE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_ENVELOPE_SIGNATURE_ERROR\"] = 1009] = \"INVALID_ENVELOPE_SIGNATURE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"FVM_INTERNAL_ERROR\"] = 1050] = \"FVM_INTERNAL_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"VALUE_ERROR\"] = 1051] = \"VALUE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_ARGUMENT_ERROR\"] = 1052] = \"INVALID_ARGUMENT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_ADDRESS_ERROR\"] = 1053] = \"INVALID_ADDRESS_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_LOCATION_ERROR\"] = 1054] = \"INVALID_LOCATION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_AUTHORIZATION_ERROR\"] = 1055] = \"ACCOUNT_AUTHORIZATION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"OPERATION_AUTHORIZATION_ERROR\"] = 1056] = \"OPERATION_AUTHORIZATION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"OPERATION_NOT_SUPPORTED_ERROR\"] = 1057] = \"OPERATION_NOT_SUPPORTED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"BLOCK_HEIGHT_OUT_OF_RANGE_ERROR\"] = 1058] = \"BLOCK_HEIGHT_OUT_OF_RANGE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"EXECUTION_ERROR\"] = 1100] = \"EXECUTION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"CADENCE_RUNTIME_ERROR\"] = 1101] = \"CADENCE_RUNTIME_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ENCODING_UNSUPPORTED_VALUE\"] = 1102] = \"ENCODING_UNSUPPORTED_VALUE\";\n  FvmErrorCode[FvmErrorCode[\"STORAGE_CAPACITY_EXCEEDED\"] = 1103] = \"STORAGE_CAPACITY_EXCEEDED\";\n  FvmErrorCode[FvmErrorCode[\"GAS_LIMIT_EXCEEDED_ERROR\"] = 1104] = \"GAS_LIMIT_EXCEEDED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"EVENT_LIMIT_EXCEEDED_ERROR\"] = 1105] = \"EVENT_LIMIT_EXCEEDED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"LEDGER_INTERACTION_LIMIT_EXCEEDED_ERROR\"] = 1106] = \"LEDGER_INTERACTION_LIMIT_EXCEEDED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"STATE_KEY_SIZE_LIMIT_ERROR\"] = 1107] = \"STATE_KEY_SIZE_LIMIT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"STATE_VALUE_SIZE_LIMIT_ERROR\"] = 1108] = \"STATE_VALUE_SIZE_LIMIT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"TRANSACTION_FEE_DEDUCTION_FAILED_ERROR\"] = 1109] = \"TRANSACTION_FEE_DEDUCTION_FAILED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"COMPUTATION_LIMIT_EXCEEDED_ERROR\"] = 1110] = \"COMPUTATION_LIMIT_EXCEEDED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"MEMORY_LIMIT_EXCEEDED_ERROR\"] = 1111] = \"MEMORY_LIMIT_EXCEEDED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"COULD_NOT_DECODE_EXECUTION_PARAMETER_FROM_STATE\"] = 1112] = \"COULD_NOT_DECODE_EXECUTION_PARAMETER_FROM_STATE\";\n  FvmErrorCode[FvmErrorCode[\"SCRIPT_EXECUTION_TIMED_OUT_ERROR\"] = 1113] = \"SCRIPT_EXECUTION_TIMED_OUT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"SCRIPT_EXECUTION_CANCELLED_ERROR\"] = 1114] = \"SCRIPT_EXECUTION_CANCELLED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"EVENT_ENCODING_ERROR\"] = 1115] = \"EVENT_ENCODING_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_INTERNAL_STATE_ACCESS_ERROR\"] = 1116] = \"INVALID_INTERNAL_STATE_ACCESS_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INSUFFICIENT_PAYER_BALANCE\"] = 1118] = \"INSUFFICIENT_PAYER_BALANCE\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_ERROR\"] = 1200] = \"ACCOUNT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_NOT_FOUND_ERROR\"] = 1201] = \"ACCOUNT_NOT_FOUND_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_PUBLIC_KEY_NOT_FOUND_ERROR\"] = 1202] = \"ACCOUNT_PUBLIC_KEY_NOT_FOUND_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_ALREADY_EXISTS_ERROR\"] = 1203] = \"ACCOUNT_ALREADY_EXISTS_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"FROZEN_ACCOUNT_ERROR\"] = 1204] = \"FROZEN_ACCOUNT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_STORAGE_NOT_INITIALIZED_ERROR\"] = 1205] = \"ACCOUNT_STORAGE_NOT_INITIALIZED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_PUBLIC_KEY_LIMIT_ERROR\"] = 1206] = \"ACCOUNT_PUBLIC_KEY_LIMIT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"CONTRACT_ERROR\"] = 1250] = \"CONTRACT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"CONTRACT_NOT_FOUND_ERROR\"] = 1251] = \"CONTRACT_NOT_FOUND_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"CONTRACT_NAMES_NOT_FOUND_ERROR\"] = 1252] = \"CONTRACT_NAMES_NOT_FOUND_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"EVM_EXECUTION_ERROR\"] = 1300] = \"EVM_EXECUTION_ERROR\";\n  return FvmErrorCode;\n}({});\n\n/**\n * Represents different topics that can be subscribed to for real-time data from the Flow blockchain\n */\nvar SubscriptionTopic = /*#__PURE__*/function (SubscriptionTopic) {\n  SubscriptionTopic[\"BLOCKS\"] = \"blocks\";\n  SubscriptionTopic[\"BLOCK_HEADERS\"] = \"block_headers\";\n  SubscriptionTopic[\"BLOCK_DIGESTS\"] = \"block_digests\";\n  SubscriptionTopic[\"ACCOUNT_STATUSES\"] = \"account_statuses\";\n  SubscriptionTopic[\"TRANSACTION_STATUSES\"] = \"transaction_statuses\";\n  SubscriptionTopic[\"EVENTS\"] = \"events\";\n  return SubscriptionTopic;\n}({});\n\n/**\n * The data returned by a subscription, which will vary depending on the topic\n */\n\n/**\n * Raw data returned by a subscription, which will vary depending on the topic and is not decoded\n */\n\n/**\n * Arguments for a subscription, which will vary depending on the topic\n */\n\n/**\n * A subscription object that allows managing the subscription lifecycle\n */\n\nvar SignatureAlgorithm = /*#__PURE__*/function (SignatureAlgorithm) {\n  SignatureAlgorithm[SignatureAlgorithm[\"ECDSA_P256\"] = 1] = \"ECDSA_P256\";\n  SignatureAlgorithm[SignatureAlgorithm[\"ECDSA_secp256k1\"] = 2] = \"ECDSA_secp256k1\";\n  SignatureAlgorithm[SignatureAlgorithm[\"BLS_BLS12_381\"] = 3] = \"BLS_BLS12_381\";\n  return SignatureAlgorithm;\n}({});\nvar HashAlgorithm = /*#__PURE__*/function (HashAlgorithm) {\n  HashAlgorithm[HashAlgorithm[\"SHA2_256\"] = 1] = \"SHA2_256\";\n  HashAlgorithm[HashAlgorithm[\"SHA2_384\"] = 2] = \"SHA2_384\";\n  HashAlgorithm[HashAlgorithm[\"SHA3_256\"] = 3] = \"SHA3_256\";\n  HashAlgorithm[HashAlgorithm[\"SHA3_384\"] = 4] = \"SHA3_384\";\n  HashAlgorithm[HashAlgorithm[\"KMAC128_BLS_BLS12_381\"] = 5] = \"KMAC128_BLS_BLS12_381\";\n  return HashAlgorithm;\n}({});\n\n/**\n * BlockDigest holds lightweight block information which includes only block id, block height and block timestamp.\n */\n\n/**\n * Header contains all meta-data for a block, as well as a hash representing\n * the combined payload of the entire block. It is what consensus nodes agree\n * on after validating the contents against the payload hash.\n */\n\n/**\n * The execution status of the transaction.\n */\nvar TransactionExecutionStatus = /*#__PURE__*/function (TransactionExecutionStatus) {\n  TransactionExecutionStatus[TransactionExecutionStatus[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  TransactionExecutionStatus[TransactionExecutionStatus[\"PENDING\"] = 1] = \"PENDING\";\n  TransactionExecutionStatus[TransactionExecutionStatus[\"FINALIZED\"] = 2] = \"FINALIZED\";\n  TransactionExecutionStatus[TransactionExecutionStatus[\"EXECUTED\"] = 3] = \"EXECUTED\";\n  TransactionExecutionStatus[TransactionExecutionStatus[\"SEALED\"] = 4] = \"SEALED\";\n  TransactionExecutionStatus[TransactionExecutionStatus[\"EXPIRED\"] = 5] = \"EXPIRED\";\n  return TransactionExecutionStatus;\n}({});\n\n\n//# sourceMappingURL=typedefs.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/typedefs/dist/typedefs.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/types/dist/types.module.js":
/*!*********************************************************!*\
  !*** ./node_modules/@onflow/types/dist/types.module.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: () => (/* binding */ Address),\n/* harmony export */   Array: () => (/* binding */ _Array),\n/* harmony export */   Bool: () => (/* binding */ Bool),\n/* harmony export */   Character: () => (/* binding */ Character),\n/* harmony export */   Dictionary: () => (/* binding */ Dictionary),\n/* harmony export */   Enum: () => (/* binding */ Enum),\n/* harmony export */   Event: () => (/* binding */ Event),\n/* harmony export */   Fix64: () => (/* binding */ Fix64),\n/* harmony export */   Identity: () => (/* binding */ Identity),\n/* harmony export */   InclusiveRange: () => (/* binding */ InclusiveRange),\n/* harmony export */   Int: () => (/* binding */ Int),\n/* harmony export */   Int128: () => (/* binding */ Int128),\n/* harmony export */   Int16: () => (/* binding */ Int16),\n/* harmony export */   Int256: () => (/* binding */ Int256),\n/* harmony export */   Int32: () => (/* binding */ Int32),\n/* harmony export */   Int64: () => (/* binding */ Int64),\n/* harmony export */   Int8: () => (/* binding */ Int8),\n/* harmony export */   Optional: () => (/* binding */ Optional),\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   Reference: () => (/* binding */ Reference),\n/* harmony export */   Resource: () => (/* binding */ Resource),\n/* harmony export */   String: () => (/* binding */ String),\n/* harmony export */   Struct: () => (/* binding */ Struct),\n/* harmony export */   UFix64: () => (/* binding */ UFix64),\n/* harmony export */   UInt: () => (/* binding */ UInt),\n/* harmony export */   UInt128: () => (/* binding */ UInt128),\n/* harmony export */   UInt16: () => (/* binding */ UInt16),\n/* harmony export */   UInt256: () => (/* binding */ UInt256),\n/* harmony export */   UInt32: () => (/* binding */ UInt32),\n/* harmony export */   UInt64: () => (/* binding */ UInt64),\n/* harmony export */   UInt8: () => (/* binding */ UInt8),\n/* harmony export */   Void: () => (/* binding */ Void),\n/* harmony export */   Word128: () => (/* binding */ Word128),\n/* harmony export */   Word16: () => (/* binding */ Word16),\n/* harmony export */   Word256: () => (/* binding */ Word256),\n/* harmony export */   Word32: () => (/* binding */ Word32),\n/* harmony export */   Word64: () => (/* binding */ Word64),\n/* harmony export */   Word8: () => (/* binding */ Word8),\n/* harmony export */   _Array: () => (/* binding */ _Array)\n/* harmony export */ });\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/./node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n\n\n/**\n * @deprecated Reference values cannot be imported into the Cadence interpreter, will be removed in future versions\n */\n\n/**\n * Creates a type descriptor for a given type\n * @param label - The label for the type\n * @param asArgument - A function that converts the type to a JsonCdcType\n * @param asInjection - A function which returns the argument as is\n * @returns A type descriptor\n * @internal\n */\nconst typedef = (label, asArgument, asInjection) => ({\n  label,\n  asArgument,\n  asInjection: x => {\n    _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n      pkg: \"@onflow/types\",\n      subject: `Passing in ${label} as value for ${label}`,\n      message: `Going forward, use ${label} as value for ${label}.`\n    });\n    return asInjection(x);\n  }\n});\nconst isArray = d => Array.isArray(d);\nconst isObj = d => typeof d === \"object\";\nconst isNull = d => d == null;\nconst isBoolean = d => typeof d === \"boolean\";\nconst isNumber = d => typeof d === \"number\";\nconst isInteger = d => Number.isInteger(d);\nconst isString = d => typeof d === \"string\";\nconst throwTypeError = msg => {\n  throw new Error(\"Type Error: \" + msg);\n};\nconst numberValuesDeprecationNotice = type => {\n  _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n    pkg: \"@onflow/types\",\n    subject: `Passing in Number as value for ${type}`,\n    message: `Going forward, use String as value for ${type}.`,\n    transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0002-[U]Int*-and-Word*-as-Number\"\n  });\n};\nlet identityDeprecationShown = false;\n/**\n * @deprecated will be removed in v2.0.0\n */\nconst Identity = {\n  label: \"Identity\",\n  asArgument: v => {\n    if (!identityDeprecationShown) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n        pkg: \"@onflow/types\",\n        subject: \"Identity\",\n        message: \"Identity type is deprecated and will be removed in v2.0.0.  Please remove it from your code.\"\n      });\n      identityDeprecationShown = true;\n    }\n    return v;\n  },\n  asInjection: v => v\n};\nconst UInt = typedef(\"UInt\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt\");\n    return {\n      type: \"UInt\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected Positive Integer for type Unsigned Int\");\n}, v => v);\nconst Int = typedef(\"Int\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int\");\n    return {\n      type: \"Int\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected Integer for type Int\");\n}, v => v);\nconst UInt8 = typedef(\"UInt8\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt8\");\n    return {\n      type: \"UInt8\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt8\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt8\");\n}, v => v);\nconst Int8 = typedef(\"Int8\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int8\");\n    return {\n      type: \"Int8\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int8\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive integer for Int8\");\n}, v => v);\nconst UInt16 = typedef(\"UInt16\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt16\");\n    return {\n      type: \"UInt16\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt16\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt16\");\n}, v => v);\nconst Int16 = typedef(\"Int16\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int16\");\n    return {\n      type: \"Int16\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int16\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive integer for Int16\");\n}, v => v);\nconst UInt32 = typedef(\"UInt32\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt32\");\n    return {\n      type: \"UInt32\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt32\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt32\");\n}, v => v);\nconst Int32 = typedef(\"Int32\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int32\");\n    return {\n      type: \"Int32\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int32\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive integer for Int32\");\n}, v => v);\nconst UInt64 = typedef(\"UInt64\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt64\");\n    return {\n      type: \"UInt64\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt64\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt64\");\n}, v => v);\nconst Int64 = typedef(\"Int64\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int64\");\n    return {\n      type: \"Int64\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int64\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive integer for Int64\");\n}, v => v);\nconst UInt128 = typedef(\"UInt128\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt128\");\n    return {\n      type: \"UInt128\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt128\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt128\");\n}, v => v);\nconst Int128 = typedef(\"Int128\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int128\");\n    return {\n      type: \"Int128\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int128\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive integer for Int128\");\n}, v => v);\nconst UInt256 = typedef(\"UInt256\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt256\");\n    return {\n      type: \"UInt256\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt256\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt256\");\n}, v => v);\nconst Int256 = typedef(\"Int256\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int256\");\n    return {\n      type: \"Int256\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int256\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for Int256\");\n}, v => v);\nconst Word8 = typedef(\"Word8\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word8\");\n    return {\n      type: \"Word8\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word8\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word8\");\n}, v => v);\nconst Word16 = typedef(\"Word16\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word16\");\n    return {\n      type: \"Word16\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word16\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word16\");\n}, v => v);\nconst Word32 = typedef(\"Word32\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word32\");\n    return {\n      type: \"Word32\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word32\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word32\");\n}, v => v);\nconst Word64 = typedef(\"Word64\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word64\");\n    return {\n      type: \"Word64\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word64\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word64\");\n}, v => v);\nconst Word128 = typedef(\"Word128\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word128\");\n    return {\n      type: \"Word128\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word128\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word128\");\n}, v => v);\nconst Word256 = typedef(\"Word256\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word256\");\n    return {\n      type: \"Word256\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word256\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word256\");\n}, v => v);\nconst UFix64AndFix64NumberDeprecationNotice = () => {\n  _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n    subject: \"Passing in Numbers as values for Fix64 and UFix64 types\",\n    pkg: \"@onflow/types\",\n    transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number\"\n  });\n};\nconst UFix64 = typedef(\"UFix64\", v => {\n  if (isString(v)) {\n    const vParts = v.split(\".\");\n    if (vParts.length !== 2) {\n      return throwTypeError(`Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n    if (vParts[1].length == 0 || vParts[1].length > 8) {\n      return throwTypeError(`Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n\n    // make sure the number is extended to 8 decimal places so it matches cadence encoding of UFix values\n    vParts[1] = vParts[1].padEnd(8, \"0\");\n    v = vParts.join(\".\");\n    return {\n      type: \"UFix64\",\n      value: v\n    };\n  } else if (isNumber(v)) {\n    UFix64AndFix64NumberDeprecationNotice();\n    return {\n      type: \"UFix64\",\n      value: v.toString()\n    };\n  }\n  return throwTypeError(\"Expected String for UFix64\");\n}, v => v);\nconst Fix64 = typedef(\"Fix64\", v => {\n  if (isString(v)) {\n    const vParts = v.split(\".\");\n    if (vParts.length !== 2) {\n      return throwTypeError(`Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n    if (vParts[1].length == 0 || vParts[1].length > 8) {\n      return throwTypeError(`Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n\n    // make sure the number is extended to 8 decimal places so it matches cadence encoding of Fix64 values\n    vParts[1] = vParts[1].padEnd(8, \"0\");\n    v = vParts.join(\".\");\n    return {\n      type: \"Fix64\",\n      value: v\n    };\n  } else if (isNumber(v)) {\n    UFix64AndFix64NumberDeprecationNotice();\n    return {\n      type: \"Fix64\",\n      value: v.toString()\n    };\n  }\n  return throwTypeError(\"Expected String for Fix64\");\n}, v => v);\nconst String = typedef(\"String\", v => {\n  if (isString(v)) return {\n    type: \"String\",\n    value: v\n  };\n  return throwTypeError(\"Expected String for type String\");\n}, v => v);\nconst Character = typedef(\"Character\", v => {\n  if (isString(v)) return {\n    type: \"Character\",\n    value: v\n  };\n  return throwTypeError(\"Expected Character for type Character\");\n}, v => v);\nconst Bool = typedef(\"Bool\", v => {\n  if (isBoolean(v)) return {\n    type: \"Bool\",\n    value: v\n  };\n  return throwTypeError(\"Expected Boolean for type Bool\");\n}, v => v);\nconst Address = typedef(\"Address\", v => {\n  if (isString(v)) return {\n    type: \"Address\",\n    value: v\n  };\n  return throwTypeError(\"Expected Address for type Address\");\n}, v => v);\nconst Void = typedef(\"Void\", v => {\n  if (!v || isNull(v)) return {\n    type: \"Void\",\n    value: null\n  };\n  return throwTypeError(\"Expected Void for type Void\");\n}, v => v);\nconst Optional = children => typedef(\"Optional\", v => ({\n  type: \"Optional\",\n  value: isNull(v) ? null : children.asArgument(v)\n}), v => v);\n\n/**\n * @deprecated Reference values cannot be imported into the Cadence interpreter, will be removed in future versions\n */\nconst Reference = typedef(\"Reference\", v => {\n  if (isObj(v)) return {\n    type: \"Reference\",\n    value: v\n  };\n  return throwTypeError(\"Expected Object for type Reference\");\n}, v => v);\nconst _Array = function () {\n  let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return typedef(\"Array\", v => {\n    return {\n      type: \"Array\",\n      value: isArray(children) ? children.map((c, i) => c.asArgument(v[i])) : v.map(x => children.asArgument(x))\n    };\n  }, v => v);\n};\nconst Dictionary = function () {\n  let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return typedef(\"Dictionary\", v => {\n    const vIsArray = isArray(v);\n    const childrenIsArray = isArray(children);\n    if (isObj(v)) return {\n      type: \"Dictionary\",\n      value: childrenIsArray && vIsArray ? children.map((c, i) => ({\n        key: c.key.asArgument(v[i].key),\n        value: c.value.asArgument(v[i].value)\n      })) : vIsArray && !childrenIsArray ? v.map(x => ({\n        key: children.key.asArgument(x.key),\n        value: children.value.asArgument(x.value)\n      })) : !vIsArray && !childrenIsArray ? [{\n        key: children.key.asArgument(v.key),\n        value: children.value.asArgument(v.value)\n      }] : throwTypeError(\"Invalid arguments for Dictionary.\")\n    };\n    return throwTypeError(\"Expected Object for type Dictionary\");\n  }, v => v);\n};\nconst Event = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return typedef(\"Event\", v => {\n    if (isObj(v)) return {\n      type: \"Event\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    return throwTypeError(\"Expected Object for type Event\");\n  }, v => v);\n};\nconst Resource = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return typedef(\"Resource\", v => {\n    if (isObj(v)) return {\n      type: \"Resource\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    return throwTypeError(\"Expected Object for type Resource\");\n  }, v => v);\n};\nconst Struct = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return typedef(\"Struct\", v => {\n    if (isObj(v)) return {\n      type: \"Struct\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    return throwTypeError(\"Expected Object for type Struct\");\n  }, v => v);\n};\nconst Enum = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return typedef(\"Enum\", v => {\n    if (isObj(v)) return {\n      type: \"Enum\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    return throwTypeError(\"Expected Object for type Enum\");\n  }, v => v);\n};\nconst Path = typedef(\"Path\", v => {\n  if (isObj(v)) {\n    if (!isString(v.domain)) {\n      return throwTypeError(`Expected a string for the Path domain but found ${v.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);\n    }\n    if (!(v.domain === \"storage\" || v.domain === \"private\" || v.domain === \"public\")) {\n      return throwTypeError(`Expected either \"storage\", \"private\" or \"public\" as the Path domain but found ${v.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);\n    }\n    if (!isString(v.identifier)) {\n      return throwTypeError(`Expected a string for the Path identifier but found ${v.identifier}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);\n    }\n    return {\n      type: \"Path\",\n      value: {\n        domain: v.domain,\n        identifier: v.identifier\n      }\n    };\n  }\n  return throwTypeError(\"Expected Object for type Path\");\n}, v => v);\n\n/**\n * InclusiveRange type\n *\n * @param t - A TypeDescriptor for the type of the range, must be a number (UInt32, Int32, etc.)\n * @returns A TypeDescriptor for an InclusiveRange of the given type\n *\n * @example\n * ```javascript\n * import * as fcl from \"@onflow/fcl\"\n * import {InclusiveRange, UInt32} from \"@onflow/types\"\n *\n * const someArg = fcl.arg({start: 1, end: 5, step: 1}, InclusiveRange(UInt32))\n * ```\n */\nconst InclusiveRange = t => typedef(\"InclusiveRange\", v => {\n  if (isObj(v)) {\n    const {\n      start,\n      end,\n      step\n    } = v;\n    return {\n      type: \"InclusiveRange\",\n      value: {\n        start: t.asArgument(start),\n        end: t.asArgument(end),\n        step: t.asArgument(step)\n      }\n    };\n  }\n  return throwTypeError(\"Expected Object for type InclusiveRange\");\n}, v => v);\n\n\n//# sourceMappingURL=types.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/types/dist/types.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/util-actor/dist/actor.module.js":
/*!**************************************************************!*\
  !*** ./node_modules/@onflow/util-actor/dist/actor.module.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXIT: () => (/* binding */ EXIT),\n/* harmony export */   INIT: () => (/* binding */ INIT),\n/* harmony export */   SNAPSHOT: () => (/* binding */ SNAPSHOT),\n/* harmony export */   SUBSCRIBE: () => (/* binding */ SUBSCRIBE),\n/* harmony export */   TERMINATE: () => (/* binding */ TERMINATE),\n/* harmony export */   UNSUBSCRIBE: () => (/* binding */ UNSUBSCRIBE),\n/* harmony export */   UPDATED: () => (/* binding */ UPDATED),\n/* harmony export */   kill: () => (/* binding */ kill),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   snapshoter: () => (/* binding */ snapshoter),\n/* harmony export */   spawn: () => (/* binding */ spawn),\n/* harmony export */   subscriber: () => (/* binding */ subscriber)\n/* harmony export */ });\nconst mailbox = () => {\n  const queue = [];\n  let next;\n  return {\n    async deliver(msg) {\n      queue.push(msg);\n      if (next) {\n        next(queue.shift());\n        next = undefined;\n      }\n    },\n    receive() {\n      return new Promise(function innerReceive(resolve) {\n        const msg = queue.shift();\n        if (msg) return resolve(msg);\n        next = resolve;\n      });\n    }\n  };\n};\n\nlet promise;\nconst _queueMicrotask = cb => (promise || (promise = Promise.resolve())).then(cb).catch(err => setTimeout(() => {\n  throw err;\n}, 0));\nconst INIT = \"INIT\";\nconst SUBSCRIBE = \"SUBSCRIBE\";\nconst UNSUBSCRIBE = \"UNSUBSCRIBE\";\nconst UPDATED = \"UPDATED\";\nconst SNAPSHOT = \"SNAPSHOT\";\nconst EXIT = \"EXIT\";\nconst TERMINATE = \"TERMINATE\";\nconst root = typeof self === \"object\" && self.self === self && self || typeof global === \"object\" && global.global === global && global || typeof window === \"object\" && window.window === window && window || {\n  FCL_REGISTRY: null\n};\nroot.FCL_REGISTRY = root.FCL_REGISTRY == null ? {} : root.FCL_REGISTRY;\nconst FCL_REGISTRY = root.FCL_REGISTRY;\nlet pid = 0b0;\nconst DEFAULT_TIMEOUT = 5000;\nfunction send(addr, tag, data) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    expectReply: false\n  };\n  return new Promise((resolve, reject) => {\n    const expectReply = opts.expectReply || false;\n    const timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT;\n    if (expectReply && timeout) {\n      setTimeout(() => reject(new Error(`Timeout: ${timeout}ms passed without a response.`)), timeout);\n    }\n    const payload = {\n      to: addr,\n      from: opts.from,\n      tag,\n      data,\n      timeout,\n      reply: resolve,\n      reject\n    };\n    try {\n      if (FCL_REGISTRY[addr]) {\n        FCL_REGISTRY[addr].mailbox.deliver(payload);\n      }\n      if (!expectReply) {\n        resolve(true);\n      }\n    } catch (error) {\n      console.error(\"FCL.Actor -- Could Not Deliver Message\", payload, FCL_REGISTRY[addr], error);\n      reject(error);\n    }\n  });\n}\nconst kill = addr => {\n  delete FCL_REGISTRY[addr];\n};\nconst fromHandlers = handlers => async ctx => {\n  if (typeof handlers[INIT] === \"function\") await handlers[INIT](ctx);\n  __loop: while (1) {\n    const letter = await ctx.receive();\n    try {\n      if (letter.tag === EXIT) {\n        if (typeof handlers[TERMINATE] === \"function\") {\n          await handlers[TERMINATE](ctx, letter, letter.data || {});\n        }\n        break __loop;\n      }\n      await handlers[letter.tag]?.(ctx, letter, letter.data || {});\n    } catch (error) {\n      console.error(`${ctx.self()} Error`, letter, error);\n    } finally {\n      continue __loop;\n    }\n  }\n};\nconst parseAddr = addr => {\n  if (addr == null) {\n    while (FCL_REGISTRY[String(pid)]) {\n      pid++;\n    }\n    return String(pid);\n  }\n  return String(addr);\n};\nconst spawn = function (fnOrHandlers) {\n  let rawAddr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const addr = parseAddr(rawAddr);\n  if (FCL_REGISTRY[addr] != null) return addr;\n  FCL_REGISTRY[addr] = {\n    addr,\n    mailbox: mailbox(),\n    subs: new Set(),\n    kvs: {},\n    error: null\n  };\n  const ctx = createCtx(addr);\n  let fn;\n  if (typeof fnOrHandlers === \"object\") fn = fromHandlers(fnOrHandlers);else fn = fnOrHandlers;\n  _queueMicrotask(async () => {\n    await fn(ctx);\n    kill(addr);\n  });\n  return addr;\n};\nconst createCtx = addr => ({\n  self: () => addr,\n  receive: () => FCL_REGISTRY[addr].mailbox.receive(),\n  send: function (to, tag, data) {\n    let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    if (to == null) return;\n    opts.from = addr;\n    return send(to, tag, data, opts);\n  },\n  sendSelf: function (tag, data) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (FCL_REGISTRY[addr]) send(addr, tag, data, opts);\n  },\n  broadcast: function (tag, data) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    opts.from = addr;\n    for (const to of FCL_REGISTRY[addr].subs) send(to, tag, data, opts);\n  },\n  subscribe: sub => sub != null && FCL_REGISTRY[addr].subs.add(sub),\n  unsubscribe: sub => sub != null && FCL_REGISTRY[addr].subs.delete(sub),\n  subscriberCount: () => FCL_REGISTRY[addr].subs.size,\n  hasSubs: () => !!FCL_REGISTRY[addr].subs.size,\n  put: (key, value) => {\n    if (key != null) FCL_REGISTRY[addr].kvs[key] = value;\n  },\n  get: function (key) {\n    let fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    const value = FCL_REGISTRY[addr].kvs[key];\n    return value == null ? fallback : value;\n  },\n  delete: key => {\n    delete FCL_REGISTRY[addr].kvs[key];\n  },\n  update: (key, fn) => {\n    if (key != null) FCL_REGISTRY[addr].kvs[key] = fn(FCL_REGISTRY[addr].kvs[key]);\n  },\n  keys: () => {\n    return Object.keys(FCL_REGISTRY[addr].kvs);\n  },\n  all: () => {\n    return FCL_REGISTRY[addr].kvs;\n  },\n  where: pattern => {\n    return Object.keys(FCL_REGISTRY[addr].kvs).reduce((acc, key) => {\n      return pattern.test(key) ? {\n        ...acc,\n        [key]: FCL_REGISTRY[addr].kvs[key]\n      } : acc;\n    }, {});\n  },\n  merge: function () {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Object.keys(data).forEach(key => FCL_REGISTRY[addr].kvs[key] = data[key]);\n  },\n  fatalError: error => {\n    FCL_REGISTRY[addr].error = error;\n    for (const to of FCL_REGISTRY[addr].subs) send(to, UPDATED);\n  }\n});\n\n// Returns an unsubscribe function\n// A SUBSCRIBE handler will need to be created to handle the subscription event\n//\n//  [SUBSCRIBE]: (ctx, letter) => {\n//    ctx.subscribe(letter.from)\n//    ctx.send(letter.from, UPDATED, ctx.all())\n//  }\n//\nfunction subscriber(address, spawnFn, callback) {\n  spawnFn(address);\n  const self = spawn(async ctx => {\n    ctx.send(address, SUBSCRIBE);\n    while (1) {\n      const letter = await ctx.receive();\n      const error = FCL_REGISTRY[address].error;\n      if (letter.tag === EXIT) {\n        ctx.send(address, UNSUBSCRIBE);\n        return;\n      }\n      if (error) {\n        callback(null, error);\n        ctx.send(address, UNSUBSCRIBE);\n        return;\n      }\n      callback(letter.data, null);\n    }\n  });\n  return () => send(self, EXIT);\n}\n\n// Returns a promise that returns a result\n// A SNAPSHOT handler will need to be created to handle the snapshot event\n//\n//  [SNAPSHOT]: (ctx, letter) => {\n//    letter.reply(ctx.all())\n//  }\n//\nfunction snapshoter(address, spawnFn) {\n  spawnFn(address);\n  return send(address, SNAPSHOT, null, {\n    expectReply: true,\n    timeout: 0\n  });\n}\n\n\n//# sourceMappingURL=actor.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/util-actor/dist/actor.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/util-address/dist/util-address.module.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@onflow/util-address/dist/util-address.module.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   display: () => (/* binding */ display),\n/* harmony export */   sansPrefix: () => (/* binding */ sansPrefix),\n/* harmony export */   withPrefix: () => (/* binding */ withPrefix)\n/* harmony export */ });\n/**\n * @description Removes 0x from address if present\n * @param address - Flow address\n * @returns Flow address without 0x prefix\n */\nfunction sansPrefix(address) {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\").replace(/^Fx/, \"\");\n}\n/**\n * @description Adds 0x to address if not already present\n * @param address - Flow address\n * @returns Flow address with 0x prefix\n */\nfunction withPrefix(address) {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n}\n\n/**\n * @description Adds 0x to address if not already present\n * @param address - Flow address\n * @returns Flow address with 0x prefix\n */\nfunction display(address) {\n  return withPrefix(address);\n}\n\n\n//# sourceMappingURL=util-address.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLWFkZHJlc3MvZGlzdC91dGlsLWFkZHJlc3MubW9kdWxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUyQztBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aGNoYWluLWFwcC8uL25vZGVfbW9kdWxlcy9Ab25mbG93L3V0aWwtYWRkcmVzcy9kaXN0L3V0aWwtYWRkcmVzcy5tb2R1bGUuanM/NTc1OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIDB4IGZyb20gYWRkcmVzcyBpZiBwcmVzZW50XG4gKiBAcGFyYW0gYWRkcmVzcyAtIEZsb3cgYWRkcmVzc1xuICogQHJldHVybnMgRmxvdyBhZGRyZXNzIHdpdGhvdXQgMHggcHJlZml4XG4gKi9cbmZ1bmN0aW9uIHNhbnNQcmVmaXgoYWRkcmVzcykge1xuICBpZiAoYWRkcmVzcyA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIGFkZHJlc3MucmVwbGFjZSgvXjB4LywgXCJcIikucmVwbGFjZSgvXkZ4LywgXCJcIik7XG59XG4vKipcbiAqIEBkZXNjcmlwdGlvbiBBZGRzIDB4IHRvIGFkZHJlc3MgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuICogQHBhcmFtIGFkZHJlc3MgLSBGbG93IGFkZHJlc3NcbiAqIEByZXR1cm5zIEZsb3cgYWRkcmVzcyB3aXRoIDB4IHByZWZpeFxuICovXG5mdW5jdGlvbiB3aXRoUHJlZml4KGFkZHJlc3MpIHtcbiAgaWYgKGFkZHJlc3MgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBcIjB4XCIgKyBzYW5zUHJlZml4KGFkZHJlc3MpO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBBZGRzIDB4IHRvIGFkZHJlc3MgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuICogQHBhcmFtIGFkZHJlc3MgLSBGbG93IGFkZHJlc3NcbiAqIEByZXR1cm5zIEZsb3cgYWRkcmVzcyB3aXRoIDB4IHByZWZpeFxuICovXG5mdW5jdGlvbiBkaXNwbGF5KGFkZHJlc3MpIHtcbiAgcmV0dXJuIHdpdGhQcmVmaXgoYWRkcmVzcyk7XG59XG5cbmV4cG9ydCB7IGRpc3BsYXksIHNhbnNQcmVmaXgsIHdpdGhQcmVmaXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwtYWRkcmVzcy5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/util-address/dist/util-address.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/util-invariant/dist/util-invariant.module.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@onflow/util-invariant/dist/util-invariant.module.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invariant: () => (/* binding */ invariant)\n/* harmony export */ });\n/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param fact\n * @param msg\n * @param rest\n */\nfunction invariant(fact, msg) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`);\n    error.stack = error.stack?.split(\"\\n\")?.filter(d => !/at invariant/.test(d))?.join(\"\\n\");\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\");\n    throw error;\n  }\n}\n\n\n//# sourceMappingURL=util-invariant.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLWludmFyaWFudC9kaXN0L3V0aWwtaW52YXJpYW50Lm1vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxJQUFJO0FBQzdDO0FBQ0EsMkZBQTJGLGFBQWE7QUFDeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aGNoYWluLWFwcC8uL25vZGVfbW9kdWxlcy9Ab25mbG93L3V0aWwtaW52YXJpYW50L2Rpc3QvdXRpbC1pbnZhcmlhbnQubW9kdWxlLmpzP2NjMmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBc3NlcnRzIGZhY3QgaXMgdHJ1ZSwgb3RoZXJ3aXNlIHRocm93IGFuIGVycm9yIHdpdGggaW52YXJpYW50IG1lc3NhZ2VcbiAqIEBwYXJhbSBmYWN0XG4gKiBAcGFyYW0gbXNnXG4gKiBAcGFyYW0gcmVzdFxuICovXG5mdW5jdGlvbiBpbnZhcmlhbnQoZmFjdCwgbXNnKSB7XG4gIGlmICghZmFjdCkge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBJTlZBUklBTlQgJHttc2d9YCk7XG4gICAgZXJyb3Iuc3RhY2sgPSBlcnJvci5zdGFjaz8uc3BsaXQoXCJcXG5cIik/LmZpbHRlcihkID0+ICEvYXQgaW52YXJpYW50Ly50ZXN0KGQpKT8uam9pbihcIlxcblwiKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICByZXN0W19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgY29uc29sZS5lcnJvcihcIlxcblxcbi0tLVxcblxcblwiLCBlcnJvciwgXCJcXG5cXG5cIiwgLi4ucmVzdCwgXCJcXG5cXG4tLS1cXG5cXG5cIik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IHsgaW52YXJpYW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLWludmFyaWFudC5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/util-logger/dist/util-logger.module.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@onflow/util-logger/dist/util-logger.module.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LEVELS: () => (/* binding */ LEVELS),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   setConfig: () => (/* binding */ setConfig)\n/* harmony export */ });\n// Config dependency injected into logger to break circular dependency\nlet config = null;\nconst setConfig = _config => {\n  config = _config;\n};\n\n/**\n * The levels of the logger\n */\nlet LEVELS = /*#__PURE__*/function (LEVELS) {\n  LEVELS[LEVELS[\"debug\"] = 5] = \"debug\";\n  LEVELS[LEVELS[\"info\"] = 4] = \"info\";\n  LEVELS[LEVELS[\"log\"] = 3] = \"log\";\n  LEVELS[LEVELS[\"warn\"] = 2] = \"warn\";\n  LEVELS[LEVELS[\"error\"] = 1] = \"error\";\n  return LEVELS;\n}({});\n\n/**\n * Builds a message formatted for the logger\n * @param options - The options for the log\n * @param options.title - The title of the log\n * @param options.message - The message of the log\n * @returns The message formatted for the logger\n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = options => {\n  const {\n    title,\n    message\n  } = options;\n  return [`\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `.replace(/\\n[^\\S\\r\\n]+/g, \"\\n\").trim(), \"font-weight:bold;font-family:monospace;\"];\n};\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * @param options - The options for the log\n * @param options.title - The title of the log\n * @param options.message - The message of the log\n * @param options.level - The level of the log\n * @param options.always - Whether to always show the log\n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n */\nconst log = async options => {\n  const {\n    title,\n    message,\n    level,\n    always\n  } = options;\n  const configLoggerLevel = (await config?.()?.get(\"logger.level\")) ?? LEVELS.warn;\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return;\n  const loggerMessageArgs = buildLoggerMessageArgs({\n    title,\n    message\n  });\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs);\n      break;\n    case LEVELS.info:\n      console.info(...loggerMessageArgs);\n      break;\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs);\n      break;\n    case LEVELS.error:\n      console.error(...loggerMessageArgs);\n      break;\n    default:\n      console.log(...loggerMessageArgs);\n  }\n};\n\n/**\n * Logs a deprecation notice.  If a callback is provided this function returns a function that will call the callback and log the deprecation notice, otherwise it just logs the deprecation notice.\n * @param options - The options for the log\n * @param options.pkg - The package that is being deprecated\n * @param options.subject - The subject of the deprecation\n * @param options.transition - The transition path for the deprecation\n * @param options.level - The level of the log\n * @param options.message - The message of the log\n * @param options.callback - A callback to run after the log\n * @returns A function that will call the callback and log the deprecation notice if the callback is provided\n * @example\n * // Logs a deprecation notice\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * @example\n * function someFunction() { ... }\n * const deprecatedFunction = log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/foo/bar/TRANSITIONS.md\", message: \"Descriptive message\", level: LEVELS.warn, callback: someFunction })\n * deprecatedFunction() // Calls someFunction and logs the deprecation notice\n */\nlog.deprecate = options => {\n  const {\n    pkg,\n    subject,\n    transition,\n    level = LEVELS.warn,\n    message = \"\",\n    callback = null\n  } = options;\n  const capitalizeFirstLetter = str => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n  const logMessage = () => log({\n    title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n    message: `\n      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? \" of \" + pkg : \"\"}.` : \"\"}${message ? \"\\n\" + message : \"\"}${transition ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}` : \"\"}\n    `.trim(),\n    level\n  });\n  if (typeof callback === \"function\") {\n    return async function () {\n      await logMessage();\n      return await callback(...arguments);\n    };\n  }\n  return logMessage();\n};\n\n\n//# sourceMappingURL=util-logger.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLWxvZ2dlci9kaXN0L3V0aWwtbG9nZ2VyLm1vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxHQUFHOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDBDQUEwQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsUUFBUTtBQUNSOztBQUVBLE1BQU07O0FBRU47QUFDQSwrREFBK0Qsc0JBQXNCO0FBQ3JGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDZFQUE2RTtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVLQUF1SztBQUMxTDtBQUNBLDZCQUE2QjtBQUM3Qiw4Q0FBOEMsK0tBQStLO0FBQzdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxQkFBcUI7QUFDbkM7QUFDQSxRQUFRLGFBQWEsZ0NBQWdDLHlEQUF5RCx3QkFBd0IsUUFBUSxFQUFFLDhCQUE4QixFQUFFLDBGQUEwRixXQUFXO0FBQ3JSO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGhjaGFpbi1hcHAvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLWxvZ2dlci9kaXN0L3V0aWwtbG9nZ2VyLm1vZHVsZS5qcz9jM2Q3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvbmZpZyBkZXBlbmRlbmN5IGluamVjdGVkIGludG8gbG9nZ2VyIHRvIGJyZWFrIGNpcmN1bGFyIGRlcGVuZGVuY3lcbmxldCBjb25maWcgPSBudWxsO1xuY29uc3Qgc2V0Q29uZmlnID0gX2NvbmZpZyA9PiB7XG4gIGNvbmZpZyA9IF9jb25maWc7XG59O1xuXG4vKipcbiAqIFRoZSBsZXZlbHMgb2YgdGhlIGxvZ2dlclxuICovXG5sZXQgTEVWRUxTID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChMRVZFTFMpIHtcbiAgTEVWRUxTW0xFVkVMU1tcImRlYnVnXCJdID0gNV0gPSBcImRlYnVnXCI7XG4gIExFVkVMU1tMRVZFTFNbXCJpbmZvXCJdID0gNF0gPSBcImluZm9cIjtcbiAgTEVWRUxTW0xFVkVMU1tcImxvZ1wiXSA9IDNdID0gXCJsb2dcIjtcbiAgTEVWRUxTW0xFVkVMU1tcIndhcm5cIl0gPSAyXSA9IFwid2FyblwiO1xuICBMRVZFTFNbTEVWRUxTW1wiZXJyb3JcIl0gPSAxXSA9IFwiZXJyb3JcIjtcbiAgcmV0dXJuIExFVkVMUztcbn0oe30pO1xuXG4vKipcbiAqIEJ1aWxkcyBhIG1lc3NhZ2UgZm9ybWF0dGVkIGZvciB0aGUgbG9nZ2VyXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy50aXRsZSAtIFRoZSB0aXRsZSBvZiB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlIC0gVGhlIG1lc3NhZ2Ugb2YgdGhlIGxvZ1xuICogQHJldHVybnMgVGhlIG1lc3NhZ2UgZm9ybWF0dGVkIGZvciB0aGUgbG9nZ2VyXG4gKiBAZXhhbXBsZVxuICogYnVpbGRMb2dnZXJNZXNzYWdlQXJncyh7IHRpdGxlOiBcIk15IFRpdGxlXCIsIG1lc3NhZ2U6IFwiTXkgTWVzc2FnZVwiIH0pXG4gKi9cbmNvbnN0IGJ1aWxkTG9nZ2VyTWVzc2FnZUFyZ3MgPSBvcHRpb25zID0+IHtcbiAgY29uc3Qge1xuICAgIHRpdGxlLFxuICAgIG1lc3NhZ2VcbiAgfSA9IG9wdGlvbnM7XG4gIHJldHVybiBbYFxuICAgICVjJHt0aXRsZX1cbiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAke21lc3NhZ2V9XG5cbiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgYC5yZXBsYWNlKC9cXG5bXlxcU1xcclxcbl0rL2csIFwiXFxuXCIpLnRyaW0oKSwgXCJmb250LXdlaWdodDpib2xkO2ZvbnQtZmFtaWx5Om1vbm9zcGFjZTtcIl07XG59O1xuXG4vKipcbiAqIExvZ3MgbWVzc2FnZXMgYmFzZWQgb24gdGhlIGxldmVsIG9mIHRoZSBtZXNzYWdlIGFuZCB0aGUgbGV2ZWwgc2V0IGluIHRoZSBjb25maWdcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBsb2dcbiAqIEBwYXJhbSBvcHRpb25zLnRpdGxlIC0gVGhlIHRpdGxlIG9mIHRoZSBsb2dcbiAqIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2UgLSBUaGUgbWVzc2FnZSBvZiB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy5sZXZlbCAtIFRoZSBsZXZlbCBvZiB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy5hbHdheXMgLSBXaGV0aGVyIHRvIGFsd2F5cyBzaG93IHRoZSBsb2dcbiAqIEBleGFtcGxlXG4gKiBsb2coeyB0aXRsZTogXCJNeSBUaXRsZVwiLCBtZXNzYWdlOiBcIk15IE1lc3NhZ2VcIiwgbGV2ZWw6IExFVkVMUy53YXJuLCBhbHdheXM6IGZhbHNlIH0pXG4gKi9cbmNvbnN0IGxvZyA9IGFzeW5jIG9wdGlvbnMgPT4ge1xuICBjb25zdCB7XG4gICAgdGl0bGUsXG4gICAgbWVzc2FnZSxcbiAgICBsZXZlbCxcbiAgICBhbHdheXNcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGNvbmZpZ0xvZ2dlckxldmVsID0gKGF3YWl0IGNvbmZpZz8uKCk/LmdldChcImxvZ2dlci5sZXZlbFwiKSkgPz8gTEVWRUxTLndhcm47XG5cbiAgLy8gSWYgY29uZmlnIGxldmVsIGlzIGJlbG93IG1lc3NhZ2UgbGV2ZWwgdGhlbiBkb24ndCBzaG93IGl0XG4gIGlmICghYWx3YXlzICYmIGNvbmZpZ0xvZ2dlckxldmVsIDwgbGV2ZWwpIHJldHVybjtcbiAgY29uc3QgbG9nZ2VyTWVzc2FnZUFyZ3MgPSBidWlsZExvZ2dlck1lc3NhZ2VBcmdzKHtcbiAgICB0aXRsZSxcbiAgICBtZXNzYWdlXG4gIH0pO1xuICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgY2FzZSBMRVZFTFMuZGVidWc6XG4gICAgICBjb25zb2xlLmRlYnVnKC4uLmxvZ2dlck1lc3NhZ2VBcmdzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTEVWRUxTLmluZm86XG4gICAgICBjb25zb2xlLmluZm8oLi4ubG9nZ2VyTWVzc2FnZUFyZ3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBMRVZFTFMud2FybjpcbiAgICAgIGNvbnNvbGUud2FybiguLi5sb2dnZXJNZXNzYWdlQXJncyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIExFVkVMUy5lcnJvcjpcbiAgICAgIGNvbnNvbGUuZXJyb3IoLi4ubG9nZ2VyTWVzc2FnZUFyZ3MpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnNvbGUubG9nKC4uLmxvZ2dlck1lc3NhZ2VBcmdzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBMb2dzIGEgZGVwcmVjYXRpb24gbm90aWNlLiAgSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY2FsbCB0aGUgY2FsbGJhY2sgYW5kIGxvZyB0aGUgZGVwcmVjYXRpb24gbm90aWNlLCBvdGhlcndpc2UgaXQganVzdCBsb2dzIHRoZSBkZXByZWNhdGlvbiBub3RpY2UuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy5wa2cgLSBUaGUgcGFja2FnZSB0aGF0IGlzIGJlaW5nIGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSBvcHRpb25zLnN1YmplY3QgLSBUaGUgc3ViamVjdCBvZiB0aGUgZGVwcmVjYXRpb25cbiAqIEBwYXJhbSBvcHRpb25zLnRyYW5zaXRpb24gLSBUaGUgdHJhbnNpdGlvbiBwYXRoIGZvciB0aGUgZGVwcmVjYXRpb25cbiAqIEBwYXJhbSBvcHRpb25zLmxldmVsIC0gVGhlIGxldmVsIG9mIHRoZSBsb2dcbiAqIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2UgLSBUaGUgbWVzc2FnZSBvZiB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy5jYWxsYmFjayAtIEEgY2FsbGJhY2sgdG8gcnVuIGFmdGVyIHRoZSBsb2dcbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGNhbGwgdGhlIGNhbGxiYWNrIGFuZCBsb2cgdGhlIGRlcHJlY2F0aW9uIG5vdGljZSBpZiB0aGUgY2FsbGJhY2sgaXMgcHJvdmlkZWRcbiAqIEBleGFtcGxlXG4gKiAvLyBMb2dzIGEgZGVwcmVjYXRpb24gbm90aWNlXG4gKiBsb2cuZGVwcmVjYXRlKHsgcGtnOiBcIkBvbmZsb3cvZmNsXCIsIHN1YmplY3Q6IFwiU29tZSBpdGVtXCIsIHRyYW5zaXRpb246IFwiaHR0cHM6Ly9naXRodWIuY29tL29uZmxvdy9mbG93LWpzLXNka1wiLCBtZXNzYWdlOiBcIkRlc2NyaXB0aXZlIG1lc3NhZ2VcIiwgbGV2ZWw6IExFVkVMUy53YXJuLCBjYWxsYmFjazogKCkgPT4ge30gfSlcbiAqIEBleGFtcGxlXG4gKiBmdW5jdGlvbiBzb21lRnVuY3Rpb24oKSB7IC4uLiB9XG4gKiBjb25zdCBkZXByZWNhdGVkRnVuY3Rpb24gPSBsb2cuZGVwcmVjYXRlKHsgcGtnOiBcIkBvbmZsb3cvZmNsXCIsIHN1YmplY3Q6IFwiU29tZSBpdGVtXCIsIHRyYW5zaXRpb246IFwiaHR0cHM6Ly9naXRodWIuY29tL2Zvby9iYXIvVFJBTlNJVElPTlMubWRcIiwgbWVzc2FnZTogXCJEZXNjcmlwdGl2ZSBtZXNzYWdlXCIsIGxldmVsOiBMRVZFTFMud2FybiwgY2FsbGJhY2s6IHNvbWVGdW5jdGlvbiB9KVxuICogZGVwcmVjYXRlZEZ1bmN0aW9uKCkgLy8gQ2FsbHMgc29tZUZ1bmN0aW9uIGFuZCBsb2dzIHRoZSBkZXByZWNhdGlvbiBub3RpY2VcbiAqL1xubG9nLmRlcHJlY2F0ZSA9IG9wdGlvbnMgPT4ge1xuICBjb25zdCB7XG4gICAgcGtnLFxuICAgIHN1YmplY3QsXG4gICAgdHJhbnNpdGlvbixcbiAgICBsZXZlbCA9IExFVkVMUy53YXJuLFxuICAgIG1lc3NhZ2UgPSBcIlwiLFxuICAgIGNhbGxiYWNrID0gbnVsbFxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyID0gc3RyID0+IHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuICB9O1xuICBjb25zdCBsb2dNZXNzYWdlID0gKCkgPT4gbG9nKHtcbiAgICB0aXRsZTogYCR7cGtnID8gcGtnICsgXCIgXCIgOiBcIlwifURlcHJlY2F0aW9uIE5vdGljZWAsXG4gICAgbWVzc2FnZTogYFxuICAgICAgJHtzdWJqZWN0ID8gYCR7Y2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN1YmplY3QpfSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGNlYXNlIHRvIHdvcmsgaW4gZnV0dXJlIHJlbGVhc2VzJHtwa2cgPyBcIiBvZiBcIiArIHBrZyA6IFwiXCJ9LmAgOiBcIlwifSR7bWVzc2FnZSA/IFwiXFxuXCIgKyBtZXNzYWdlIDogXCJcIn0ke3RyYW5zaXRpb24gPyBgXFxuWW91IGNhbiBsZWFybiBtb3JlIChpbmNsdWRpbmcgYSBndWlkZSBvbiBjb21tb24gdHJhbnNpdGlvbiBwYXRocykgaGVyZTogJHt0cmFuc2l0aW9ufWAgOiBcIlwifVxuICAgIGAudHJpbSgpLFxuICAgIGxldmVsXG4gIH0pO1xuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgbG9nTWVzc2FnZSgpO1xuICAgICAgcmV0dXJuIGF3YWl0IGNhbGxiYWNrKC4uLmFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gbG9nTWVzc2FnZSgpO1xufTtcblxuZXhwb3J0IHsgTEVWRUxTLCBsb2csIHNldENvbmZpZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC1sb2dnZXIubW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/util-logger/dist/util-logger.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/util-rpc/dist/index.module.js":
/*!************************************************************!*\
  !*** ./node_modules/@onflow/util-rpc/dist/index.module.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RpcClient: () => (/* binding */ RpcClient),\n/* harmony export */   RpcError: () => (/* binding */ RpcError),\n/* harmony export */   RpcErrorCode: () => (/* binding */ RpcErrorCode)\n/* harmony export */ });\nlet RpcErrorCode = /*#__PURE__*/function (RpcErrorCode) {\n  RpcErrorCode[RpcErrorCode[\"INVALID_REQUEST\"] = -32600] = \"INVALID_REQUEST\";\n  RpcErrorCode[RpcErrorCode[\"METHOD_NOT_FOUND\"] = -32601] = \"METHOD_NOT_FOUND\";\n  RpcErrorCode[RpcErrorCode[\"INVALID_PARAMS\"] = -32602] = \"INVALID_PARAMS\";\n  RpcErrorCode[RpcErrorCode[\"INTERNAL_ERROR\"] = -32603] = \"INTERNAL_ERROR\";\n  RpcErrorCode[RpcErrorCode[\"PARSE_ERROR\"] = -32700] = \"PARSE_ERROR\";\n  return RpcErrorCode;\n}({});\nclass RpcError extends Error {\n  constructor(code, message, data) {\n    super(message);\n    this.code = code;\n    this.message = message;\n    this.data = data;\n  }\n}\n\nvar ReservedRpcMethods = /*#__PURE__*/function (ReservedRpcMethods) {\n  ReservedRpcMethods[\"HELLO\"] = \"rpc_hello\";\n  return ReservedRpcMethods;\n}(ReservedRpcMethods || {});\nclass RpcClient {\n  id = 0;\n  setSend = () => {};\n  _send = (() => new Promise(resolve => {\n    this.setSend = resolve;\n  }))();\n  peerInfo = (() => new Promise((resolve, reject) => {\n    this.resolvePeerInfo = resolve;\n    this.rejectPeerInfo = reject;\n  }))();\n  enabledNotifications = [];\n  requestHandlers = (() => ({}))();\n  subscriptions = (() => ({}))();\n  messageListeners = [];\n  constructor(_ref) {\n    let {\n      notifications\n    } = _ref;\n    this.enabledNotifications = notifications || [];\n    this.on(ReservedRpcMethods.HELLO, info => {\n      this.resolvePeerInfo(info);\n      return this.ownInfo();\n    });\n  }\n  connect(_ref2) {\n    let {\n      send\n    } = _ref2;\n    this.setSend(send);\n    this.requestWithoutConnection(ReservedRpcMethods.HELLO, this.ownInfo()).then(info => {\n      this.resolvePeerInfo(info);\n    }).catch(this.rejectPeerInfo);\n  }\n  ownInfo() {\n    return {\n      requests: Object.keys(this.requestHandlers),\n      notifications: this.enabledNotifications\n    };\n  }\n  async send(msg) {\n    return (await this._send)(msg);\n  }\n  receive(msg) {\n    if (msg?.jsonrpc !== \"2.0\") {\n      return;\n    }\n    if (\"method\" in msg) {\n      if (\"id\" in msg) {\n        this.handleRequest(msg);\n      } else {\n        this.handleNotification(msg);\n      }\n    }\n    this.messageListeners.forEach(listener => listener(msg));\n  }\n  async handleRequest(msg) {\n    const handler = this.requestHandlers[msg.method];\n    if (handler) {\n      try {\n        const result = await handler(msg.params);\n        this.send({\n          jsonrpc: \"2.0\",\n          id: msg.id,\n          result\n        });\n      } catch (error) {\n        if (error instanceof RpcError) {\n          this.send({\n            jsonrpc: \"2.0\",\n            id: msg.id,\n            error: {\n              code: error.code,\n              message: error.message,\n              data: error.data\n            }\n          });\n        } else {\n          this.send({\n            jsonrpc: \"2.0\",\n            id: msg.id,\n            error: {\n              code: RpcErrorCode.INTERNAL_ERROR,\n              message: error?.message\n            }\n          });\n        }\n      }\n    } else {\n      this.send({\n        jsonrpc: \"2.0\",\n        id: msg.id,\n        error: {\n          code: RpcErrorCode.METHOD_NOT_FOUND,\n          message: `Method not found: ${msg.method}`\n        }\n      });\n    }\n  }\n  handleNotification(msg) {\n    if (this.subscriptions[msg.method]) {\n      this.subscriptions[msg.method].forEach(handler => handler(msg.params));\n    }\n  }\n  onMessage(listener) {\n    this.messageListeners.push(listener);\n    return () => {\n      this.messageListeners = this.messageListeners.filter(l => l !== listener);\n    };\n  }\n  async notify(method, params) {\n    await this.onceConnected();\n    this.send({\n      jsonrpc: \"2.0\",\n      method,\n      params\n    });\n  }\n  async request(method, params) {\n    await this.onceConnected();\n    return this.requestWithoutConnection(method, params);\n  }\n  async requestWithoutConnection(method, params) {\n    const id = this.id++;\n    let unsub = () => {};\n    const result = new Promise((resolve, reject) => {\n      unsub = this.onMessage(msg => {\n        if (msg.id === id && (\"result\" in msg || \"error\" in msg)) {\n          if (msg.error) {\n            const rpcError = new RpcError(msg.error.code, msg.error.message, msg.error.data);\n            reject(rpcError);\n          }\n          resolve(msg.result);\n        }\n      });\n    }).finally(unsub);\n    this.send({\n      jsonrpc: \"2.0\",\n      method,\n      params,\n      id\n    });\n    return result;\n  }\n  on(method, handler) {\n    this.requestHandlers[method] = handler;\n  }\n  subscribe(method, handler) {\n    this.subscriptions[method] = this.subscriptions[method] || new Set();\n    this.subscriptions[method].add(handler);\n  }\n  unsubscribe(method, handler) {\n    this.subscriptions[method]?.delete(handler);\n  }\n  async onceConnected() {\n    return this.peerInfo.then(() => {});\n  }\n  async getAvailableRequests() {\n    return this.peerInfo.then(info => info.requests);\n  }\n  async getAvailableNotifications() {\n    return this.peerInfo.then(info => info.notifications);\n  }\n}\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/util-rpc/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/util-semver/dist/index.module.js":
/*!***************************************************************!*\
  !*** ./node_modules/@onflow/util-semver/dist/index.module.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: () => (/* binding */ compare)\n/* harmony export */ });\n/*\ncompareIdentifiers was taken from semver package, which is licensed under ISC\n\nGitHub: https://github.com/npm/node-semver/\nNPM: https://www.npmjs.com/package/semver\nLicense: https://github.com/npm/node-semver/blob/main/LICENSE\n\nThe ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\nvar numeric = /^[0-9]+$/;\nvar compareIdentifiers = function compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n  return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;\n};\n\n// Official Semver Regex https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nvar VERSION_REGEX = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Compares two semver versions\n * @param {string} a - The first version to compare\n * @param {string} b - The second version to compare\n * @returns {number} - Returns 1 if a is greater than b, -1 if a is less than b, and 0 if they are equal\n */\nvar compare = function compare(a, b) {\n  if (typeof a !== \"string\" || typeof b !== \"string\") throw new Error(\"Invalid input\");\n  var vsnA = a.match(VERSION_REGEX);\n  var vsnB = b.match(VERSION_REGEX);\n  if (!vsnA || !vsnB) throw new Error(\"Invalid input\");\n  for (var i = 1; i <= 3; i++) {\n    // If either is greater than the other, return\n    if (parseInt(vsnA[i]) > parseInt(vsnB[i])) return 1;\n    if (parseInt(vsnA[i]) < parseInt(vsnB[i])) return -1;\n  }\n\n  // If equal, compare prerelease\n  if (vsnA[4] && vsnB[4]) {\n    var prereleaseA = (vsnA[4] || \"\").split(\".\");\n    var prereleaseB = (vsnB[4] || \"\").split(\".\");\n    for (var _i = 0; _i < Math.max(prereleaseA.length, prereleaseB.length); _i++) {\n      // If one identifier has more fields than the other & the rest is equal, the one with more fields is greater\n      if (prereleaseA[_i] === undefined) return -1;\n      if (prereleaseB[_i] === undefined) return 1;\n\n      // Compare field identifiers\n      var cmp = compareIdentifiers(prereleaseA[_i], prereleaseB[_i]);\n      if (cmp !== 0) return cmp;\n    }\n  }\n  return 0;\n};\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLXNlbXZlci9kaXN0L2luZGV4Lm1vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdURBQXVEO0FBQzVFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGhjaGFpbi1hcHAvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLXNlbXZlci9kaXN0L2luZGV4Lm1vZHVsZS5qcz81N2Q1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5jb21wYXJlSWRlbnRpZmllcnMgd2FzIHRha2VuIGZyb20gc2VtdmVyIHBhY2thZ2UsIHdoaWNoIGlzIGxpY2Vuc2VkIHVuZGVyIElTQ1xuXG5HaXRIdWI6IGh0dHBzOi8vZ2l0aHViLmNvbS9ucG0vbm9kZS1zZW12ZXIvXG5OUE06IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3NlbXZlclxuTGljZW5zZTogaHR0cHM6Ly9naXRodWIuY29tL25wbS9ub2RlLXNlbXZlci9ibG9iL21haW4vTElDRU5TRVxuXG5UaGUgSVNDIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSBJc2FhYyBaLiBTY2hsdWV0ZXIgYW5kIENvbnRyaWJ1dG9yc1xuXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZCwgcHJvdmlkZWQgdGhhdCB0aGUgYWJvdmVcbmNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTXG5XSVRIIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GXG5NRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUlxuQU5ZIFNQRUNJQUwsIERJUkVDVCwgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFU1xuV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOXG5BQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUlxuSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbiovXG5cbnZhciBudW1lcmljID0gL15bMC05XSskLztcbnZhciBjb21wYXJlSWRlbnRpZmllcnMgPSBmdW5jdGlvbiBjb21wYXJlSWRlbnRpZmllcnMoYSwgYikge1xuICB2YXIgYW51bSA9IG51bWVyaWMudGVzdChhKTtcbiAgdmFyIGJudW0gPSBudW1lcmljLnRlc3QoYik7XG4gIGlmIChhbnVtICYmIGJudW0pIHtcbiAgICBhID0gK2E7XG4gICAgYiA9ICtiO1xuICB9XG4gIHJldHVybiBhID09PSBiID8gMCA6IGFudW0gJiYgIWJudW0gPyAtMSA6IGJudW0gJiYgIWFudW0gPyAxIDogYSA8IGIgPyAtMSA6IDE7XG59O1xuXG4vLyBPZmZpY2lhbCBTZW12ZXIgUmVnZXggaHR0cHM6Ly9zZW12ZXIub3JnLyNpcy10aGVyZS1hLXN1Z2dlc3RlZC1yZWd1bGFyLWV4cHJlc3Npb24tcmVnZXgtdG8tY2hlY2stYS1zZW12ZXItc3RyaW5nXG52YXIgVkVSU0lPTl9SRUdFWCA9IC9eKDB8WzEtOV1cXGQqKVxcLigwfFsxLTldXFxkKilcXC4oMHxbMS05XVxcZCopKD86LSgoPzowfFsxLTldXFxkKnxcXGQqW2EtekEtWi1dWzAtOWEtekEtWi1dKikoPzpcXC4oPzowfFsxLTldXFxkKnxcXGQqW2EtekEtWi1dWzAtOWEtekEtWi1dKikpKikpPyg/OlxcKyhbMC05YS16QS1aLV0rKD86XFwuWzAtOWEtekEtWi1dKykqKSk/JC87XG5cbi8qKlxuICogQ29tcGFyZXMgdHdvIHNlbXZlciB2ZXJzaW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IGEgLSBUaGUgZmlyc3QgdmVyc2lvbiB0byBjb21wYXJlXG4gKiBAcGFyYW0ge3N0cmluZ30gYiAtIFRoZSBzZWNvbmQgdmVyc2lvbiB0byBjb21wYXJlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIFJldHVybnMgMSBpZiBhIGlzIGdyZWF0ZXIgdGhhbiBiLCAtMSBpZiBhIGlzIGxlc3MgdGhhbiBiLCBhbmQgMCBpZiB0aGV5IGFyZSBlcXVhbFxuICovXG52YXIgY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICBpZiAodHlwZW9mIGEgIT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGIgIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXRcIik7XG4gIHZhciB2c25BID0gYS5tYXRjaChWRVJTSU9OX1JFR0VYKTtcbiAgdmFyIHZzbkIgPSBiLm1hdGNoKFZFUlNJT05fUkVHRVgpO1xuICBpZiAoIXZzbkEgfHwgIXZzbkIpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXRcIik7XG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IDM7IGkrKykge1xuICAgIC8vIElmIGVpdGhlciBpcyBncmVhdGVyIHRoYW4gdGhlIG90aGVyLCByZXR1cm5cbiAgICBpZiAocGFyc2VJbnQodnNuQVtpXSkgPiBwYXJzZUludCh2c25CW2ldKSkgcmV0dXJuIDE7XG4gICAgaWYgKHBhcnNlSW50KHZzbkFbaV0pIDwgcGFyc2VJbnQodnNuQltpXSkpIHJldHVybiAtMTtcbiAgfVxuXG4gIC8vIElmIGVxdWFsLCBjb21wYXJlIHByZXJlbGVhc2VcbiAgaWYgKHZzbkFbNF0gJiYgdnNuQls0XSkge1xuICAgIHZhciBwcmVyZWxlYXNlQSA9ICh2c25BWzRdIHx8IFwiXCIpLnNwbGl0KFwiLlwiKTtcbiAgICB2YXIgcHJlcmVsZWFzZUIgPSAodnNuQls0XSB8fCBcIlwiKS5zcGxpdChcIi5cIik7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IE1hdGgubWF4KHByZXJlbGVhc2VBLmxlbmd0aCwgcHJlcmVsZWFzZUIubGVuZ3RoKTsgX2krKykge1xuICAgICAgLy8gSWYgb25lIGlkZW50aWZpZXIgaGFzIG1vcmUgZmllbGRzIHRoYW4gdGhlIG90aGVyICYgdGhlIHJlc3QgaXMgZXF1YWwsIHRoZSBvbmUgd2l0aCBtb3JlIGZpZWxkcyBpcyBncmVhdGVyXG4gICAgICBpZiAocHJlcmVsZWFzZUFbX2ldID09PSB1bmRlZmluZWQpIHJldHVybiAtMTtcbiAgICAgIGlmIChwcmVyZWxlYXNlQltfaV0gPT09IHVuZGVmaW5lZCkgcmV0dXJuIDE7XG5cbiAgICAgIC8vIENvbXBhcmUgZmllbGQgaWRlbnRpZmllcnNcbiAgICAgIHZhciBjbXAgPSBjb21wYXJlSWRlbnRpZmllcnMocHJlcmVsZWFzZUFbX2ldLCBwcmVyZWxlYXNlQltfaV0pO1xuICAgICAgaWYgKGNtcCAhPT0gMCkgcmV0dXJuIGNtcDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5leHBvcnQgeyBjb21wYXJlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/util-semver/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/util-template/dist/template.module.js":
/*!********************************************************************!*\
  !*** ./node_modules/@onflow/util-template/dist/template.module.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   interleave: () => (/* binding */ interleave),\n/* harmony export */   template: () => (/* binding */ template)\n/* harmony export */ });\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/./node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n\n\n/**\n * Interleaves two arrays\n * @param a - The first array\n * @param b - The second array\n * @param c - The target array\n * @returns The interleaved array\n */\nfunction interleave() {\n  let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  if (!a.length && !b.length) return c;\n  if (!a.length) return c;\n  if (!b.length) {\n    c.push(...a);\n    return c;\n  }\n  const [aHead, ...aRest] = a;\n  const [bHead, ...bRest] = b;\n  if (aHead !== undefined) c.push(aHead);\n  if (bHead !== undefined) c.push(bHead);\n  return interleave(aRest, bRest, c);\n}\n\n/**\n * Recursively apply a value to a function\n * @param d - The value to apply\n * @returns A function that takes a function and applies the value to it\n */\nfunction recApply(d) {\n  return function (arg1) {\n    if (typeof arg1 === \"function\") {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n        pkg: \"FCL/SDK\",\n        subject: \"Interopolation of functions into template literals\",\n        transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\"\n      });\n      return recApply(d)(arg1(d));\n    }\n    return String(arg1);\n  };\n}\n\n/**\n * Creates a template function\n * @param head - A string, template string array, or template function\n * @param rest - The rest of the arguments\n * @returns A template function\n */\nfunction template(head) {\n  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n  if (typeof head === \"string\") return () => head;\n  if (typeof head === \"function\") return head;\n  return x => interleave([...head], rest.map(recApply(x))).join(\"\").trim();\n}\n\n\n//# sourceMappingURL=template.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLXRlbXBsYXRlL2Rpc3QvdGVtcGxhdGUubW9kdWxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQzs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxvREFBRztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUZBQXlGLGFBQWE7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aGNoYWluLWFwcC8uL25vZGVfbW9kdWxlcy9Ab25mbG93L3V0aWwtdGVtcGxhdGUvZGlzdC90ZW1wbGF0ZS5tb2R1bGUuanM/NWQxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2cgfSBmcm9tICdAb25mbG93L3V0aWwtbG9nZ2VyJztcblxuLyoqXG4gKiBJbnRlcmxlYXZlcyB0d28gYXJyYXlzXG4gKiBAcGFyYW0gYSAtIFRoZSBmaXJzdCBhcnJheVxuICogQHBhcmFtIGIgLSBUaGUgc2Vjb25kIGFycmF5XG4gKiBAcGFyYW0gYyAtIFRoZSB0YXJnZXQgYXJyYXlcbiAqIEByZXR1cm5zIFRoZSBpbnRlcmxlYXZlZCBhcnJheVxuICovXG5mdW5jdGlvbiBpbnRlcmxlYXZlKCkge1xuICBsZXQgYSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gIGxldCBiID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcbiAgbGV0IGMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuICBpZiAoIWEubGVuZ3RoICYmICFiLmxlbmd0aCkgcmV0dXJuIGM7XG4gIGlmICghYS5sZW5ndGgpIHJldHVybiBjO1xuICBpZiAoIWIubGVuZ3RoKSB7XG4gICAgYy5wdXNoKC4uLmEpO1xuICAgIHJldHVybiBjO1xuICB9XG4gIGNvbnN0IFthSGVhZCwgLi4uYVJlc3RdID0gYTtcbiAgY29uc3QgW2JIZWFkLCAuLi5iUmVzdF0gPSBiO1xuICBpZiAoYUhlYWQgIT09IHVuZGVmaW5lZCkgYy5wdXNoKGFIZWFkKTtcbiAgaWYgKGJIZWFkICE9PSB1bmRlZmluZWQpIGMucHVzaChiSGVhZCk7XG4gIHJldHVybiBpbnRlcmxlYXZlKGFSZXN0LCBiUmVzdCwgYyk7XG59XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgYXBwbHkgYSB2YWx1ZSB0byBhIGZ1bmN0aW9uXG4gKiBAcGFyYW0gZCAtIFRoZSB2YWx1ZSB0byBhcHBseVxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgZnVuY3Rpb24gYW5kIGFwcGxpZXMgdGhlIHZhbHVlIHRvIGl0XG4gKi9cbmZ1bmN0aW9uIHJlY0FwcGx5KGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcxKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcxID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGxvZy5kZXByZWNhdGUoe1xuICAgICAgICBwa2c6IFwiRkNML1NES1wiLFxuICAgICAgICBzdWJqZWN0OiBcIkludGVyb3BvbGF0aW9uIG9mIGZ1bmN0aW9ucyBpbnRvIHRlbXBsYXRlIGxpdGVyYWxzXCIsXG4gICAgICAgIHRyYW5zaXRpb246IFwiaHR0cHM6Ly9naXRodWIuY29tL29uZmxvdy9mbG93LWpzLXNkay9ibG9iL21hc3Rlci9wYWNrYWdlcy9zZGsvVFJBTlNJVElPTlMubWQjMDAwMS1kZXByZWNhdGUtcGFyYW1zXCJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlY0FwcGx5KGQpKGFyZzEoZCkpO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGFyZzEpO1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0ZW1wbGF0ZSBmdW5jdGlvblxuICogQHBhcmFtIGhlYWQgLSBBIHN0cmluZywgdGVtcGxhdGUgc3RyaW5nIGFycmF5LCBvciB0ZW1wbGF0ZSBmdW5jdGlvblxuICogQHBhcmFtIHJlc3QgLSBUaGUgcmVzdCBvZiB0aGUgYXJndW1lbnRzXG4gKiBAcmV0dXJucyBBIHRlbXBsYXRlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHRlbXBsYXRlKGhlYWQpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHJlc3RbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIGlmICh0eXBlb2YgaGVhZCA9PT0gXCJzdHJpbmdcIikgcmV0dXJuICgpID0+IGhlYWQ7XG4gIGlmICh0eXBlb2YgaGVhZCA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gaGVhZDtcbiAgcmV0dXJuIHggPT4gaW50ZXJsZWF2ZShbLi4uaGVhZF0sIHJlc3QubWFwKHJlY0FwcGx5KHgpKSkuam9pbihcIlwiKS50cmltKCk7XG59XG5cbmV4cG9ydCB7IGludGVybGVhdmUsIHRlbXBsYXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/util-template/dist/template.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/util-uid/dist/util-uid.module.js":
/*!***************************************************************!*\
  !*** ./node_modules/@onflow/util-uid/dist/util-uid.module.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uid: () => (/* binding */ uid)\n/* harmony export */ });\nconst HEX = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\nconst T = HEX.length;\n\n/**\n * Generates a random unique identifier\n * @returns 32 character alphanumeric string\n */\nfunction uid() {\n  let str = \"\",\n    num = 32;\n  while (num--) str += HEX[Math.random() * T | 0];\n  return str;\n}\n\n\n//# sourceMappingURL=util-uid.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLXVpZC9kaXN0L3V0aWwtdWlkLm1vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2hhaW4tYXBwLy4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvdXRpbC11aWQvZGlzdC91dGlsLXVpZC5tb2R1bGUuanM/ZGQ3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBIRVggPSBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5XCI7XG5jb25zdCBUID0gSEVYLmxlbmd0aDtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gdW5pcXVlIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIDMyIGNoYXJhY3RlciBhbHBoYW51bWVyaWMgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHVpZCgpIHtcbiAgbGV0IHN0ciA9IFwiXCIsXG4gICAgbnVtID0gMzI7XG4gIHdoaWxlIChudW0tLSkgc3RyICs9IEhFWFtNYXRoLnJhbmRvbSgpICogVCB8IDBdO1xuICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgeyB1aWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwtdWlkLm1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/util-uid/dist/util-uid.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@onflow/fcl-wc/dist/index.module.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@onflow/fcl-wc/dist/index.module.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FLOW_METHODS: () => (/* binding */ FLOW_METHODS),\n/* harmony export */   SERVICE_PLUGIN_NAME: () => (/* binding */ SERVICE_PLUGIN_NAME),\n/* harmony export */   WC_SERVICE_METHOD: () => (/* binding */ WC_SERVICE_METHOD),\n/* harmony export */   createSessionProposal: () => (/* binding */ createSessionProposal),\n/* harmony export */   getProvider: () => (/* binding */ getProvider),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   initLazy: () => (/* binding */ initLazy),\n/* harmony export */   request: () => (/* binding */ request)\n/* harmony export */ });\n/* harmony import */ var _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/fcl-core */ \"(ssr)/./node_modules/@onflow/fcl-core/dist/fcl-core.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/./node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! preact */ \"(ssr)/./node_modules/preact/dist/preact.mjs\");\n/* harmony import */ var preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! preact/jsx-runtime */ \"(ssr)/./node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs\");\n/* harmony import */ var _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/universal-provider */ \"(ssr)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\");\n\n\n\n\n\n\n\n\nlet FLOW_METHODS = /*#__PURE__*/function (FLOW_METHODS) {\n  FLOW_METHODS[\"FLOW_AUTHN\"] = \"flow_authn\";\n  FLOW_METHODS[\"FLOW_PRE_AUTHZ\"] = \"flow_pre_authz\";\n  FLOW_METHODS[\"FLOW_AUTHZ\"] = \"flow_authz\";\n  FLOW_METHODS[\"FLOW_USER_SIGN\"] = \"flow_user_sign\";\n  return FLOW_METHODS;\n}({});\nlet REQUEST_TYPES = /*#__PURE__*/function (REQUEST_TYPES) {\n  REQUEST_TYPES[\"SESSION_REQUEST\"] = \"session_proposal\";\n  REQUEST_TYPES[\"SIGNING_REQUEST\"] = \"signing_request\";\n  return REQUEST_TYPES;\n}({});\nconst SERVICE_PLUGIN_NAME = \"fcl-plugin-service-walletconnect\";\nconst WC_SERVICE_METHOD = \"WC/RPC\";\n\nconst PRE_AUTHZ_SERVICE_TYPE = \"pre-authz\";\nfunction isAndroid() {\n  return typeof navigator !== \"undefined\" && /android/i.test(navigator.userAgent);\n}\nfunction isSmallIOS() {\n  return typeof navigator !== \"undefined\" && /iPhone|iPod/.test(navigator.userAgent);\n}\nfunction isLargeIOS() {\n  return typeof navigator !== \"undefined\" && /iPad/.test(navigator.userAgent);\n}\nfunction isIOS() {\n  return isSmallIOS() || isLargeIOS();\n}\nfunction isMobile() {\n  return isAndroid() || isIOS();\n}\nfunction openDeeplink(url) {\n  if (url.startsWith(\"http\")) {\n    // Workaround for https://github.com/rainbow-me/rainbowkit/issues/524.\n    // Using 'window.open' causes issues on iOS in non-Safari browsers and\n    // WebViews where a blank tab is left behind after connecting.\n    // This is especially bad in some WebView scenarios (e.g. following a\n    // link from Twitter) where the user doesn't have any mechanism for\n    // closing the blank tab.\n    // For whatever reason, links with a target of \"_blank\" don't suffer\n    // from this problem, and programmatically clicking a detached link\n    // element with the same attributes also avoids the issue.\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.target = \"_blank\";\n    link.rel = \"noreferrer noopener\";\n    link.click();\n  } else {\n    window.open(url, \"_blank\");\n  }\n}\nfunction shouldDeepLink(_ref) {\n  let {\n    service,\n    user\n  } = _ref;\n  // Only deeplink on mobile\n  if (!isMobile()) return false;\n\n  // If this is an authn request, the user has already been deeplinked by connectWc\n  if (service.endpoint === FLOW_METHODS.FLOW_AUTHN) return false;\n\n  // If there was a pre-authz WC request, the user has already been deeplinked\n  if (service.endpoint === FLOW_METHODS.FLOW_AUTHZ && user?.services?.find(s => s.method === WC_SERVICE_METHOD && s.type === PRE_AUTHZ_SERVICE_TYPE)) return false;\n  return true;\n}\nfunction preloadImage(url) {\n  if (!url) return;\n  const img = new Image();\n  img.src = url;\n}\n\n// Create a new session proposal with the WalletConnect client\nasync function createSessionProposal(_ref) {\n  let {\n    provider,\n    existingPairing,\n    network\n  } = _ref;\n  const _network = network || (await _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getChainId());\n  const requiredNamespaces = {\n    flow: {\n      methods: [FLOW_METHODS.FLOW_AUTHN, FLOW_METHODS.FLOW_PRE_AUTHZ, FLOW_METHODS.FLOW_AUTHZ, FLOW_METHODS.FLOW_USER_SIGN],\n      chains: [`flow:${_network}`],\n      events: [\"chainChanged\", \"accountsChanged\"]\n    }\n  };\n  let cleanup;\n  const uri = new Promise((resolve, reject) => {\n    const onDisplayUri = uri => {\n      resolve(uri);\n    };\n    provider.on(\"display_uri\", onDisplayUri);\n    cleanup = () => {\n      provider.removeListener(\"display_uri\", onDisplayUri);\n      reject(new Error(\"WalletConnect Session Request aborted\"));\n    };\n  });\n  const sessionPromise = provider.connect({\n    pairingTopic: existingPairing?.topic,\n    namespaces: requiredNamespaces\n  }).finally(() => {\n    cleanup();\n  });\n  return {\n    uri: await uri,\n    approval: () => sessionPromise\n  };\n}\nconst request = async _ref2 => {\n  let {\n    method,\n    body,\n    session,\n    provider,\n    isExternal,\n    abortSignal,\n    disableNotifications\n  } = _ref2;\n  const [chainId, addr, address] = makeSessionData(session);\n  const data = JSON.stringify({\n    ...body,\n    addr,\n    address\n  });\n  const result = await Promise.race([provider.client.request({\n    request: {\n      method,\n      params: [data]\n    },\n    chainId,\n    topic: provider.session?.topic\n  }), new Promise((_, reject) => {\n    if (abortSignal?.aborted) {\n      reject(new Error(\"WalletConnect Request aborted\"));\n    }\n    abortSignal?.addEventListener(\"abort\", () => {\n      reject(new Error(\"WalletConnect Request aborted\"));\n    });\n  })]);\n  if (typeof result !== \"object\" || result == null) return;\n  switch (result.status) {\n    case \"APPROVED\":\n      function addSessionInfo(service) {\n        if (service.method === \"WC/RPC\") {\n          return {\n            ...service,\n            params: {\n              ...service.params,\n              ...(isExternal ? {\n                externalProvider: session.topic\n              } : {}),\n              ...(disableNotifications ? {\n                disableNotifications\n              } : {})\n            }\n          };\n        }\n        return service;\n      }\n      if (method === FLOW_METHODS.FLOW_AUTHN) {\n        const services = (result?.data?.services ?? []).map(addSessionInfo);\n        return {\n          ...(result.data ? result.data : {}),\n          services\n        };\n      }\n      if (method === FLOW_METHODS.FLOW_PRE_AUTHZ) {\n        return {\n          ...result.data,\n          ...(result.data?.proposer ? {\n            proposer: addSessionInfo(result.data.proposer)\n          } : {}),\n          payer: [...result.data?.payer?.map(addSessionInfo)],\n          authorization: [...result.data?.authorization?.map(addSessionInfo)]\n        };\n      }\n      return result.data;\n    case \"DECLINED\":\n      throw new Error(`Declined: ${result.reason || \"No reason supplied\"}`);\n    case \"REDIRECT\":\n      return result.data;\n    default:\n      throw new Error(`Declined: No reason supplied`);\n  }\n};\nfunction makeSessionData(session) {\n  const [namespace, reference, address] = Object.values(session.namespaces).map(namespace => namespace.accounts).flat().filter(account => account.startsWith(\"flow:\"))[0].split(\":\");\n  const chainId = `${namespace}:${reference}`;\n  const addr = address;\n  return [chainId, addr, address];\n}\n\nvar css_248z = \"*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }/*! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com*/*,:after,:before{border:0 solid #e5e7eb;box-sizing:border-box}:after,:before{--tw-content:\\\"\\\"}:host,html{-webkit-text-size-adjust:100%;font-feature-settings:normal;-webkit-tap-highlight-color:transparent;font-family:ui-sans-serif,system-ui,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-variation-settings:normal;line-height:1.5;-moz-tab-size:4;tab-size:4}body{line-height:inherit;margin:0}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-feature-settings:normal;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em;font-variation-settings:normal}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}button,input,optgroup,select,textarea{font-feature-settings:inherit;color:inherit;font-family:inherit;font-size:100%;font-variation-settings:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;margin:0;padding:0}button,select{text-transform:none}button,input:where([type=button]),input:where([type=reset]),input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0}fieldset,legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{color:#9ca3af;opacity:1}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}[hidden]:where(:not([hidden=until-found])){display:none}.container{width:100%}@media (min-width:640px){.container{max-width:640px}}@media (min-width:768px){.container{max-width:768px}}@media (min-width:1024px){.container{max-width:1024px}}@media (min-width:1280px){.container{max-width:1280px}}@media (min-width:1536px){.container{max-width:1536px}}.sr-only{clip:rect(0,0,0,0);border-width:0;height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.fixed{position:fixed}.bottom-3{bottom:.75rem}.left-3{left:.75rem}.right-3{right:.75rem}.z-\\\\[2147483647\\\\]{z-index:2147483647}.mx-auto{margin-left:auto;margin-right:auto}.ml-2{margin-left:.5rem}.ml-3{margin-left:.75rem}.mt-1{margin-top:.25rem}.flex{display:flex}.inline-flex{display:inline-flex}.h-10{height:2.5rem}.h-5{height:1.25rem}.w-10{width:2.5rem}.w-5{width:1.25rem}.max-w-sm{max-width:24rem}.grow{flex-grow:1}@keyframes slideUp{0%{transform:translateY(100%)}to{transform:translateY(0)}}.animate-slideUp{animation:slideUp .2s ease-out forwards}.self-start{align-self:flex-start}.self-center{align-self:center}.overflow-hidden{overflow:hidden}.rounded-full{border-radius:9999px}.rounded-lg{border-radius:.5rem}.rounded-md{border-radius:.375rem}.border{border-width:1px}.border-gray-200{--tw-border-opacity:1;border-color:rgb(229 231 235/var(--tw-border-opacity,1))}.border-transparent{border-color:transparent}.bg-transparent{background-color:transparent}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity,1))}.p-0{padding:0}.p-2{padding:.5rem}.p-4{padding:1rem}.text-sm{font-size:.875rem;line-height:1.25rem}.font-medium{font-weight:500}.text-gray-400{--tw-text-opacity:1;color:rgb(156 163 175/var(--tw-text-opacity,1))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity,1))}.text-gray-900{--tw-text-opacity:1;color:rgb(17 24 39/var(--tw-text-opacity,1))}.shadow-lg{--tw-shadow:0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rgba(0,0,0,.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.filter{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.hover\\\\:text-gray-500:hover{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity,1))}.focus\\\\:border-transparent:focus{border-color:transparent}.focus\\\\:ring-0:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.dark\\\\:border-gray-600:is(.dark *){--tw-border-opacity:1;border-color:rgb(75 85 99/var(--tw-border-opacity,1))}.dark\\\\:bg-gray-700:is(.dark *){--tw-bg-opacity:1;background-color:rgb(55 65 81/var(--tw-bg-opacity,1))}.dark\\\\:text-gray-100:is(.dark *){--tw-text-opacity:1;color:rgb(243 244 246/var(--tw-text-opacity,1))}.dark\\\\:text-gray-200:is(.dark *){--tw-text-opacity:1;color:rgb(229 231 235/var(--tw-text-opacity,1))}.dark\\\\:text-gray-300:is(.dark *){--tw-text-opacity:1;color:rgb(209 213 219/var(--tw-text-opacity,1))}.dark\\\\:hover\\\\:text-gray-300:hover:is(.dark *){--tw-text-opacity:1;color:rgb(209 213 219/var(--tw-text-opacity,1))}@media (min-width:768px){.md\\\\:bottom-4{bottom:1rem}.md\\\\:left-auto{left:auto}.md\\\\:right-4{right:1rem}.md\\\\:self-start{align-self:flex-start}}\";\n\nfunction Notification(_ref) {\n  let {\n    title,\n    message,\n    icon,\n    onClick,\n    onDismiss,\n    animate\n  } = _ref;\n  return (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n    className: `fixed bottom-3 left-3 right-3 mx-auto z-[2147483647] flex max-w-sm\n        overflow-hidden rounded-lg border border-gray-200 bg-white p-4 shadow-lg\n        md:bottom-4 md:left-auto md:right-4 dark:bg-gray-700 dark:border-gray-600\n        ${animate ? \"animate-slideUp\" : \"\"}`,\n    role: \"alert\",\n    onClick: e => {\n      if (onClick) {\n        e.stopPropagation();\n        onClick?.();\n      }\n    },\n    children: [icon && (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"img\", {\n      className: \"h-10 w-10 self-center rounded-md md:self-start\",\n      src: icon,\n      alt: title\n    }), (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n      className: \"ml-3 grow\",\n      children: [(0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n        className: \"text-sm font-medium text-gray-900 dark:text-gray-100\",\n        children: title\n      }), (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n        className: \"mt-1 text-sm text-gray-500 dark:text-gray-300\",\n        children: message\n      })]\n    }), (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n      className: `ml-2 inline-flex rounded-full text-gray-400 hover:text-gray-500 focus:ring-0\n          dark:text-gray-200 dark:hover:text-gray-300 ${isMobile() ? \"self-center p-2\" : \"self-start p-0 bg-transparent border-transparent focus:border-transparent\"}`,\n      onClick: e => {\n        e.stopPropagation();\n        onDismiss?.();\n      },\n      children: [(0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n        className: \"sr-only\",\n        children: \"Close\"\n      }), (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"svg\", {\n        className: \"h-5 w-5\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 20 20\",\n        fill: \"currentColor\",\n        \"aria-hidden\": \"true\",\n        children: (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n          fillRule: \"evenodd\",\n          d: \"M14.354 5.646a.5.5 0 00-.708 0L10 9.293 5.354 4.646a.5.5 0 00-.708.708L9.293 10l-4.647 4.646a.5.5 0 00.708.708L10 10.707l4.646 4.647a.5.5 0 00.708-.708L10.707 10l4.647-4.646a.5.5 0 000-.708z\"\n        })\n      })]\n    })]\n  });\n}\n\nlet renderRoot = null;\nlet id = 0;\nlet dismissTimeout = null;\nfunction createRenderRoot() {\n  const shadowHost = document.createElement(\"div\");\n  const shadowRoot = shadowHost.attachShadow({\n    mode: \"open\"\n  });\n  const container = document.createElement(\"div\");\n  shadowRoot.appendChild(container);\n  document.body.appendChild(shadowHost);\n  const style = document.createElement(\"style\");\n  style.textContent = css_248z;\n  shadowRoot.appendChild(style);\n\n  // Subscribe to root dark mode changes to inherit the theme\n  const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  const listener = () => {\n    container.classList.toggle(\"dark\", mediaQuery.matches);\n  };\n  mediaQuery.addEventListener(\"change\", listener);\n  listener();\n  return container;\n}\n\n/**\n * Show a notification to the user.  Only one notification can be shown at a time and will replace any existing notification.\n */\nfunction showNotification(_ref) {\n  let {\n    title,\n    message,\n    icon,\n    onClick,\n    onDismiss,\n    debounceDelay = 0\n  } = _ref;\n  if (!renderRoot) {\n    renderRoot = createRenderRoot();\n  }\n\n  // Don't animate if we are replacing an existing notification\n  const animate = !dismissTimeout;\n  if (dismissTimeout) {\n    clearTimeout(dismissTimeout);\n    dismissTimeout = null;\n  }\n  (0,preact__WEBPACK_IMPORTED_MODULE_3__.render)((0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Notification, {\n    title: title,\n    message: message,\n    icon: icon,\n    onClick: onClick,\n    onDismiss: () => {\n      onDismiss?.();\n      dismissUi();\n    },\n    animate: animate\n  }, id++), renderRoot);\n  function dismissUi() {\n    if (renderRoot) {\n      (0,preact__WEBPACK_IMPORTED_MODULE_3__.render)(null, renderRoot);\n    }\n  }\n  return {\n    dismiss: () => {\n      // We need to delay the dismiss to debounce any subsequent notifications\n      // This is important when there is both a FCL/WC authz and pre-authz service\n      dismissTimeout = setTimeout(() => {\n        dismissTimeout = null;\n        dismissUi();\n      }, debounceDelay);\n    }\n  };\n}\n\nvar img = \"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 384 512'%3e%3c!--!Font Awesome Free 6.7.1 by %40fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons%2c Inc.--%3e%3cpath d='M16 64C16 28.7 44.7 0 80 0L304 0c35.3 0 64 28.7 64 64l0 384c0 35.3-28.7 64-64 64L80 512c-35.3 0-64-28.7-64-64L16 64zM224 448a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zM304 64L80 64l0 320 224 0 0-320z'/%3e%3c/svg%3e\";\n\nfunction createStore(initialState) {\n  const subscribers = new Set();\n  let state = initialState;\n  const subscribe = subscriber => {\n    subscribers.add(subscriber);\n    return () => {\n      subscribers.delete(subscriber);\n    };\n  };\n  const setState = newState => {\n    state = newState;\n    subscribers.forEach(subscriber => subscriber(state));\n  };\n  const getState = () => state;\n  return {\n    subscribe,\n    setState,\n    getState\n  };\n}\n\nlet providerStore = createStore({});\nconst makeServicePlugin = function (provider) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    };\n  return {\n    name: SERVICE_PLUGIN_NAME,\n    f_type: \"ServicePlugin\",\n    type: \"discovery-service\",\n    serviceStrategy: {\n      method: WC_SERVICE_METHOD,\n      exec: makeExec(provider, config, Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@walletconnect\"), __webpack_require__.e(\"vendor-chunks/valtio\"), __webpack_require__.e(\"vendor-chunks/proxy-compare\")]).then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/modal */ \"(ssr)/./node_modules/@walletconnect/modal/dist/index.js\")).then(m => m.WalletConnectModal))\n    },\n    services: []\n  };\n};\nconst makeExec = (signerPromise, config, WalletConnectModal) => {\n  return async _ref => {\n    let {\n      service,\n      body,\n      opts,\n      abortSignal,\n      user,\n      config\n    } = _ref;\n    // Preload provider image\n    preloadImage(service.provider?.icon);\n    const {\n      wcRequestHook,\n      pairingModalOverride,\n      disableNotifications: _appDisabledNotifications\n    } = config;\n    const appDisabledNotifications = service.params?.disableNotifications ?? _appDisabledNotifications;\n    const resolvedProvider = await resolveProvider({\n      provider: signerPromise,\n      externalProviderOrTopic: service.params?.externalProvider\n    });\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!!resolvedProvider, \"WalletConnect is not initialized\");\n    const {\n      provider: provider,\n      isExternal\n    } = resolvedProvider;\n    let session = provider.session ?? null,\n      pairing;\n    const method = service.endpoint;\n    const appLink = validateAppLink(service);\n\n    // If the user is already connected to this session, use it\n    if (!!session?.topic && session?.topic === service.params?.externalProvider && method === FLOW_METHODS.FLOW_AUTHN) {\n      return user;\n    }\n    if (session == null) {\n      session = await new Promise((resolve, reject) => {\n        function onClose() {\n          reject(`Declined: Externally Halted`);\n        }\n        connectWc(WalletConnectModal)({\n          service,\n          onClose,\n          appLink,\n          provider,\n          method,\n          pairing,\n          wcRequestHook,\n          pairingModalOverride,\n          abortSignal,\n          network: config.client.network\n        }).then(resolve, reject);\n      });\n    }\n    if (wcRequestHook && wcRequestHook instanceof Function) {\n      wcRequestHook({\n        type: REQUEST_TYPES.SIGNING_REQUEST,\n        method,\n        service,\n        session: session ?? null,\n        pairing: null,\n        uri: null\n      });\n    }\n\n    // Deeplink to the wallet app if necessary\n    if (shouldDeepLink({\n      service,\n      user\n    })) {\n      openDeeplink(appLink);\n    }\n\n    // Show notification to the user if not disabled by app developer or wallet\n    const walletDisabledNotifications = session?.sessionProperties?.[\"fclWc.disableNotificationsOnMobile\"] === \"true\";\n    const notification = !appDisabledNotifications && !walletDisabledNotifications ? showWcRequestNotification({\n      user,\n      service\n    }) : null;\n\n    // Make request to the WalletConnect client and return the result\n    return await request({\n      method,\n      body,\n      session,\n      provider,\n      abortSignal,\n      isExternal,\n      disableNotifications: service.params?.disableNotifications\n    }).finally(() => notification?.dismiss());\n    function validateAppLink(_ref2) {\n      let {\n        uid\n      } = _ref2;\n      if (!(uid && /^(ftp|http|https):\\/\\/[^ \"]+$/.test(uid))) {\n        (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log)({\n          title: \"WalletConnect Service Warning\",\n          message: `service.uid should be a valid universal link url. Found: ${uid}`,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.warn\n        });\n      }\n      return uid;\n    }\n  };\n};\n\n// Connect to WalletConnect directly from the browser via deep link or WalletConnectModal\nfunction connectWc(WalletConnectModal) {\n  return async _ref3 => {\n    let {\n      service,\n      onClose,\n      appLink,\n      provider,\n      method,\n      pairing,\n      wcRequestHook,\n      pairingModalOverride,\n      abortSignal,\n      network\n    } = _ref3;\n    const projectId = provider.providerOpts.projectId;\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!!projectId, \"Cannot establish connection, WalletConnect projectId is undefined\");\n    let _uri = null,\n      walletConnectModal = null;\n    try {\n      const {\n        uri,\n        approval\n      } = await createSessionProposal({\n        provider,\n        existingPairing: pairing,\n        network\n      });\n      if (wcRequestHook && wcRequestHook instanceof Function) {\n        wcRequestHook({\n          type: REQUEST_TYPES.SESSION_REQUEST,\n          method,\n          service,\n          session: null,\n          pairing: pairing ?? null,\n          uri: uri ?? null\n        });\n      }\n      if (isMobile()) {\n        const queryString = new URLSearchParams({\n          uri: uri\n        }).toString();\n        let url = pairing == null ? appLink + \"?\" + queryString : appLink;\n        openDeeplink(url);\n      } else if (!pairing) {\n        if (!pairingModalOverride) {\n          walletConnectModal = new (await WalletConnectModal)({\n            projectId\n          });\n\n          // Open WalletConnectModal\n          walletConnectModal.openModal({\n            uri,\n            onClose\n          });\n\n          // Subscribe to modal state changes\n          const unsubscribeModal = walletConnectModal.subscribeModal(state => {\n            if (state.open === false) {\n              onClose?.();\n              unsubscribeModal();\n            }\n          });\n        } else {\n          pairingModalOverride(uri, onClose);\n        }\n      }\n      const session = await Promise.race([approval(), new Promise((_, reject) => {\n        if (abortSignal?.aborted) {\n          reject(new Error(\"Session request aborted\"));\n        }\n        abortSignal?.addEventListener(\"abort\", () => {\n          reject(new Error(\"Session request aborted\"));\n        });\n      })]);\n      if (session == null) {\n        throw new Error(\"Session request failed\");\n      }\n      return session;\n    } catch (error) {\n      if (error instanceof Error) {\n        (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log)({\n          title: `${error.name} Error establishing WalletConnect session`,\n          message: `\n          ${error.message}\n          uri: ${_uri}\n        `,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.error\n        });\n      }\n      onClose();\n      throw error;\n    } finally {\n      walletConnectModal?.closeModal();\n    }\n  };\n}\n\n/**\n * Show a notification for a WalletConnect request.\n * @param service - The service that is requesting the user's attention.\n * @param user - The user that is being requested to sign a transaction.\n * @returns A close function to dismiss the notification.\n */\nfunction showWcRequestNotification(_ref4) {\n  let {\n    service,\n    user\n  } = _ref4;\n  const authnService = user?.services?.find(s => s.type === \"authn\");\n  const walletProvider = authnService?.provider || service.provider;\n  return showNotification({\n    title: walletProvider?.name || \"Mobile Wallet\",\n    message: isMobile() ? \"Tap to view request in app\" : \"Pending request on your mobile device\",\n    icon: walletProvider?.icon || img,\n    onClick: isMobile() && service.uid ? () => openDeeplink(service.uid) : undefined,\n    debounceDelay: service.type === \"pre-authz\" ? 500 : 0\n  });\n}\nasync function resolveProvider(_ref5) {\n  let {\n    provider,\n    externalProviderOrTopic\n  } = _ref5;\n  if (!externalProviderOrTopic) {\n    const resolved = await provider;\n    return resolved ? {\n      provider: resolved,\n      isExternal: false\n    } : null;\n  }\n\n  // If it's a UniversalProvider instance, use it directly and store it.\n  if (typeof externalProviderOrTopic !== \"string\") {\n    const topic = externalProviderOrTopic.session?.topic;\n    if (!topic) {\n      throw new Error(\"Cannot resolve provider: UniversalProvider is not initialized\");\n    }\n    providerStore.setState({\n      [topic]: externalProviderOrTopic\n    });\n    return {\n      provider: externalProviderOrTopic,\n      isExternal: true\n    };\n  }\n  const externalTopic = externalProviderOrTopic;\n  if (externalTopic) {\n    // Check if an external provider was passed in the options.\n    let storedProvider = providerStore.getState()[externalTopic];\n    if (!storedProvider) {\n      // No provider from opts and nothing in store yet—wait for it.\n      let unsubStore;\n      let timeout;\n      storedProvider = await new Promise((resolve, reject) => {\n        unsubStore = providerStore.subscribe(() => {\n          const provider = providerStore.getState()[externalTopic];\n          if (provider) {\n            resolve(provider);\n          }\n        });\n\n        // If the provider is not defined after 5 seconds, reject the promise.\n        timeout = setTimeout(() => {\n          reject(new Error(`Provider for external topic ${externalTopic} not found after 5 seconds`));\n        }, 5000);\n      }).finally(() => {\n        clearTimeout(timeout);\n        unsubStore();\n      });\n    }\n    return {\n      provider: storedProvider,\n      isExternal: true\n    };\n  }\n  const resolved = await provider;\n  return resolved ? {\n    provider: resolved,\n    isExternal: false\n  } : null;\n}\n\nconst DEFAULT_RELAY_URL = \"wss://relay.walletconnect.com\";\nconst DEFAULT_LOGGER = \"debug\";\nlet providerPromise = Promise.resolve(null);\nconst initClient = async _ref => {\n  let {\n    projectId,\n    metadata\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(projectId != null, \"FCL Wallet Connect Error: WalletConnect projectId is required\");\n  try {\n    return _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_5__.UniversalProvider.init({\n      logger: DEFAULT_LOGGER,\n      relayUrl: DEFAULT_RELAY_URL,\n      projectId: projectId,\n      metadata: metadata\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log)({\n        title: `${error.name} fcl-wc Init Client`,\n        message: error.message,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.error\n      });\n    }\n    throw error;\n  }\n};\nconst initLazy = config => {\n  const {\n    FclWcServicePlugin,\n    providerPromise\n  } = initHelper(config);\n  _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.discovery.authn.update();\n  return {\n    FclWcServicePlugin,\n    providerPromise\n  };\n};\nconst init = async config => {\n  const {\n    FclWcServicePlugin,\n    providerPromise\n  } = initLazy(config);\n  const client = await providerPromise;\n  _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.discovery.authn.update();\n  return {\n    FclWcServicePlugin,\n    client\n  };\n};\nconst initHelper = config => {\n  if (typeof window === \"undefined\") {\n    throw new Error(\"FCL Wallet Connect Plugin can only be initialized in the browser\");\n  }\n\n  // Lazy load the SignClient\n  //  - Initialize the client if it doesn't exist\n  //  - If it does exist, return existing client\n  //  - If existing client fails to initialize, reinitialize\n  providerPromise = providerPromise.catch(() => null).then(_client => {\n    if (_client) {\n      return _client;\n    } else {\n      return initClient({\n        projectId: config.projectId,\n        metadata: config.metadata\n      });\n    }\n  }).catch(e => {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log)({\n      title: `WalletConnect Client Initialization Error`,\n      message: e.message ? e.message : e,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.error\n    });\n    throw e;\n  });\n  const FclWcServicePlugin = makeServicePlugin(providerPromise, config);\n  return {\n    FclWcServicePlugin,\n    providerPromise\n  };\n};\n\n// Returns the SignClient instance used by this plugin if it has been initialized\nasync function getProvider() {\n  return providerPromise.then(provider => {\n    if (!provider) {\n      throw new Error(\"WalletConnect client not initialized\");\n    }\n    return provider;\n  });\n}\n\n\n//# sourceMappingURL=index.module.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@onflow/fcl-wc/dist/index.module.mjs\n");

/***/ })

};
;